/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={679:(t,e,n)=>{var i=n(864),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(t){return i.isMemo(t)?a:s[t.$$typeof]||r}s[i.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[i.Memo]=a;var c=Object.defineProperty,u=Object.getOwnPropertyNames,h=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,p=Object.prototype;t.exports=function t(e,n,i){if("string"!=typeof n){if(p){var r=f(n);r&&r!==p&&t(e,r,i)}var a=u(n);h&&(a=a.concat(h(n)));for(var s=l(e),g=l(n),m=0;m<a.length;++m){var b=a[m];if(!(o[b]||i&&i[b]||g&&g[b]||s&&s[b])){var y=d(n,b);try{c(e,b,y)}catch(t){}}}}return e}},418:t=>{var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function r(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(t){i[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var a,s,l=r(t),c=1;c<arguments.length;c++){for(var u in a=Object(arguments[c]))n.call(a,u)&&(l[u]=a[u]);if(e){s=e(a);for(var h=0;h<s.length;h++)i.call(a,s[h])&&(l[s[h]]=a[s[h]])}}return l}},448:(t,e,n)=>{var i=n(294),r=n(418),o=n(840);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!i)throw Error(a(227));var s=new Set,l={};function c(t,e){u(t,e),u(t+"Capture",e)}function u(t,e){for(l[t]=e,t=0;t<e.length;t++)s.add(e[t])}var h=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,p={},g={};function m(t,e,n,i,r,o,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=o,this.removeEmptyString=a}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){b[t]=new m(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];b[e]=new m(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){b[t]=new m(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){b[t]=new m(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){b[t]=new m(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){b[t]=new m(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){b[t]=new m(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){b[t]=new m(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){b[t]=new m(t,5,!1,t.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(t){return t[1].toUpperCase()}function x(t,e,n,i){var r=b.hasOwnProperty(e)?b[e]:null;(null!==r?0===r.type:!i&&2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))||(function(t,e,n,i){if(null==e||function(t,e,n,i){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,r,i)&&(n=null),i||null===r?function(t){return!!f.call(g,t)||!f.call(p,t)&&(d.test(t)?g[t]=!0:(p[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):r.mustUseProperty?t[r.propertyName]=null===n?3!==r.type&&"":n:(e=r.attributeName,i=r.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,i?t.setAttributeNS(i,e,n):t.setAttribute(e,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!1,!1)})),b.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!0,!0)}));var w=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_=60103,k=60106,S=60107,E=60108,O=60114,C=60109,P=60110,M=60112,L=60113,R=60120,T=60115,N=60116,D=60121,A=60128,I=60129,j=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var z=Symbol.for;_=z("react.element"),k=z("react.portal"),S=z("react.fragment"),E=z("react.strict_mode"),O=z("react.profiler"),C=z("react.provider"),P=z("react.context"),M=z("react.forward_ref"),L=z("react.suspense"),R=z("react.suspense_list"),T=z("react.memo"),N=z("react.lazy"),D=z("react.block"),z("react.scope"),A=z("react.opaque.id"),I=z("react.debug_trace_mode"),j=z("react.offscreen"),F=z("react.legacy_hidden")}var V,B="function"==typeof Symbol&&Symbol.iterator;function H(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=B&&t[B]||t["@@iterator"])?t:null}function W(t){if(void 0===V)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);V=e&&e[1]||""}return"\n"+V+t}var U=!1;function $(t,e){if(!t||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var i=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){i=t}t.call(e.prototype)}else{try{throw Error()}catch(t){i=t}t()}}catch(t){if(t&&i&&"string"==typeof t.stack){for(var r=t.stack.split("\n"),o=i.stack.split("\n"),a=r.length-1,s=o.length-1;1<=a&&0<=s&&r[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(r[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||r[a]!==o[s])return"\n"+r[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{U=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?W(t):""}function Y(t){switch(t.tag){case 5:return W(t.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return $(t.type,!1);case 11:return $(t.type.render,!1);case 22:return $(t.type._render,!1);case 1:return $(t.type,!0);default:return""}}function K(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case S:return"Fragment";case k:return"Portal";case O:return"Profiler";case E:return"StrictMode";case L:return"Suspense";case R:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case P:return(t.displayName||"Context")+".Consumer";case C:return(t._context.displayName||"Context")+".Provider";case M:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case T:return K(t.type);case D:return K(t._render);case N:e=t._payload,t=t._init;try{return K(t(e))}catch(t){}}return null}function q(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function G(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function Q(t){t._valueTracker||(t._valueTracker=function(t){var e=G(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),i=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,o=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return r.call(this)},set:function(t){i=""+t,o.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(t){i=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function X(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),i="";return t&&(i=G(t)?t.checked?"true":"false":t.value),(t=i)!==n&&(e.setValue(t),!0)}function J(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function Z(t,e){var n=e.checked;return r({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function tt(t,e){var n=null==e.defaultValue?"":e.defaultValue,i=null!=e.checked?e.checked:e.defaultChecked;n=q(null!=e.value?e.value:n),t._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function et(t,e){null!=(e=e.checked)&&x(t,"checked",e,!1)}function nt(t,e){et(t,e);var n=q(e.value),i=e.type;if(null!=n)"number"===i?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===i||"reset"===i)return void t.removeAttribute("value");e.hasOwnProperty("value")?rt(t,e.type,n):e.hasOwnProperty("defaultValue")&&rt(t,e.type,q(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function it(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var i=e.type;if(!("submit"!==i&&"reset"!==i||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function rt(t,e,n){"number"===e&&J(t.ownerDocument)===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function ot(t,e){return t=r({children:void 0},e),(e=function(t){var e="";return i.Children.forEach(t,(function(t){null!=t&&(e+=t)})),e}(e.children))&&(t.children=e),t}function at(t,e,n,i){if(t=t.options,e){e={};for(var r=0;r<n.length;r++)e["$"+n[r]]=!0;for(n=0;n<t.length;n++)r=e.hasOwnProperty("$"+t[n].value),t[n].selected!==r&&(t[n].selected=r),r&&i&&(t[n].defaultSelected=!0)}else{for(n=""+q(n),e=null,r=0;r<t.length;r++){if(t[r].value===n)return t[r].selected=!0,void(i&&(t[r].defaultSelected=!0));null!==e||t[r].disabled||(e=t[r])}null!==e&&(e.selected=!0)}}function st(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(a(91));return r({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function lt(t,e){var n=e.value;if(null==n){if(n=e.children,e=e.defaultValue,null!=n){if(null!=e)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}e=n}null==e&&(e=""),n=e}t._wrapperState={initialValue:q(n)}}function ct(t,e){var n=q(e.value),i=q(e.defaultValue);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&t.defaultValue!==n&&(t.defaultValue=n)),null!=i&&(t.defaultValue=""+i)}function ut(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}var ht="http://www.w3.org/1999/xhtml";function dt(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ft(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?dt(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var pt,gt,mt=(gt=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((pt=pt||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=pt.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,i){MSApp.execUnsafeLocalFunction((function(){return gt(t,e)}))}:gt);function bt(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var yt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},vt=["Webkit","ms","Moz","O"];function xt(t,e,n){return null==e||"boolean"==typeof e||""===e?"":n||"number"!=typeof e||0===e||yt.hasOwnProperty(t)&&yt[t]?(""+e).trim():e+"px"}function wt(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var i=0===n.indexOf("--"),r=xt(n,e[n],i);"float"===n&&(n="cssFloat"),i?t.setProperty(n,r):t[n]=r}}Object.keys(yt).forEach((function(t){vt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),yt[e]=yt[t]}))}));var _t=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function kt(t,e){if(e){if(_t[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(a(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(a(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(a(62))}}function St(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Et(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var Ot=null,Ct=null,Pt=null;function Mt(t){if(t=er(t)){if("function"!=typeof Ot)throw Error(a(280));var e=t.stateNode;e&&(e=ir(e),Ot(t.stateNode,t.type,e))}}function Lt(t){Ct?Pt?Pt.push(t):Pt=[t]:Ct=t}function Rt(){if(Ct){var t=Ct,e=Pt;if(Pt=Ct=null,Mt(t),e)for(t=0;t<e.length;t++)Mt(e[t])}}function Tt(t,e){return t(e)}function Nt(t,e,n,i,r){return t(e,n,i,r)}function Dt(){}var At=Tt,It=!1,jt=!1;function Ft(){null===Ct&&null===Pt||(Dt(),Rt())}function zt(t,e){var n=t.stateNode;if(null===n)return null;var i=ir(n);if(null===i)return null;n=i[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!i;break t;default:t=!1}if(t)return null;if(n&&"function"!=typeof n)throw Error(a(231,e,typeof n));return n}var Vt=!1;if(h)try{var Bt={};Object.defineProperty(Bt,"passive",{get:function(){Vt=!0}}),window.addEventListener("test",Bt,Bt),window.removeEventListener("test",Bt,Bt)}catch(gt){Vt=!1}function Ht(t,e,n,i,r,o,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(t){this.onError(t)}}var Wt=!1,Ut=null,$t=!1,Yt=null,Kt={onError:function(t){Wt=!0,Ut=t}};function qt(t,e,n,i,r,o,a,s,l){Wt=!1,Ut=null,Ht.apply(Kt,arguments)}function Gt(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(n=e.return),t=e.return}while(t)}return 3===e.tag?n:null}function Qt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function Xt(t){if(Gt(t)!==t)throw Error(a(188))}function Jt(t,e){for(var n=t.alternate;null!==e;){if(e===t||e===n)return!0;e=e.return}return!1}var Zt,te,ee,ne,ie=!1,re=[],oe=null,ae=null,se=null,le=new Map,ce=new Map,ue=[],he="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function de(t,e,n,i,r){return{blockedOn:t,domEventName:e,eventSystemFlags:16|n,nativeEvent:r,targetContainers:[i]}}function fe(t,e){switch(t){case"focusin":case"focusout":oe=null;break;case"dragenter":case"dragleave":ae=null;break;case"mouseover":case"mouseout":se=null;break;case"pointerover":case"pointerout":le.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ce.delete(e.pointerId)}}function pe(t,e,n,i,r,o){return null===t||t.nativeEvent!==o?(t=de(e,n,i,r,o),null!==e&&null!==(e=er(e))&&te(e),t):(t.eventSystemFlags|=i,e=t.targetContainers,null!==r&&-1===e.indexOf(r)&&e.push(r),t)}function ge(t){var e=tr(t.target);if(null!==e){var n=Gt(e);if(null!==n)if(13===(e=n.tag)){if(null!==(e=Qt(n)))return t.blockedOn=e,void ne(t.lanePriority,(function(){o.unstable_runWithPriority(t.priority,(function(){ee(n)}))}))}else if(3===e&&n.stateNode.hydrate)return void(t.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}t.blockedOn=null}function me(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var n=Xe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n)return null!==(e=er(n))&&te(e),t.blockedOn=n,!1;e.shift()}return!0}function be(t,e,n){me(t)&&n.delete(e)}function ye(){for(ie=!1;0<re.length;){var t=re[0];if(null!==t.blockedOn){null!==(t=er(t.blockedOn))&&Zt(t);break}for(var e=t.targetContainers;0<e.length;){var n=Xe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n){t.blockedOn=n;break}e.shift()}null===t.blockedOn&&re.shift()}null!==oe&&me(oe)&&(oe=null),null!==ae&&me(ae)&&(ae=null),null!==se&&me(se)&&(se=null),le.forEach(be),ce.forEach(be)}function ve(t,e){t.blockedOn===e&&(t.blockedOn=null,ie||(ie=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,ye)))}function xe(t){function e(e){return ve(e,t)}if(0<re.length){ve(re[0],t);for(var n=1;n<re.length;n++){var i=re[n];i.blockedOn===t&&(i.blockedOn=null)}}for(null!==oe&&ve(oe,t),null!==ae&&ve(ae,t),null!==se&&ve(se,t),le.forEach(e),ce.forEach(e),n=0;n<ue.length;n++)(i=ue[n]).blockedOn===t&&(i.blockedOn=null);for(;0<ue.length&&null===(n=ue[0]).blockedOn;)ge(n),null===n.blockedOn&&ue.shift()}function we(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var _e={animationend:we("Animation","AnimationEnd"),animationiteration:we("Animation","AnimationIteration"),animationstart:we("Animation","AnimationStart"),transitionend:we("Transition","TransitionEnd")},ke={},Se={};function Ee(t){if(ke[t])return ke[t];if(!_e[t])return t;var e,n=_e[t];for(e in n)if(n.hasOwnProperty(e)&&e in Se)return ke[t]=n[e];return t}h&&(Se=document.createElement("div").style,"AnimationEvent"in window||(delete _e.animationend.animation,delete _e.animationiteration.animation,delete _e.animationstart.animation),"TransitionEvent"in window||delete _e.transitionend.transition);var Oe=Ee("animationend"),Ce=Ee("animationiteration"),Pe=Ee("animationstart"),Me=Ee("transitionend"),Le=new Map,Re=new Map,Te=["abort","abort",Oe,"animationEnd",Ce,"animationIteration",Pe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Me,"transitionEnd","waiting","waiting"];function Ne(t,e){for(var n=0;n<t.length;n+=2){var i=t[n],r=t[n+1];r="on"+(r[0].toUpperCase()+r.slice(1)),Re.set(i,e),Le.set(i,r),c(r,[i])}}(0,o.unstable_now)();var De=8;function Ae(t){if(0!=(1&t))return De=15,1;if(0!=(2&t))return De=14,2;if(0!=(4&t))return De=13,4;var e=24&t;return 0!==e?(De=12,e):0!=(32&t)?(De=11,32):0!=(e=192&t)?(De=10,e):0!=(256&t)?(De=9,256):0!=(e=3584&t)?(De=8,e):0!=(4096&t)?(De=7,4096):0!=(e=4186112&t)?(De=6,e):0!=(e=62914560&t)?(De=5,e):67108864&t?(De=4,67108864):0!=(134217728&t)?(De=3,134217728):0!=(e=805306368&t)?(De=2,e):0!=(1073741824&t)?(De=1,1073741824):(De=8,t)}function Ie(t,e){var n=t.pendingLanes;if(0===n)return De=0;var i=0,r=0,o=t.expiredLanes,a=t.suspendedLanes,s=t.pingedLanes;if(0!==o)i=o,r=De=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(i=Ae(l),r=De):0!=(s&=o)&&(i=Ae(s),r=De)}else 0!=(o=n&~a)?(i=Ae(o),r=De):0!==s&&(i=Ae(s),r=De);if(0===i)return 0;if(i=n&((0>(i=31-He(i))?0:1<<i)<<1)-1,0!==e&&e!==i&&0==(e&a)){if(Ae(e),r<=De)return e;De=r}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=i;0<e;)r=1<<(n=31-He(e)),i|=t[n],e&=~r;return i}function je(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function Fe(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=ze(24&~e))?Fe(10,e):t;case 10:return 0===(t=ze(192&~e))?Fe(8,e):t;case 8:return 0===(t=ze(3584&~e))&&0===(t=ze(4186112&~e))&&(t=512),t;case 2:return 0===(e=ze(805306368&~e))&&(e=268435456),e}throw Error(a(358,t))}function ze(t){return t&-t}function Ve(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function Be(t,e,n){t.pendingLanes|=e;var i=e-1;t.suspendedLanes&=i,t.pingedLanes&=i,(t=t.eventTimes)[e=31-He(e)]=n}var He=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(We(t)/Ue|0)|0},We=Math.log,Ue=Math.LN2,$e=o.unstable_UserBlockingPriority,Ye=o.unstable_runWithPriority,Ke=!0;function qe(t,e,n,i){It||Dt();var r=Qe,o=It;It=!0;try{Nt(r,t,e,n,i)}finally{(It=o)||Ft()}}function Ge(t,e,n,i){Ye($e,Qe.bind(null,t,e,n,i))}function Qe(t,e,n,i){var r;if(Ke)if((r=0==(4&e))&&0<re.length&&-1<he.indexOf(t))t=de(null,t,e,n,i),re.push(t);else{var o=Xe(t,e,n,i);if(null===o)r&&fe(t,i);else{if(r){if(-1<he.indexOf(t))return t=de(o,t,e,n,i),void re.push(t);if(function(t,e,n,i,r){switch(e){case"focusin":return oe=pe(oe,t,e,n,i,r),!0;case"dragenter":return ae=pe(ae,t,e,n,i,r),!0;case"mouseover":return se=pe(se,t,e,n,i,r),!0;case"pointerover":var o=r.pointerId;return le.set(o,pe(le.get(o)||null,t,e,n,i,r)),!0;case"gotpointercapture":return o=r.pointerId,ce.set(o,pe(ce.get(o)||null,t,e,n,i,r)),!0}return!1}(o,t,e,n,i))return;fe(t,i)}Ni(t,e,i,null,n)}}}function Xe(t,e,n,i){var r=Et(i);if(null!==(r=tr(r))){var o=Gt(r);if(null===o)r=null;else{var a=o.tag;if(13===a){if(null!==(r=Qt(o)))return r;r=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return Ni(t,e,i,r,n),null}var Je=null,Ze=null,tn=null;function en(){if(tn)return tn;var t,e,n=Ze,i=n.length,r="value"in Je?Je.value:Je.textContent,o=r.length;for(t=0;t<i&&n[t]===r[t];t++);var a=i-t;for(e=1;e<=a&&n[i-e]===r[o-e];e++);return tn=r.slice(t,1<e?1-e:void 0)}function nn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function rn(){return!0}function on(){return!1}function an(t){function e(e,n,i,r,o){for(var a in this._reactName=e,this._targetInst=i,this.type=n,this.nativeEvent=r,this.target=o,this.currentTarget=null,t)t.hasOwnProperty(a)&&(e=t[a],this[a]=e?e(r):r[a]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?rn:on,this.isPropagationStopped=on,this}return r(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),e}var sn,ln,cn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},hn=an(un),dn=r({},un,{view:0,detail:0}),fn=an(dn),pn=r({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==cn&&(cn&&"mousemove"===t.type?(sn=t.screenX-cn.screenX,ln=t.screenY-cn.screenY):ln=sn=0,cn=t),sn)},movementY:function(t){return"movementY"in t?t.movementY:ln}}),gn=an(pn),mn=an(r({},pn,{dataTransfer:0})),bn=an(r({},dn,{relatedTarget:0})),yn=an(r({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=r({},un,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),xn=an(vn),wn=an(r({},un,{data:0})),_n={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Sn[t])&&!!e[t]}function On(){return En}var Cn=r({},dn,{key:function(t){if(t.key){var e=_n[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=nn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?kn[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(t){return"keypress"===t.type?nn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?nn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),Pn=an(Cn),Mn=an(r({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ln=an(r({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Rn=an(r({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=r({},pn,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=an(Tn),Dn=[9,13,27,32],An=h&&"CompositionEvent"in window,In=null;h&&"documentMode"in document&&(In=document.documentMode);var jn=h&&"TextEvent"in window&&!In,Fn=h&&(!An||In&&8<In&&11>=In),zn=String.fromCharCode(32),Vn=!1;function Bn(t,e){switch(t){case"keyup":return-1!==Dn.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Wn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Un[t.type]:"textarea"===e}function Yn(t,e,n,i){Lt(i),0<(e=Ai(e,"onChange")).length&&(n=new hn("onChange","change",null,n,i),t.push({event:n,listeners:e}))}var Kn=null,qn=null;function Gn(t){Ci(t,0)}function Qn(t){if(X(nr(t)))return t}function Xn(t,e){if("change"===t)return e}var Jn=!1;if(h){var Zn;if(h){var ti="oninput"in document;if(!ti){var ei=document.createElement("div");ei.setAttribute("oninput","return;"),ti="function"==typeof ei.oninput}Zn=ti}else Zn=!1;Jn=Zn&&(!document.documentMode||9<document.documentMode)}function ni(){Kn&&(Kn.detachEvent("onpropertychange",ii),qn=Kn=null)}function ii(t){if("value"===t.propertyName&&Qn(qn)){var e=[];if(Yn(e,qn,t,Et(t)),t=Gn,It)t(e);else{It=!0;try{Tt(t,e)}finally{It=!1,Ft()}}}}function ri(t,e,n){"focusin"===t?(ni(),qn=n,(Kn=e).attachEvent("onpropertychange",ii)):"focusout"===t&&ni()}function oi(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Qn(qn)}function ai(t,e){if("click"===t)return Qn(e)}function si(t,e){if("input"===t||"change"===t)return Qn(e)}var li="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},ci=Object.prototype.hasOwnProperty;function ui(t,e){if(li(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++)if(!ci.call(e,n[i])||!li(t[n[i]],e[n[i]]))return!1;return!0}function hi(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function di(t,e){var n,i=hi(t);for(t=0;i;){if(3===i.nodeType){if(n=t+i.textContent.length,t<=e&&n>=e)return{node:i,offset:e-t};t=n}t:{for(;i;){if(i.nextSibling){i=i.nextSibling;break t}i=i.parentNode}i=void 0}i=hi(i)}}function fi(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?fi(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function pi(){for(var t=window,e=J();e instanceof t.HTMLIFrameElement;){try{var n="string"==typeof e.contentWindow.location.href}catch(t){n=!1}if(!n)break;e=J((t=e.contentWindow).document)}return e}function gi(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var mi=h&&"documentMode"in document&&11>=document.documentMode,bi=null,yi=null,vi=null,xi=!1;function wi(t,e,n){var i=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;xi||null==bi||bi!==J(i)||(i="selectionStart"in(i=bi)&&gi(i)?{start:i.selectionStart,end:i.selectionEnd}:{anchorNode:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset},vi&&ui(vi,i)||(vi=i,0<(i=Ai(yi,"onSelect")).length&&(e=new hn("onSelect","select",null,e,n),t.push({event:e,listeners:i}),e.target=bi)))}Ne("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ne("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ne(Te,2);for(var _i="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),ki=0;ki<_i.length;ki++)Re.set(_i[ki],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Si="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ei=new Set("cancel close invalid load scroll toggle".split(" ").concat(Si));function Oi(t,e,n){var i=t.type||"unknown-event";t.currentTarget=n,function(t,e,n,i,r,o,s,l,c){if(qt.apply(this,arguments),Wt){if(!Wt)throw Error(a(198));var u=Ut;Wt=!1,Ut=null,$t||($t=!0,Yt=u)}}(i,e,void 0,t),t.currentTarget=null}function Ci(t,e){e=0!=(4&e);for(var n=0;n<t.length;n++){var i=t[n],r=i.event;i=i.listeners;t:{var o=void 0;if(e)for(var a=i.length-1;0<=a;a--){var s=i[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&r.isPropagationStopped())break t;Oi(r,s,c),o=l}else for(a=0;a<i.length;a++){if(l=(s=i[a]).instance,c=s.currentTarget,s=s.listener,l!==o&&r.isPropagationStopped())break t;Oi(r,s,c),o=l}}}if($t)throw t=Yt,$t=!1,Yt=null,t}function Pi(t,e){var n=rr(e),i=t+"__bubble";n.has(i)||(Ti(e,t,2,!1),n.add(i))}var Mi="_reactListening"+Math.random().toString(36).slice(2);function Li(t){t[Mi]||(t[Mi]=!0,s.forEach((function(e){Ei.has(e)||Ri(e,!1,t,null),Ri(e,!0,t,null)})))}function Ri(t,e,n,i){var r=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===t&&9!==n.nodeType&&(o=n.ownerDocument),null!==i&&!e&&Ei.has(t)){if("scroll"!==t)return;r|=2,o=i}var a=rr(o),s=t+"__"+(e?"capture":"bubble");a.has(s)||(e&&(r|=4),Ti(o,t,r,e),a.add(s))}function Ti(t,e,n,i){var r=Re.get(e);switch(void 0===r?2:r){case 0:r=qe;break;case 1:r=Ge;break;default:r=Qe}n=r.bind(null,e,n,t),r=void 0,!Vt||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(r=!0),i?void 0!==r?t.addEventListener(e,n,{capture:!0,passive:r}):t.addEventListener(e,n,!0):void 0!==r?t.addEventListener(e,n,{passive:r}):t.addEventListener(e,n,!1)}function Ni(t,e,n,i,r){var o=i;if(0==(1&e)&&0==(2&e)&&null!==i)t:for(;;){if(null===i)return;var a=i.tag;if(3===a||4===a){var s=i.stateNode.containerInfo;if(s===r||8===s.nodeType&&s.parentNode===r)break;if(4===a)for(a=i.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===r||8===l.nodeType&&l.parentNode===r))return;a=a.return}for(;null!==s;){if(null===(a=tr(s)))return;if(5===(l=a.tag)||6===l){i=o=a;continue t}s=s.parentNode}}i=i.return}!function(t,e,n){if(jt)return t();jt=!0;try{At(t,e,n)}finally{jt=!1,Ft()}}((function(){var i=o,r=Et(n),a=[];t:{var s=Le.get(t);if(void 0!==s){var l=hn,c=t;switch(t){case"keypress":if(0===nn(n))break t;case"keydown":case"keyup":l=Pn;break;case"focusin":c="focus",l=bn;break;case"focusout":c="blur",l=bn;break;case"beforeblur":case"afterblur":l=bn;break;case"click":if(2===n.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Ln;break;case Oe:case Ce:case Pe:l=yn;break;case Me:l=Rn;break;case"scroll":l=fn;break;case"wheel":l=Nn;break;case"copy":case"cut":case"paste":l=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Mn}var u=0!=(4&e),h=!u&&"scroll"===t,d=u?null!==s?s+"Capture":null:s;u=[];for(var f,p=i;null!==p;){var g=(f=p).stateNode;if(5===f.tag&&null!==g&&(f=g,null!==d&&null!=(g=zt(p,d))&&u.push(Di(p,g,f))),h)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,r),a.push({event:s,listeners:u}))}}if(0==(7&e)){if(l="mouseout"===t||"pointerout"===t,(!(s="mouseover"===t||"pointerover"===t)||0!=(16&e)||!(c=n.relatedTarget||n.fromElement)||!tr(c)&&!c[Ji])&&(l||s)&&(s=r.window===r?r:(s=r.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=i,null!==(c=(c=n.relatedTarget||n.toElement)?tr(c):null)&&(c!==(h=Gt(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=i),l!==c)){if(u=gn,g="onMouseLeave",d="onMouseEnter",p="mouse","pointerout"!==t&&"pointerover"!==t||(u=Mn,g="onPointerLeave",d="onPointerEnter",p="pointer"),h=null==l?s:nr(l),f=null==c?s:nr(c),(s=new u(g,p+"leave",l,n,r)).target=h,s.relatedTarget=f,g=null,tr(r)===i&&((u=new u(d,p+"enter",c,n,r)).target=f,u.relatedTarget=h,g=u),h=g,l&&c)t:{for(d=c,p=0,f=u=l;f;f=Ii(f))p++;for(f=0,g=d;g;g=Ii(g))f++;for(;0<p-f;)u=Ii(u),p--;for(;0<f-p;)d=Ii(d),f--;for(;p--;){if(u===d||null!==d&&u===d.alternate)break t;u=Ii(u),d=Ii(d)}u=null}else u=null;null!==l&&ji(a,s,l,u,!1),null!==c&&null!==h&&ji(a,h,c,u,!0)}if("select"===(l=(s=i?nr(i):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Xn;else if($n(s))if(Jn)m=si;else{m=oi;var b=ri}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=ai);switch(m&&(m=m(t,i))?Yn(a,m,n,r):(b&&b(t,s,i),"focusout"===t&&(b=s._wrapperState)&&b.controlled&&"number"===s.type&&rt(s,"number",s.value)),b=i?nr(i):window,t){case"focusin":($n(b)||"true"===b.contentEditable)&&(bi=b,yi=i,vi=null);break;case"focusout":vi=yi=bi=null;break;case"mousedown":xi=!0;break;case"contextmenu":case"mouseup":case"dragend":xi=!1,wi(a,n,r);break;case"selectionchange":if(mi)break;case"keydown":case"keyup":wi(a,n,r)}var y;if(An)t:{switch(t){case"compositionstart":var v="onCompositionStart";break t;case"compositionend":v="onCompositionEnd";break t;case"compositionupdate":v="onCompositionUpdate";break t}v=void 0}else Wn?Bn(t,n)&&(v="onCompositionEnd"):"keydown"===t&&229===n.keyCode&&(v="onCompositionStart");v&&(Fn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==v?"onCompositionEnd"===v&&Wn&&(y=en()):(Ze="value"in(Je=r)?Je.value:Je.textContent,Wn=!0)),0<(b=Ai(i,v)).length&&(v=new wn(v,t,null,n,r),a.push({event:v,listeners:b}),(y||null!==(y=Hn(n)))&&(v.data=y))),(y=jn?function(t,e){switch(t){case"compositionend":return Hn(e);case"keypress":return 32!==e.which?null:(Vn=!0,zn);case"textInput":return(t=e.data)===zn&&Vn?null:t;default:return null}}(t,n):function(t,e){if(Wn)return"compositionend"===t||!An&&Bn(t,e)?(t=en(),tn=Ze=Je=null,Wn=!1,t):null;switch(t){case"paste":default:return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Fn&&"ko"!==e.locale?null:e.data}}(t,n))&&0<(i=Ai(i,"onBeforeInput")).length&&(r=new wn("onBeforeInput","beforeinput",null,n,r),a.push({event:r,listeners:i}),r.data=y)}Ci(a,e)}))}function Di(t,e,n){return{instance:t,listener:e,currentTarget:n}}function Ai(t,e){for(var n=e+"Capture",i=[];null!==t;){var r=t,o=r.stateNode;5===r.tag&&null!==o&&(r=o,null!=(o=zt(t,n))&&i.unshift(Di(t,o,r)),null!=(o=zt(t,e))&&i.push(Di(t,o,r))),t=t.return}return i}function Ii(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function ji(t,e,n,i,r){for(var o=e._reactName,a=[];null!==n&&n!==i;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===i)break;5===s.tag&&null!==c&&(s=c,r?null!=(l=zt(n,o))&&a.unshift(Di(n,l,s)):r||null!=(l=zt(n,o))&&a.push(Di(n,l,s))),n=n.return}0!==a.length&&t.push({event:e,listeners:a})}function Fi(){}var zi=null,Vi=null;function Bi(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Hi(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var Wi="function"==typeof setTimeout?setTimeout:void 0,Ui="function"==typeof clearTimeout?clearTimeout:void 0;function $i(t){(1===t.nodeType||9===t.nodeType&&null!=(t=t.body))&&(t.textContent="")}function Yi(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function Ki(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var n=t.data;if("$"===n||"$!"===n||"$?"===n){if(0===e)return t;e--}else"/$"===n&&e++}t=t.previousSibling}return null}var qi=0,Gi=Math.random().toString(36).slice(2),Qi="__reactFiber$"+Gi,Xi="__reactProps$"+Gi,Ji="__reactContainer$"+Gi,Zi="__reactEvents$"+Gi;function tr(t){var e=t[Qi];if(e)return e;for(var n=t.parentNode;n;){if(e=n[Ji]||n[Qi]){if(n=e.alternate,null!==e.child||null!==n&&null!==n.child)for(t=Ki(t);null!==t;){if(n=t[Qi])return n;t=Ki(t)}return e}n=(t=n).parentNode}return null}function er(t){return!(t=t[Qi]||t[Ji])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function nr(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(a(33))}function ir(t){return t[Xi]||null}function rr(t){var e=t[Zi];return void 0===e&&(e=t[Zi]=new Set),e}var or=[],ar=-1;function sr(t){return{current:t}}function lr(t){0>ar||(t.current=or[ar],or[ar]=null,ar--)}function cr(t,e){ar++,or[ar]=t.current,t.current=e}var ur={},hr=sr(ur),dr=sr(!1),fr=ur;function pr(t,e){var n=t.type.contextTypes;if(!n)return ur;var i=t.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===e)return i.__reactInternalMemoizedMaskedChildContext;var r,o={};for(r in n)o[r]=e[r];return i&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function gr(t){return null!=t.childContextTypes}function mr(){lr(dr),lr(hr)}function br(t,e,n){if(hr.current!==ur)throw Error(a(168));cr(hr,e),cr(dr,n)}function yr(t,e,n){var i=t.stateNode;if(t=e.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var o in i=i.getChildContext())if(!(o in t))throw Error(a(108,K(e)||"Unknown",o));return r({},n,i)}function vr(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||ur,fr=hr.current,cr(hr,t),cr(dr,dr.current),!0}function xr(t,e,n){var i=t.stateNode;if(!i)throw Error(a(169));n?(t=yr(t,e,fr),i.__reactInternalMemoizedMergedChildContext=t,lr(dr),lr(hr),cr(hr,t)):lr(dr),cr(dr,n)}var wr=null,_r=null,kr=o.unstable_runWithPriority,Sr=o.unstable_scheduleCallback,Er=o.unstable_cancelCallback,Or=o.unstable_shouldYield,Cr=o.unstable_requestPaint,Pr=o.unstable_now,Mr=o.unstable_getCurrentPriorityLevel,Lr=o.unstable_ImmediatePriority,Rr=o.unstable_UserBlockingPriority,Tr=o.unstable_NormalPriority,Nr=o.unstable_LowPriority,Dr=o.unstable_IdlePriority,Ar={},Ir=void 0!==Cr?Cr:function(){},jr=null,Fr=null,zr=!1,Vr=Pr(),Br=1e4>Vr?Pr:function(){return Pr()-Vr};function Hr(){switch(Mr()){case Lr:return 99;case Rr:return 98;case Tr:return 97;case Nr:return 96;case Dr:return 95;default:throw Error(a(332))}}function Wr(t){switch(t){case 99:return Lr;case 98:return Rr;case 97:return Tr;case 96:return Nr;case 95:return Dr;default:throw Error(a(332))}}function Ur(t,e){return t=Wr(t),kr(t,e)}function $r(t,e,n){return t=Wr(t),Sr(t,e,n)}function Yr(){if(null!==Fr){var t=Fr;Fr=null,Er(t)}Kr()}function Kr(){if(!zr&&null!==jr){zr=!0;var t=0;try{var e=jr;Ur(99,(function(){for(;t<e.length;t++){var n=e[t];do{n=n(!0)}while(null!==n)}})),jr=null}catch(e){throw null!==jr&&(jr=jr.slice(t+1)),Sr(Lr,Yr),e}finally{zr=!1}}}var qr=w.ReactCurrentBatchConfig;function Gr(t,e){if(t&&t.defaultProps){for(var n in e=r({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}return e}var Qr=sr(null),Xr=null,Jr=null,Zr=null;function to(){Zr=Jr=Xr=null}function eo(t){var e=Qr.current;lr(Qr),t.type._context._currentValue=e}function no(t,e){for(;null!==t;){var n=t.alternate;if((t.childLanes&e)===e){if(null===n||(n.childLanes&e)===e)break;n.childLanes|=e}else t.childLanes|=e,null!==n&&(n.childLanes|=e);t=t.return}}function io(t,e){Xr=t,Zr=Jr=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Aa=!0),t.firstContext=null)}function ro(t,e){if(Zr!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(Zr=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Jr){if(null===Xr)throw Error(a(308));Jr=e,Xr.dependencies={lanes:0,firstContext:e,responders:null}}else Jr=Jr.next=e;return t._currentValue}var oo=!1;function ao(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function so(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function lo(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function co(t,e){if(null!==(t=t.updateQueue)){var n=(t=t.shared).pending;null===n?e.next=e:(e.next=n.next,n.next=e),t.pending=e}}function uo(t,e){var n=t.updateQueue,i=t.alternate;if(null!==i&&n===(i=i.updateQueue)){var r=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?r=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?r=o=e:o=o.next=e}else r=o=e;return n={baseState:i.baseState,firstBaseUpdate:r,lastBaseUpdate:o,shared:i.shared,effects:i.effects},void(t.updateQueue=n)}null===(t=n.lastBaseUpdate)?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function ho(t,e,n,i){var o=t.updateQueue;oo=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===s?a=u:s.next=u,s=c;var h=t.alternate;if(null!==h){var d=(h=h.updateQueue).lastBaseUpdate;d!==s&&(null===d?h.firstBaseUpdate=u:d.next=u,h.lastBaseUpdate=c)}}if(null!==a){for(d=o.baseState,s=0,h=u=c=null;;){l=a.lane;var f=a.eventTime;if((i&l)===l){null!==h&&(h=h.next={eventTime:f,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});t:{var p=t,g=a;switch(l=e,f=n,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(f,d,l);break t}d=p;break t;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(f,d,l):p))break t;d=r({},d,l);break t;case 2:oo=!0}}null!==a.callback&&(t.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else f={eventTime:f,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===h?(u=h=f,c=d):h=h.next=f,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===h&&(c=d),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=h,js|=s,t.lanes=s,t.memoizedState=d}}function fo(t,e,n){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var i=t[e],r=i.callback;if(null!==r){if(i.callback=null,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var po=(new i.Component).refs;function go(t,e,n,i){n=null==(n=n(i,e=t.memoizedState))?e:r({},e,n),t.memoizedState=n,0===t.lanes&&(t.updateQueue.baseState=n)}var mo={isMounted:function(t){return!!(t=t._reactInternals)&&Gt(t)===t},enqueueSetState:function(t,e,n){t=t._reactInternals;var i=ll(),r=cl(t),o=lo(i,r);o.payload=e,null!=n&&(o.callback=n),co(t,o),ul(t,r,i)},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var i=ll(),r=cl(t),o=lo(i,r);o.tag=1,o.payload=e,null!=n&&(o.callback=n),co(t,o),ul(t,r,i)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=ll(),i=cl(t),r=lo(n,i);r.tag=2,null!=e&&(r.callback=e),co(t,r),ul(t,i,n)}};function bo(t,e,n,i,r,o,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(i,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&ui(n,i)&&ui(r,o))}function yo(t,e,n){var i=!1,r=ur,o=e.contextType;return"object"==typeof o&&null!==o?o=ro(o):(r=gr(e)?fr:hr.current,o=(i=null!=(i=e.contextTypes))?pr(t,r):ur),e=new e(n,o),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=mo,t.stateNode=e,e._reactInternals=t,i&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,t.__reactInternalMemoizedMaskedChildContext=o),e}function vo(t,e,n,i){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,i),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,i),e.state!==t&&mo.enqueueReplaceState(e,e.state,null)}function xo(t,e,n,i){var r=t.stateNode;r.props=n,r.state=t.memoizedState,r.refs=po,ao(t);var o=e.contextType;"object"==typeof o&&null!==o?r.context=ro(o):(o=gr(e)?fr:hr.current,r.context=pr(t,o)),ho(t,n,r,i),r.state=t.memoizedState,"function"==typeof(o=e.getDerivedStateFromProps)&&(go(t,e,o,n),r.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(e=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),e!==r.state&&mo.enqueueReplaceState(r,r.state,null),ho(t,n,r,i),r.state=t.memoizedState),"function"==typeof r.componentDidMount&&(t.flags|=4)}var wo=Array.isArray;function _o(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var i=n.stateNode}if(!i)throw Error(a(147,t));var r=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===r?e.ref:(e=function(t){var e=i.refs;e===po&&(e=i.refs={}),null===t?delete e[r]:e[r]=t},e._stringRef=r,e)}if("string"!=typeof t)throw Error(a(284));if(!n._owner)throw Error(a(290,t))}return t}function ko(t,e){if("textarea"!==t.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function So(t){function e(e,n){if(t){var i=e.lastEffect;null!==i?(i.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,i){if(!t)return null;for(;null!==i;)e(n,i),i=i.sibling;return null}function i(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function r(t,e){return(t=Bl(t,e)).index=0,t.sibling=null,t}function o(e,n,i){return e.index=i,t?null!==(i=e.alternate)?(i=i.index)<n?(e.flags=2,n):i:(e.flags=2,n):n}function s(e){return t&&null===e.alternate&&(e.flags=2),e}function l(t,e,n,i){return null===e||6!==e.tag?((e=$l(n,t.mode,i)).return=t,e):((e=r(e,n)).return=t,e)}function c(t,e,n,i){return null!==e&&e.elementType===n.type?((i=r(e,n.props)).ref=_o(t,e,n),i.return=t,i):((i=Hl(n.type,n.key,n.props,null,t.mode,i)).ref=_o(t,e,n),i.return=t,i)}function u(t,e,n,i){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Yl(n,t.mode,i)).return=t,e):((e=r(e,n.children||[])).return=t,e)}function h(t,e,n,i,o){return null===e||7!==e.tag?((e=Wl(n,t.mode,i,o)).return=t,e):((e=r(e,n)).return=t,e)}function d(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=$l(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case _:return(n=Hl(e.type,e.key,e.props,null,t.mode,n)).ref=_o(t,null,e),n.return=t,n;case k:return(e=Yl(e,t.mode,n)).return=t,e}if(wo(e)||H(e))return(e=Wl(e,t.mode,n,null)).return=t,e;ko(t,e)}return null}function f(t,e,n,i){var r=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:l(t,e,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case _:return n.key===r?n.type===S?h(t,e,n.props.children,i,r):c(t,e,n,i):null;case k:return n.key===r?u(t,e,n,i):null}if(wo(n)||H(n))return null!==r?null:h(t,e,n,i,null);ko(t,n)}return null}function p(t,e,n,i,r){if("string"==typeof i||"number"==typeof i)return l(e,t=t.get(n)||null,""+i,r);if("object"==typeof i&&null!==i){switch(i.$$typeof){case _:return t=t.get(null===i.key?n:i.key)||null,i.type===S?h(e,t,i.props.children,r,i.key):c(e,t,i,r);case k:return u(e,t=t.get(null===i.key?n:i.key)||null,i,r)}if(wo(i)||H(i))return h(e,t=t.get(n)||null,i,r,null);ko(e,i)}return null}function g(r,a,s,l){for(var c=null,u=null,h=a,g=a=0,m=null;null!==h&&g<s.length;g++){h.index>g?(m=h,h=null):m=h.sibling;var b=f(r,h,s[g],l);if(null===b){null===h&&(h=m);break}t&&h&&null===b.alternate&&e(r,h),a=o(b,a,g),null===u?c=b:u.sibling=b,u=b,h=m}if(g===s.length)return n(r,h),c;if(null===h){for(;g<s.length;g++)null!==(h=d(r,s[g],l))&&(a=o(h,a,g),null===u?c=h:u.sibling=h,u=h);return c}for(h=i(r,h);g<s.length;g++)null!==(m=p(h,r,g,s[g],l))&&(t&&null!==m.alternate&&h.delete(null===m.key?g:m.key),a=o(m,a,g),null===u?c=m:u.sibling=m,u=m);return t&&h.forEach((function(t){return e(r,t)})),c}function m(r,s,l,c){var u=H(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var h=u=null,g=s,m=s=0,b=null,y=l.next();null!==g&&!y.done;m++,y=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var v=f(r,g,y.value,c);if(null===v){null===g&&(g=b);break}t&&g&&null===v.alternate&&e(r,g),s=o(v,s,m),null===h?u=v:h.sibling=v,h=v,g=b}if(y.done)return n(r,g),u;if(null===g){for(;!y.done;m++,y=l.next())null!==(y=d(r,y.value,c))&&(s=o(y,s,m),null===h?u=y:h.sibling=y,h=y);return u}for(g=i(r,g);!y.done;m++,y=l.next())null!==(y=p(g,r,m,y.value,c))&&(t&&null!==y.alternate&&g.delete(null===y.key?m:y.key),s=o(y,s,m),null===h?u=y:h.sibling=y,h=y);return t&&g.forEach((function(t){return e(r,t)})),u}return function(t,i,o,l){var c="object"==typeof o&&null!==o&&o.type===S&&null===o.key;c&&(o=o.props.children);var u="object"==typeof o&&null!==o;if(u)switch(o.$$typeof){case _:t:{for(u=o.key,c=i;null!==c;){if(c.key===u){if(7===c.tag){if(o.type===S){n(t,c.sibling),(i=r(c,o.props.children)).return=t,t=i;break t}}else if(c.elementType===o.type){n(t,c.sibling),(i=r(c,o.props)).ref=_o(t,c,o),i.return=t,t=i;break t}n(t,c);break}e(t,c),c=c.sibling}o.type===S?((i=Wl(o.props.children,t.mode,l,o.key)).return=t,t=i):((l=Hl(o.type,o.key,o.props,null,t.mode,l)).ref=_o(t,i,o),l.return=t,t=l)}return s(t);case k:t:{for(c=o.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===o.containerInfo&&i.stateNode.implementation===o.implementation){n(t,i.sibling),(i=r(i,o.children||[])).return=t,t=i;break t}n(t,i);break}e(t,i),i=i.sibling}(i=Yl(o,t.mode,l)).return=t,t=i}return s(t)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==i&&6===i.tag?(n(t,i.sibling),(i=r(i,o)).return=t,t=i):(n(t,i),(i=$l(o,t.mode,l)).return=t,t=i),s(t);if(wo(o))return g(t,i,o,l);if(H(o))return m(t,i,o,l);if(u&&ko(t,o),void 0===o&&!c)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,K(t.type)||"Component"))}return n(t,i)}}var Eo=So(!0),Oo=So(!1),Co={},Po=sr(Co),Mo=sr(Co),Lo=sr(Co);function Ro(t){if(t===Co)throw Error(a(174));return t}function To(t,e){switch(cr(Lo,e),cr(Mo,t),cr(Po,Co),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:ft(null,"");break;default:e=ft(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}lr(Po),cr(Po,e)}function No(){lr(Po),lr(Mo),lr(Lo)}function Do(t){Ro(Lo.current);var e=Ro(Po.current),n=ft(e,t.type);e!==n&&(cr(Mo,t),cr(Po,n))}function Ao(t){Mo.current===t&&(lr(Po),lr(Mo))}var Io=sr(0);function jo(t){for(var e=t;null!==e;){if(13===e.tag){var n=e.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Fo=null,zo=null,Vo=!1;function Bo(t,e){var n=zl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function Ho(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);default:return!1}}function Wo(t){if(Vo){var e=zo;if(e){var n=e;if(!Ho(t,e)){if(!(e=Yi(n.nextSibling))||!Ho(t,e))return t.flags=-1025&t.flags|2,Vo=!1,void(Fo=t);Bo(Fo,n)}Fo=t,zo=Yi(e.firstChild)}else t.flags=-1025&t.flags|2,Vo=!1,Fo=t}}function Uo(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;Fo=t}function $o(t){if(t!==Fo)return!1;if(!Vo)return Uo(t),Vo=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Hi(e,t.memoizedProps))for(e=zo;e;)Bo(t,e),e=Yi(e.nextSibling);if(Uo(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var n=t.data;if("/$"===n){if(0===e){zo=Yi(t.nextSibling);break t}e--}else"$"!==n&&"$!"!==n&&"$?"!==n||e++}t=t.nextSibling}zo=null}}else zo=Fo?Yi(t.stateNode.nextSibling):null;return!0}function Yo(){zo=Fo=null,Vo=!1}var Ko=[];function qo(){for(var t=0;t<Ko.length;t++)Ko[t]._workInProgressVersionPrimary=null;Ko.length=0}var Go=w.ReactCurrentDispatcher,Qo=w.ReactCurrentBatchConfig,Xo=0,Jo=null,Zo=null,ta=null,ea=!1,na=!1;function ia(){throw Error(a(321))}function ra(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!li(t[n],e[n]))return!1;return!0}function oa(t,e,n,i,r,o){if(Xo=o,Jo=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Go.current=null===t||null===t.memoizedState?Ra:Ta,t=n(i,r),na){o=0;do{if(na=!1,!(25>o))throw Error(a(301));o+=1,ta=Zo=null,e.updateQueue=null,Go.current=Na,t=n(i,r)}while(na)}if(Go.current=La,e=null!==Zo&&null!==Zo.next,Xo=0,ta=Zo=Jo=null,ea=!1,e)throw Error(a(300));return t}function aa(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Jo.memoizedState=ta=t:ta=ta.next=t,ta}function sa(){if(null===Zo){var t=Jo.alternate;t=null!==t?t.memoizedState:null}else t=Zo.next;var e=null===ta?Jo.memoizedState:ta.next;if(null!==e)ta=e,Zo=t;else{if(null===t)throw Error(a(310));t={memoizedState:(Zo=t).memoizedState,baseState:Zo.baseState,baseQueue:Zo.baseQueue,queue:Zo.queue,next:null},null===ta?Jo.memoizedState=ta=t:ta=ta.next=t}return ta}function la(t,e){return"function"==typeof e?e(t):e}function ca(t){var e=sa(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var i=Zo,r=i.baseQueue,o=n.pending;if(null!==o){if(null!==r){var s=r.next;r.next=o.next,o.next=s}i.baseQueue=r=o,n.pending=null}if(null!==r){r=r.next,i=i.baseState;var l=s=o=null,c=r;do{var u=c.lane;if((Xo&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),i=c.eagerReducer===t?c.eagerState:t(i,c.action);else{var h={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(s=l=h,o=i):l=l.next=h,Jo.lanes|=u,js|=u}c=c.next}while(null!==c&&c!==r);null===l?o=i:l.next=s,li(i,e.memoizedState)||(Aa=!0),e.memoizedState=i,e.baseState=o,e.baseQueue=l,n.lastRenderedState=i}return[e.memoizedState,n.dispatch]}function ua(t){var e=sa(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var i=n.dispatch,r=n.pending,o=e.memoizedState;if(null!==r){n.pending=null;var s=r=r.next;do{o=t(o,s.action),s=s.next}while(s!==r);li(o,e.memoizedState)||(Aa=!0),e.memoizedState=o,null===e.baseQueue&&(e.baseState=o),n.lastRenderedState=o}return[o,i]}function ha(t,e,n){var i=e._getVersion;i=i(e._source);var r=e._workInProgressVersionPrimary;if(null!==r?t=r===i:(t=t.mutableReadLanes,(t=(Xo&t)===t)&&(e._workInProgressVersionPrimary=i,Ko.push(e))),t)return n(e._source);throw Ko.push(e),Error(a(350))}function da(t,e,n,i){var r=Ms;if(null===r)throw Error(a(349));var o=e._getVersion,s=o(e._source),l=Go.current,c=l.useState((function(){return ha(r,e,n)})),u=c[1],h=c[0];c=ta;var d=t.memoizedState,f=d.refs,p=f.getSnapshot,g=d.source;d=d.subscribe;var m=Jo;return t.memoizedState={refs:f,source:e,subscribe:i},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=u;var t=o(e._source);if(!li(s,t)){t=n(e._source),li(h,t)||(u(t),t=cl(m),r.mutableReadLanes|=t&r.pendingLanes),t=r.mutableReadLanes,r.entangledLanes|=t;for(var i=r.entanglements,a=t;0<a;){var l=31-He(a),c=1<<l;i[l]|=t,a&=~c}}}),[n,e,i]),l.useEffect((function(){return i(e._source,(function(){var t=f.getSnapshot,n=f.setSnapshot;try{n(t(e._source));var i=cl(m);r.mutableReadLanes|=i&r.pendingLanes}catch(t){n((function(){throw t}))}}))}),[e,i]),li(p,n)&&li(g,e)&&li(d,i)||((t={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:h}).dispatch=u=Ma.bind(null,Jo,t),c.queue=t,c.baseQueue=null,h=ha(r,e,n),c.memoizedState=c.baseState=h),h}function fa(t,e,n){return da(sa(),t,e,n)}function pa(t){var e=aa();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:t}).dispatch=Ma.bind(null,Jo,t),[e.memoizedState,t]}function ga(t,e,n,i){return t={tag:t,create:e,destroy:n,deps:i,next:null},null===(e=Jo.updateQueue)?(e={lastEffect:null},Jo.updateQueue=e,e.lastEffect=t.next=t):null===(n=e.lastEffect)?e.lastEffect=t.next=t:(i=n.next,n.next=t,t.next=i,e.lastEffect=t),t}function ma(t){return t={current:t},aa().memoizedState=t}function ba(){return sa().memoizedState}function ya(t,e,n,i){var r=aa();Jo.flags|=t,r.memoizedState=ga(1|e,n,void 0,void 0===i?null:i)}function va(t,e,n,i){var r=sa();i=void 0===i?null:i;var o=void 0;if(null!==Zo){var a=Zo.memoizedState;if(o=a.destroy,null!==i&&ra(i,a.deps))return void ga(e,n,o,i)}Jo.flags|=t,r.memoizedState=ga(1|e,n,o,i)}function xa(t,e){return ya(516,4,t,e)}function wa(t,e){return va(516,4,t,e)}function _a(t,e){return va(4,2,t,e)}function ka(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Sa(t,e,n){return n=null!=n?n.concat([t]):null,va(4,2,ka.bind(null,e,t),n)}function Ea(){}function Oa(t,e){var n=sa();e=void 0===e?null:e;var i=n.memoizedState;return null!==i&&null!==e&&ra(e,i[1])?i[0]:(n.memoizedState=[t,e],t)}function Ca(t,e){var n=sa();e=void 0===e?null:e;var i=n.memoizedState;return null!==i&&null!==e&&ra(e,i[1])?i[0]:(t=t(),n.memoizedState=[t,e],t)}function Pa(t,e){var n=Hr();Ur(98>n?98:n,(function(){t(!0)})),Ur(97<n?97:n,(function(){var n=Qo.transition;Qo.transition=1;try{t(!1),e()}finally{Qo.transition=n}}))}function Ma(t,e,n){var i=ll(),r=cl(t),o={lane:r,action:n,eagerReducer:null,eagerState:null,next:null},a=e.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),e.pending=o,a=t.alternate,t===Jo||null!==a&&a===Jo)na=ea=!0;else{if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var s=e.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,li(l,s))return}catch(t){}ul(t,r,i)}}var La={readContext:ro,useCallback:ia,useContext:ia,useEffect:ia,useImperativeHandle:ia,useLayoutEffect:ia,useMemo:ia,useReducer:ia,useRef:ia,useState:ia,useDebugValue:ia,useDeferredValue:ia,useTransition:ia,useMutableSource:ia,useOpaqueIdentifier:ia,unstable_isNewReconciler:!1},Ra={readContext:ro,useCallback:function(t,e){return aa().memoizedState=[t,void 0===e?null:e],t},useContext:ro,useEffect:xa,useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,ya(4,2,ka.bind(null,e,t),n)},useLayoutEffect:function(t,e){return ya(4,2,t,e)},useMemo:function(t,e){var n=aa();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var i=aa();return e=void 0!==n?n(e):e,i.memoizedState=i.baseState=e,t=(t=i.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=Ma.bind(null,Jo,t),[i.memoizedState,t]},useRef:ma,useState:pa,useDebugValue:Ea,useDeferredValue:function(t){var e=pa(t),n=e[0],i=e[1];return xa((function(){var e=Qo.transition;Qo.transition=1;try{i(t)}finally{Qo.transition=e}}),[t]),n},useTransition:function(){var t=pa(!1),e=t[0];return ma(t=Pa.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,n){var i=aa();return i.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:n},da(i,t,e,n)},useOpaqueIdentifier:function(){if(Vo){var t=!1,e=function(t){return{$$typeof:A,toString:t,valueOf:t}}((function(){throw t||(t=!0,n("r:"+(qi++).toString(36))),Error(a(355))})),n=pa(e)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,ga(5,(function(){n("r:"+(qi++).toString(36))}),void 0,null)),e}return pa(e="r:"+(qi++).toString(36)),e},unstable_isNewReconciler:!1},Ta={readContext:ro,useCallback:Oa,useContext:ro,useEffect:wa,useImperativeHandle:Sa,useLayoutEffect:_a,useMemo:Ca,useReducer:ca,useRef:ba,useState:function(){return ca(la)},useDebugValue:Ea,useDeferredValue:function(t){var e=ca(la),n=e[0],i=e[1];return wa((function(){var e=Qo.transition;Qo.transition=1;try{i(t)}finally{Qo.transition=e}}),[t]),n},useTransition:function(){var t=ca(la)[0];return[ba().current,t]},useMutableSource:fa,useOpaqueIdentifier:function(){return ca(la)[0]},unstable_isNewReconciler:!1},Na={readContext:ro,useCallback:Oa,useContext:ro,useEffect:wa,useImperativeHandle:Sa,useLayoutEffect:_a,useMemo:Ca,useReducer:ua,useRef:ba,useState:function(){return ua(la)},useDebugValue:Ea,useDeferredValue:function(t){var e=ua(la),n=e[0],i=e[1];return wa((function(){var e=Qo.transition;Qo.transition=1;try{i(t)}finally{Qo.transition=e}}),[t]),n},useTransition:function(){var t=ua(la)[0];return[ba().current,t]},useMutableSource:fa,useOpaqueIdentifier:function(){return ua(la)[0]},unstable_isNewReconciler:!1},Da=w.ReactCurrentOwner,Aa=!1;function Ia(t,e,n,i){e.child=null===t?Oo(e,null,n,i):Eo(e,t.child,n,i)}function ja(t,e,n,i,r){n=n.render;var o=e.ref;return io(e,r),i=oa(t,e,n,i,o,r),null===t||Aa?(e.flags|=1,Ia(t,e,i,r),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~r,es(t,e,r))}function Fa(t,e,n,i,r,o){if(null===t){var a=n.type;return"function"!=typeof a||Vl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=Hl(n.type,null,i,e,e.mode,o)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,za(t,e,a,i,r,o))}return a=t.child,0==(r&o)&&(r=a.memoizedProps,(n=null!==(n=n.compare)?n:ui)(r,i)&&t.ref===e.ref)?es(t,e,o):(e.flags|=1,(t=Bl(a,i)).ref=e.ref,t.return=e,e.child=t)}function za(t,e,n,i,r,o){if(null!==t&&ui(t.memoizedProps,i)&&t.ref===e.ref){if(Aa=!1,0==(o&r))return e.lanes=t.lanes,es(t,e,o);0!=(16384&t.flags)&&(Aa=!0)}return Ha(t,e,n,i,o)}function Va(t,e,n){var i=e.pendingProps,r=i.children,o=null!==t?t.memoizedState:null;if("hidden"===i.mode||"unstable-defer-without-hiding"===i.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},bl(0,n);else{if(0==(1073741824&n))return t=null!==o?o.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},bl(0,t),null;e.memoizedState={baseLanes:0},bl(0,null!==o?o.baseLanes:n)}else null!==o?(i=o.baseLanes|n,e.memoizedState=null):i=n,bl(0,i);return Ia(t,e,r,n),e.child}function Ba(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.flags|=128)}function Ha(t,e,n,i,r){var o=gr(n)?fr:hr.current;return o=pr(e,o),io(e,r),n=oa(t,e,n,i,o,r),null===t||Aa?(e.flags|=1,Ia(t,e,n,r),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~r,es(t,e,r))}function Wa(t,e,n,i,r){if(gr(n)){var o=!0;vr(e)}else o=!1;if(io(e,r),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),yo(e,n,i),xo(e,n,i,r),i=!0;else if(null===t){var a=e.stateNode,s=e.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?ro(c):pr(e,c=gr(n)?fr:hr.current);var u=n.getDerivedStateFromProps,h="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;h||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==i||l!==c)&&vo(e,a,i,c),oo=!1;var d=e.memoizedState;a.state=d,ho(e,i,a,r),l=e.memoizedState,s!==i||d!==l||dr.current||oo?("function"==typeof u&&(go(e,n,u,i),l=e.memoizedState),(s=oo||bo(e,n,s,i,d,l,c))?(h||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=i,e.memoizedState=l),a.props=i,a.state=l,a.context=c,i=s):("function"==typeof a.componentDidMount&&(e.flags|=4),i=!1)}else{a=e.stateNode,so(t,e),s=e.memoizedProps,c=e.type===e.elementType?s:Gr(e.type,s),a.props=c,h=e.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?ro(l):pr(e,l=gr(n)?fr:hr.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==h||d!==l)&&vo(e,a,i,l),oo=!1,d=e.memoizedState,a.state=d,ho(e,i,a,r);var p=e.memoizedState;s!==h||d!==p||dr.current||oo?("function"==typeof f&&(go(e,n,f,i),p=e.memoizedState),(c=oo||bo(e,n,c,i,d,p,l))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(i,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(i,p,l)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=256),e.memoizedProps=i,e.memoizedState=p),a.props=i,a.state=p,a.context=l,i=c):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=256),i=!1)}return Ua(t,e,n,i,o,r)}function Ua(t,e,n,i,r,o){Ba(t,e);var a=0!=(64&e.flags);if(!i&&!a)return r&&xr(e,n,!1),es(t,e,o);i=e.stateNode,Da.current=e;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return e.flags|=1,null!==t&&a?(e.child=Eo(e,t.child,null,o),e.child=Eo(e,null,s,o)):Ia(t,e,s,o),e.memoizedState=i.state,r&&xr(e,n,!0),e.child}function $a(t){var e=t.stateNode;e.pendingContext?br(0,e.pendingContext,e.pendingContext!==e.context):e.context&&br(0,e.context,!1),To(t,e.containerInfo)}var Ya,Ka,qa,Ga={dehydrated:null,retryLane:0};function Qa(t,e,n){var i,r=e.pendingProps,o=Io.current,a=!1;return(i=0!=(64&e.flags))||(i=(null===t||null!==t.memoizedState)&&0!=(2&o)),i?(a=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===r.fallback||!0===r.unstable_avoidThisFallback||(o|=1),cr(Io,1&o),null===t?(void 0!==r.fallback&&Wo(e),t=r.children,o=r.fallback,a?(t=Xa(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ga,t):"number"==typeof r.unstable_expectedLoadTime?(t=Xa(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ga,e.lanes=33554432,t):((n=Ul({mode:"visible",children:t},e.mode,n,null)).return=e,e.child=n)):(t.memoizedState,a?(r=function(t,e,n,i,r){var o=e.mode,a=t.child;t=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&e.child!==a?((n=e.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(e.firstEffect=n.firstEffect,e.lastEffect=a,a.nextEffect=null):e.firstEffect=e.lastEffect=null):n=Bl(a,s),null!==t?i=Bl(t,i):(i=Wl(i,o,r,null)).flags|=2,i.return=e,n.return=e,n.sibling=i,e.child=n,i}(t,e,r.children,r.fallback,n),a=e.child,o=t.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=t.childLanes&~n,e.memoizedState=Ga,r):(n=function(t,e,n,i){var r=t.child;return t=r.sibling,n=Bl(r,{mode:"visible",children:n}),0==(2&e.mode)&&(n.lanes=i),n.return=e,n.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=n}(t,e,r.children,n),e.memoizedState=null,n))}function Xa(t,e,n,i){var r=t.mode,o=t.child;return e={mode:"hidden",children:e},0==(2&r)&&null!==o?(o.childLanes=0,o.pendingProps=e):o=Ul(e,r,0,null),n=Wl(n,r,i,null),o.return=t,n.return=t,o.sibling=n,t.child=o,n}function Ja(t,e){t.lanes|=e;var n=t.alternate;null!==n&&(n.lanes|=e),no(t.return,e)}function Za(t,e,n,i,r,o){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:r,lastEffect:o}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=i,a.tail=n,a.tailMode=r,a.lastEffect=o)}function ts(t,e,n){var i=e.pendingProps,r=i.revealOrder,o=i.tail;if(Ia(t,e,i.children,n),0!=(2&(i=Io.current)))i=1&i|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&Ja(t,n);else if(19===t.tag)Ja(t,n);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}i&=1}if(cr(Io,i),0==(2&e.mode))e.memoizedState=null;else switch(r){case"forwards":for(n=e.child,r=null;null!==n;)null!==(t=n.alternate)&&null===jo(t)&&(r=n),n=n.sibling;null===(n=r)?(r=e.child,e.child=null):(r=n.sibling,n.sibling=null),Za(e,!1,r,n,o,e.lastEffect);break;case"backwards":for(n=null,r=e.child,e.child=null;null!==r;){if(null!==(t=r.alternate)&&null===jo(t)){e.child=r;break}t=r.sibling,r.sibling=n,n=r,r=t}Za(e,!0,n,null,o,e.lastEffect);break;case"together":Za(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function es(t,e,n){if(null!==t&&(e.dependencies=t.dependencies),js|=e.lanes,0!=(n&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(n=Bl(t=e.child,t.pendingProps),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Bl(t,t.pendingProps)).return=e;n.sibling=null}return e.child}return null}function ns(t,e){if(!Vo)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;null!==e;)null!==e.alternate&&(n=e),e=e.sibling;null===n?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var i=null;null!==n;)null!==n.alternate&&(i=n),n=n.sibling;null===i?e||null===t.tail?t.tail=null:t.tail.sibling=null:i.sibling=null}}function is(t,e,n){var i=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return gr(e.type)&&mr(),null;case 3:return No(),lr(dr),lr(hr),qo(),(i=e.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),null!==t&&null!==t.child||($o(e)?e.flags|=4:i.hydrate||(e.flags|=256)),null;case 5:Ao(e);var o=Ro(Lo.current);if(n=e.type,null!==t&&null!=e.stateNode)Ka(t,e,n,i),t.ref!==e.ref&&(e.flags|=128);else{if(!i){if(null===e.stateNode)throw Error(a(166));return null}if(t=Ro(Po.current),$o(e)){i=e.stateNode,n=e.type;var s=e.memoizedProps;switch(i[Qi]=e,i[Xi]=s,n){case"dialog":Pi("cancel",i),Pi("close",i);break;case"iframe":case"object":case"embed":Pi("load",i);break;case"video":case"audio":for(t=0;t<Si.length;t++)Pi(Si[t],i);break;case"source":Pi("error",i);break;case"img":case"image":case"link":Pi("error",i),Pi("load",i);break;case"details":Pi("toggle",i);break;case"input":tt(i,s),Pi("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!s.multiple},Pi("invalid",i);break;case"textarea":lt(i,s),Pi("invalid",i)}for(var c in kt(n,s),t=null,s)s.hasOwnProperty(c)&&(o=s[c],"children"===c?"string"==typeof o?i.textContent!==o&&(t=["children",o]):"number"==typeof o&&i.textContent!==""+o&&(t=["children",""+o]):l.hasOwnProperty(c)&&null!=o&&"onScroll"===c&&Pi("scroll",i));switch(n){case"input":Q(i),it(i,s,!0);break;case"textarea":Q(i),ut(i);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(i.onclick=Fi)}i=t,e.updateQueue=i,null!==i&&(e.flags|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,t===ht&&(t=dt(n)),t===ht?"script"===n?((t=c.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof i.is?t=c.createElement(n,{is:i.is}):(t=c.createElement(n),"select"===n&&(c=t,i.multiple?c.multiple=!0:i.size&&(c.size=i.size))):t=c.createElementNS(t,n),t[Qi]=e,t[Xi]=i,Ya(t,e),e.stateNode=t,c=St(n,i),n){case"dialog":Pi("cancel",t),Pi("close",t),o=i;break;case"iframe":case"object":case"embed":Pi("load",t),o=i;break;case"video":case"audio":for(o=0;o<Si.length;o++)Pi(Si[o],t);o=i;break;case"source":Pi("error",t),o=i;break;case"img":case"image":case"link":Pi("error",t),Pi("load",t),o=i;break;case"details":Pi("toggle",t),o=i;break;case"input":tt(t,i),o=Z(t,i),Pi("invalid",t);break;case"option":o=ot(t,i);break;case"select":t._wrapperState={wasMultiple:!!i.multiple},o=r({},i,{value:void 0}),Pi("invalid",t);break;case"textarea":lt(t,i),o=st(t,i),Pi("invalid",t);break;default:o=i}kt(n,o);var u=o;for(s in u)if(u.hasOwnProperty(s)){var h=u[s];"style"===s?wt(t,h):"dangerouslySetInnerHTML"===s?null!=(h=h?h.__html:void 0)&&mt(t,h):"children"===s?"string"==typeof h?("textarea"!==n||""!==h)&&bt(t,h):"number"==typeof h&&bt(t,""+h):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=h&&"onScroll"===s&&Pi("scroll",t):null!=h&&x(t,s,h,c))}switch(n){case"input":Q(t),it(t,i,!1);break;case"textarea":Q(t),ut(t);break;case"option":null!=i.value&&t.setAttribute("value",""+q(i.value));break;case"select":t.multiple=!!i.multiple,null!=(s=i.value)?at(t,!!i.multiple,s,!1):null!=i.defaultValue&&at(t,!!i.multiple,i.defaultValue,!0);break;default:"function"==typeof o.onClick&&(t.onclick=Fi)}Bi(n,i)&&(e.flags|=4)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)qa(0,e,t.memoizedProps,i);else{if("string"!=typeof i&&null===e.stateNode)throw Error(a(166));n=Ro(Lo.current),Ro(Po.current),$o(e)?(i=e.stateNode,n=e.memoizedProps,i[Qi]=e,i.nodeValue!==n&&(e.flags|=4)):((i=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[Qi]=e,e.stateNode=i)}return null;case 13:return lr(Io),i=e.memoizedState,0!=(64&e.flags)?(e.lanes=n,e):(i=null!==i,n=!1,null===t?void 0!==e.memoizedProps.fallback&&$o(e):n=null!==t.memoizedState,i&&!n&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?0===Ds&&(Ds=3):(0!==Ds&&3!==Ds||(Ds=4),null===Ms||0==(134217727&js)&&0==(134217727&Fs)||pl(Ms,Rs))),(i||n)&&(e.flags|=4),null);case 4:return No(),null===t&&Li(e.stateNode.containerInfo),null;case 10:return eo(e),null;case 19:if(lr(Io),null===(i=e.memoizedState))return null;if(s=0!=(64&e.flags),null===(c=i.rendering))if(s)ns(i,!1);else{if(0!==Ds||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(c=jo(t))){for(e.flags|=64,ns(i,!1),null!==(s=c.updateQueue)&&(e.updateQueue=s,e.flags|=4),null===i.lastEffect&&(e.firstEffect=null),e.lastEffect=i.lastEffect,i=n,n=e.child;null!==n;)t=i,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=t,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,t=c.dependencies,s.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return cr(Io,1&Io.current|2),e.child}t=t.sibling}null!==i.tail&&Br()>Hs&&(e.flags|=64,s=!0,ns(i,!1),e.lanes=33554432)}else{if(!s)if(null!==(t=jo(c))){if(e.flags|=64,s=!0,null!==(n=t.updateQueue)&&(e.updateQueue=n,e.flags|=4),ns(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!Vo)return null!==(e=e.lastEffect=i.lastEffect)&&(e.nextEffect=null),null}else 2*Br()-i.renderingStartTime>Hs&&1073741824!==n&&(e.flags|=64,s=!0,ns(i,!1),e.lanes=33554432);i.isBackwards?(c.sibling=e.child,e.child=c):(null!==(n=i.last)?n.sibling=c:e.child=c,i.last=c)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.lastEffect=e.lastEffect,i.renderingStartTime=Br(),n.sibling=null,e=Io.current,cr(Io,s?1&e|2:1&e),n):null;case 23:case 24:return yl(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==i.mode&&(e.flags|=4),null}throw Error(a(156,e.tag))}function rs(t){switch(t.tag){case 1:gr(t.type)&&mr();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(No(),lr(dr),lr(hr),qo(),0!=(64&(e=t.flags)))throw Error(a(285));return t.flags=-4097&e|64,t;case 5:return Ao(t),null;case 13:return lr(Io),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return lr(Io),null;case 4:return No(),null;case 10:return eo(t),null;case 23:case 24:return yl(),null;default:return null}}function os(t,e){try{var n="",i=e;do{n+=Y(i),i=i.return}while(i);var r=n}catch(t){r="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:r}}function as(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}Ya=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)t.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ka=function(t,e,n,i){var o=t.memoizedProps;if(o!==i){t=e.stateNode,Ro(Po.current);var a,s=null;switch(n){case"input":o=Z(t,o),i=Z(t,i),s=[];break;case"option":o=ot(t,o),i=ot(t,i),s=[];break;case"select":o=r({},o,{value:void 0}),i=r({},i,{value:void 0}),s=[];break;case"textarea":o=st(t,o),i=st(t,i),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof i.onClick&&(t.onclick=Fi)}for(h in kt(n,i),n=null,o)if(!i.hasOwnProperty(h)&&o.hasOwnProperty(h)&&null!=o[h])if("style"===h){var c=o[h];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(l.hasOwnProperty(h)?s||(s=[]):(s=s||[]).push(h,null));for(h in i){var u=i[h];if(c=null!=o?o[h]:void 0,i.hasOwnProperty(h)&&u!==c&&(null!=u||null!=c))if("style"===h)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(s||(s=[]),s.push(h,n)),n=u;else"dangerouslySetInnerHTML"===h?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(s=s||[]).push(h,u)):"children"===h?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(h,""+u):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(l.hasOwnProperty(h)?(null!=u&&"onScroll"===h&&Pi("scroll",t),s||c===u||(s=[])):"object"==typeof u&&null!==u&&u.$$typeof===A?u.toString():(s=s||[]).push(h,u))}n&&(s=s||[]).push("style",n);var h=s;(e.updateQueue=h)&&(e.flags|=4)}},qa=function(t,e,n,i){n!==i&&(e.flags|=4)};var ss="function"==typeof WeakMap?WeakMap:Map;function ls(t,e,n){(n=lo(-1,n)).tag=3,n.payload={element:null};var i=e.value;return n.callback=function(){Ys||(Ys=!0,Ks=i),as(0,e)},n}function cs(t,e,n){(n=lo(-1,n)).tag=3;var i=t.type.getDerivedStateFromError;if("function"==typeof i){var r=e.value;n.payload=function(){return as(0,e),i(r)}}var o=t.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof i&&(null===qs?qs=new Set([this]):qs.add(this),as(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),n}var us="function"==typeof WeakSet?WeakSet:Set;function hs(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){Al(t,e)}else e.current=null}function ds(t,e){switch(e.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&e.flags&&null!==t){var n=t.memoizedProps,i=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?n:Gr(e.type,n),i),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(256&e.flags&&$i(e.stateNode.containerInfo))}throw Error(a(163))}function fs(t,e,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var i=t.create;t.destroy=i()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var r=t;i=r.next,0!=(4&(r=r.tag))&&0!=(1&r)&&(Tl(n,t),Rl(n,t)),t=i}while(t!==e)}return;case 1:return t=n.stateNode,4&n.flags&&(null===e?t.componentDidMount():(i=n.elementType===n.type?e.memoizedProps:Gr(n.type,e.memoizedProps),t.componentDidUpdate(i,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=n.updateQueue)&&fo(n,e,t));case 3:if(null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}fo(n,e,t)}return;case 5:return t=n.stateNode,void(null===e&&4&n.flags&&Bi(n.type,n.memoizedProps)&&t.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xe(n)))))}throw Error(a(163))}function ps(t,e){for(var n=t;;){if(5===n.tag){var i=n.stateNode;if(e)"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{i=n.stateNode;var r=n.memoizedProps.style;r=null!=r&&r.hasOwnProperty("display")?r.display:null,i.style.display=xt("display",r)}}else if(6===n.tag)n.stateNode.nodeValue=e?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===t)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function gs(t,e){if(_r&&"function"==typeof _r.onCommitFiberUnmount)try{_r.onCommitFiberUnmount(wr,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var n=t=t.next;do{var i=n,r=i.destroy;if(i=i.tag,void 0!==r)if(0!=(4&i))Tl(e,n);else{i=e;try{r()}catch(t){Al(i,t)}}n=n.next}while(n!==t)}break;case 1:if(hs(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Al(e,t)}break;case 5:hs(e);break;case 4:ws(t,e)}}function ms(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function bs(t){return 5===t.tag||3===t.tag||4===t.tag}function ys(t){t:{for(var e=t.return;null!==e;){if(bs(e))break t;e=e.return}throw Error(a(160))}var n=e;switch(e=n.stateNode,n.tag){case 5:var i=!1;break;case 3:case 4:e=e.containerInfo,i=!0;break;default:throw Error(a(161))}16&n.flags&&(bt(e,""),n.flags&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||bs(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break t}}i?vs(t,n,e):xs(t,n,e)}function vs(t,e,n){var i=t.tag,r=5===i||6===i;if(r)t=r?t.stateNode:t.stateNode.instance,e?8===n.nodeType?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(8===n.nodeType?(e=n.parentNode).insertBefore(t,n):(e=n).appendChild(t),null!=(n=n._reactRootContainer)||null!==e.onclick||(e.onclick=Fi));else if(4!==i&&null!==(t=t.child))for(vs(t,e,n),t=t.sibling;null!==t;)vs(t,e,n),t=t.sibling}function xs(t,e,n){var i=t.tag,r=5===i||6===i;if(r)t=r?t.stateNode:t.stateNode.instance,e?n.insertBefore(t,e):n.appendChild(t);else if(4!==i&&null!==(t=t.child))for(xs(t,e,n),t=t.sibling;null!==t;)xs(t,e,n),t=t.sibling}function ws(t,e){for(var n,i,r=e,o=!1;;){if(!o){o=r.return;t:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:i=!1;break t;case 3:case 4:n=n.containerInfo,i=!0;break t}o=o.return}o=!0}if(5===r.tag||6===r.tag){t:for(var s=t,l=r,c=l;;)if(gs(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break t;for(;null===c.sibling;){if(null===c.return||c.return===l)break t;c=c.return}c.sibling.return=c.return,c=c.sibling}i?(s=n,l=r.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(r.stateNode)}else if(4===r.tag){if(null!==r.child){n=r.stateNode.containerInfo,i=!0,r.child.return=r,r=r.child;continue}}else if(gs(t,r),null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;4===(r=r.return).tag&&(o=!1)}r.sibling.return=r.return,r=r.sibling}}function _s(t,e){switch(e.tag){case 0:case 11:case 14:case 15:case 22:var n=e.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var i=n=n.next;do{3==(3&i.tag)&&(t=i.destroy,i.destroy=void 0,void 0!==t&&t()),i=i.next}while(i!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=e.stateNode)){i=e.memoizedProps;var r=null!==t?t.memoizedProps:i;t=e.type;var o=e.updateQueue;if(e.updateQueue=null,null!==o){for(n[Xi]=i,"input"===t&&"radio"===i.type&&null!=i.name&&et(n,i),St(t,r),e=St(t,i),r=0;r<o.length;r+=2){var s=o[r],l=o[r+1];"style"===s?wt(n,l):"dangerouslySetInnerHTML"===s?mt(n,l):"children"===s?bt(n,l):x(n,s,l,e)}switch(t){case"input":nt(n,i);break;case"textarea":ct(n,i);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!i.multiple,null!=(o=i.value)?at(n,!!i.multiple,o,!1):t!==!!i.multiple&&(null!=i.defaultValue?at(n,!!i.multiple,i.defaultValue,!0):at(n,!!i.multiple,i.multiple?[]:"",!1))}}}return;case 6:if(null===e.stateNode)throw Error(a(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void((n=e.stateNode).hydrate&&(n.hydrate=!1,xe(n.containerInfo)));case 13:return null!==e.memoizedState&&(Bs=Br(),ps(e.child,!0)),void ks(e);case 19:return void ks(e);case 23:case 24:return void ps(e,null!==e.memoizedState)}throw Error(a(163))}function ks(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var n=t.stateNode;null===n&&(n=t.stateNode=new us),e.forEach((function(e){var i=jl.bind(null,t,e);n.has(e)||(n.add(e),e.then(i,i))}))}}function Ss(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var Es=Math.ceil,Os=w.ReactCurrentDispatcher,Cs=w.ReactCurrentOwner,Ps=0,Ms=null,Ls=null,Rs=0,Ts=0,Ns=sr(0),Ds=0,As=null,Is=0,js=0,Fs=0,zs=0,Vs=null,Bs=0,Hs=1/0;function Ws(){Hs=Br()+500}var Us,$s=null,Ys=!1,Ks=null,qs=null,Gs=!1,Qs=null,Xs=90,Js=[],Zs=[],tl=null,el=0,nl=null,il=-1,rl=0,ol=0,al=null,sl=!1;function ll(){return 0!=(48&Ps)?Br():-1!==il?il:il=Br()}function cl(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Hr()?1:2;if(0===rl&&(rl=Is),0!==qr.transition){0!==ol&&(ol=null!==Vs?Vs.pendingLanes:0),t=rl;var e=4186112&~ol;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Hr(),t=Fe(0!=(4&Ps)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),rl)}function ul(t,e,n){if(50<el)throw el=0,nl=null,Error(a(185));if(null===(t=hl(t,e)))return null;Be(t,e,n),t===Ms&&(Fs|=e,4===Ds&&pl(t,Rs));var i=Hr();1===e?0!=(8&Ps)&&0==(48&Ps)?gl(t):(dl(t,n),0===Ps&&(Ws(),Yr())):(0==(4&Ps)||98!==i&&99!==i||(null===tl?tl=new Set([t]):tl.add(t)),dl(t,n)),Vs=t}function hl(t,e){t.lanes|=e;var n=t.alternate;for(null!==n&&(n.lanes|=e),n=t,t=t.return;null!==t;)t.childLanes|=e,null!==(n=t.alternate)&&(n.childLanes|=e),n=t,t=t.return;return 3===n.tag?n.stateNode:null}function dl(t,e){for(var n=t.callbackNode,i=t.suspendedLanes,r=t.pingedLanes,o=t.expirationTimes,s=t.pendingLanes;0<s;){var l=31-He(s),c=1<<l,u=o[l];if(-1===u){if(0==(c&i)||0!=(c&r)){u=e,Ae(c);var h=De;o[l]=10<=h?u+250:6<=h?u+5e3:-1}}else u<=e&&(t.expiredLanes|=c);s&=~c}if(i=Ie(t,t===Ms?Rs:0),e=De,0===i)null!==n&&(n!==Ar&&Er(n),t.callbackNode=null,t.callbackPriority=0);else{if(null!==n){if(t.callbackPriority===e)return;n!==Ar&&Er(n)}15===e?(n=gl.bind(null,t),null===jr?(jr=[n],Fr=Sr(Lr,Kr)):jr.push(n),n=Ar):14===e?n=$r(99,gl.bind(null,t)):(n=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,t))}}(e),n=$r(n,fl.bind(null,t))),t.callbackPriority=e,t.callbackNode=n}}function fl(t){if(il=-1,ol=rl=0,0!=(48&Ps))throw Error(a(327));var e=t.callbackNode;if(Ll()&&t.callbackNode!==e)return null;var n=Ie(t,t===Ms?Rs:0);if(0===n)return null;var i=n,r=Ps;Ps|=16;var o=wl();for(Ms===t&&Rs===i||(Ws(),vl(t,i));;)try{Sl();break}catch(e){xl(t,e)}if(to(),Os.current=o,Ps=r,null!==Ls?i=0:(Ms=null,Rs=0,i=Ds),0!=(Is&Fs))vl(t,0);else if(0!==i){if(2===i&&(Ps|=64,t.hydrate&&(t.hydrate=!1,$i(t.containerInfo)),0!==(n=je(t))&&(i=_l(t,n))),1===i)throw e=As,vl(t,0),pl(t,n),dl(t,Br()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=n,i){case 0:case 1:throw Error(a(345));case 2:case 5:Cl(t);break;case 3:if(pl(t,n),(62914560&n)===n&&10<(i=Bs+500-Br())){if(0!==Ie(t,0))break;if(((r=t.suspendedLanes)&n)!==n){ll(),t.pingedLanes|=t.suspendedLanes&r;break}t.timeoutHandle=Wi(Cl.bind(null,t),i);break}Cl(t);break;case 4:if(pl(t,n),(4186112&n)===n)break;for(i=t.eventTimes,r=-1;0<n;){var s=31-He(n);o=1<<s,(s=i[s])>r&&(r=s),n&=~o}if(n=r,10<(n=(120>(n=Br()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Es(n/1960))-n)){t.timeoutHandle=Wi(Cl.bind(null,t),n);break}Cl(t);break;default:throw Error(a(329))}}return dl(t,Br()),t.callbackNode===e?fl.bind(null,t):null}function pl(t,e){for(e&=~zs,e&=~Fs,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-He(e),i=1<<n;t[n]=-1,e&=~i}}function gl(t){if(0!=(48&Ps))throw Error(a(327));if(Ll(),t===Ms&&0!=(t.expiredLanes&Rs)){var e=Rs,n=_l(t,e);0!=(Is&Fs)&&(n=_l(t,e=Ie(t,e)))}else n=_l(t,e=Ie(t,0));if(0!==t.tag&&2===n&&(Ps|=64,t.hydrate&&(t.hydrate=!1,$i(t.containerInfo)),0!==(e=je(t))&&(n=_l(t,e))),1===n)throw n=As,vl(t,0),pl(t,e),dl(t,Br()),n;return t.finishedWork=t.current.alternate,t.finishedLanes=e,Cl(t),dl(t,Br()),null}function ml(t,e){var n=Ps;Ps|=1;try{return t(e)}finally{0===(Ps=n)&&(Ws(),Yr())}}function bl(t,e){cr(Ns,Ts),Ts|=e,Is|=e}function yl(){Ts=Ns.current,lr(Ns)}function vl(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(-1!==n&&(t.timeoutHandle=-1,Ui(n)),null!==Ls)for(n=Ls.return;null!==n;){var i=n;switch(i.tag){case 1:null!=(i=i.type.childContextTypes)&&mr();break;case 3:No(),lr(dr),lr(hr),qo();break;case 5:Ao(i);break;case 4:No();break;case 13:case 19:lr(Io);break;case 10:eo(i);break;case 23:case 24:yl()}n=n.return}Ms=t,Ls=Bl(t.current,null),Rs=Ts=Is=e,Ds=0,As=null,zs=Fs=js=0}function xl(t,e){for(;;){var n=Ls;try{if(to(),Go.current=La,ea){for(var i=Jo.memoizedState;null!==i;){var r=i.queue;null!==r&&(r.pending=null),i=i.next}ea=!1}if(Xo=0,ta=Zo=Jo=null,na=!1,Cs.current=null,null===n||null===n.return){Ds=1,As=e,Ls=null;break}t:{var o=t,a=n.return,s=n,l=e;if(e=Rs,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.lanes=u.lanes):(s.updateQueue=null,s.memoizedState=null)}var h=0!=(1&Io.current),d=a;do{var f;if(f=13===d.tag){var p=d.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var g=d.memoizedProps;f=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!h)}}if(f){var m=d.updateQueue;if(null===m){var b=new Set;b.add(c),d.updateQueue=b}else m.add(c);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=lo(-1,1);y.tag=2,co(s,y)}s.lanes|=1;break t}l=void 0,s=e;var v=o.pingCache;if(null===v?(v=o.pingCache=new ss,l=new Set,v.set(c,l)):void 0===(l=v.get(c))&&(l=new Set,v.set(c,l)),!l.has(s)){l.add(s);var x=Il.bind(null,o,c,s);c.then(x,x)}d.flags|=4096,d.lanes=e;break t}d=d.return}while(null!==d);l=Error((K(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ds&&(Ds=2),l=os(l,s),d=a;do{switch(d.tag){case 3:o=l,d.flags|=4096,e&=-e,d.lanes|=e,uo(d,ls(0,o,e));break t;case 1:o=l;var w=d.type,_=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===qs||!qs.has(_)))){d.flags|=4096,e&=-e,d.lanes|=e,uo(d,cs(d,o,e));break t}}d=d.return}while(null!==d)}Ol(n)}catch(t){e=t,Ls===n&&null!==n&&(Ls=n=n.return);continue}break}}function wl(){var t=Os.current;return Os.current=La,null===t?La:t}function _l(t,e){var n=Ps;Ps|=16;var i=wl();for(Ms===t&&Rs===e||vl(t,e);;)try{kl();break}catch(e){xl(t,e)}if(to(),Ps=n,Os.current=i,null!==Ls)throw Error(a(261));return Ms=null,Rs=0,Ds}function kl(){for(;null!==Ls;)El(Ls)}function Sl(){for(;null!==Ls&&!Or();)El(Ls)}function El(t){var e=Us(t.alternate,t,Ts);t.memoizedProps=t.pendingProps,null===e?Ol(t):Ls=e,Cs.current=null}function Ol(t){var e=t;do{var n=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(n=is(n,e,Ts)))return void(Ls=n);if(24!==(n=e).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ts)||0==(4&n.mode)){for(var i=0,r=n.child;null!==r;)i|=r.lanes|r.childLanes,r=r.sibling;n.childLanes=i}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(n=rs(e)))return n.flags&=2047,void(Ls=n);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(Ls=e);Ls=e=t}while(null!==e);0===Ds&&(Ds=5)}function Cl(t){var e=Hr();return Ur(99,Pl.bind(null,t,e)),null}function Pl(t,e){do{Ll()}while(null!==Qs);if(0!=(48&Ps))throw Error(a(327));var n=t.finishedWork;if(null===n)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(a(177));t.callbackNode=null;var i=n.lanes|n.childLanes,r=i,o=t.pendingLanes&~r;t.pendingLanes=r,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=r,t.mutableReadLanes&=r,t.entangledLanes&=r,r=t.entanglements;for(var s=t.eventTimes,l=t.expirationTimes;0<o;){var c=31-He(o),u=1<<c;r[c]=0,s[c]=-1,l[c]=-1,o&=~u}if(null!==tl&&0==(24&i)&&tl.has(t)&&tl.delete(t),t===Ms&&(Ls=Ms=null,Rs=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){if(r=Ps,Ps|=32,Cs.current=null,zi=Ke,gi(s=pi())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else t:if(l=(l=s.ownerDocument)&&l.defaultView||window,(u=l.getSelection&&l.getSelection())&&0!==u.rangeCount){l=u.anchorNode,o=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{l.nodeType,c.nodeType}catch(t){l=null;break t}var h=0,d=-1,f=-1,p=0,g=0,m=s,b=null;e:for(;;){for(var y;m!==l||0!==o&&3!==m.nodeType||(d=h+o),m!==c||0!==u&&3!==m.nodeType||(f=h+u),3===m.nodeType&&(h+=m.nodeValue.length),null!==(y=m.firstChild);)b=m,m=y;for(;;){if(m===s)break e;if(b===l&&++p===o&&(d=h),b===c&&++g===u&&(f=h),null!==(y=m.nextSibling))break;b=(m=b).parentNode}m=y}l=-1===d||-1===f?null:{start:d,end:f}}else l=null;l=l||{start:0,end:0}}else l=null;Vi={focusedElem:s,selectionRange:l},Ke=!1,al=null,sl=!1,$s=i;do{try{Ml()}catch(t){if(null===$s)throw Error(a(330));Al($s,t),$s=$s.nextEffect}}while(null!==$s);al=null,$s=i;do{try{for(s=t;null!==$s;){var v=$s.flags;if(16&v&&bt($s.stateNode,""),128&v){var x=$s.alternate;if(null!==x){var w=x.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&v){case 2:ys($s),$s.flags&=-3;break;case 6:ys($s),$s.flags&=-3,_s($s.alternate,$s);break;case 1024:$s.flags&=-1025;break;case 1028:$s.flags&=-1025,_s($s.alternate,$s);break;case 4:_s($s.alternate,$s);break;case 8:ws(s,l=$s);var _=l.alternate;ms(l),null!==_&&ms(_)}$s=$s.nextEffect}}catch(t){if(null===$s)throw Error(a(330));Al($s,t),$s=$s.nextEffect}}while(null!==$s);if(w=Vi,x=pi(),v=w.focusedElem,s=w.selectionRange,x!==v&&v&&v.ownerDocument&&fi(v.ownerDocument.documentElement,v)){null!==s&&gi(v)&&(x=s.start,void 0===(w=s.end)&&(w=x),"selectionStart"in v?(v.selectionStart=x,v.selectionEnd=Math.min(w,v.value.length)):(w=(x=v.ownerDocument||document)&&x.defaultView||window).getSelection&&(w=w.getSelection(),l=v.textContent.length,_=Math.min(s.start,l),s=void 0===s.end?_:Math.min(s.end,l),!w.extend&&_>s&&(l=s,s=_,_=l),l=di(v,_),o=di(v,s),l&&o&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==o.node||w.focusOffset!==o.offset)&&((x=x.createRange()).setStart(l.node,l.offset),w.removeAllRanges(),_>s?(w.addRange(x),w.extend(o.node,o.offset)):(x.setEnd(o.node,o.offset),w.addRange(x))))),x=[];for(w=v;w=w.parentNode;)1===w.nodeType&&x.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<x.length;v++)(w=x[v]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Ke=!!zi,Vi=zi=null,t.current=n,$s=i;do{try{for(v=t;null!==$s;){var k=$s.flags;if(36&k&&fs(v,$s.alternate,$s),128&k){x=void 0;var S=$s.ref;if(null!==S){var E=$s.stateNode;$s.tag,x=E,"function"==typeof S?S(x):S.current=x}}$s=$s.nextEffect}}catch(t){if(null===$s)throw Error(a(330));Al($s,t),$s=$s.nextEffect}}while(null!==$s);$s=null,Ir(),Ps=r}else t.current=n;if(Gs)Gs=!1,Qs=t,Xs=e;else for($s=i;null!==$s;)e=$s.nextEffect,$s.nextEffect=null,8&$s.flags&&((k=$s).sibling=null,k.stateNode=null),$s=e;if(0===(i=t.pendingLanes)&&(qs=null),1===i?t===nl?el++:(el=0,nl=t):el=0,n=n.stateNode,_r&&"function"==typeof _r.onCommitFiberRoot)try{_r.onCommitFiberRoot(wr,n,void 0,64==(64&n.current.flags))}catch(t){}if(dl(t,Br()),Ys)throw Ys=!1,t=Ks,Ks=null,t;return 0!=(8&Ps)||Yr(),null}function Ml(){for(;null!==$s;){var t=$s.alternate;sl||null===al||(0!=(8&$s.flags)?Jt($s,al)&&(sl=!0):13===$s.tag&&Ss(t,$s)&&Jt($s,al)&&(sl=!0));var e=$s.flags;0!=(256&e)&&ds(t,$s),0==(512&e)||Gs||(Gs=!0,$r(97,(function(){return Ll(),null}))),$s=$s.nextEffect}}function Ll(){if(90!==Xs){var t=97<Xs?97:Xs;return Xs=90,Ur(t,Nl)}return!1}function Rl(t,e){Js.push(e,t),Gs||(Gs=!0,$r(97,(function(){return Ll(),null})))}function Tl(t,e){Zs.push(e,t),Gs||(Gs=!0,$r(97,(function(){return Ll(),null})))}function Nl(){if(null===Qs)return!1;var t=Qs;if(Qs=null,0!=(48&Ps))throw Error(a(331));var e=Ps;Ps|=32;var n=Zs;Zs=[];for(var i=0;i<n.length;i+=2){var r=n[i],o=n[i+1],s=r.destroy;if(r.destroy=void 0,"function"==typeof s)try{s()}catch(t){if(null===o)throw Error(a(330));Al(o,t)}}for(n=Js,Js=[],i=0;i<n.length;i+=2){r=n[i],o=n[i+1];try{var l=r.create;r.destroy=l()}catch(t){if(null===o)throw Error(a(330));Al(o,t)}}for(l=t.current.firstEffect;null!==l;)t=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=t;return Ps=e,Yr(),!0}function Dl(t,e,n){co(t,e=ls(0,e=os(n,e),1)),e=ll(),null!==(t=hl(t,1))&&(Be(t,1,e),dl(t,e))}function Al(t,e){if(3===t.tag)Dl(t,t,e);else for(var n=t.return;null!==n;){if(3===n.tag){Dl(n,t,e);break}if(1===n.tag){var i=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===qs||!qs.has(i))){var r=cs(n,t=os(e,t),1);if(co(n,r),r=ll(),null!==(n=hl(n,1)))Be(n,1,r),dl(n,r);else if("function"==typeof i.componentDidCatch&&(null===qs||!qs.has(i)))try{i.componentDidCatch(e,t)}catch(t){}break}}n=n.return}}function Il(t,e,n){var i=t.pingCache;null!==i&&i.delete(e),e=ll(),t.pingedLanes|=t.suspendedLanes&n,Ms===t&&(Rs&n)===n&&(4===Ds||3===Ds&&(62914560&Rs)===Rs&&500>Br()-Bs?vl(t,0):zs|=n),dl(t,e)}function jl(t,e){var n=t.stateNode;null!==n&&n.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Hr()?1:2:(0===rl&&(rl=Is),0===(e=ze(62914560&~rl))&&(e=4194304))),n=ll(),null!==(t=hl(t,e))&&(Be(t,e,n),dl(t,n))}function Fl(t,e,n,i){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zl(t,e,n,i){return new Fl(t,e,n,i)}function Vl(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Bl(t,e){var n=t.alternate;return null===n?((n=zl(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Hl(t,e,n,i,r,o){var s=2;if(i=t,"function"==typeof t)Vl(t)&&(s=1);else if("string"==typeof t)s=5;else t:switch(t){case S:return Wl(n.children,r,o,e);case I:s=8,r|=16;break;case E:s=8,r|=1;break;case O:return(t=zl(12,n,e,8|r)).elementType=O,t.type=O,t.lanes=o,t;case L:return(t=zl(13,n,e,r)).type=L,t.elementType=L,t.lanes=o,t;case R:return(t=zl(19,n,e,r)).elementType=R,t.lanes=o,t;case j:return Ul(n,r,o,e);case F:return(t=zl(24,n,e,r)).elementType=F,t.lanes=o,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case C:s=10;break t;case P:s=9;break t;case M:s=11;break t;case T:s=14;break t;case N:s=16,i=null;break t;case D:s=22;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=zl(s,n,e,r)).elementType=t,e.type=i,e.lanes=o,e}function Wl(t,e,n,i){return(t=zl(7,t,i,e)).lanes=n,t}function Ul(t,e,n,i){return(t=zl(23,t,i,e)).elementType=j,t.lanes=n,t}function $l(t,e,n){return(t=zl(6,t,null,e)).lanes=n,t}function Yl(t,e,n){return(e=zl(4,null!==t.children?t.children:[],t.key,e)).lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Kl(t,e,n){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ve(0),this.expirationTimes=Ve(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ve(0),this.mutableSourceEagerHydrationData=null}function ql(t,e,n,i){var r=e.current,o=ll(),s=cl(r);t:if(n){e:{if(Gt(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break e;case 1:if(gr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(gr(c)){n=yr(n,c,l);break t}}n=l}else n=ur;return null===e.context?e.context=n:e.pendingContext=n,(e=lo(o,s)).payload={element:t},null!==(i=void 0===i?null:i)&&(e.callback=i),co(r,e),ul(r,s,o),s}function Gl(t){return(t=t.current).child?(t.child.tag,t.child.stateNode):null}function Ql(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var n=t.retryLane;t.retryLane=0!==n&&n<e?n:e}}function Xl(t,e){Ql(t,e),(t=t.alternate)&&Ql(t,e)}function Jl(t,e,n){var i=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Kl(t,e,null!=n&&!0===n.hydrate),e=zl(3,null,null,2===e?7:1===e?3:0),n.current=e,e.stateNode=n,ao(e),t[Ji]=n.current,Li(8===t.nodeType?t.parentNode:t),i)for(t=0;t<i.length;t++){var r=(e=i[t])._getVersion;r=r(e._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[e,r]:n.mutableSourceEagerHydrationData.push(e,r)}this._internalRoot=n}function Zl(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function tc(t,e,n,i,r){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof r){var s=r;r=function(){var t=Gl(a);s.call(t)}}ql(e,a,t,r)}else{if(o=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new Jl(t,0,e?{hydrate:!0}:void 0)}(n,i),a=o._internalRoot,"function"==typeof r){var l=r;r=function(){var t=Gl(a);l.call(t)}}!function(t,e){var n=Ps;Ps&=-2,Ps|=8;try{t(e)}finally{0===(Ps=n)&&(Ws(),Yr())}}((function(){ql(e,a,t,r)}))}return Gl(a)}Us=function(t,e,n){var i=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||dr.current)Aa=!0;else{if(0==(n&i)){switch(Aa=!1,e.tag){case 3:$a(e),Yo();break;case 5:Do(e);break;case 1:gr(e.type)&&vr(e);break;case 4:To(e,e.stateNode.containerInfo);break;case 10:i=e.memoizedProps.value;var r=e.type._context;cr(Qr,r._currentValue),r._currentValue=i;break;case 13:if(null!==e.memoizedState)return 0!=(n&e.child.childLanes)?Qa(t,e,n):(cr(Io,1&Io.current),null!==(e=es(t,e,n))?e.sibling:null);cr(Io,1&Io.current);break;case 19:if(i=0!=(n&e.childLanes),0!=(64&t.flags)){if(i)return ts(t,e,n);e.flags|=64}if(null!==(r=e.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),cr(Io,Io.current),i)break;return null;case 23:case 24:return e.lanes=0,Va(t,e,n)}return es(t,e,n)}Aa=0!=(16384&t.flags)}else Aa=!1;switch(e.lanes=0,e.tag){case 2:if(i=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,r=pr(e,hr.current),io(e,n),r=oa(null,e,i,t,r,n),e.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,gr(i)){var o=!0;vr(e)}else o=!1;e.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,ao(e);var s=i.getDerivedStateFromProps;"function"==typeof s&&go(e,i,s,t),r.updater=mo,e.stateNode=r,r._reactInternals=e,xo(e,i,t,n),e=Ua(null,e,i,!0,o,n)}else e.tag=0,Ia(null,e,r,n),e=e.child;return e;case 16:r=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,r=(o=r._init)(r._payload),e.type=r,o=e.tag=function(t){if("function"==typeof t)return Vl(t)?1:0;if(null!=t){if((t=t.$$typeof)===M)return 11;if(t===T)return 14}return 2}(r),t=Gr(r,t),o){case 0:e=Ha(null,e,r,t,n);break t;case 1:e=Wa(null,e,r,t,n);break t;case 11:e=ja(null,e,r,t,n);break t;case 14:e=Fa(null,e,r,Gr(r.type,t),i,n);break t}throw Error(a(306,r,""))}return e;case 0:return i=e.type,r=e.pendingProps,Ha(t,e,i,r=e.elementType===i?r:Gr(i,r),n);case 1:return i=e.type,r=e.pendingProps,Wa(t,e,i,r=e.elementType===i?r:Gr(i,r),n);case 3:if($a(e),i=e.updateQueue,null===t||null===i)throw Error(a(282));if(i=e.pendingProps,r=null!==(r=e.memoizedState)?r.element:null,so(t,e),ho(e,i,null,n),(i=e.memoizedState.element)===r)Yo(),e=es(t,e,n);else{if((o=(r=e.stateNode).hydrate)&&(zo=Yi(e.stateNode.containerInfo.firstChild),Fo=e,o=Vo=!0),o){if(null!=(t=r.mutableSourceEagerHydrationData))for(r=0;r<t.length;r+=2)(o=t[r])._workInProgressVersionPrimary=t[r+1],Ko.push(o);for(n=Oo(e,null,i,n),e.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(t,e,i,n),Yo();e=e.child}return e;case 5:return Do(e),null===t&&Wo(e),i=e.type,r=e.pendingProps,o=null!==t?t.memoizedProps:null,s=r.children,Hi(i,r)?s=null:null!==o&&Hi(i,o)&&(e.flags|=16),Ba(t,e),Ia(t,e,s,n),e.child;case 6:return null===t&&Wo(e),null;case 13:return Qa(t,e,n);case 4:return To(e,e.stateNode.containerInfo),i=e.pendingProps,null===t?e.child=Eo(e,null,i,n):Ia(t,e,i,n),e.child;case 11:return i=e.type,r=e.pendingProps,ja(t,e,i,r=e.elementType===i?r:Gr(i,r),n);case 7:return Ia(t,e,e.pendingProps,n),e.child;case 8:case 12:return Ia(t,e,e.pendingProps.children,n),e.child;case 10:t:{i=e.type._context,r=e.pendingProps,s=e.memoizedProps,o=r.value;var l=e.type._context;if(cr(Qr,l._currentValue),l._currentValue=o,null!==s)if(l=s.value,0==(o=li(l,o)?0:0|("function"==typeof i._calculateChangedBits?i._calculateChangedBits(l,o):1073741823))){if(s.children===r.children&&!dr.current){e=es(t,e,n);break t}}else for(null!==(l=e.child)&&(l.return=e);null!==l;){var c=l.dependencies;if(null!==c){s=l.child;for(var u=c.firstContext;null!==u;){if(u.context===i&&0!=(u.observedBits&o)){1===l.tag&&((u=lo(-1,n&-n)).tag=2,co(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),no(l.return,n),c.lanes|=n;break}u=u.next}}else s=10===l.tag&&l.type===e.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===e){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Ia(t,e,r.children,n),e=e.child}return e;case 9:return r=e.type,i=(o=e.pendingProps).children,io(e,n),i=i(r=ro(r,o.unstable_observedBits)),e.flags|=1,Ia(t,e,i,n),e.child;case 14:return o=Gr(r=e.type,e.pendingProps),Fa(t,e,r,o=Gr(r.type,o),i,n);case 15:return za(t,e,e.type,e.pendingProps,i,n);case 17:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:Gr(i,r),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,gr(i)?(t=!0,vr(e)):t=!1,io(e,n),yo(e,i,r),xo(e,i,r,n),Ua(null,e,i,!0,t,n);case 19:return ts(t,e,n);case 23:case 24:return Va(t,e,n)}throw Error(a(156,e.tag))},Jl.prototype.render=function(t){ql(t,this._internalRoot,null,null)},Jl.prototype.unmount=function(){var t=this._internalRoot,e=t.containerInfo;ql(null,t,null,(function(){e[Ji]=null}))},Zt=function(t){13===t.tag&&(ul(t,4,ll()),Xl(t,4))},te=function(t){13===t.tag&&(ul(t,67108864,ll()),Xl(t,67108864))},ee=function(t){if(13===t.tag){var e=ll(),n=cl(t);ul(t,n,e),Xl(t,n)}},ne=function(t,e){return e()},Ot=function(t,e,n){switch(e){case"input":if(nt(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var i=n[e];if(i!==t&&i.form===t.form){var r=ir(i);if(!r)throw Error(a(90));X(i),nt(i,r)}}}break;case"textarea":ct(t,n);break;case"select":null!=(e=n.value)&&at(t,!!n.multiple,e,!1)}},Tt=ml,Nt=function(t,e,n,i,r){var o=Ps;Ps|=4;try{return Ur(98,t.bind(null,e,n,i,r))}finally{0===(Ps=o)&&(Ws(),Yr())}},Dt=function(){0==(49&Ps)&&(function(){if(null!==tl){var t=tl;tl=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,dl(t,Br())}))}Yr()}(),Ll())},At=function(t,e){var n=Ps;Ps|=2;try{return t(e)}finally{0===(Ps=n)&&(Ws(),Yr())}};var ec={findFiberByHostInstance:tr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},nc={bundleType:ec.bundleType,version:ec.version,rendererPackageName:ec.rendererPackageName,rendererConfig:ec.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=function(t){if(t=function(t){var e=t.alternate;if(!e){if(null===(e=Gt(t)))throw Error(a(188));return e!==t?null:t}for(var n=t,i=e;;){var r=n.return;if(null===r)break;var o=r.alternate;if(null===o){if(null!==(i=r.return)){n=i;continue}break}if(r.child===o.child){for(o=r.child;o;){if(o===n)return Xt(r),t;if(o===i)return Xt(r),e;o=o.sibling}throw Error(a(188))}if(n.return!==i.return)n=r,i=o;else{for(var s=!1,l=r.child;l;){if(l===n){s=!0,n=r,i=o;break}if(l===i){s=!0,i=r,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,i=r;break}if(l===i){s=!0,i=o,n=r;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==i)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?t:e}(t),!t)return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}(t))?null:t.stateNode},findFiberByHostInstance:ec.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{wr=ic.inject(nc),_r=ic}catch(gt){}}e.render=function(t,e,n){if(!Zl(e))throw Error(a(200));return tc(null,t,e,!1,n)},e.unstable_batchedUpdates=ml},935:(t,e,n)=>{!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(448)},921:(t,e)=>{var n="function"==typeof Symbol&&Symbol.for,i=n?Symbol.for("react.element"):60103,r=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,h=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,b=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,v=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function w(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case i:switch(t=t.type){case u:case h:case o:case s:case a:case f:return t;default:switch(t=t&&t.$$typeof){case c:case d:case m:case g:case l:return t;default:return e}}case r:return e}}}function _(t){return w(t)===h}e.AsyncMode=u,e.ConcurrentMode=h,e.ContextConsumer=c,e.ContextProvider=l,e.Element=i,e.ForwardRef=d,e.Fragment=o,e.Lazy=m,e.Memo=g,e.Portal=r,e.Profiler=s,e.StrictMode=a,e.Suspense=f,e.isAsyncMode=function(t){return _(t)||w(t)===u},e.isConcurrentMode=_,e.isContextConsumer=function(t){return w(t)===c},e.isContextProvider=function(t){return w(t)===l},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===i},e.isForwardRef=function(t){return w(t)===d},e.isFragment=function(t){return w(t)===o},e.isLazy=function(t){return w(t)===m},e.isMemo=function(t){return w(t)===g},e.isPortal=function(t){return w(t)===r},e.isProfiler=function(t){return w(t)===s},e.isStrictMode=function(t){return w(t)===a},e.isSuspense=function(t){return w(t)===f},e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===o||t===h||t===s||t===a||t===f||t===p||"object"==typeof t&&null!==t&&(t.$$typeof===m||t.$$typeof===g||t.$$typeof===l||t.$$typeof===c||t.$$typeof===d||t.$$typeof===y||t.$$typeof===v||t.$$typeof===x||t.$$typeof===b)},e.typeOf=w},864:(t,e,n)=>{t.exports=n(921)},359:(t,e)=>{Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},973:(t,e,n)=>{n(359)},408:(t,e,n)=>{var i=n(418),r=60103,o=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,s=60110,l=60112;e.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var h=Symbol.for;r=h("react.element"),o=h("react.portal"),e.Fragment=h("react.fragment"),e.StrictMode=h("react.strict_mode"),e.Profiler=h("react.profiler"),a=h("react.provider"),s=h("react.context"),l=h("react.forward_ref"),e.Suspense=h("react.suspense"),c=h("react.memo"),u=h("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function f(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}function b(){}function y(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(f(85));this.updater.enqueueSetState(this,t,e,"setState")},m.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},b.prototype=m.prototype;var v=y.prototype=new b;v.constructor=y,i(v,m.prototype),v.isPureReactComponent=!0;var x={current:null},w=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function k(t,e,n){var i,o={},a=null,s=null;if(null!=e)for(i in void 0!==e.ref&&(s=e.ref),void 0!==e.key&&(a=""+e.key),e)w.call(e,i)&&!_.hasOwnProperty(i)&&(o[i]=e[i]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(t&&t.defaultProps)for(i in l=t.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:r,type:t,key:a,ref:s,props:o,_owner:x.current}}function S(t){return"object"==typeof t&&null!==t&&t.$$typeof===r}var E=/\/+/g;function O(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function C(t,e,n,i,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case r:case o:l=!0}}if(l)return a=a(l=t),t=""===i?"."+O(l,0):i,Array.isArray(a)?(n="",null!=t&&(n=t.replace(E,"$&/")+"/"),C(a,e,n,"",(function(t){return t}))):null!=a&&(S(a)&&(a=function(t,e){return{$$typeof:r,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+t)),e.push(a)),1;if(l=0,i=""===i?".":i+":",Array.isArray(t))for(var c=0;c<t.length;c++){var u=i+O(s=t[c],c);l+=C(s,e,n,u,a)}else if(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=d&&t[d]||t["@@iterator"])?t:null}(t),"function"==typeof u)for(t=u.call(t),c=0;!(s=t.next()).done;)l+=C(s=s.value,e,n,u=i+O(s,c++),a);else if("object"===s)throw e=""+t,Error(f(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return l}function P(t,e,n){if(null==t)return t;var i=[],r=0;return C(t,i,"","",(function(t){return e.call(n,t,r++)})),i}function M(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var L={current:null};function R(){var t=L.current;if(null===t)throw Error(f(321));return t}var T={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:i};e.Children={map:P,forEach:function(t,e,n){P(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return P(t,(function(){e++})),e},toArray:function(t){return P(t,(function(t){return t}))||[]},only:function(t){if(!S(t))throw Error(f(143));return t}},e.Component=m,e.PureComponent=y,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,e.cloneElement=function(t,e,n){if(null==t)throw Error(f(267,t));var o=i({},t.props),a=t.key,s=t.ref,l=t._owner;if(null!=e){if(void 0!==e.ref&&(s=e.ref,l=x.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var c=t.type.defaultProps;for(u in e)w.call(e,u)&&!_.hasOwnProperty(u)&&(o[u]=void 0===e[u]&&void 0!==c?c[u]:e[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){c=Array(u);for(var h=0;h<u;h++)c[h]=arguments[h+2];o.children=c}return{$$typeof:r,type:t.type,key:a,ref:s,props:o,_owner:l}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:s,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=k,e.createFactory=function(t){var e=k.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:l,render:t}},e.isValidElement=S,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:M}},e.memo=function(t,e){return{$$typeof:c,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return R().useCallback(t,e)},e.useContext=function(t,e){return R().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return R().useEffect(t,e)},e.useImperativeHandle=function(t,e,n){return R().useImperativeHandle(t,e,n)},e.useLayoutEffect=function(t,e){return R().useLayoutEffect(t,e)},e.useMemo=function(t,e){return R().useMemo(t,e)},e.useReducer=function(t,e,n){return R().useReducer(t,e,n)},e.useRef=function(t){return R().useRef(t)},e.useState=function(t){return R().useState(t)},e.version="17.0.2"},294:(t,e,n)=>{t.exports=n(408)},53:(t,e)=>{var n,i,r,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();e.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,h=function(){if(null!==c)try{var t=e.unstable_now();c(!0,t),c=null}catch(t){throw setTimeout(h,0),t}};n=function(t){null!==c?setTimeout(n,0,t):(c=t,setTimeout(h,0))},i=function(t,e){u=setTimeout(t,e)},r=function(){clearTimeout(u)},e.unstable_shouldYield=function(){return!1},o=e.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,b=-1,y=5,v=0;e.unstable_shouldYield=function(){return e.unstable_now()>=v},o=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<t?Math.floor(1e3/t):5};var x=new MessageChannel,w=x.port2;x.port1.onmessage=function(){if(null!==m){var t=e.unstable_now();v=t+y;try{m(!0,t)?w.postMessage(null):(g=!1,m=null)}catch(t){throw w.postMessage(null),t}}else g=!1},n=function(t){m=t,g||(g=!0,w.postMessage(null))},i=function(t,n){b=d((function(){t(e.unstable_now())}),n)},r=function(){f(b),b=-1}}function _(t,e){var n=t.length;t.push(e);t:for(;;){var i=n-1>>>1,r=t[i];if(!(void 0!==r&&0<E(r,e)))break t;t[i]=e,t[n]=r,n=i}}function k(t){return void 0===(t=t[0])?null:t}function S(t){var e=t[0];if(void 0!==e){var n=t.pop();if(n!==e){t[0]=n;t:for(var i=0,r=t.length;i<r;){var o=2*(i+1)-1,a=t[o],s=o+1,l=t[s];if(void 0!==a&&0>E(a,n))void 0!==l&&0>E(l,a)?(t[i]=l,t[s]=n,i=s):(t[i]=a,t[o]=n,i=o);else{if(!(void 0!==l&&0>E(l,n)))break t;t[i]=l,t[s]=n,i=s}}}return e}return null}function E(t,e){var n=t.sortIndex-e.sortIndex;return 0!==n?n:t.id-e.id}var O=[],C=[],P=1,M=null,L=3,R=!1,T=!1,N=!1;function D(t){for(var e=k(C);null!==e;){if(null===e.callback)S(C);else{if(!(e.startTime<=t))break;S(C),e.sortIndex=e.expirationTime,_(O,e)}e=k(C)}}function A(t){if(N=!1,D(t),!T)if(null!==k(O))T=!0,n(I);else{var e=k(C);null!==e&&i(A,e.startTime-t)}}function I(t,n){T=!1,N&&(N=!1,r()),R=!0;var o=L;try{for(D(n),M=k(O);null!==M&&(!(M.expirationTime>n)||t&&!e.unstable_shouldYield());){var a=M.callback;if("function"==typeof a){M.callback=null,L=M.priorityLevel;var s=a(M.expirationTime<=n);n=e.unstable_now(),"function"==typeof s?M.callback=s:M===k(O)&&S(O),D(n)}else S(O);M=k(O)}if(null!==M)var l=!0;else{var c=k(C);null!==c&&i(A,c.startTime-n),l=!1}return l}finally{M=null,L=o,R=!1}}var j=o;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){T||R||(T=!0,n(I))},e.unstable_getCurrentPriorityLevel=function(){return L},e.unstable_getFirstCallbackNode=function(){return k(O)},e.unstable_next=function(t){switch(L){case 1:case 2:case 3:var e=3;break;default:e=L}var n=L;L=e;try{return t()}finally{L=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=j,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=L;L=t;try{return e()}finally{L=n}},e.unstable_scheduleCallback=function(t,o,a){var s=e.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,t){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return t={id:P++,callback:o,priorityLevel:t,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(t.sortIndex=a,_(C,t),null===k(O)&&t===k(C)&&(N?r():N=!0,i(A,a-s))):(t.sortIndex=l,_(O,t),T||R||(T=!0,n(I))),t},e.unstable_wrapCallback=function(t){var e=L;return function(){var n=L;L=e;try{return t.apply(this,arguments)}finally{L=n}}}},840:(t,e,n)=>{t.exports=n(53)},250:(t,e,n)=>{var i=n(294),r="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},o=i.useState,a=i.useEffect,s=i.useLayoutEffect,l=i.useDebugValue;function c(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!r(t,n)}catch(t){return!0}}var u="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(t,e){return e()}:function(t,e){var n=e(),i=o({inst:{value:n,getSnapshot:e}}),r=i[0].inst,u=i[1];return s((function(){r.value=n,r.getSnapshot=e,c(r)&&u({inst:r})}),[t,n,e]),a((function(){return c(r)&&u({inst:r}),t((function(){c(r)&&u({inst:r})}))}),[t]),l(n),n};e.useSyncExternalStore=void 0!==i.useSyncExternalStore?i.useSyncExternalStore:u},139:(t,e,n)=>{var i=n(294),r=n(688),o="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},a=r.useSyncExternalStore,s=i.useRef,l=i.useEffect,c=i.useMemo,u=i.useDebugValue;e.useSyncExternalStoreWithSelector=function(t,e,n,i,r){var h=s(null);if(null===h.current){var d={hasValue:!1,value:null};h.current=d}else d=h.current;h=c((function(){function t(t){if(!l){if(l=!0,a=t,t=i(t),void 0!==r&&d.hasValue){var e=d.value;if(r(e,t))return s=e}return s=t}if(e=s,o(a,t))return e;var n=i(t);return void 0!==r&&r(e,n)?e:(a=t,s=n)}var a,s,l=!1,c=void 0===n?null:n;return[function(){return t(e())},null===c?void 0:function(){return t(c())}]}),[e,n,i,r]);var f=a(t,h[0],h[1]);return l((function(){d.hasValue=!0,d.value=f}),[f]),u(f),f}},688:(t,e,n)=>{t.exports=n(250)},798:(t,e,n)=>{t.exports=n(139)}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}(()=>{var t=n(294),e=n(935);var i;function r(){return r=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r.apply(this,arguments)}const o=function(e){return t.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",width:10.605,height:15.555},e),i||(i=t.createElement("path",{d:"m2.828 15.555 7.777-7.779L2.828 0 0 2.828l4.949 4.948L0 12.727l2.828 2.828z"})))};var a=n(688),s=n(798);let l=function(t){t()};const c=()=>l,u=t.createContext(null);function h(){return(0,t.useContext)(u)}let d=()=>{throw new Error("uSES not initialized!")};const f=(t,e)=>t===e;function p(e=u){const n=e===u?h:()=>(0,t.useContext)(e);return function(e,i=f){const{store:r,subscription:o,getServerState:a}=n(),s=d(o.addNestedSub,r.getState,a||r.getState,e,i);return(0,t.useDebugValue)(s),s}}const g=p();n(679),n(973);const m={notify(){},get:()=>[]};const b="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?t.useLayoutEffect:t.useEffect;let y=null;function v(e=u){const n=e===u?h:()=>(0,t.useContext)(e);return function(){const{store:t}=n();return t}}const x=v();function w(t=u){const e=t===u?x:v(t);return function(){return e().dispatch}}const _=w();var k,S;k=s.useSyncExternalStoreWithSelector,d=k,(t=>{y=t})(a.useSyncExternalStore),S=e.unstable_batchedUpdates,l=S;var E=_,O=g;const C=function(){function t(){this.apiURL="https://raw.githubusercontent.com/abdelrhman-arnos/analysis-fe-challenge/master/data.json"}return t.prototype.fetchData=function(){return fetch(this.apiURL)},t}();var P,M,L,R,T,N,D,A,I="Show All";!function(t){t.JAN="Jan",t.FEB="Feb",t.MAR="Mar",t.APR="Apr",t.MAY="May",t.JUN="Jun",t.JUL="Jul",t.AUG="Aug",t.SEP="Sep",t.OCT="Oct",t.NOV="Nov",t.DEC="Dec"}(P||(P={})),function(t){t.LIGHT="LIGHT",t.DARK="DARK"}(M||(M={})),function(t){t.EN="EN",t.AR="AR"}(L||(L={})),function(t){t.RTL="rtl",t.LTR="ltr"}(R||(R={})),function(t){t.CHANGE_SCHOOL="CHANGE_SCHOOL",t.CHANGE_CAMP="CHANGE_CAMP",t.CHANGE_COUNTRY="CHANGE_COUNTRY"}(T||(T={})),function(t){t.GET_DATA="GET_DATA"}(N||(N={})),function(t){t.HIDE_GRAPH="HIDE_GRAPH",t.SHOW_GRAPH="SHOW_GRAPH"}(D||(D={})),function(t){t.COUNTRY_FILTER="COUNTRY_FILTER",t.CAMP_FILTER="CAMP_FILTER",t.SCHOOL_FILTER="SCHOOL_FILTER"}(A||(A={}));var j=function(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))},F=new C,z=function(e){var n=e.label,i=e.filterName,r=t.useState(!1),a=r[0],s=r[1],l=t.useRef(null),c=O((function(t){return t.data[i]})),u=c.data,h=c.filterValue,d=E(),f=function(t){l.current&&!l.current.contains(t.target)&&s(!1)};t.useEffect((function(){return document.addEventListener("click",f,!0),function(){document.removeEventListener("click",f,!0)}}),[]);var p=t.useCallback((function(t){d(function(t,e){switch(e){case A.CAMP_FILTER:return{type:T.CHANGE_CAMP,payload:t};case A.COUNTRY_FILTER:return{type:T.CHANGE_COUNTRY,payload:t};case A.SCHOOL_FILTER:return{type:T.CHANGE_SCHOOL,payload:t}}}(t,i))}),[d]);return t.createElement("div",null,t.createElement("label",{className:"Db_xpjXvTNH58KkiE3D2"},n),t.createElement("div",{ref:l,className:"CQkVDOshuHR7VpWvmYLq",onClick:function(){return s(!a)}},t.createElement("div",{className:"kTj77LBnKhKrcxMRerij"},t.createElement("span",null,h),t.createElement(o,{className:"PT2L83pK83LMrA1mguJv"})),a&&t.createElement("div",{className:"r9EsmOvEC3el2Yv66nwo"},u.map((function(e,n){return t.createElement("div",{key:n,onClick:function(){return p(e)},className:"zPmHCITouOzZEFOFY1Tv"},e)})))))};function V(t){if(Array.isArray(t))return t}function B(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function H(t,e){if(t){if("string"==typeof t)return B(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?B(t,e):void 0}}function W(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function U(t,e){return V(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,r,o=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);a=!0);}catch(t){s=!0,r=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return o}}(t,e)||H(t,e)||W()}function $(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Y(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function K(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function q(t,e,n){return e&&K(t.prototype,e),n&&K(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}var G=/&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230);/g,Q={"&amp;":"&","&#38;":"&","&lt;":"<","&#60;":"<","&gt;":">","&#62;":">","&apos;":"'","&#39;":"'","&quot;":'"',"&#34;":'"',"&nbsp;":" ","&#160;":" ","&copy;":"©","&#169;":"©","&reg;":"®","&#174;":"®","&hellip;":"…","&#8230;":"…"},X=function(t){return Q[t]};function J(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Z(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?J(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):J(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var tt,et={bindI18n:"languageChanged",bindI18nStore:"",transEmptyNodeValue:"",transSupportBasicHtmlNodes:!0,transWrapTextNodes:"",transKeepBasicHtmlNodesFor:["br","strong","i","p"],useSuspense:!0,unescape:function(t){return t.replace(G,X)}},nt=(0,t.createContext)();function it(){return et}var rt=function(){function t(){Y(this,t),this.usedNamespaces={}}return q(t,[{key:"addUsedNamespaces",value:function(t){var e=this;t.forEach((function(t){e.usedNamespaces[t]||(e.usedNamespaces[t]=!0)}))}},{key:"getUsedNamespaces",value:function(){return Object.keys(this.usedNamespaces)}}]),t}();function ot(){return tt}var at={type:"3rdParty",init:function(t){!function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};et=Z(Z({},et),t)}(t.options.react),function(t){tt=t}(t)}};function st(){if(console&&console.warn){for(var t,e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];"string"==typeof n[0]&&(n[0]="react-i18next:: ".concat(n[0])),(t=console).warn.apply(t,n)}}var lt={};function ct(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];"string"==typeof e[0]&&lt[e[0]]||("string"==typeof e[0]&&(lt[e[0]]=new Date),st.apply(void 0,e))}function ut(t,e,n){t.loadNamespaces(e,(function(){t.isInitialized?n():t.on("initialized",(function e(){setTimeout((function(){t.off("initialized",e)}),0),n()}))}))}function ht(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=e.languages[0],r=!!e.options&&e.options.fallbackLng,o=e.languages[e.languages.length-1];if("cimode"===i.toLowerCase())return!0;var a=function(t,n){var i=e.services.backendConnector.state["".concat(t,"|").concat(n)];return-1===i||2===i};return!(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&e.services.backendConnector.backend&&e.isLanguageChangingTo&&!a(e.isLanguageChangingTo,t)||!e.hasResourceBundle(i,t)&&e.services.backendConnector.backend&&(!e.options.resources||e.options.partialBundledLanguages)&&(!a(i,t)||r&&!a(o,t)))}function dt(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!e.languages||!e.languages.length)return ct("i18n.languages were undefined or empty",e.languages),!0;var i=void 0!==e.options.ignoreJSONStructure;return i?e.hasLoadedNamespace(t,{precheck:function(e,i){if(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&e.services.backendConnector.backend&&e.isLanguageChangingTo&&!i(e.isLanguageChangingTo,t))return!1}}):ht(t,e,n)}function ft(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function pt(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ft(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ft(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var gt,mt=function(e,n){var i=(0,t.useRef)();return(0,t.useEffect)((function(){i.current=n?i.current:e}),[e,n]),i.current};function bt(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.i18n,r=(0,t.useContext)(nt)||{},o=r.i18n,a=r.defaultNS,s=i||o||ot();if(s&&!s.reportNamespaces&&(s.reportNamespaces=new rt),!s){ct("You will need to pass in an i18next instance by using initReactI18next");var l=function(t){return Array.isArray(t)?t[t.length-1]:t},c=[l,{},!1];return c.t=l,c.i18n={},c.ready=!1,c}s.options.react&&void 0!==s.options.react.wait&&ct("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");var u=pt(pt(pt({},it()),s.options.react),n),h=u.useSuspense,d=u.keyPrefix,f=e||a||s.options&&s.options.defaultNS;f="string"==typeof f?[f]:f||["translation"],s.reportNamespaces.addUsedNamespaces&&s.reportNamespaces.addUsedNamespaces(f);var p=(s.isInitialized||s.initializedStoreOnce)&&f.every((function(t){return dt(t,s,u)}));function g(){return s.getFixedT(null,"fallback"===u.nsMode?f:f[0],d)}var m=(0,t.useState)(g),b=U(m,2),y=b[0],v=b[1],x=f.join(),w=mt(x),_=(0,t.useRef)(!0);(0,t.useEffect)((function(){var t=u.bindI18n,e=u.bindI18nStore;function n(){_.current&&v(g)}return _.current=!0,p||h||ut(s,f,(function(){_.current&&v(g)})),p&&w&&w!==x&&_.current&&v(g),t&&s&&s.on(t,n),e&&s&&s.store.on(e,n),function(){_.current=!1,t&&s&&t.split(" ").forEach((function(t){return s.off(t,n)})),e&&s&&e.split(" ").forEach((function(t){return s.store.off(t,n)}))}}),[s,x]);var k=(0,t.useRef)(!0);(0,t.useEffect)((function(){_.current&&!k.current&&v(g),k.current=!1}),[s,d]);var S=[y,s,p];if(S.t=y,S.i18n=s,S.ready=p,p)return S;if(!p&&!h)return S;throw new Promise((function(t){ut(s,f,(function(){t()}))}))}function yt(){return yt=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},yt.apply(this,arguments)}!function(t){t.Pop="POP",t.Push="PUSH",t.Replace="REPLACE"}(gt||(gt={}));var vt="beforeunload";function xt(t){t.preventDefault(),t.returnValue=""}function wt(){var t=[];return{get length(){return t.length},push:function(e){return t.push(e),function(){t=t.filter((function(t){return t!==e}))}},call:function(e){t.forEach((function(t){return t&&t(e)}))}}}function _t(t){var e=t.pathname,n=void 0===e?"/":e,i=t.search,r=void 0===i?"":i,o=t.hash,a=void 0===o?"":o;return r&&"?"!==r&&(n+="?"===r.charAt(0)?r:"?"+r),a&&"#"!==a&&(n+="#"===a.charAt(0)?a:"#"+a),n}function kt(t){var e={};if(t){var n=t.indexOf("#");n>=0&&(e.hash=t.substr(n),t=t.substr(0,n));var i=t.indexOf("?");i>=0&&(e.search=t.substr(i),t=t.substr(0,i)),t&&(e.pathname=t)}return e}const St=(0,t.createContext)(null),Et=(0,t.createContext)(null),Ot=(0,t.createContext)({outlet:null,matches:[]});function Ct(t,e){if(!t)throw new Error(e)}function Pt(t,e,n){void 0===n&&(n="/");let i=It(("string"==typeof e?kt(e):e).pathname||"/",n);if(null==i)return null;let r=Mt(t);!function(t){t.sort(((t,e)=>t.score!==e.score?e.score-t.score:function(t,e){return t.length===e.length&&t.slice(0,-1).every(((t,n)=>t===e[n]))?t[t.length-1]-e[e.length-1]:0}(t.routesMeta.map((t=>t.childrenIndex)),e.routesMeta.map((t=>t.childrenIndex)))))}(r);let o=null;for(let t=0;null==o&&t<r.length;++t)o=Nt(r[t],i);return o}function Mt(t,e,n,i){return void 0===e&&(e=[]),void 0===n&&(n=[]),void 0===i&&(i=""),t.forEach(((t,r)=>{let o={relativePath:t.path||"",caseSensitive:!0===t.caseSensitive,childrenIndex:r,route:t};o.relativePath.startsWith("/")&&(o.relativePath.startsWith(i)||Ct(!1),o.relativePath=o.relativePath.slice(i.length));let a=jt([i,o.relativePath]),s=n.concat(o);t.children&&t.children.length>0&&(!0===t.index&&Ct(!1),Mt(t.children,e,s,a)),(null!=t.path||t.index)&&e.push({path:a,score:Tt(a,t.index),routesMeta:s})})),e}const Lt=/^:\w+$/,Rt=t=>"*"===t;function Tt(t,e){let n=t.split("/"),i=n.length;return n.some(Rt)&&(i+=-2),e&&(i+=2),n.filter((t=>!Rt(t))).reduce(((t,e)=>t+(Lt.test(e)?3:""===e?1:10)),i)}function Nt(t,e){let{routesMeta:n}=t,i={},r="/",o=[];for(let t=0;t<n.length;++t){let a=n[t],s=t===n.length-1,l="/"===r?e:e.slice(r.length)||"/",c=Dt({path:a.relativePath,caseSensitive:a.caseSensitive,end:s},l);if(!c)return null;Object.assign(i,c.params);let u=a.route;o.push({params:i,pathname:jt([r,c.pathname]),pathnameBase:Ft(jt([r,c.pathnameBase])),route:u}),"/"!==c.pathnameBase&&(r=jt([r,c.pathnameBase]))}return o}function Dt(t,e){"string"==typeof t&&(t={path:t,caseSensitive:!1,end:!0});let[n,i]=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!0);let i=[],r="^"+t.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((t,e)=>(i.push(e),"([^\\/]+)")));return t.endsWith("*")?(i.push("*"),r+="*"===t||"/*"===t?"(.*)$":"(?:\\/(.+)|\\/*)$"):r+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(r,e?void 0:"i"),i]}(t.path,t.caseSensitive,t.end),r=e.match(n);if(!r)return null;let o=r[0],a=o.replace(/(.)\/+$/,"$1"),s=r.slice(1);return{params:i.reduce(((t,e,n)=>{if("*"===e){let t=s[n]||"";a=o.slice(0,o.length-t.length).replace(/(.)\/+$/,"$1")}return t[e]=function(t,e){try{return decodeURIComponent(t)}catch(e){return t}}(s[n]||""),t}),{}),pathname:o,pathnameBase:a,pattern:t}}function At(t,e,n){let i,r="string"==typeof t?kt(t):t,o=""===t||""===r.pathname?"/":r.pathname;if(null==o)i=n;else{let t=e.length-1;if(o.startsWith("..")){let e=o.split("/");for(;".."===e[0];)e.shift(),t-=1;r.pathname=e.join("/")}i=t>=0?e[t]:"/"}let a=function(t,e){void 0===e&&(e="/");let{pathname:n,search:i="",hash:r=""}="string"==typeof t?kt(t):t,o=n?n.startsWith("/")?n:function(t,e){let n=e.replace(/\/+$/,"").split("/");return t.split("/").forEach((t=>{".."===t?n.length>1&&n.pop():"."!==t&&n.push(t)})),n.length>1?n.join("/"):"/"}(n,e):e;return{pathname:o,search:zt(i),hash:Vt(r)}}(r,i);return o&&"/"!==o&&o.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}function It(t,e){if("/"===e)return t;if(!t.toLowerCase().startsWith(e.toLowerCase()))return null;let n=t.charAt(e.length);return n&&"/"!==n?null:t.slice(e.length)||"/"}const jt=t=>t.join("/").replace(/\/\/+/g,"/"),Ft=t=>t.replace(/\/+$/,"").replace(/^\/*/,"/"),zt=t=>t&&"?"!==t?t.startsWith("?")?t:"?"+t:"",Vt=t=>t&&"#"!==t?t.startsWith("#")?t:"#"+t:"";function Bt(){return null!=(0,t.useContext)(Et)}function Ht(){return Bt()||Ct(!1),(0,t.useContext)(Et).location}function Wt(){Bt()||Ct(!1);let{basename:e,navigator:n}=(0,t.useContext)(St),{matches:i}=(0,t.useContext)(Ot),{pathname:r}=Ht(),o=JSON.stringify(i.map((t=>t.pathnameBase))),a=(0,t.useRef)(!1);(0,t.useEffect)((()=>{a.current=!0}));let s=(0,t.useCallback)((function(t,i){if(void 0===i&&(i={}),!a.current)return;if("number"==typeof t)return void n.go(t);let s=At(t,JSON.parse(o),r);"/"!==e&&(s.pathname=jt([e,s.pathname])),(i.replace?n.replace:n.push)(s,i.state)}),[e,n,o,r]);return s}function Ut(e){let{matches:n}=(0,t.useContext)(Ot),{pathname:i}=Ht(),r=JSON.stringify(n.map((t=>t.pathnameBase)));return(0,t.useMemo)((()=>At(e,JSON.parse(r),i)),[e,r,i])}function $t(t){Ct(!1)}function Yt(e){let{basename:n="/",children:i=null,location:r,navigationType:o=gt.Pop,navigator:a,static:s=!1}=e;Bt()&&Ct(!1);let l=Ft(n),c=(0,t.useMemo)((()=>({basename:l,navigator:a,static:s})),[l,a,s]);"string"==typeof r&&(r=kt(r));let{pathname:u="/",search:h="",hash:d="",state:f=null,key:p="default"}=r,g=(0,t.useMemo)((()=>{let t=It(u,l);return null==t?null:{pathname:t,search:h,hash:d,state:f,key:p}}),[l,u,h,d,f,p]);return null==g?null:(0,t.createElement)(St.Provider,{value:c},(0,t.createElement)(Et.Provider,{children:i,value:{location:g,navigationType:o}}))}function Kt(e){let{children:n,location:i}=e;return function(e,n){Bt()||Ct(!1);let{matches:i}=(0,t.useContext)(Ot),r=i[i.length-1],o=r?r.params:{},a=(r&&r.pathname,r?r.pathnameBase:"/");r&&r.route;let s,l=Ht();if(n){var c;let t="string"==typeof n?kt(n):n;"/"===a||(null==(c=t.pathname)?void 0:c.startsWith(a))||Ct(!1),s=t}else s=l;let u=s.pathname||"/",h=Pt(e,{pathname:"/"===a?u:u.slice(a.length)||"/"});return function(e,n){return void 0===n&&(n=[]),null==e?null:e.reduceRight(((i,r,o)=>(0,t.createElement)(Ot.Provider,{children:void 0!==r.route.element?r.route.element:i,value:{outlet:i,matches:n.concat(e.slice(0,o+1))}})),null)}(h&&h.map((t=>Object.assign({},t,{params:Object.assign({},o,t.params),pathname:jt([a,t.pathname]),pathnameBase:"/"===t.pathnameBase?a:jt([a,t.pathnameBase])}))),i)}(qt(n),i)}function qt(e){let n=[];return t.Children.forEach(e,(e=>{if(!(0,t.isValidElement)(e))return;if(e.type===t.Fragment)return void n.push.apply(n,qt(e.props.children));e.type!==$t&&Ct(!1);let i={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(i.children=qt(e.props.children)),n.push(i)})),n}function Gt(){return Gt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},Gt.apply(this,arguments)}const Qt=["onClick","reloadDocument","replace","state","target","to"],Xt=(0,t.forwardRef)((function(e,n){let{onClick:i,reloadDocument:r,replace:o=!1,state:a,target:s,to:l}=e,c=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(e,Qt),u=function(e){Bt()||Ct(!1);let{basename:n,navigator:i}=(0,t.useContext)(St),{hash:r,pathname:o,search:a}=Ut(e),s=o;if("/"!==n){let t=function(t){return""===t||""===t.pathname?"/":"string"==typeof t?kt(t).pathname:t.pathname}(e),i=null!=t&&t.endsWith("/");s="/"===o?n+(i?"/":""):jt([n,o])}return i.createHref({pathname:s,search:a,hash:r})}(l),h=function(e,n){let{target:i,replace:r,state:o}=void 0===n?{}:n,a=Wt(),s=Ht(),l=Ut(e);return(0,t.useCallback)((t=>{if(!(0!==t.button||i&&"_self"!==i||function(t){return!!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)}(t))){t.preventDefault();let n=!!r||_t(s)===_t(l);a(e,{replace:n,state:o})}}),[s,a,l,r,o,i,e])}(l,{replace:o,state:a,target:s});return(0,t.createElement)("a",Gt({},c,{href:u,onClick:function(t){i&&i(t),t.defaultPrevented||r||h(t)},ref:n,target:s}))}));var Jt,Zt=function(){var e,n,i=bt();return t.createElement("div",{className:"psQAr4JNczJKrjKEN8kV"},t.createElement(Xt,{to:"/"},i.t(Jt||(e=["Analysis Chart"],n=["Analysis Chart"],Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,Jt=e))))};var te,ee,ne,ie,re=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},oe=function(){var e=bt();return t.createElement("div",null,t.createElement("div",{className:"wKNi80kVeFqm6ecTqBdE"},e.t(te||(te=re(["Number of lessons"],["Number of lessons"])))),t.createElement("div",{className:"yipeBV5CoWnKQKWzJnCm"},t.createElement(z,{label:e.t(ee||(ee=re(["Select Country"],["Select Country"]))),filterName:A.COUNTRY_FILTER}),t.createElement(z,{label:e.t(ne||(ne=re(["Select Camp"],["Select Camp"]))),filterName:A.CAMP_FILTER}),t.createElement(z,{label:e.t(ie||(ie=re(["Select School"],["Select School"]))),filterName:A.SCHOOL_FILTER})))};function ae(){}const se=function(){let t=0;return function(){return t++}}();function le(t){return null==t}function ce(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function ue(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const he=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function de(t,e){return he(t)?t:e}function fe(t,e){return void 0===t?e:t}const pe=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function ge(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)}function me(t,e,n,i){let r,o,a;if(ce(t))if(o=t.length,i)for(r=o-1;r>=0;r--)e.call(n,t[r],r);else for(r=0;r<o;r++)e.call(n,t[r],r);else if(ue(t))for(a=Object.keys(t),o=a.length,r=0;r<o;r++)e.call(n,t[a[r]],a[r])}function be(t,e){let n,i,r,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(r=t[n],o=e[n],r.datasetIndex!==o.datasetIndex||r.index!==o.index)return!1;return!0}function ye(t){if(ce(t))return t.map(ye);if(ue(t)){const e=Object.create(null),n=Object.keys(t),i=n.length;let r=0;for(;r<i;++r)e[n[r]]=ye(t[n[r]]);return e}return t}function ve(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function xe(t,e,n,i){if(!ve(t))return;const r=e[t],o=n[t];ue(r)&&ue(o)?we(r,o,i):e[t]=ye(o)}function we(t,e,n){const i=ce(e)?e:[e],r=i.length;if(!ue(t))return t;const o=(n=n||{}).merger||xe;for(let a=0;a<r;++a){if(!ue(e=i[a]))continue;const r=Object.keys(e);for(let i=0,a=r.length;i<a;++i)o(r[i],t,e,n)}return t}function _e(t,e){return we(t,e,{merger:ke})}function ke(t,e,n){if(!ve(t))return;const i=e[t],r=n[t];ue(i)&&ue(r)?_e(i,r):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=ye(r))}const Se={"":t=>t,x:t=>t.x,y:t=>t.y};function Ee(t,e){const n=Se[e]||(Se[e]=function(t){const e=function(t){const e=t.split("."),n=[];let i="";for(const t of e)i+=t,i.endsWith("\\")?i=i.slice(0,-1)+".":(n.push(i),i="");return n}(t);return t=>{for(const n of e){if(""===n)break;t=t&&t[n]}return t}}(e));return n(t)}function Oe(t){return t.charAt(0).toUpperCase()+t.slice(1)}const Ce=t=>void 0!==t,Pe=t=>"function"==typeof t,Me=(t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0},Le=Math.PI,Re=2*Le,Te=Re+Le,Ne=Number.POSITIVE_INFINITY,De=Le/180,Ae=Le/2,Ie=Le/4,je=2*Le/3,Fe=Math.log10,ze=Math.sign;function Ve(t){const e=Math.round(t);t=He(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(Fe(t))),i=t/n;return(i<=1?1:i<=2?2:i<=5?5:10)*n}function Be(t){return!isNaN(parseFloat(t))&&isFinite(t)}function He(t,e,n){return Math.abs(t-e)<n}function We(t,e,n){let i,r,o;for(i=0,r=t.length;i<r;i++)o=t[i][n],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function Ue(t){return t*(Le/180)}function $e(t){return t*(180/Le)}function Ye(t){if(!he(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n}function Ke(t,e){const n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i);let o=Math.atan2(i,n);return o<-.5*Le&&(o+=Re),{angle:o,distance:r}}function qe(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Ge(t,e){return(t-e+Te)%Re-Le}function Qe(t){return(t%Re+Re)%Re}function Xe(t,e,n,i){const r=Qe(t),o=Qe(e),a=Qe(n),s=Qe(o-r),l=Qe(a-r),c=Qe(r-o),u=Qe(r-a);return r===o||r===a||i&&o===a||s>l&&c<u}function Je(t,e,n){return Math.max(e,Math.min(n,t))}function Ze(t,e,n,i=1e-6){return t>=Math.min(e,n)-i&&t<=Math.max(e,n)+i}function tn(t,e,n){n=n||(n=>t[n]<e);let i,r=t.length-1,o=0;for(;r-o>1;)i=o+r>>1,n(i)?o=i:r=i;return{lo:o,hi:r}}const en=(t,e,n,i)=>tn(t,n,i?i=>t[i][e]<=n:i=>t[i][e]<n),nn=(t,e,n)=>tn(t,n,(i=>t[i][e]>=n)),rn=["push","pop","shift","splice","unshift"];function on(t,e){const n=t._chartjs;if(!n)return;const i=n.listeners,r=i.indexOf(e);-1!==r&&i.splice(r,1),i.length>0||(rn.forEach((e=>{delete t[e]})),delete t._chartjs)}function an(t){const e=new Set;let n,i;for(n=0,i=t.length;n<i;++n)e.add(t[n]);return e.size===i?t:Array.from(e)}const sn="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function ln(t,e,n){const i=n||(t=>Array.prototype.slice.call(t));let r=!1,o=[];return function(...n){o=i(n),r||(r=!0,sn.call(window,(()=>{r=!1,t.apply(e,o)})))}}const cn=t=>"start"===t?"left":"end"===t?"right":"center",un=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2;function hn(t,e,n){const i=e.length;let r=0,o=i;if(t._sorted){const{iScale:a,_parsed:s}=t,l=a.axis,{min:c,max:u,minDefined:h,maxDefined:d}=a.getUserBounds();h&&(r=Je(Math.min(en(s,a.axis,c).lo,n?i:en(e,l,a.getPixelForValue(c)).lo),0,i-1)),o=d?Je(Math.max(en(s,a.axis,u,!0).hi+1,n?0:en(e,l,a.getPixelForValue(u),!0).hi+1),r,i)-r:i-r}return{start:r,count:o}}function dn(t){const{xScale:e,yScale:n,_scaleRanges:i}=t,r={xmin:e.min,xmax:e.max,ymin:n.min,ymax:n.max};if(!i)return t._scaleRanges=r,!0;const o=i.xmin!==e.min||i.xmax!==e.max||i.ymin!==n.min||i.ymax!==n.max;return Object.assign(i,r),o}const fn=t=>0===t||1===t,pn=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Re/n),gn=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*Re/n)+1,mn={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Ae),easeOutSine:t=>Math.sin(t*Ae),easeInOutSine:t=>-.5*(Math.cos(Le*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>fn(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>fn(t)?t:pn(t,.075,.3),easeOutElastic:t=>fn(t)?t:gn(t,.075,.3),easeInOutElastic(t){const e=.1125;return fn(t)?t:t<.5?.5*pn(2*t,e,.45):.5+.5*gn(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-mn.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*mn.easeInBounce(2*t):.5*mn.easeOutBounce(2*t-1)+.5};function bn(t){return t+.5|0}const yn=(t,e,n)=>Math.max(Math.min(t,n),e);function vn(t){return yn(bn(2.55*t),0,255)}function xn(t){return yn(bn(255*t),0,255)}function wn(t){return yn(bn(t/2.55)/100,0,1)}function _n(t){return yn(bn(100*t),0,100)}const kn={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},Sn=[..."0123456789ABCDEF"],En=t=>Sn[15&t],On=t=>Sn[(240&t)>>4]+Sn[15&t],Cn=t=>(240&t)>>4==(15&t);const Pn=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Mn(t,e,n){const i=e*Math.min(n,1-n),r=(e,r=(e+t/30)%12)=>n-i*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function Ln(t,e,n){const i=(i,r=(i+t/60)%6)=>n-n*e*Math.max(Math.min(r,4-r,1),0);return[i(5),i(3),i(1)]}function Rn(t,e,n){const i=Mn(t,1,.5);let r;for(e+n>1&&(r=1/(e+n),e*=r,n*=r),r=0;r<3;r++)i[r]*=1-e-n,i[r]+=e;return i}function Tn(t){const e=t.r/255,n=t.g/255,i=t.b/255,r=Math.max(e,n,i),o=Math.min(e,n,i),a=(r+o)/2;let s,l,c;return r!==o&&(c=r-o,l=a>.5?c/(2-r-o):c/(r+o),s=function(t,e,n,i,r){return t===r?(e-n)/i+(e<n?6:0):e===r?(n-t)/i+2:(t-e)/i+4}(e,n,i,c,r),s=60*s+.5),[0|s,l||0,a]}function Nn(t,e,n,i){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,i)).map(xn)}function Dn(t,e,n){return Nn(Mn,t,e,n)}function An(t){return(t%360+360)%360}const In={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},jn={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Fn;const zn=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,Vn=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,Bn=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Hn(t,e,n){if(t){let i=Tn(t);i[e]=Math.max(0,Math.min(i[e]+i[e]*n,0===e?360:1)),i=Dn(i),t.r=i[0],t.g=i[1],t.b=i[2]}}function Wn(t,e){return t?Object.assign(e||{},t):t}function Un(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=xn(t[3]))):(e=Wn(t,{r:0,g:0,b:0,a:1})).a=xn(e.a),e}function $n(t){return"r"===t.charAt(0)?function(t){const e=zn.exec(t);let n,i,r,o=255;if(e){if(e[7]!==n){const t=+e[7];o=e[8]?vn(t):yn(255*t,0,255)}return n=+e[1],i=+e[3],r=+e[5],n=255&(e[2]?vn(n):yn(n,0,255)),i=255&(e[4]?vn(i):yn(i,0,255)),r=255&(e[6]?vn(r):yn(r,0,255)),{r:n,g:i,b:r,a:o}}}(t):function(t){const e=Pn.exec(t);let n,i=255;if(!e)return;e[5]!==n&&(i=e[6]?vn(+e[5]):xn(+e[5]));const r=An(+e[2]),o=+e[3]/100,a=+e[4]/100;return n="hwb"===e[1]?function(t,e,n){return Nn(Rn,t,e,n)}(r,o,a):"hsv"===e[1]?function(t,e,n){return Nn(Ln,t,e,n)}(r,o,a):Dn(r,o,a),{r:n[0],g:n[1],b:n[2],a:i}}(t)}class Yn{constructor(t){if(t instanceof Yn)return t;const e=typeof t;let n;var i,r,o;"object"===e?n=Un(t):"string"===e&&(o=(i=t).length,"#"===i[0]&&(4===o||5===o?r={r:255&17*kn[i[1]],g:255&17*kn[i[2]],b:255&17*kn[i[3]],a:5===o?17*kn[i[4]]:255}:7!==o&&9!==o||(r={r:kn[i[1]]<<4|kn[i[2]],g:kn[i[3]]<<4|kn[i[4]],b:kn[i[5]]<<4|kn[i[6]],a:9===o?kn[i[7]]<<4|kn[i[8]]:255})),n=r||function(t){Fn||(Fn=function(){const t={},e=Object.keys(jn),n=Object.keys(In);let i,r,o,a,s;for(i=0;i<e.length;i++){for(a=s=e[i],r=0;r<n.length;r++)o=n[r],s=s.replace(o,In[o]);o=parseInt(jn[a],16),t[s]=[o>>16&255,o>>8&255,255&o]}return t}(),Fn.transparent=[0,0,0,0]);const e=Fn[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||$n(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=Wn(this._rgb);return t&&(t.a=wn(t.a)),t}set rgb(t){this._rgb=Un(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${wn(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>Cn(t.r)&&Cn(t.g)&&Cn(t.b)&&Cn(t.a))(t)?En:On,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Tn(t),n=e[0],i=_n(e[1]),r=_n(e[2]);return t.a<255?`hsla(${n}, ${i}%, ${r}%, ${wn(t.a)})`:`hsl(${n}, ${i}%, ${r}%)`}(this._rgb):void 0}mix(t,e){if(t){const n=this.rgb,i=t.rgb;let r;const o=e===r?.5:e,a=2*o-1,s=n.a-i.a,l=((a*s==-1?a:(a+s)/(1+a*s))+1)/2;r=1-l,n.r=255&l*n.r+r*i.r+.5,n.g=255&l*n.g+r*i.g+.5,n.b=255&l*n.b+r*i.b+.5,n.a=o*n.a+(1-o)*i.a,this.rgb=n}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,n){const i=Bn(wn(t.r)),r=Bn(wn(t.g)),o=Bn(wn(t.b));return{r:xn(Vn(i+n*(Bn(wn(e.r))-i))),g:xn(Vn(r+n*(Bn(wn(e.g))-r))),b:xn(Vn(o+n*(Bn(wn(e.b))-o))),a:t.a+n*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new Yn(this.rgb)}alpha(t){return this._rgb.a=xn(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=bn(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Hn(this._rgb,2,t),this}darken(t){return Hn(this._rgb,2,-t),this}saturate(t){return Hn(this._rgb,1,t),this}desaturate(t){return Hn(this._rgb,1,-t),this}rotate(t){return function(t,e){var n=Tn(t);n[0]=An(n[0]+e),n=Dn(n),t.r=n[0],t.g=n[1],t.b=n[2]}(this._rgb,t),this}}function Kn(t){return new Yn(t)}function qn(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Gn(t){return qn(t)?t:Kn(t)}function Qn(t){return qn(t)?t:Kn(t).saturate(.5).darken(.1).hexString()}const Xn=Object.create(null),Jn=Object.create(null);function Zn(t,e){if(!e)return t;const n=e.split(".");for(let e=0,i=n.length;e<i;++e){const i=n[e];t=t[i]||(t[i]=Object.create(null))}return t}function ti(t,e,n){return"string"==typeof e?we(Zn(t,e),n):we(Zn(t,""),e)}var ei=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Qn(e.backgroundColor),this.hoverBorderColor=(t,e)=>Qn(e.borderColor),this.hoverColor=(t,e)=>Qn(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return ti(this,t,e)}get(t){return Zn(this,t)}describe(t,e){return ti(Jn,t,e)}override(t,e){return ti(Xn,t,e)}route(t,e,n,i){const r=Zn(this,t),o=Zn(this,n),a="_"+e;Object.defineProperties(r,{[a]:{value:r[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[i];return ue(t)?Object.assign({},e,t):fe(t,e)},set(t){this[a]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function ni(t,e,n,i,r){let o=e[r];return o||(o=e[r]=t.measureText(r).width,n.push(r)),o>i&&(i=o),i}function ii(t,e,n,i){let r=(i=i||{}).data=i.data||{},o=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(r=i.data={},o=i.garbageCollect=[],i.font=e),t.save(),t.font=e;let a=0;const s=n.length;let l,c,u,h,d;for(l=0;l<s;l++)if(h=n[l],null!=h&&!0!==ce(h))a=ni(t,r,o,a,h);else if(ce(h))for(c=0,u=h.length;c<u;c++)d=h[c],null==d||ce(d)||(a=ni(t,r,o,a,d));t.restore();const f=o.length/2;if(f>n.length){for(l=0;l<f;l++)delete r[o[l]];o.splice(0,f)}return a}function ri(t,e,n){const i=t.currentDevicePixelRatio,r=0!==n?Math.max(n/2,.5):0;return Math.round((e-r)*i)/i+r}function oi(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function ai(t,e,n,i){si(t,e,n,i,null)}function si(t,e,n,i,r){let o,a,s,l,c,u;const h=e.pointStyle,d=e.rotation,f=e.radius;let p=(d||0)*De;if(h&&"object"==typeof h&&(o=h.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(n,i),t.rotate(p),t.drawImage(h,-h.width/2,-h.height/2,h.width,h.height),void t.restore();if(!(isNaN(f)||f<=0)){switch(t.beginPath(),h){default:r?t.ellipse(n,i,r/2,f,0,0,Re):t.arc(n,i,f,0,Re),t.closePath();break;case"triangle":t.moveTo(n+Math.sin(p)*f,i-Math.cos(p)*f),p+=je,t.lineTo(n+Math.sin(p)*f,i-Math.cos(p)*f),p+=je,t.lineTo(n+Math.sin(p)*f,i-Math.cos(p)*f),t.closePath();break;case"rectRounded":c=.516*f,l=f-c,a=Math.cos(p+Ie)*l,s=Math.sin(p+Ie)*l,t.arc(n-a,i-s,c,p-Le,p-Ae),t.arc(n+s,i-a,c,p-Ae,p),t.arc(n+a,i+s,c,p,p+Ae),t.arc(n-s,i+a,c,p+Ae,p+Le),t.closePath();break;case"rect":if(!d){l=Math.SQRT1_2*f,u=r?r/2:l,t.rect(n-u,i-l,2*u,2*l);break}p+=Ie;case"rectRot":a=Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+s,i-a),t.lineTo(n+a,i+s),t.lineTo(n-s,i+a),t.closePath();break;case"crossRot":p+=Ie;case"cross":a=Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+a,i+s),t.moveTo(n+s,i-a),t.lineTo(n-s,i+a);break;case"star":a=Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+a,i+s),t.moveTo(n+s,i-a),t.lineTo(n-s,i+a),p+=Ie,a=Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+a,i+s),t.moveTo(n+s,i-a),t.lineTo(n-s,i+a);break;case"line":a=r?r/2:Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+a,i+s);break;case"dash":t.moveTo(n,i),t.lineTo(n+Math.cos(p)*f,i+Math.sin(p)*f)}t.fill(),e.borderWidth>0&&t.stroke()}}function li(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function ci(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ui(t){t.restore()}function hi(t,e,n,i,r){if(!e)return t.lineTo(n.x,n.y);if("middle"===r){const i=(e.x+n.x)/2;t.lineTo(i,e.y),t.lineTo(i,n.y)}else"after"===r!=!!i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}function di(t,e,n,i){if(!e)return t.lineTo(n.x,n.y);t.bezierCurveTo(i?e.cp1x:e.cp2x,i?e.cp1y:e.cp2y,i?n.cp2x:n.cp1x,i?n.cp2y:n.cp1y,n.x,n.y)}function fi(t,e,n,i,r,o={}){const a=ce(e)?e:[e],s=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(t.save(),t.font=r.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),le(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)c=a[l],s&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),le(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(c,n,i,o.maxWidth)),t.fillText(c,n,i,o.maxWidth),pi(t,n,i,c,o),i+=r.lineHeight;t.restore()}function pi(t,e,n,i,r){if(r.strikethrough||r.underline){const o=t.measureText(i),a=e-o.actualBoundingBoxLeft,s=e+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,c=n+o.actualBoundingBoxDescent,u=r.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(a,u),t.lineTo(s,u),t.stroke()}}function gi(t,e){const{x:n,y:i,w:r,h:o,radius:a}=e;t.arc(n+a.topLeft,i+a.topLeft,a.topLeft,-Ae,Le,!0),t.lineTo(n,i+o-a.bottomLeft),t.arc(n+a.bottomLeft,i+o-a.bottomLeft,a.bottomLeft,Le,Ae,!0),t.lineTo(n+r-a.bottomRight,i+o),t.arc(n+r-a.bottomRight,i+o-a.bottomRight,a.bottomRight,Ae,0,!0),t.lineTo(n+r,i+a.topRight),t.arc(n+r-a.topRight,i+a.topRight,a.topRight,0,-Ae,!0),t.lineTo(n+a.topLeft,i)}const mi=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),bi=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function yi(t,e){const n=(""+t).match(mi);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}function vi(t,e){const n={},i=ue(e),r=i?Object.keys(e):e,o=ue(t)?i?n=>fe(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of r)n[t]=+o(t)||0;return n}function xi(t){return vi(t,{top:"y",right:"x",bottom:"y",left:"x"})}function wi(t){return vi(t,["topLeft","topRight","bottomLeft","bottomRight"])}function _i(t){const e=xi(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ki(t,e){t=t||{},e=e||ei.font;let n=fe(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let i=fe(t.style,e.style);i&&!(""+i).match(bi)&&(console.warn('Invalid font style specified: "'+i+'"'),i="");const r={family:fe(t.family,e.family),lineHeight:yi(fe(t.lineHeight,e.lineHeight),n),size:n,style:i,weight:fe(t.weight,e.weight),string:""};return r.string=function(t){return!t||le(t.size)||le(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(r),r}function Si(t,e,n,i){let r,o,a,s=!0;for(r=0,o=t.length;r<o;++r)if(a=t[r],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),s=!1),void 0!==n&&ce(a)&&(a=a[n%a.length],s=!1),void 0!==a))return i&&!s&&(i.cacheable=!1),a}function Ei(t,e){return Object.assign(Object.create(t),e)}function Oi(t,e=[""],n=t,i,r=(()=>t[0])){Ce(i)||(i=ji("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:n,_fallback:i,_getTarget:r,override:r=>Oi([r,...t],e,n,i)};return new Proxy(o,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,i)=>Ri(n,i,(()=>function(t,e,n,i){let r;for(const o of e)if(r=ji(Mi(o,t),n),Ce(r))return Li(t,r)?Ai(n,i,t,r):r}(i,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Fi(t).includes(e),ownKeys:t=>Fi(t),set(t,e,n){const i=t._storage||(t._storage=r());return t[e]=i[e]=n,delete t._keys,!0}})}function Ci(t,e,n,i){const r={_cacheable:!1,_proxy:t,_context:e,_subProxy:n,_stack:new Set,_descriptors:Pi(t,i),setContext:e=>Ci(t,e,n,i),override:r=>Ci(t.override(r),e,n,i)};return new Proxy(r,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,e,n)=>Ri(t,e,(()=>function(t,e,n){const{_proxy:i,_context:r,_subProxy:o,_descriptors:a}=t;let s=i[e];return Pe(s)&&a.isScriptable(e)&&(s=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:a,_stack:s}=n;if(s.has(t))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+t);return s.add(t),e=e(o,a||i),s.delete(t),Li(t,e)&&(e=Ai(r._scopes,r,t,e)),e}(e,s,t,n)),ce(s)&&s.length&&(s=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:a,_descriptors:s}=n;if(Ce(o.index)&&i(t))e=e[o.index%e.length];else if(ue(e[0])){const n=e,i=r._scopes.filter((t=>t!==n));e=[];for(const l of n){const n=Ai(i,r,t,l);e.push(Ci(n,o,a&&a[t],s))}}return e}(e,s,t,a.isIndexable)),Li(e,s)&&(s=Ci(s,r,o&&o[e],a)),s}(t,e,n))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,i)=>(t[n]=i,delete e[n],!0)})}function Pi(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:i=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:n,indexable:i,isScriptable:Pe(n)?n:()=>n,isIndexable:Pe(i)?i:()=>i}}const Mi=(t,e)=>t?t+Oe(e):e,Li=(t,e)=>ue(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Ri(t,e,n){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const i=n();return t[e]=i,i}function Ti(t,e,n){return Pe(t)?t(e,n):t}const Ni=(t,e)=>!0===t?e:"string"==typeof t?Ee(e,t):void 0;function Di(t,e,n,i,r){for(const o of e){const e=Ni(n,o);if(e){t.add(e);const o=Ti(e._fallback,n,r);if(Ce(o)&&o!==n&&o!==i)return o}else if(!1===e&&Ce(i)&&n!==i)return null}return!1}function Ai(t,e,n,i){const r=e._rootScopes,o=Ti(e._fallback,n,i),a=[...t,...r],s=new Set;s.add(i);let l=Ii(s,a,n,o||n,i);return null!==l&&(!Ce(o)||o===n||(l=Ii(s,a,o,l,i),null!==l))&&Oi(Array.from(s),[""],r,o,(()=>function(t,e,n){const i=t._getTarget();e in i||(i[e]={});const r=i[e];return ce(r)&&ue(n)?n:r}(e,n,i)))}function Ii(t,e,n,i,r){for(;n;)n=Di(t,e,n,i,r);return n}function ji(t,e){for(const n of e){if(!n)continue;const e=n[t];if(Ce(e))return e}}function Fi(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function zi(t,e,n,i){const{iScale:r}=t,{key:o="r"}=this._parsing,a=new Array(i);let s,l,c,u;for(s=0,l=i;s<l;++s)c=s+n,u=e[c],a[s]={r:r.parse(Ee(u,o),c)};return a}const Vi=Number.EPSILON||1e-14,Bi=(t,e)=>e<t.length&&!t[e].skip&&t[e],Hi=t=>"x"===t?"y":"x";function Wi(t,e,n,i){const r=t.skip?e:t,o=e,a=n.skip?e:n,s=qe(o,r),l=qe(a,o);let c=s/(s+l),u=l/(s+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const h=i*c,d=i*u;return{previous:{x:o.x-h*(a.x-r.x),y:o.y-h*(a.y-r.y)},next:{x:o.x+d*(a.x-r.x),y:o.y+d*(a.y-r.y)}}}function Ui(t,e,n){return Math.max(Math.min(t,n),e)}function $i(t,e,n,i,r){let o,a,s,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const n=Hi(e),i=t.length,r=Array(i).fill(0),o=Array(i);let a,s,l,c=Bi(t,0);for(a=0;a<i;++a)if(s=l,l=c,c=Bi(t,a+1),l){if(c){const t=c[e]-l[e];r[a]=0!==t?(c[n]-l[n])/t:0}o[a]=s?c?ze(r[a-1])!==ze(r[a])?0:(r[a-1]+r[a])/2:r[a-1]:r[a]}!function(t,e,n){const i=t.length;let r,o,a,s,l,c=Bi(t,0);for(let u=0;u<i-1;++u)l=c,c=Bi(t,u+1),l&&c&&(He(e[u],0,Vi)?n[u]=n[u+1]=0:(r=n[u]/e[u],o=n[u+1]/e[u],s=Math.pow(r,2)+Math.pow(o,2),s<=9||(a=3/Math.sqrt(s),n[u]=r*a*e[u],n[u+1]=o*a*e[u])))}(t,r,o),function(t,e,n="x"){const i=Hi(n),r=t.length;let o,a,s,l=Bi(t,0);for(let c=0;c<r;++c){if(a=s,s=l,l=Bi(t,c+1),!s)continue;const r=s[n],u=s[i];a&&(o=(r-a[n])/3,s[`cp1${n}`]=r-o,s[`cp1${i}`]=u-o*e[c]),l&&(o=(l[n]-r)/3,s[`cp2${n}`]=r+o,s[`cp2${i}`]=u+o*e[c])}}(t,o,e)}(t,r);else{let n=i?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)s=t[o],l=Wi(n,s,t[Math.min(o+1,a-(i?0:1))%a],e.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}e.capBezierPoints&&function(t,e){let n,i,r,o,a,s=li(t[0],e);for(n=0,i=t.length;n<i;++n)a=o,o=s,s=n<i-1&&li(t[n+1],e),o&&(r=t[n],a&&(r.cp1x=Ui(r.cp1x,e.left,e.right),r.cp1y=Ui(r.cp1y,e.top,e.bottom)),s&&(r.cp2x=Ui(r.cp2x,e.left,e.right),r.cp2y=Ui(r.cp2y,e.top,e.bottom)))}(t,n)}function Yi(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ki(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function qi(t,e,n){let i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}const Gi=t=>window.getComputedStyle(t,null),Qi=["top","right","bottom","left"];function Xi(t,e,n){const i={};n=n?"-"+n:"";for(let r=0;r<4;r++){const o=Qi[r];i[o]=parseFloat(t[e+"-"+o+n])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}function Ji(t,e){if("native"in t)return t;const{canvas:n,currentDevicePixelRatio:i}=e,r=Gi(n),o="border-box"===r.boxSizing,a=Xi(r,"padding"),s=Xi(r,"border","width"),{x:l,y:c,box:u}=function(t,e){const n=t.touches,i=n&&n.length?n[0]:t,{offsetX:r,offsetY:o}=i;let a,s,l=!1;if(((t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot))(r,o,t.target))a=r,s=o;else{const t=e.getBoundingClientRect();a=i.clientX-t.left,s=i.clientY-t.top,l=!0}return{x:a,y:s,box:l}}(t,n),h=a.left+(u&&s.left),d=a.top+(u&&s.top);let{width:f,height:p}=e;return o&&(f-=a.width+s.width,p-=a.height+s.height),{x:Math.round((l-h)/f*n.width/i),y:Math.round((c-d)/p*n.height/i)}}const Zi=t=>Math.round(10*t)/10;function tr(t,e,n){const i=e||1,r=Math.floor(t.height*i),o=Math.floor(t.width*i);t.height=r/i,t.width=o/i;const a=t.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==i||a.height!==r||a.width!==o)&&(t.currentDevicePixelRatio=i,a.height=r,a.width=o,t.ctx.setTransform(i,0,0,i,0,0),!0)}const er=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function nr(t,e){const n=function(t,e){return Gi(t).getPropertyValue(e)}(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0}function ir(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:t.y+n*(e.y-t.y)}}function rr(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:"middle"===i?n<.5?t.y:e.y:"after"===i?n<1?t.y:e.y:n>0?e.y:t.y}}function or(t,e,n,i){const r={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=ir(t,r,n),s=ir(r,o,n),l=ir(o,e,n),c=ir(a,s,n),u=ir(s,l,n);return ir(c,u,n)}const ar=new Map;function sr(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let i=ar.get(n);return i||(i=new Intl.NumberFormat(t,e),ar.set(n,i)),i}(e,n).format(t)}function lr(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function cr(t,e){let n,i;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,i=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)}function ur(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function hr(t){return"angle"===t?{between:Xe,compare:Ge,normalize:Qe}:{between:Ze,compare:(t,e)=>t-e,normalize:t=>t}}function dr({start:t,end:e,count:n,loop:i,style:r}){return{start:t%n,end:e%n,loop:i&&(e-t+1)%n==0,style:r}}function fr(t,e,n){if(!n)return[t];const{property:i,start:r,end:o}=n,a=e.length,{compare:s,between:l,normalize:c}=hr(i),{start:u,end:h,loop:d,style:f}=function(t,e,n){const{property:i,start:r,end:o}=n,{between:a,normalize:s}=hr(i),l=e.length;let c,u,{start:h,end:d,loop:f}=t;if(f){for(h+=l,d+=l,c=0,u=l;c<u&&a(s(e[h%l][i]),r,o);++c)h--,d--;h%=l,d%=l}return d<h&&(d+=l),{start:h,end:d,loop:f,style:t.style}}(t,e,n),p=[];let g,m,b,y=!1,v=null;for(let t=u,n=u;t<=h;++t)m=e[t%a],m.skip||(g=c(m[i]),g!==b&&(y=l(g,r,o),null===v&&(y||l(r,b,g)&&0!==s(r,b))&&(v=0===s(g,r)?t:n),null!==v&&(!y||0===s(o,g)||l(o,b,g))&&(p.push(dr({start:v,end:t,loop:d,count:a,style:f})),v=null),n=t,b=g));return null!==v&&p.push(dr({start:v,end:h,loop:d,count:a,style:f})),p}function pr(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function gr(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var mr=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,i){const r=e.listeners[i],o=e.duration;r.forEach((i=>i({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(n-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=sn.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((n,i)=>{if(!n.running||!n.items.length)return;const r=n.items;let o,a=r.length-1,s=!1;for(;a>=0;--a)o=r[a],o._active?(o._total>n.duration&&(n.duration=o._total),o.tick(t),s=!0):(r[a]=r[r.length-1],r.pop());s&&(i.draw(),this._notify(i,n,t,"progress")),r.length||(n.running=!1,this._notify(i,n,t,"complete"),n.initial=!1),e+=r.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let i=n.length-1;for(;i>=0;--i)n[i].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const br="transparent",yr={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const i=Gn(t||br),r=i.valid&&Gn(e||br);return r&&r.valid?r.mix(i,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class vr{constructor(t,e,n,i){const r=e[n];i=Si([t.to,i,r,t.from]);const o=Si([t.from,r,i]);this._active=!0,this._fn=t.fn||yr[t.type||typeof o],this._easing=mn[t.easing]||mn.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=o,this._to=i,this._promises=void 0}active(){return this._active}update(t,e,n){if(this._active){this._notify(!1);const i=this._target[this._prop],r=n-this._start,o=this._duration-r;this._start=n,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=Si([t.to,e,i,t.from]),this._from=Si([t.from,i,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,n=this._duration,i=this._prop,r=this._from,o=this._loop,a=this._to;let s;if(this._active=r!==a&&(o||e<n),!this._active)return this._target[i]=a,void this._notify(!0);e<0?this._target[i]=r:(s=e/n%2,s=o&&s>1?2-s:s,s=this._easing(Math.min(1,Math.max(0,s))),this._target[i]=this._fn(r,a,s))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}ei.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const xr=Object.keys(ei.animation);ei.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),ei.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),ei.describe("animations",{_fallback:"animation"}),ei.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class wr{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!ue(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const i=t[n];if(!ue(i))return;const r={};for(const t of xr)r[t]=i[t];(ce(i.properties)&&i.properties||[n]).forEach((t=>{t!==n&&e.has(t)||e.set(t,r)}))}))}_animateOptions(t,e){const n=e.options,i=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!i)return[];const r=this._createAnimations(i,n);return n.$shared&&function(t,e){const n=[],i=Object.keys(e);for(let e=0;e<i.length;e++){const r=t[i[e]];r&&r.active()&&n.push(r.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),r}_createAnimations(t,e){const n=this._properties,i=[],r=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let s;for(s=o.length-1;s>=0;--s){const l=o[s];if("$"===l.charAt(0))continue;if("options"===l){i.push(...this._animateOptions(t,e));continue}const c=e[l];let u=r[l];const h=n.get(l);if(u){if(h&&u.active()){u.update(h,c,a);continue}u.cancel()}h&&h.duration?(r[l]=u=new vr(h,t,l,c),i.push(u)):t[l]=c}return i}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?(mr.add(this._chart,n),!0):void 0}}function _r(t,e){const n=t&&t.options||{},i=n.reverse,r=void 0===n.min?e:0,o=void 0===n.max?e:0;return{start:i?o:r,end:i?r:o}}function kr(t,e){const n=[],i=t._getSortedDatasetMetas(e);let r,o;for(r=0,o=i.length;r<o;++r)n.push(i[r].index);return n}function Sr(t,e,n,i={}){const r=t.keys,o="single"===i.mode;let a,s,l,c;if(null!==e){for(a=0,s=r.length;a<s;++a){if(l=+r[a],l===n){if(i.all)continue;break}c=t.values[l],he(c)&&(o||0===e||ze(e)===ze(c))&&(e+=c)}return e}}function Er(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function Or(t,e,n){const i=t[e]||(t[e]={});return i[n]||(i[n]={})}function Cr(t,e,n,i){for(const r of e.getMatchingVisibleMetas(i).reverse()){const e=t[r.index];if(n&&e>0||!n&&e<0)return r.index}return null}function Pr(t,e){const{chart:n,_cachedMeta:i}=t,r=n._stacks||(n._stacks={}),{iScale:o,vScale:a,index:s}=i,l=o.axis,c=a.axis,u=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(o,a,i),h=e.length;let d;for(let t=0;t<h;++t){const n=e[t],{[l]:o,[c]:h}=n;d=(n._stacks||(n._stacks={}))[c]=Or(r,u,o),d[s]=h,d._top=Cr(d,a,!0,i.type),d._bottom=Cr(d,a,!1,i.type)}}function Mr(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function Lr(t,e){const n=t.controller.index,i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[i]||void 0===e[i][n])return;delete e[i][n]}}}const Rr=t=>"reset"===t||"none"===t,Tr=(t,e)=>e?t:Object.assign({},t);class Nr{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Er(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Lr(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,n=this.getDataset(),i=(t,e,n,i)=>"x"===t?e:"r"===t?i:n,r=e.xAxisID=fe(n.xAxisID,Mr(t,"x")),o=e.yAxisID=fe(n.yAxisID,Mr(t,"y")),a=e.rAxisID=fe(n.rAxisID,Mr(t,"r")),s=e.indexAxis,l=e.iAxisID=i(s,r,o,a),c=e.vAxisID=i(s,o,r,a);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&on(this._data,this),t._stacked&&Lr(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),n=this._data;if(ue(e))this._data=function(t){const e=Object.keys(t),n=new Array(e.length);let i,r,o;for(i=0,r=e.length;i<r;++i)o=e[i],n[i]={x:o,y:t[o]};return n}(e);else if(n!==e){if(n){on(n,this);const t=this._cachedMeta;Lr(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(i=e)._chartjs?i._chartjs.listeners.push(this):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),rn.forEach((t=>{const e="_onData"+Oe(t),n=i[t];Object.defineProperty(i,t,{configurable:!0,enumerable:!1,value(...t){const r=n.apply(this,t);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[e]&&n[e](...t)})),r}})})))),this._syncList=[],this._data=e}var i}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,n=this.getDataset();let i=!1;this._dataCheck();const r=e._stacked;e._stacked=Er(e.vScale,e),e.stack!==n.stack&&(i=!0,Lr(e),e.stack=n.stack),this._resyncElements(t),(i||r!==e._stacked)&&Pr(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),n=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:n,_data:i}=this,{iScale:r,_stacked:o}=n,a=r.axis;let s,l,c,u=0===t&&e===i.length||n._sorted,h=t>0&&n._parsed[t-1];if(!1===this._parsing)n._parsed=i,n._sorted=!0,c=i;else{c=ce(i[t])?this.parseArrayData(n,i,t,e):ue(i[t])?this.parseObjectData(n,i,t,e):this.parsePrimitiveData(n,i,t,e);const r=()=>null===l[a]||h&&l[a]<h[a];for(s=0;s<e;++s)n._parsed[s+t]=l=c[s],u&&(r()&&(u=!1),h=l);n._sorted=u}o&&Pr(this,c)}parsePrimitiveData(t,e,n,i){const{iScale:r,vScale:o}=t,a=r.axis,s=o.axis,l=r.getLabels(),c=r===o,u=new Array(i);let h,d,f;for(h=0,d=i;h<d;++h)f=h+n,u[h]={[a]:c||r.parse(l[f],f),[s]:o.parse(e[f],f)};return u}parseArrayData(t,e,n,i){const{xScale:r,yScale:o}=t,a=new Array(i);let s,l,c,u;for(s=0,l=i;s<l;++s)c=s+n,u=e[c],a[s]={x:r.parse(u[0],c),y:o.parse(u[1],c)};return a}parseObjectData(t,e,n,i){const{xScale:r,yScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=new Array(i);let c,u,h,d;for(c=0,u=i;c<u;++c)h=c+n,d=e[h],l[c]={x:r.parse(Ee(d,a),h),y:o.parse(Ee(d,s),h)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const i=this.chart,r=this._cachedMeta,o=e[t.axis];return Sr({keys:kr(i,!0),values:e._stacks[t.axis]},o,r.index,{mode:n})}updateRangeFromParsed(t,e,n,i){const r=n[e.axis];let o=null===r?NaN:r;const a=i&&n._stacks[e.axis];i&&a&&(i.values=a,o=Sr(i,r,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const n=this._cachedMeta,i=n._parsed,r=n._sorted&&t===n.iScale,o=i.length,a=this._getOtherScale(t),s=((t,e,n)=>t&&!e.hidden&&e._stacked&&{keys:kr(n,!0),values:null})(e,n,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:u}=function(t){const{min:e,max:n,minDefined:i,maxDefined:r}=t.getUserBounds();return{min:i?e:Number.NEGATIVE_INFINITY,max:r?n:Number.POSITIVE_INFINITY}}(a);let h,d;function f(){d=i[h];const e=d[a.axis];return!he(d[t.axis])||c>e||u<e}for(h=0;h<o&&(f()||(this.updateRangeFromParsed(l,t,d,s),!r));++h);if(r)for(h=o-1;h>=0;--h)if(!f()){this.updateRangeFromParsed(l,t,d,s);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let i,r,o;for(i=0,r=e.length;i<r;++i)o=e[i][t.axis],he(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,i=e.vScale,r=this.getParsed(t);return{label:n?""+n.getLabelForValue(r[n.axis]):"",value:i?""+i.getLabelForValue(r[i.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,n,i,r;return ue(t)?(e=t.top,n=t.right,i=t.bottom,r=t.left):e=n=i=r=t,{top:e,right:n,bottom:i,left:r,disabled:!1===t}}(fe(this.options.clip,function(t,e,n){if(!1===n)return!1;const i=_r(t,n),r=_r(e,n);return{top:r.end,right:i.end,bottom:r.start,left:i.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,n=this._cachedMeta,i=n.data||[],r=e.chartArea,o=[],a=this._drawStart||0,s=this._drawCount||i.length-a,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(t,r,a,s),c=a;c<a+s;++c){const e=i[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,r))}for(c=0;c<o.length;++c)o[c].draw(t,r)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const i=this.getDataset();let r;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];r=e.$context||(e.$context=function(t,e,n){return Ei(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),r.parsed=this.getParsed(t),r.raw=i.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=function(t,e){return Ei(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=i,r.index=r.datasetIndex=this.index;return r.active=!!e,r.mode=n,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const i="active"===e,r=this._cachedDataOpts,o=t+"-"+e,a=r[o],s=this.enableOptionSharing&&Ce(n);if(a)return Tr(a,s);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),u=i?[`${t}Hover`,"hover",t,""]:[t,""],h=l.getOptionScopes(this.getDataset(),c),d=Object.keys(ei.elements[t]),f=l.resolveNamedOptions(h,d,(()=>this.getContext(n,i)),u);return f.$shared&&(f.$shared=s,r[o]=Object.freeze(Tr(f,s))),f}_resolveAnimations(t,e,n){const i=this.chart,r=this._cachedDataOpts,o=`animation-${e}`,a=r[o];if(a)return a;let s;if(!1!==i.options.animation){const i=this.chart.config,r=i.datasetAnimationScopeKeys(this._type,e),o=i.getOptionScopes(this.getDataset(),r);s=i.createResolver(o,this.getContext(t,n,e))}const l=new wr(i,s&&s.animations);return s&&s._cacheable&&(r[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Rr(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const n=this.resolveDataElementOptions(t,e),i=this._sharedOptions,r=this.getSharedOptions(n),o=this.includeOptions(e,r)||r!==i;return this.updateSharedOptions(r,e,n),{sharedOptions:r,includeOptions:o}}updateElement(t,e,n,i){Rr(i)?Object.assign(t,n):this._resolveAnimations(e,i).update(t,n)}updateSharedOptions(t,e,n){t&&!Rr(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,i){t.active=i;const r=this.getStyle(e,i);this._resolveAnimations(e,n,i).update(t,{options:!i&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,n=this._cachedMeta.data;for(const[t,e,n]of this._syncList)this[t](e,n);this._syncList=[];const i=n.length,r=e.length,o=Math.min(r,i);o&&this.parse(0,o),r>i?this._insertElements(i,r-i,t):r<i&&this._removeElements(r,i-r)}_insertElements(t,e,n=!0){const i=this._cachedMeta,r=i.data,o=t+e;let a;const s=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(s(r),a=t;a<o;++a)r[a]=new this.dataElementType;this._parsing&&s(i._parsed),this.parse(t,e),n&&this.updateElements(r,t,e,"reset")}updateElements(t,e,n,i){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const i=n._parsed.splice(t,e);n._stacked&&Lr(n,i)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,i]=t;this[e](n,i)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const n=arguments.length-2;n&&this._sync(["_insertElements",t,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Dr(t){const e=t.iScale,n=function(t,e){if(!t._cache.$bar){const n=t.getMatchingVisibleMetas(e);let i=[];for(let e=0,r=n.length;e<r;e++)i=i.concat(n[e].controller.getAllParsedValues(t));t._cache.$bar=an(i.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let i,r,o,a,s=e._length;const l=()=>{32767!==o&&-32768!==o&&(Ce(a)&&(s=Math.min(s,Math.abs(o-a)||s)),a=o)};for(i=0,r=n.length;i<r;++i)o=e.getPixelForValue(n[i]),l();for(a=void 0,i=0,r=e.ticks.length;i<r;++i)o=e.getPixelForTick(i),l();return s}function Ar(t,e,n,i){return ce(t)?function(t,e,n,i){const r=n.parse(t[0],i),o=n.parse(t[1],i),a=Math.min(r,o),s=Math.max(r,o);let l=a,c=s;Math.abs(a)>Math.abs(s)&&(l=s,c=a),e[n.axis]=c,e._custom={barStart:l,barEnd:c,start:r,end:o,min:a,max:s}}(t,e,n,i):e[n.axis]=n.parse(t,i),e}function Ir(t,e,n,i){const r=t.iScale,o=t.vScale,a=r.getLabels(),s=r===o,l=[];let c,u,h,d;for(c=n,u=n+i;c<u;++c)d=e[c],h={},h[r.axis]=s||r.parse(a[c],c),l.push(Ar(d,h,o,c));return l}function jr(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Fr(t,e,n,i){let r=e.borderSkipped;const o={};if(!r)return void(t.borderSkipped=o);if(!0===r)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:s,reverse:l,top:c,bottom:u}=function(t){let e,n,i,r,o;return t.horizontal?(e=t.base>t.x,n="left",i="right"):(e=t.base<t.y,n="bottom",i="top"),e?(r="end",o="start"):(r="start",o="end"),{start:n,end:i,reverse:e,top:r,bottom:o}}(t);"middle"===r&&n&&(t.enableBorderRadius=!0,(n._top||0)===i?r=c:(n._bottom||0)===i?r=u:(o[zr(u,a,s,l)]=!0,r=c)),o[zr(r,a,s,l)]=!0,t.borderSkipped=o}function zr(t,e,n,i){var r,o,a;return i?(a=n,t=Vr(t=(r=t)===(o=e)?a:r===a?o:r,n,e)):t=Vr(t,e,n),t}function Vr(t,e,n){return"start"===t?e:"end"===t?n:t}function Br(t,{inflateAmount:e},n){t.inflateAmount="auto"===e?1===n?.33:0:e}Nr.defaults={},Nr.prototype.datasetElementType=null,Nr.prototype.dataElementType=null;class Hr extends Nr{parsePrimitiveData(t,e,n,i){return Ir(t,e,n,i)}parseArrayData(t,e,n,i){return Ir(t,e,n,i)}parseObjectData(t,e,n,i){const{iScale:r,vScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l="x"===r.axis?a:s,c="x"===o.axis?a:s,u=[];let h,d,f,p;for(h=n,d=n+i;h<d;++h)p=e[h],f={},f[r.axis]=r.parse(Ee(p,l),h),u.push(Ar(Ee(p,c),f,o,h));return u}updateRangeFromParsed(t,e,n,i){super.updateRangeFromParsed(t,e,n,i);const r=n._custom;r&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:i}=e,r=this.getParsed(t),o=r._custom,a=jr(o)?"["+o.start+", "+o.end+"]":""+i.getLabelForValue(r[i.axis]);return{label:""+n.getLabelForValue(r[n.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,i){const r="reset"===i,{index:o,_cachedMeta:{vScale:a}}=this,s=a.getBasePixel(),l=a.isHorizontal(),c=this._getRuler(),{sharedOptions:u,includeOptions:h}=this._getSharedOptions(e,i);for(let d=e;d<e+n;d++){const e=this.getParsed(d),n=r||le(e[a.axis])?{base:s,head:s}:this._calculateBarValuePixels(d),f=this._calculateBarIndexPixels(d,c),p=(e._stacks||{})[a.axis],g={horizontal:l,base:n.base,enableBorderRadius:!p||jr(e._custom)||o===p._top||o===p._bottom,x:l?n.head:f.center,y:l?f.center:n.head,height:l?f.size:Math.abs(n.size),width:l?Math.abs(n.size):f.size};h&&(g.options=u||this.resolveDataElementOptions(d,t[d].active?"active":i));const m=g.options||t[d].options;Fr(g,m,p,o),Br(g,m,c.ratio),this.updateElement(t[d],d,g,i)}}_getStacks(t,e){const{iScale:n}=this._cachedMeta,i=n.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),r=n.options.stacked,o=[],a=t=>{const n=t.controller.getParsed(e),i=n&&n[t.vScale.axis];if(le(i)||isNaN(i))return!0};for(const n of i)if((void 0===e||!a(n))&&((!1===r||-1===o.indexOf(n.stack)||void 0===r&&void 0===n.stack)&&o.push(n.stack),n.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const i=this._getStacks(t,n),r=void 0!==e?i.indexOf(e):-1;return-1===r?i.length-1:r}_getRuler(){const t=this.options,e=this._cachedMeta,n=e.iScale,i=[];let r,o;for(r=0,o=e.data.length;r<o;++r)i.push(n.getPixelForValue(this.getParsed(r)[n.axis],r));const a=t.barThickness;return{min:a||Dr(e),pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:n},options:{base:i,minBarLength:r}}=this,o=i||0,a=this.getParsed(t),s=a._custom,l=jr(s);let c,u,h=a[e.axis],d=0,f=n?this.applyStack(e,a,n):h;f!==h&&(d=f-h,f=h),l&&(h=s.barStart,f=s.barEnd-s.barStart,0!==h&&ze(h)!==ze(s.barEnd)&&(d=0),d+=h);const p=le(i)||l?d:i;let g=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(d+f):g,u=c-g,Math.abs(u)<r){u=function(t,e,n){return 0!==t?ze(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(u,e,o)*r,h===o&&(g-=u/2);const t=e.getPixelForDecimal(0),n=e.getPixelForDecimal(1),i=Math.min(t,n),a=Math.max(t,n);g=Math.max(Math.min(g,a),i),c=g+u}if(g===e.getPixelForValue(o)){const t=ze(u)*e.getLineWidthForValue(o)/2;g+=t,u-=t}return{size:u,base:g,head:c,center:c+u/2}}_calculateBarIndexPixels(t,e){const n=e.scale,i=this.options,r=i.skipNull,o=fe(i.maxBarThickness,1/0);let a,s;if(e.grouped){const n=r?this._getStackCount(t):e.stackCount,l="flex"===i.barThickness?function(t,e,n,i){const r=e.pixels,o=r[t];let a=t>0?r[t-1]:null,s=t<r.length-1?r[t+1]:null;const l=n.categoryPercentage;null===a&&(a=o-(null===s?e.end-e.start:s-o)),null===s&&(s=o+o-a);const c=o-(o-Math.min(a,s))/2*l;return{chunk:Math.abs(s-a)/2*l/i,ratio:n.barPercentage,start:c}}(t,e,i,n):function(t,e,n,i){const r=n.barThickness;let o,a;return le(r)?(o=e.min*n.categoryPercentage,a=n.barPercentage):(o=r*i,a=1),{chunk:o/i,ratio:a,start:e.pixels[t]-o/2}}(t,e,i,n),c=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);a=l.start+l.chunk*c+l.chunk/2,s=Math.min(o,l.chunk*l.ratio)}else a=n.getPixelForValue(this.getParsed(t)[n.axis],t),s=Math.min(o,e.min*e.ratio);return{base:a-s/2,head:a+s/2,center:a,size:s}}draw(){const t=this._cachedMeta,e=t.vScale,n=t.data,i=n.length;let r=0;for(;r<i;++r)null!==this.getParsed(r)[e.axis]&&n[r].draw(this._ctx)}}Hr.id="bar",Hr.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Hr.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Wr extends Nr{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,n,i){const r=super.parsePrimitiveData(t,e,n,i);for(let t=0;t<r.length;t++)r[t]._custom=this.resolveDataElementOptions(t+n).radius;return r}parseArrayData(t,e,n,i){const r=super.parseArrayData(t,e,n,i);for(let t=0;t<r.length;t++){const i=e[n+t];r[t]._custom=fe(i[2],this.resolveDataElementOptions(t+n).radius)}return r}parseObjectData(t,e,n,i){const r=super.parseObjectData(t,e,n,i);for(let t=0;t<r.length;t++){const i=e[n+t];r[t]._custom=fe(i&&i.r&&+i.r,this.resolveDataElementOptions(t+n).radius)}return r}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:n,yScale:i}=e,r=this.getParsed(t),o=n.getLabelForValue(r.x),a=i.getLabelForValue(r.y),s=r._custom;return{label:e.label,value:"("+o+", "+a+(s?", "+s:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:s,includeOptions:l}=this._getSharedOptions(e,i),c=o.axis,u=a.axis;for(let h=e;h<e+n;h++){const e=t[h],n=!r&&this.getParsed(h),d={},f=d[c]=r?o.getPixelForDecimal(.5):o.getPixelForValue(n[c]),p=d[u]=r?a.getBasePixel():a.getPixelForValue(n[u]);d.skip=isNaN(f)||isNaN(p),l&&(d.options=s||this.resolveDataElementOptions(h,e.active?"active":i),r&&(d.options.radius=0)),this.updateElement(e,h,d,i)}}resolveDataElementOptions(t,e){const n=this.getParsed(t);let i=super.resolveDataElementOptions(t,e);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const r=i.radius;return"active"!==e&&(i.radius=0),i.radius+=fe(n&&n._custom,r),i}}Wr.id="bubble",Wr.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Wr.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Ur extends Nr{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const n=this.getDataset().data,i=this._cachedMeta;if(!1===this._parsing)i._parsed=n;else{let r,o,a=t=>+n[t];if(ue(n[t])){const{key:t="value"}=this._parsing;a=e=>+Ee(n[e],t)}for(r=t,o=t+e;r<o;++r)i._parsed[r]=a(r)}}_getRotation(){return Ue(this.options.rotation-90)}_getCircumference(){return Ue(this.options.circumference)}_getRotationExtents(){let t=Re,e=-Re;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)){const i=this.chart.getDatasetMeta(n).controller,r=i._getRotation(),o=i._getCircumference();t=Math.min(t,r),e=Math.max(e,r+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:n}=e,i=this._cachedMeta,r=i.data,o=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,a=Math.max((Math.min(n.width,n.height)-o)/2,0),s=Math.min((c=a,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:l/c),1);var l,c;const u=this._getRingWeight(this.index),{circumference:h,rotation:d}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:g,offsetY:m}=function(t,e,n){let i=1,r=1,o=0,a=0;if(e<Re){const s=t,l=s+e,c=Math.cos(s),u=Math.sin(s),h=Math.cos(l),d=Math.sin(l),f=(t,e,i)=>Xe(t,s,l,!0)?1:Math.max(e,e*n,i,i*n),p=(t,e,i)=>Xe(t,s,l,!0)?-1:Math.min(e,e*n,i,i*n),g=f(0,c,h),m=f(Ae,u,d),b=p(Le,c,h),y=p(Le+Ae,u,d);i=(g-b)/2,r=(m-y)/2,o=-(g+b)/2,a=-(m+y)/2}return{ratioX:i,ratioY:r,offsetX:o,offsetY:a}}(d,h,s),b=(n.width-o)/f,y=(n.height-o)/p,v=Math.max(Math.min(b,y)/2,0),x=pe(this.options.radius,v),w=(x-Math.max(x*s,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*x,this.offsetY=m*x,i.total=this.calculateTotal(),this.outerRadius=x-w*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-w*u,0),this.updateElements(r,0,r.length,t)}_circumference(t,e){const n=this.options,i=this._cachedMeta,r=this._getCircumference();return e&&n.animation.animateRotate||!this.chart.getDataVisibility(t)||null===i._parsed[t]||i.data[t].hidden?0:this.calculateCircumference(i._parsed[t]*r/Re)}updateElements(t,e,n,i){const r="reset"===i,o=this.chart,a=o.chartArea,s=o.options.animation,l=(a.left+a.right)/2,c=(a.top+a.bottom)/2,u=r&&s.animateScale,h=u?0:this.innerRadius,d=u?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,i);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,r);for(g=e;g<e+n;++g){const e=this._circumference(g,r),n=t[g],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:d,innerRadius:h};p&&(o.options=f||this.resolveDataElementOptions(g,n.active?"active":i)),m+=e,this.updateElement(n,g,o,i)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let n,i=0;for(n=0;n<e.length;n++){const r=t._parsed[n];null===r||isNaN(r)||!this.chart.getDataVisibility(n)||e[n].hidden||(i+=Math.abs(r))}return i}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?Re*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],r=sr(e._parsed[t],n.options.locale);return{label:i[t]||"",value:r}}getMaxBorderWidth(t){let e=0;const n=this.chart;let i,r,o,a,s;if(!t)for(i=0,r=n.data.datasets.length;i<r;++i)if(n.isDatasetVisible(i)){o=n.getDatasetMeta(i),t=o.data,a=o.controller;break}if(!t)return 0;for(i=0,r=t.length;i<r;++i)s=a.resolveDataElementOptions(i),"inner"!==s.borderAlign&&(e=Math.max(e,s.borderWidth||0,s.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let n=0,i=t.length;n<i;++n){const t=this.resolveDataElementOptions(n);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e}_getRingWeight(t){return Math.max(fe(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Ur.id="doughnut",Ur.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Ur.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Ur.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,i)=>{const r=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const n=": "+t.formattedValue;return ce(e)?(e=e.slice(),e[0]+=n):e+=n,e}}}}};class $r extends Nr{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:n,data:i=[],_dataset:r}=e,o=this.chart._animationsDisabled;let{start:a,count:s}=hn(e,i,o);this._drawStart=a,this._drawCount=s,dn(e)&&(a=0,s=i.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!r._decimated,n.points=i;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(n,void 0,{animated:!o,options:l},t),this.updateElements(i,a,s,t)}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:a,_stacked:s,_dataset:l}=this._cachedMeta,{sharedOptions:c,includeOptions:u}=this._getSharedOptions(e,i),h=o.axis,d=a.axis,{spanGaps:f,segment:p}=this.options,g=Be(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||r||"none"===i;let b=e>0&&this.getParsed(e-1);for(let f=e;f<e+n;++f){const e=t[f],n=this.getParsed(f),y=m?e:{},v=le(n[d]),x=y[h]=o.getPixelForValue(n[h],f),w=y[d]=r||v?a.getBasePixel():a.getPixelForValue(s?this.applyStack(a,n,s):n[d],f);y.skip=isNaN(x)||isNaN(w)||v,y.stop=f>0&&Math.abs(n[h]-b[h])>g,p&&(y.parsed=n,y.raw=l.data[f]),u&&(y.options=c||this.resolveDataElementOptions(f,e.active?"active":i)),m||this.updateElement(e,f,y,i),b=n}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,n=e.options&&e.options.borderWidth||0,i=t.data||[];if(!i.length)return n;const r=i[0].size(this.resolveDataElementOptions(0)),o=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(n,r,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}$r.id="line",$r.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},$r.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class Yr extends Nr{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],r=sr(e._parsed[t].r,n.options.locale);return{label:i[t]||"",value:r}}parseObjectData(t,e,n,i){return zi.bind(this)(t,e,n,i)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,n)=>{const i=this.getParsed(n).r;!isNaN(i)&&this.chart.getDataVisibility(n)&&(i<e.min&&(e.min=i),i>e.max&&(e.max=i))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,n=t.options,i=Math.min(e.right-e.left,e.bottom-e.top),r=Math.max(i/2,0),o=(r-Math.max(n.cutoutPercentage?r/100*n.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=r-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,n,i){const r="reset"===i,o=this.chart,a=o.options.animation,s=this._cachedMeta.rScale,l=s.xCenter,c=s.yCenter,u=s.getIndexAngle(0)-.5*Le;let h,d=u;const f=360/this.countVisibleElements();for(h=0;h<e;++h)d+=this._computeAngle(h,i,f);for(h=e;h<e+n;h++){const e=t[h];let n=d,p=d+this._computeAngle(h,i,f),g=o.getDataVisibility(h)?s.getDistanceFromCenterForValue(this.getParsed(h).r):0;d=p,r&&(a.animateScale&&(g=0),a.animateRotate&&(n=p=u));const m={x:l,y:c,innerRadius:0,outerRadius:g,startAngle:n,endAngle:p,options:this.resolveDataElementOptions(h,e.active?"active":i)};this.updateElement(e,h,m,i)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&e++})),e}_computeAngle(t,e,n){return this.chart.getDataVisibility(t)?Ue(this.resolveDataElementOptions(t,e).angle||n):0}}Yr.id="polarArea",Yr.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},Yr.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,i)=>{const r=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Kr extends Ur{}Kr.id="pie",Kr.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class qr extends Nr{getLabelAndValue(t){const e=this._cachedMeta.vScale,n=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(n[e.axis])}}parseObjectData(t,e,n,i){return zi.bind(this)(t,e,n,i)}update(t){const e=this._cachedMeta,n=e.dataset,i=e.data||[],r=e.iScale.getLabels();if(n.points=i,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:r.length===i.length,options:e};this.updateElement(n,void 0,o,t)}this.updateElements(i,0,i.length,t)}updateElements(t,e,n,i){const r=this._cachedMeta.rScale,o="reset"===i;for(let a=e;a<e+n;a++){const e=t[a],n=this.resolveDataElementOptions(a,e.active?"active":i),s=r.getPointPositionForValue(a,this.getParsed(a).r),l=o?r.xCenter:s.x,c=o?r.yCenter:s.y,u={x:l,y:c,angle:s.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(e,a,u,i)}}}qr.id="radar",qr.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},qr.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Gr{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return Be(this.x)&&Be(this.y)}getProps(t,e){const n=this.$animations;if(!e||!n)return this;const i={};return t.forEach((t=>{i[t]=n[t]&&n[t].active()?n[t]._to:this[t]})),i}}Gr.defaults={},Gr.defaultRoutes=void 0;const Qr={values:t=>ce(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const i=this.chart.options.locale;let r,o=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(r="scientific"),o=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const a=Fe(Math.abs(o)),s=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:r,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),sr(t,i,l)},logarithmic(t,e,n){if(0===t)return"0";const i=t/Math.pow(10,Math.floor(Fe(t)));return 1===i||2===i||5===i?Qr.numeric.call(this,t,e,n):""}};var Xr={formatters:Qr};function Jr(t,e,n,i,r){const o=fe(i,0),a=Math.min(fe(r,t.length),t.length);let s,l,c,u=0;for(n=Math.ceil(n),r&&(s=r-i,n=s/Math.floor(s/n)),c=o;c<0;)u++,c=Math.round(o+u*n);for(l=Math.max(o,0);l<a;l++)l===c&&(e.push(t[l]),u++,c=Math.round(o+u*n))}ei.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Xr.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),ei.route("scale.ticks","color","","color"),ei.route("scale.grid","color","","borderColor"),ei.route("scale.grid","borderColor","","borderColor"),ei.route("scale.title","color","","color"),ei.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),ei.describe("scales",{_fallback:"scale"}),ei.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Zr=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n;function to(t,e){const n=[],i=t.length/e,r=t.length;let o=0;for(;o<r;o+=i)n.push(t[Math.floor(o)]);return n}function eo(t,e,n){const i=t.ticks.length,r=Math.min(e,i-1),o=t._startPixel,a=t._endPixel,s=1e-6;let l,c=t.getPixelForTick(r);if(!(n&&(l=1===i?Math.max(c-o,a-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(r-1))/2,c+=r<e?l:-l,c<o-s||c>a+s)))return c}function no(t){return t.drawTicks?t.tickLength:0}function io(t,e){if(!t.display)return 0;const n=ki(t.font,e),i=_i(t.padding);return(ce(t.text)?t.text.length:1)*n.lineHeight+i.height}function ro(t,e,n){let i=cn(t);return(n&&"right"!==e||!n&&"right"===e)&&(i=(t=>"left"===t?"right":"right"===t?"left":t)(i)),i}class oo extends Gr{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:i}=this;return t=de(t,Number.POSITIVE_INFINITY),e=de(e,Number.NEGATIVE_INFINITY),n=de(n,Number.POSITIVE_INFINITY),i=de(i,Number.NEGATIVE_INFINITY),{min:de(t,n),max:de(e,i),minDefined:he(t),maxDefined:he(e)}}getMinMax(t){let e,{min:n,max:i,minDefined:r,maxDefined:o}=this.getUserBounds();if(r&&o)return{min:n,max:i};const a=this.getMatchingVisibleMetas();for(let s=0,l=a.length;s<l;++s)e=a[s].controller.getMinMax(this,t),r||(n=Math.min(n,e.min)),o||(i=Math.max(i,e.max));return n=o&&n>i?i:n,i=r&&n>i?n:i,{min:de(n,de(i,n)),max:de(i,de(n,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){ge(this.options.beforeUpdate,[this])}update(t,e,n){const{beginAtZero:i,grace:r,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,n){const{min:i,max:r}=t,o=pe(e,(r-i)/2),a=(t,e)=>n&&0===t?0:t+e;return{min:a(i,-Math.abs(o)),max:a(r,o)}}(this,r,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const s=a<this.ticks.length;this._convertTicksToLabels(s?to(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const n=t.options.ticks,i=n.maxTicksLimit||function(t){const e=t.options.offset,n=t._tickSize(),i=t._length/n+(e?0:1),r=t._maxLength/n;return Math.floor(Math.min(i,r))}(t),r=n.major.enabled?function(t){const e=[];let n,i;for(n=0,i=t.length;n<i;n++)t[n].major&&e.push(n);return e}(e):[],o=r.length,a=r[0],s=r[o-1],l=[];if(o>i)return function(t,e,n,i){let r,o=0,a=n[0];for(i=Math.ceil(i),r=0;r<t.length;r++)r===a&&(e.push(t[r]),o++,a=n[o*i])}(e,l,r,o/i),l;const c=function(t,e,n){const i=function(t){const e=t.length;let n,i;if(e<2)return!1;for(i=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==i)return!1;return i}(t),r=e.length/n;if(!i)return Math.max(r,1);const o=function(t){const e=[],n=Math.sqrt(t);let i;for(i=1;i<n;i++)t%i==0&&(e.push(i),e.push(t/i));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e}(i);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>r)return e}return Math.max(r,1)}(r,e,i);if(o>0){let t,n;const i=o>1?Math.round((s-a)/(o-1)):null;for(Jr(e,l,c,le(i)?0:a-i,a),t=0,n=o-1;t<n;t++)Jr(e,l,c,r[t],r[t+1]);return Jr(e,l,c,s,le(i)?e.length:s+i),l}return Jr(e,l,c),l}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),s&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,n=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,n=!n),this._startPixel=t,this._endPixel=e,this._reversePixels=n,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){ge(this.options.afterUpdate,[this])}beforeSetDimensions(){ge(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){ge(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),ge(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){ge(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let n,i,r;for(n=0,i=t.length;n<i;n++)r=t[n],r.label=ge(e.callback,[r.value,n,t],this)}afterTickToLabelConversion(){ge(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){ge(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,n=this.ticks.length,i=e.minRotation||0,r=e.maxRotation;let o,a,s,l=i;if(!this._isVisible()||!e.display||i>=r||n<=1||!this.isHorizontal())return void(this.labelRotation=i);const c=this._getLabelSizes(),u=c.widest.width,h=c.highest.height,d=Je(this.chart.width-u,0,this.maxWidth);o=t.offset?this.maxWidth/n:d/(n-1),u+6>o&&(o=d/(n-(t.offset?.5:1)),a=this.maxHeight-no(t.grid)-e.padding-io(t.title,this.chart.options.font),s=Math.sqrt(u*u+h*h),l=$e(Math.min(Math.asin(Je((c.highest.height+6)/o,-1,1)),Math.asin(Je(a/s,-1,1))-Math.asin(Je(h/s,-1,1)))),l=Math.max(i,Math.min(r,l))),this.labelRotation=l}afterCalculateLabelRotation(){ge(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){ge(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:n,title:i,grid:r}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=io(i,e.options.font);if(a?(t.width=this.maxWidth,t.height=no(r)+o):(t.height=this.maxHeight,t.width=no(r)+o),n.display&&this.ticks.length){const{first:e,last:i,widest:r,highest:o}=this._getLabelSizes(),s=2*n.padding,l=Ue(this.labelRotation),c=Math.cos(l),u=Math.sin(l);if(a){const e=n.mirror?0:u*r.width+c*o.height;t.height=Math.min(this.maxHeight,t.height+e+s)}else{const e=n.mirror?0:c*r.width+u*o.height;t.width=Math.min(this.maxWidth,t.width+e+s)}this._calculatePadding(e,i,u,c)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,n,i){const{ticks:{align:r,padding:o},position:a}=this.options,s=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,h=0;s?l?(u=i*t.width,h=n*e.height):(u=n*t.height,h=i*e.width):"start"===r?h=e.width:"end"===r?u=t.width:"inner"!==r&&(u=t.width/2,h=e.width/2),this.paddingLeft=Math.max((u-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((h-c+o)*this.width/(this.width-c),0)}else{let n=e.height/2,i=t.height/2;"start"===r?(n=0,i=t.height):"end"===r&&(n=e.height,i=0),this.paddingTop=n+o,this.paddingBottom=i+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){ge(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,n=t.length;e<n;e++)le(t[e].label)&&(t.splice(e,1),n--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let n=this.ticks;e<n.length&&(n=to(n,e)),this._labelSizes=t=this._computeLabelSizes(n,n.length)}return t}_computeLabelSizes(t,e){const{ctx:n,_longestTextCache:i}=this,r=[],o=[];let a,s,l,c,u,h,d,f,p,g,m,b=0,y=0;for(a=0;a<e;++a){if(c=t[a].label,u=this._resolveTickFontOptions(a),n.font=h=u.string,d=i[h]=i[h]||{data:{},gc:[]},f=u.lineHeight,p=g=0,le(c)||ce(c)){if(ce(c))for(s=0,l=c.length;s<l;++s)m=c[s],le(m)||ce(m)||(p=ni(n,d.data,d.gc,p,m),g+=f)}else p=ni(n,d.data,d.gc,p,c),g=f;r.push(p),o.push(g),b=Math.max(p,b),y=Math.max(g,y)}!function(t,e){me(t,(t=>{const n=t.gc,i=n.length/2;let r;if(i>e){for(r=0;r<i;++r)delete t.data[n[r]];n.splice(0,i)}}))}(i,e);const v=r.indexOf(b),x=o.indexOf(y),w=t=>({width:r[t]||0,height:o[t]||0});return{first:w(0),last:w(e-1),widest:w(v),highest:w(x),widths:r,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Je(this._alignToPixels?ri(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const n=e[t];return n.$context||(n.$context=function(t,e,n){return Ei(t,{tick:n,index:e,type:"tick"})}(this.getContext(),t,n))}return this.$context||(this.$context=Ei(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=Ue(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),r=this._getLabelSizes(),o=t.autoSkipPadding||0,a=r?r.widest.width+o:0,s=r?r.highest.height+o:0;return this.isHorizontal()?s*n>a*i?a/n:s/i:s*i<a*n?s/n:a/i}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,n=this.chart,i=this.options,{grid:r,position:o}=i,a=r.offset,s=this.isHorizontal(),l=this.ticks.length+(a?1:0),c=no(r),u=[],h=r.setContext(this.getContext()),d=h.drawBorder?h.borderWidth:0,f=d/2,p=function(t){return ri(n,t,d)};let g,m,b,y,v,x,w,_,k,S,E,O;if("top"===o)g=p(this.bottom),x=this.bottom-c,_=g-f,S=p(t.top)+f,O=t.bottom;else if("bottom"===o)g=p(this.top),S=t.top,O=p(t.bottom)-f,x=g+f,_=this.top+c;else if("left"===o)g=p(this.right),v=this.right-c,w=g-f,k=p(t.left)+f,E=t.right;else if("right"===o)g=p(this.left),k=t.left,E=p(t.right)-f,v=g+f,w=this.left+c;else if("x"===e){if("center"===o)g=p((t.top+t.bottom)/2+.5);else if(ue(o)){const t=Object.keys(o)[0],e=o[t];g=p(this.chart.scales[t].getPixelForValue(e))}S=t.top,O=t.bottom,x=g+f,_=x+c}else if("y"===e){if("center"===o)g=p((t.left+t.right)/2);else if(ue(o)){const t=Object.keys(o)[0],e=o[t];g=p(this.chart.scales[t].getPixelForValue(e))}v=g-f,w=v-c,k=t.left,E=t.right}const C=fe(i.ticks.maxTicksLimit,l),P=Math.max(1,Math.ceil(l/C));for(m=0;m<l;m+=P){const t=r.setContext(this.getContext(m)),e=t.lineWidth,i=t.color,o=t.borderDash||[],l=t.borderDashOffset,c=t.tickWidth,h=t.tickColor,d=t.tickBorderDash||[],f=t.tickBorderDashOffset;b=eo(this,m,a),void 0!==b&&(y=ri(n,b,e),s?v=w=k=E=y:x=_=S=O=y,u.push({tx1:v,ty1:x,tx2:w,ty2:_,x1:k,y1:S,x2:E,y2:O,width:e,color:i,borderDash:o,borderDashOffset:l,tickWidth:c,tickColor:h,tickBorderDash:d,tickBorderDashOffset:f}))}return this._ticksLength=l,this._borderValue=g,u}_computeLabelItems(t){const e=this.axis,n=this.options,{position:i,ticks:r}=n,o=this.isHorizontal(),a=this.ticks,{align:s,crossAlign:l,padding:c,mirror:u}=r,h=no(n.grid),d=h+c,f=u?-c:d,p=-Ue(this.labelRotation),g=[];let m,b,y,v,x,w,_,k,S,E,O,C,P="middle";if("top"===i)w=this.bottom-f,_=this._getXAxisLabelAlignment();else if("bottom"===i)w=this.top+f,_=this._getXAxisLabelAlignment();else if("left"===i){const t=this._getYAxisLabelAlignment(h);_=t.textAlign,x=t.x}else if("right"===i){const t=this._getYAxisLabelAlignment(h);_=t.textAlign,x=t.x}else if("x"===e){if("center"===i)w=(t.top+t.bottom)/2+d;else if(ue(i)){const t=Object.keys(i)[0],e=i[t];w=this.chart.scales[t].getPixelForValue(e)+d}_=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===i)x=(t.left+t.right)/2-d;else if(ue(i)){const t=Object.keys(i)[0],e=i[t];x=this.chart.scales[t].getPixelForValue(e)}_=this._getYAxisLabelAlignment(h).textAlign}"y"===e&&("start"===s?P="top":"end"===s&&(P="bottom"));const M=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){y=a[m],v=y.label;const t=r.setContext(this.getContext(m));k=this.getPixelForTick(m)+r.labelOffset,S=this._resolveTickFontOptions(m),E=S.lineHeight,O=ce(v)?v.length:1;const e=O/2,n=t.color,s=t.textStrokeColor,c=t.textStrokeWidth;let h,d=_;if(o?(x=k,"inner"===_&&(d=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),C="top"===i?"near"===l||0!==p?-O*E+E/2:"center"===l?-M.highest.height/2-e*E+E:-M.highest.height+E/2:"near"===l||0!==p?E/2:"center"===l?M.highest.height/2-e*E:M.highest.height-O*E,u&&(C*=-1)):(w=k,C=(1-O)*E/2),t.showLabelBackdrop){const e=_i(t.backdropPadding),n=M.heights[m],i=M.widths[m];let r=w+C-e.top,o=x-e.left;switch(P){case"middle":r-=n/2;break;case"bottom":r-=n}switch(_){case"center":o-=i/2;break;case"right":o-=i}h={left:o,top:r,width:i+e.width,height:n+e.height,color:t.backdropColor}}g.push({rotation:p,label:v,font:S,color:n,strokeColor:s,strokeWidth:c,textOffset:C,textAlign:d,textBaseline:P,translation:[x,w],backdrop:h})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-Ue(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align?n="right":"inner"===e.align&&(n="inner"),n}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:n,mirror:i,padding:r}}=this.options,o=t+r,a=this._getLabelSizes().widest.width;let s,l;return"left"===e?i?(l=this.right+r,"near"===n?s="left":"center"===n?(s="center",l+=a/2):(s="right",l+=a)):(l=this.right-o,"near"===n?s="right":"center"===n?(s="center",l-=a/2):(s="left",l=this.left)):"right"===e?i?(l=this.left+r,"near"===n?s="right":"center"===n?(s="center",l-=a/2):(s="left",l-=a)):(l=this.left+o,"near"===n?s="left":"center"===n?(s="center",l+=a/2):(s="right",l=this.right)):s="right",{textAlign:s,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:i,width:r,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,i,r,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const n=this.ticks.findIndex((e=>e.value===t));return n>=0?e.setContext(this.getContext(n)).lineWidth:0}drawGrid(t){const e=this.options.grid,n=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,o;const a=(t,e,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(e.display)for(r=0,o=i.length;r<o;++r){const t=i[r];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:n}}=this,i=n.setContext(this.getContext()),r=n.drawBorder?i.borderWidth:0;if(!r)return;const o=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let s,l,c,u;this.isHorizontal()?(s=ri(t,this.left,r)-r/2,l=ri(t,this.right,o)+o/2,c=u=a):(c=ri(t,this.top,r)-r/2,u=ri(t,this.bottom,o)+o/2,s=l=a),e.save(),e.lineWidth=i.borderWidth,e.strokeStyle=i.borderColor,e.beginPath(),e.moveTo(s,c),e.lineTo(l,u),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,n=this._computeLabelArea();n&&ci(e,n);const i=this._labelItems||(this._labelItems=this._computeLabelItems(t));let r,o;for(r=0,o=i.length;r<o;++r){const t=i[r],n=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),fi(e,o,0,t.textOffset,n,t)}n&&ui(e)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:i}}=this;if(!n.display)return;const r=ki(n.font),o=_i(n.padding),a=n.align;let s=r.lineHeight/2;"bottom"===e||"center"===e||ue(e)?(s+=o.bottom,ce(n.text)&&(s+=r.lineHeight*(n.text.length-1))):s+=o.top;const{titleX:l,titleY:c,maxWidth:u,rotation:h}=function(t,e,n,i){const{top:r,left:o,bottom:a,right:s,chart:l}=t,{chartArea:c,scales:u}=l;let h,d,f,p=0;const g=a-r,m=s-o;if(t.isHorizontal()){if(d=un(i,o,s),ue(n)){const t=Object.keys(n)[0],i=n[t];f=u[t].getPixelForValue(i)+g-e}else f="center"===n?(c.bottom+c.top)/2+g-e:Zr(t,n,e);h=s-o}else{if(ue(n)){const t=Object.keys(n)[0],i=n[t];d=u[t].getPixelForValue(i)-m+e}else d="center"===n?(c.left+c.right)/2-m+e:Zr(t,n,e);f=un(i,a,r),p="left"===n?-Ae:Ae}return{titleX:d,titleY:f,maxWidth:h,rotation:p}}(this,s,e,a);fi(t,n.text,0,0,r,{color:n.color,maxWidth:u,rotation:h,textAlign:ro(a,e,i),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,n=fe(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===oo.prototype.draw?[{z:n,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",i=[];let r,o;for(r=0,o=e.length;r<o;++r){const o=e[r];o[n]!==this.id||t&&o.type!==t||i.push(o)}return i}_resolveTickFontOptions(t){return ki(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class ao{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(e)&&(n=this.register(e));const i=this.items,r=t.id,o=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in i||(i[r]=t,function(t,e,n){const i=we(Object.create(null),[n?ei.get(n):{},ei.get(e),t.defaults]);ei.set(e,i),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const i=n.split("."),r=i.pop(),o=[t].concat(i).join("."),a=e[n].split("."),s=a.pop(),l=a.join(".");ei.route(o,r,l,s)}))}(e,t.defaultRoutes),t.descriptors&&ei.describe(e,t.descriptors)}(t,o,n),this.override&&ei.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,i=this.scope;n in e&&delete e[n],i&&n in ei[i]&&(delete ei[i][n],this.override&&delete Xn[n])}}var so=new class{constructor(){this.controllers=new ao(Nr,"datasets",!0),this.elements=new ao(Gr,"elements"),this.plugins=new ao(Object,"plugins"),this.scales=new ao(oo,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){[...e].forEach((e=>{const i=n||this._getRegistryForType(e);n||i.isForType(e)||i===this.plugins&&e.id?this._exec(t,i,e):me(e,(e=>{const i=n||this._getRegistryForType(e);this._exec(t,i,e)}))}))}_exec(t,e,n){const i=Oe(t);ge(n["before"+i],[],n),e[t](n),ge(n["after"+i],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const i=e.get(t);if(void 0===i)throw new Error('"'+t+'" is not a registered '+n+".");return i}};class lo extends Nr{update(t){const e=this._cachedMeta,{data:n=[]}=e,i=this.chart._animationsDisabled;let{start:r,count:o}=hn(e,n,i);if(this._drawStart=r,this._drawCount=o,dn(e)&&(r=0,o=n.length),this.options.showLine){const{dataset:r,_dataset:o}=e;r._chart=this.chart,r._datasetIndex=this.index,r._decimated=!!o._decimated,r.points=n;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(r,void 0,{animated:!i,options:a},t)}this.updateElements(n,r,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=so.getElement("line")),super.addElements()}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:a,_stacked:s,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,i),u=this.getSharedOptions(c),h=this.includeOptions(i,u),d=o.axis,f=a.axis,{spanGaps:p,segment:g}=this.options,m=Be(p)?p:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||r||"none"===i;let y=e>0&&this.getParsed(e-1);for(let c=e;c<e+n;++c){const e=t[c],n=this.getParsed(c),p=b?e:{},v=le(n[f]),x=p[d]=o.getPixelForValue(n[d],c),w=p[f]=r||v?a.getBasePixel():a.getPixelForValue(s?this.applyStack(a,n,s):n[f],c);p.skip=isNaN(x)||isNaN(w)||v,p.stop=c>0&&Math.abs(n[d]-y[d])>m,g&&(p.parsed=n,p.raw=l.data[c]),h&&(p.options=u||this.resolveDataElementOptions(c,e.active?"active":i)),b||this.updateElement(e,c,p,i),y=n}this.updateSharedOptions(u,i,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}const n=t.dataset,i=n.options&&n.options.borderWidth||0;if(!e.length)return i;const r=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(i,r,o)/2}}function co(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}lo.id="scatter",lo.defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1},lo.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};class uo{constructor(t){this.options=t||{}}init(t){}formats(){return co()}parse(t,e){return co()}format(t,e){return co()}add(t,e,n){return co()}diff(t,e,n){return co()}startOf(t,e,n){return co()}endOf(t,e){return co()}}uo.override=function(t){Object.assign(uo.prototype,t)};var ho={_date:uo};function fo(t,e,n,i){const{controller:r,data:o,_sorted:a}=t,s=r._cachedMeta.iScale;if(s&&e===s.axis&&"r"!==e&&a&&o.length){const t=s._reversePixels?nn:en;if(!i)return t(o,e,n);if(r._sharedOptions){const i=o[0],r="function"==typeof i.getRange&&i.getRange(e);if(r){const i=t(o,e,n-r),a=t(o,e,n+r);return{lo:i.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function po(t,e,n,i,r){const o=t.getSortedVisibleDatasetMetas(),a=n[e];for(let t=0,n=o.length;t<n;++t){const{index:n,data:s}=o[t],{lo:l,hi:c}=fo(o[t],e,a,r);for(let t=l;t<=c;++t){const e=s[t];e.skip||i(e,n,t)}}}function go(t,e,n,i,r){const o=[];return r||t.isPointInArea(e)?(po(t,n,e,(function(n,a,s){(r||li(n,t.chartArea,0))&&n.inRange(e.x,e.y,i)&&o.push({element:n,datasetIndex:a,index:s})}),!0),o):o}function mo(t,e,n,i,r,o){return o||t.isPointInArea(e)?"r"!==n||i?function(t,e,n,i,r,o){let a=[];const s=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,i){const r=e?Math.abs(t.x-i.x):0,o=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(o,2))}}(n);let l=Number.POSITIVE_INFINITY;return po(t,n,e,(function(n,c,u){const h=n.inRange(e.x,e.y,r);if(i&&!h)return;const d=n.getCenterPoint(r);if(!o&&!t.isPointInArea(d)&&!h)return;const f=s(e,d);f<l?(a=[{element:n,datasetIndex:c,index:u}],l=f):f===l&&a.push({element:n,datasetIndex:c,index:u})})),a}(t,e,n,i,r,o):function(t,e,n,i){let r=[];return po(t,n,e,(function(t,n,o){const{startAngle:a,endAngle:s}=t.getProps(["startAngle","endAngle"],i),{angle:l}=Ke(t,{x:e.x,y:e.y});Xe(l,a,s)&&r.push({element:t,datasetIndex:n,index:o})})),r}(t,e,n,r):[]}function bo(t,e,n,i,r){const o=[],a="x"===n?"inXRange":"inYRange";let s=!1;return po(t,n,e,((t,i,l)=>{t[a](e[n],r)&&(o.push({element:t,datasetIndex:i,index:l}),s=s||t.inRange(e.x,e.y,r))})),i&&!s?[]:o}var yo={evaluateInteractionItems:po,modes:{index(t,e,n,i){const r=Ji(e,t),o=n.axis||"x",a=n.includeInvisible||!1,s=n.intersect?go(t,r,o,i,a):mo(t,r,o,!1,i,a),l=[];return s.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=s[0].index,n=t.data[e];n&&!n.skip&&l.push({element:n,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,n,i){const r=Ji(e,t),o=n.axis||"xy",a=n.includeInvisible||!1;let s=n.intersect?go(t,r,o,i,a):mo(t,r,o,!1,i,a);if(s.length>0){const e=s[0].datasetIndex,n=t.getDatasetMeta(e).data;s=[];for(let t=0;t<n.length;++t)s.push({element:n[t],datasetIndex:e,index:t})}return s},point:(t,e,n,i)=>go(t,Ji(e,t),n.axis||"xy",i,n.includeInvisible||!1),nearest(t,e,n,i){const r=Ji(e,t),o=n.axis||"xy",a=n.includeInvisible||!1;return mo(t,r,o,n.intersect,i,a)},x:(t,e,n,i)=>bo(t,Ji(e,t),"x",n.intersect,i),y:(t,e,n,i)=>bo(t,Ji(e,t),"y",n.intersect,i)}};const vo=["left","top","right","bottom"];function xo(t,e){return t.filter((t=>t.pos===e))}function wo(t,e){return t.filter((t=>-1===vo.indexOf(t.pos)&&t.box.axis===e))}function _o(t,e){return t.sort(((t,n)=>{const i=e?n:t,r=e?t:n;return i.weight===r.weight?i.index-r.index:i.weight-r.weight}))}function ko(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function So(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Eo(t,e,n,i){const{pos:r,box:o}=n,a=t.maxPadding;if(!ue(r)){n.size&&(t[r]-=n.size);const e=i[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?o.height:o.width),n.size=e.size/e.count,t[r]+=n.size}o.getPadding&&So(a,o.getPadding());const s=Math.max(0,e.outerWidth-ko(a,t,"left","right")),l=Math.max(0,e.outerHeight-ko(a,t,"top","bottom")),c=s!==t.w,u=l!==t.h;return t.w=s,t.h=l,n.horizontal?{same:c,other:u}:{same:u,other:c}}function Oo(t,e){const n=e.maxPadding;return function(t){const i={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{i[t]=Math.max(e[t],n[t])})),i}(t?["left","right"]:["top","bottom"])}function Co(t,e,n,i){const r=[];let o,a,s,l,c,u;for(o=0,a=t.length,c=0;o<a;++o){s=t[o],l=s.box,l.update(s.width||e.w,s.height||e.h,Oo(s.horizontal,e));const{same:a,other:h}=Eo(e,n,s,i);c|=a&&r.length,u=u||h,l.fullSize||r.push(s)}return c&&Co(r,e,n,i)||u}function Po(t,e,n,i,r){t.top=n,t.left=e,t.right=e+i,t.bottom=n+r,t.width=i,t.height=r}function Mo(t,e,n,i){const r=n.padding;let{x:o,y:a}=e;for(const s of t){const t=s.box,l=i[s.stack]||{count:1,placed:0,weight:1},c=s.stackWeight/l.weight||1;if(s.horizontal){const i=e.w*c,o=l.size||t.height;Ce(l.start)&&(a=l.start),t.fullSize?Po(t,r.left,a,n.outerWidth-r.right-r.left,o):Po(t,e.left+l.placed,a,i,o),l.start=a,l.placed+=i,a=t.bottom}else{const i=e.h*c,a=l.size||t.width;Ce(l.start)&&(o=l.start),t.fullSize?Po(t,o,r.top,a,n.outerHeight-r.bottom-r.top):Po(t,o,e.top+l.placed,a,i),l.start=o,l.placed+=i,o=t.right}}e.x=o,e.y=a}ei.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var Lo={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,i){if(!t)return;const r=_i(t.options.layout.padding),o=Math.max(e-r.width,0),a=Math.max(n-r.height,0),s=function(t){const e=function(t){const e=[];let n,i,r,o,a,s;for(n=0,i=(t||[]).length;n<i;++n)r=t[n],({position:o,options:{stack:a,stackWeight:s=1}}=r),e.push({index:n,box:r,pos:o,horizontal:r.isHorizontal(),weight:r.weight,stack:a&&o+a,stackWeight:s});return e}(t),n=_o(e.filter((t=>t.box.fullSize)),!0),i=_o(xo(e,"left"),!0),r=_o(xo(e,"right")),o=_o(xo(e,"top"),!0),a=_o(xo(e,"bottom")),s=wo(e,"x"),l=wo(e,"y");return{fullSize:n,leftAndTop:i.concat(o),rightAndBottom:r.concat(l).concat(a).concat(s),chartArea:xo(e,"chartArea"),vertical:i.concat(r).concat(l),horizontal:o.concat(a).concat(s)}}(t.boxes),l=s.vertical,c=s.horizontal;me(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const u=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,h=Object.freeze({outerWidth:e,outerHeight:n,padding:r,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/u,hBoxMaxHeight:a/2}),d=Object.assign({},r);So(d,_i(i));const f=Object.assign({maxPadding:d,w:o,h:a,x:r.left,y:r.top},r),p=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:i,stackWeight:r}=n;if(!t||!vo.includes(i))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=r}return e}(t),{vBoxMaxWidth:i,hBoxMaxHeight:r}=e;let o,a,s;for(o=0,a=t.length;o<a;++o){s=t[o];const{fullSize:a}=s.box,l=n[s.stack],c=l&&s.stackWeight/l.weight;s.horizontal?(s.width=c?c*i:a&&e.availableWidth,s.height=r):(s.width=i,s.height=c?c*r:a&&e.availableHeight)}return n}(l.concat(c),h);Co(s.fullSize,f,h,p),Co(l,f,h,p),Co(c,f,h,p)&&Co(l,f,h,p),function(t){const e=t.maxPadding;function n(n){const i=Math.max(e[n]-t[n],0);return t[n]+=i,i}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(f),Mo(s.leftAndTop,f,h,p),f.x+=f.w,f.y+=f.h,Mo(s.rightAndBottom,f,h,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},me(s.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Ro{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,i){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,i?Math.floor(e/i):n)}}isAttached(t){return!0}updateConfig(t){}}class To extends Ro{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const No={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Do=t=>null===t||""===t,Ao=!!er&&{passive:!0};function Io(t,e,n){t.canvas.removeEventListener(e,n,Ao)}function jo(t,e){for(const n of t)if(n===e||n.contains(e))return!0}function Fo(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||jo(n.addedNodes,i),e=e&&!jo(n.removedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}function zo(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||jo(n.removedNodes,i),e=e&&!jo(n.addedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}const Vo=new Map;let Bo=0;function Ho(){const t=window.devicePixelRatio;t!==Bo&&(Bo=t,Vo.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function Wo(t,e,n){const i=t.canvas,r=i&&Ki(i);if(!r)return;const o=ln(((t,e)=>{const i=r.clientWidth;n(t,e),i<r.clientWidth&&n()}),window),a=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,i=e.contentRect.height;0===n&&0===i||o(n,i)}));return a.observe(r),function(t,e){Vo.size||window.addEventListener("resize",Ho),Vo.set(t,e)}(t,o),a}function Uo(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){Vo.delete(t),Vo.size||window.removeEventListener("resize",Ho)}(t)}function $o(t,e,n){const i=t.canvas,r=ln((e=>{null!==t.ctx&&n(function(t,e){const n=No[t.type]||t.type,{x:i,y:r}=Ji(t,e);return{type:n,chart:e,native:t,x:void 0!==i?i:null,y:void 0!==r?r:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,n){t.addEventListener(e,n,Ao)}(i,e,r),r}class Yo extends Ro{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,i=t.getAttribute("height"),r=t.getAttribute("width");if(t.$chartjs={initial:{height:i,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",Do(r)){const e=nr(t,"width");void 0!==e&&(t.width=e)}if(Do(i))if(""===t.style.height)t.height=t.width/(e||2);else{const e=nr(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const n=e.$chartjs.initial;["height","width"].forEach((t=>{const i=n[t];le(i)?e.removeAttribute(t):e.setAttribute(t,i)}));const i=n.style||{};return Object.keys(i).forEach((t=>{e.style[t]=i[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,n){this.removeEventListener(t,e);const i=t.$proxies||(t.$proxies={}),r={attach:Fo,detach:zo,resize:Wo}[e]||$o;i[e]=r(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),i=n[e];i&&(({attach:Uo,detach:Uo,resize:Uo}[e]||Io)(t,e,i),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,i){return function(t,e,n,i){const r=Gi(t),o=Xi(r,"margin"),a=qi(r.maxWidth,t,"clientWidth")||Ne,s=qi(r.maxHeight,t,"clientHeight")||Ne,l=function(t,e,n){let i,r;if(void 0===e||void 0===n){const o=Ki(t);if(o){const t=o.getBoundingClientRect(),a=Gi(o),s=Xi(a,"border","width"),l=Xi(a,"padding");e=t.width-l.width-s.width,n=t.height-l.height-s.height,i=qi(a.maxWidth,o,"clientWidth"),r=qi(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:i||Ne,maxHeight:r||Ne}}(t,e,n);let{width:c,height:u}=l;if("content-box"===r.boxSizing){const t=Xi(r,"border","width"),e=Xi(r,"padding");c-=e.width+t.width,u-=e.height+t.height}return c=Math.max(0,c-o.width),u=Math.max(0,i?Math.floor(c/i):u-o.height),c=Zi(Math.min(c,a,l.maxWidth)),u=Zi(Math.min(u,s,l.maxHeight)),c&&!u&&(u=Zi(c/2)),{width:c,height:u}}(t,e,n,i)}isAttached(t){const e=Ki(t);return!(!e||!e.isConnected)}}class Ko{constructor(){this._init=[]}notify(t,e,n,i){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const r=i?this._descriptors(t).filter(i):this._descriptors(t),o=this._notify(r,t,e,n);return"afterDestroy"===e&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,n,i){i=i||{};for(const r of t){const t=r.plugin;if(!1===ge(t[n],[e,i,r.options],t)&&i.cancelable)return!1}return!0}invalidate(){le(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,i=fe(n.options&&n.options.plugins,{}),r=function(t){const e={},n=[],i=Object.keys(so.plugins.items);for(let t=0;t<i.length;t++)n.push(so.getPlugin(i[t]));const r=t.plugins||[];for(let t=0;t<r.length;t++){const i=r[t];-1===n.indexOf(i)&&(n.push(i),e[i.id]=!0)}return{plugins:n,localIds:e}}(n);return!1!==i||e?function(t,{plugins:e,localIds:n},i,r){const o=[],a=t.getContext();for(const s of e){const e=s.id,l=qo(i[e],r);null!==l&&o.push({plugin:s,options:Go(t.config,{plugin:s,local:n[e]},l,a)})}return o}(t,r,i,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,i=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(i(e,n),t,"stop"),this._notify(i(n,e),t,"start")}}function qo(t,e){return e||!1!==t?!0===t?{}:t:null}function Go(t,{plugin:e,local:n},i,r){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(i,o);return n&&e.defaults&&a.push(e.defaults),t.createResolver(a,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Qo(t,e){const n=ei.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function Xo(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(n=e.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.charAt(0).toLowerCase();var n}function Jo(t){const e=t.options||(t.options={});e.plugins=fe(e.plugins,{}),e.scales=function(t,e){const n=Xn[t.type]||{scales:{}},i=e.scales||{},r=Qo(t.type,e),o=Object.create(null),a=Object.create(null);return Object.keys(i).forEach((t=>{const e=i[t];if(!ue(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const s=Xo(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(s,r),c=n.scales||{};o[s]=o[s]||t,a[t]=_e(Object.create(null),[{axis:s},e,c[s],c[l]])})),t.data.datasets.forEach((n=>{const r=n.type||t.type,s=n.indexAxis||Qo(r,e),l=(Xn[r]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,s),r=n[e+"AxisID"]||o[e]||e;a[r]=a[r]||Object.create(null),_e(a[r],[{axis:e},i[r],l[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];_e(e,[ei.scales[e.type],ei.scale])})),a}(t,e)}function Zo(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const ta=new Map,ea=new Set;function na(t,e){let n=ta.get(t);return n||(n=e(),ta.set(t,n),ea.add(n)),n}const ia=(t,e,n)=>{const i=Ee(e,n);void 0!==i&&t.add(i)};class ra{constructor(t){this._config=function(t){return(t=t||{}).data=Zo(t.data),Jo(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Zo(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Jo(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return na(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return na(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return na(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return na(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let i=n.get(t);return i&&!e||(i=new Map,n.set(t,i)),i}getOptionScopes(t,e,n){const{options:i,type:r}=this,o=this._cachedScopes(t,n),a=o.get(e);if(a)return a;const s=new Set;e.forEach((e=>{t&&(s.add(t),e.forEach((e=>ia(s,t,e)))),e.forEach((t=>ia(s,i,t))),e.forEach((t=>ia(s,Xn[r]||{},t))),e.forEach((t=>ia(s,ei,t))),e.forEach((t=>ia(s,Jn,t)))}));const l=Array.from(s);return 0===l.length&&l.push(Object.create(null)),ea.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Xn[e]||{},ei.datasets[e]||{},{type:e},ei,Jn]}resolveNamedOptions(t,e,n,i=[""]){const r={$shared:!0},{resolver:o,subPrefixes:a}=oa(this._resolverCache,t,i);let s=o;(function(t,e){const{isScriptable:n,isIndexable:i}=Pi(t);for(const r of e){const e=n(r),o=i(r),a=(o||e)&&t[r];if(e&&(Pe(a)||aa(a))||o&&ce(a))return!0}return!1})(o,e)&&(r.$shared=!1,s=Ci(o,n=Pe(n)?n():n,this.createResolver(t,n,a)));for(const t of e)r[t]=s[t];return r}createResolver(t,e,n=[""],i){const{resolver:r}=oa(this._resolverCache,t,n);return ue(e)?Ci(r,e,void 0,i):r}}function oa(t,e,n){let i=t.get(e);i||(i=new Map,t.set(e,i));const r=n.join();let o=i.get(r);return o||(o={resolver:Oi(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},i.set(r,o)),o}const aa=t=>ue(t)&&Object.getOwnPropertyNames(t).reduce(((e,n)=>e||Pe(t[n])),!1),sa=["top","bottom","left","right","chartArea"];function la(t,e){return"top"===t||"bottom"===t||-1===sa.indexOf(t)&&"x"===e}function ca(t,e){return function(n,i){return n[t]===i[t]?n[e]-i[e]:n[t]-i[t]}}function ua(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),ge(n&&n.onComplete,[t],e)}function ha(t){const e=t.chart,n=e.options.animation;ge(n&&n.onProgress,[t],e)}function da(t){return Yi()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const fa={},pa=t=>{const e=da(t);return Object.values(fa).filter((t=>t.canvas===e)).pop()};function ga(t,e,n){const i=Object.keys(t);for(const r of i){const i=+r;if(i>=e){const o=t[r];delete t[r],(n>0||i>e)&&(t[i+n]=o)}}}class ma{constructor(t,e){const n=this.config=new ra(e),i=da(t),r=pa(i);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas with ID '"+r.canvas.id+"' can be reused.");const o=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||function(t){return!Yi()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?To:Yo}(i)),this.platform.updateConfig(n);const a=this.platform.acquireContext(i,o.aspectRatio),s=a&&a.canvas,l=s&&s.height,c=s&&s.width;this.id=se(),this.ctx=a,this.canvas=s,this.width=c,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ko,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let n;return function(...i){return e?(clearTimeout(n),n=setTimeout(t,e,i)):t.apply(this,i),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],fa[this.id]=this,a&&s?(mr.listen(this,"complete",ua),mr.listen(this,"progress",ha),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:i,_aspectRatio:r}=this;return le(t)?e&&r?r:i?n/i:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():tr(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return oi(this.canvas,this.ctx),this}stop(){return mr.stop(this),this}resize(t,e){mr.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this.options,i=this.canvas,r=n.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(i,t,e,r),a=n.devicePixelRatio||this.platform.getDevicePixelRatio(),s=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,tr(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),ge(n.onResize,[this,o],this),this.attached&&this._doResize(s)&&this.render())}ensureScalesHaveIDs(){me(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,n=this.scales,i=Object.keys(n).reduce(((t,e)=>(t[e]=!1,t)),{});let r=[];e&&(r=r.concat(Object.keys(e).map((t=>{const n=e[t],i=Xo(t,n),r="r"===i,o="x"===i;return{options:n,dposition:r?"chartArea":o?"bottom":"left",dtype:r?"radialLinear":o?"category":"linear"}})))),me(r,(e=>{const r=e.options,o=r.id,a=Xo(o,r),s=fe(r.type,e.dtype);void 0!==r.position&&la(r.position,a)===la(e.dposition)||(r.position=e.dposition),i[o]=!0;let l=null;o in n&&n[o].type===s?l=n[o]:(l=new(so.getScale(s))({id:o,type:s,ctx:this.ctx,chart:this}),n[l.id]=l),l.init(r,t)})),me(i,((t,e)=>{t||delete n[e]})),me(n,(t=>{Lo.configure(this,t,t.options),Lo.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,n=t.length;if(t.sort(((t,e)=>t.index-e.index)),n>e){for(let t=e;t<n;++t)this._destroyDatasetMeta(t);t.splice(e,n-e)}this._sortedMetasets=t.slice(0).sort(ca("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,n)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let n,i;for(this._removeUnreferencedMetasets(),n=0,i=e.length;n<i;n++){const i=e[n];let r=this.getDatasetMeta(n);const o=i.type||this.config.type;if(r.type&&r.type!==o&&(this._destroyDatasetMeta(n),r=this.getDatasetMeta(n)),r.type=o,r.indexAxis=i.indexAxis||Qo(o,this.options),r.order=i.order||0,r.index=n,r.label=""+i.label,r.visible=this.isDatasetVisible(n),r.controller)r.controller.updateIndex(n),r.controller.linkScales();else{const e=so.getController(o),{datasetElementType:i,dataElementType:a}=ei.datasets[o];Object.assign(e.prototype,{dataElementType:so.getElement(a),datasetElementType:i&&so.getElement(i)}),r.controller=new e(this,n),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){me(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const n=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),i=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),n=!i&&-1===r.indexOf(e);e.buildOrUpdateElements(n),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=n.layout.autoPadding?o:0,this._updateLayout(o),i||me(r,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(ca("z","_idx"));const{_active:a,_lastEvent:s}=this;s?this._eventHandler(s,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){me(this.scales,(t=>{Lo.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),n=new Set(t.events);Me(e,n)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:n,start:i,count:r}of e)ga(t,i,"_removeElements"===n?-r:r)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,n=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),i=n(0);for(let t=1;t<e;t++)if(!Me(i,n(t)))return;return Array.from(i).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Lo.update(this,this.width,this.height,t);const e=this.chartArea,n=e.width<=0||e.height<=0;this._layers=[],me(this.boxes,(t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,n=this.data.datasets.length;e<n;++e)this._updateDataset(e,Pe(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this.getDatasetMeta(t),i={meta:n,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",i)&&(n.controller._update(e),i.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",i))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(mr.has(this)?this.attached&&!mr.running(this)&&mr.start(this):(this.draw(),ua({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let i,r;for(i=0,r=e.length;i<r;++i){const r=e[i];t&&!r.visible||n.push(r)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,n=t._clip,i=!n.disabled,r=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(i&&ci(e,{left:!1===n.left?0:r.left-n.left,right:!1===n.right?this.width:r.right+n.right,top:!1===n.top?0:r.top-n.top,bottom:!1===n.bottom?this.height:r.bottom+n.bottom}),t.controller.draw(),i&&ui(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return li(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,n,i){const r=yo.modes[e];return"function"==typeof r?r(this,t,n,i):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let i=n.filter((t=>t&&t._dataset===e)).pop();return i||(i={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(i)),i}getContext(){return this.$context||(this.$context=Ei(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const i=n?"show":"hide",r=this.getDatasetMeta(t),o=r.controller._resolveAnimations(void 0,i);Ce(e)?(r.data[e].hidden=!n,this.update()):(this.setDatasetVisibility(t,n),o.update(r,{visible:n}),this.update((e=>e.datasetIndex===t?i:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),mr.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),oi(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete fa[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(t,e,n)=>{t.offsetX=e,t.offsetY=n,this._eventHandler(t)};me(this.options.events,(t=>n(t,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(n,i)=>{t[n]&&(e.removeEventListener(this,n,i),delete t[n])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{i("attach",a),this.attached=!0,this.resize(),n("resize",r),n("detach",o)};o=()=>{this.attached=!1,i("resize",r),this._stop(),this._resize(0,0),n("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){me(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},me(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,n){const i=n?"set":"remove";let r,o,a,s;for("dataset"===e&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+i+"DatasetHoverStyle"]()),a=0,s=t.length;a<s;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[i+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],n=t.map((({datasetIndex:t,index:e})=>{const n=this.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[e],index:e}}));!be(n,e)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,e))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}_updateHoverStyles(t,e,n){const i=this.options.hover,r=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=r(e,t),a=n?t:r(t,e);o.length&&this.updateHoverStyle(o,i.mode,!1),a.length&&i.mode&&this.updateHoverStyle(a,i.mode,!0)}_eventHandler(t,e){const n={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},i=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",n,i))return;const r=this._handleEvent(t,e,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,i),(r||n.changed)&&this.render(),this}_handleEvent(t,e,n){const{_active:i=[],options:r}=this,o=e,a=this._getActiveElements(t,i,n,o),s=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,n,i){return n&&"mouseout"!==t.type?i?e:t:null}(t,this._lastEvent,n,s);n&&(this._lastEvent=null,ge(r.onHover,[t,a,this],this),s&&ge(r.onClick,[t,a,this],this));const c=!be(a,i);return(c||e)&&(this._active=a,this._updateHoverStyles(a,i,e)),this._lastEvent=l,c}_getActiveElements(t,e,n,i){if("mouseout"===t.type)return[];if(!n)return e;const r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,i)}}const ba=()=>me(ma.instances,(t=>t._plugins.invalidate())),ya=!0;function va(t,e,n){const{startAngle:i,pixelMargin:r,x:o,y:a,outerRadius:s,innerRadius:l}=e;let c=r/s;t.beginPath(),t.arc(o,a,s,i-c,n+c),l>r?(c=r/l,t.arc(o,a,l,n+c,i-c,!0)):t.arc(o,a,r,n+Ae,i-Ae),t.closePath(),t.clip()}function xa(t,e,n,i){return{x:n+t*Math.cos(e),y:i+t*Math.sin(e)}}function wa(t,e,n,i,r,o){const{x:a,y:s,startAngle:l,pixelMargin:c,innerRadius:u}=e,h=Math.max(e.outerRadius+i+n-c,0),d=u>0?u+i+n+c:0;let f=0;const p=r-l;if(i){const t=((u>0?u-i:0)+(h>0?h-i:0))/2;f=(p-(0!==t?p*t/(t+i):p))/2}const g=(p-Math.max(.001,p*h-n/Le)/h)/2,m=l+g+f,b=r-g-f,{outerStart:y,outerEnd:v,innerStart:x,innerEnd:w}=function(t,e,n,i){const r=vi(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(n-e)/2,a=Math.min(o,i*e/2),s=t=>{const e=(n-Math.min(o,t))*i/2;return Je(t,0,Math.min(o,e))};return{outerStart:s(r.outerStart),outerEnd:s(r.outerEnd),innerStart:Je(r.innerStart,0,a),innerEnd:Je(r.innerEnd,0,a)}}(e,d,h,b-m),_=h-y,k=h-v,S=m+y/_,E=b-v/k,O=d+x,C=d+w,P=m+x/O,M=b-w/C;if(t.beginPath(),o){if(t.arc(a,s,h,S,E),v>0){const e=xa(k,E,a,s);t.arc(e.x,e.y,v,E,b+Ae)}const e=xa(C,b,a,s);if(t.lineTo(e.x,e.y),w>0){const e=xa(C,M,a,s);t.arc(e.x,e.y,w,b+Ae,M+Math.PI)}if(t.arc(a,s,d,b-w/d,m+x/d,!0),x>0){const e=xa(O,P,a,s);t.arc(e.x,e.y,x,P+Math.PI,m-Ae)}const n=xa(_,m,a,s);if(t.lineTo(n.x,n.y),y>0){const e=xa(_,S,a,s);t.arc(e.x,e.y,y,m-Ae,S)}}else{t.moveTo(a,s);const e=Math.cos(S)*h+a,n=Math.sin(S)*h+s;t.lineTo(e,n);const i=Math.cos(E)*h+a,r=Math.sin(E)*h+s;t.lineTo(i,r)}t.closePath()}Object.defineProperties(ma,{defaults:{enumerable:ya,value:ei},instances:{enumerable:ya,value:fa},overrides:{enumerable:ya,value:Xn},registry:{enumerable:ya,value:so},version:{enumerable:ya,value:"3.9.1"},getChart:{enumerable:ya,value:pa},register:{enumerable:ya,value:(...t)=>{so.add(...t),ba()}},unregister:{enumerable:ya,value:(...t)=>{so.remove(...t),ba()}}});class _a extends Gr{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.getProps(["x","y"],n),{angle:r,distance:o}=Ke(i,{x:t,y:e}),{startAngle:a,endAngle:s,innerRadius:l,outerRadius:c,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),h=this.options.spacing/2,d=fe(u,s-a)>=Re||Xe(r,a,s),f=Ze(o,l+h,c+h);return d&&f}getCenterPoint(t){const{x:e,y:n,startAngle:i,endAngle:r,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:s,spacing:l}=this.options,c=(i+r)/2,u=(o+a+l+s)/2;return{x:e+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:n}=this,i=(e.offset||0)/2,r=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=n>Re?Math.floor(n/Re):0,0===n||this.innerRadius<0||this.outerRadius<0)return;t.save();let a=0;if(i){a=i/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*a,Math.sin(e)*a),this.circumference>=Le&&(a=i)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const s=function(t,e,n,i,r){const{fullCircles:o,startAngle:a,circumference:s}=e;let l=e.endAngle;if(o){wa(t,e,n,i,a+Re,r);for(let e=0;e<o;++e)t.fill();isNaN(s)||(l=a+s%Re,s%Re==0&&(l+=Re))}return wa(t,e,n,i,l,r),t.fill(),l}(t,this,a,r,o);(function(t,e,n,i,r,o){const{options:a}=e,{borderWidth:s,borderJoinStyle:l}=a,c="inner"===a.borderAlign;s&&(c?(t.lineWidth=2*s,t.lineJoin=l||"round"):(t.lineWidth=s,t.lineJoin=l||"bevel"),e.fullCircles&&function(t,e,n){const{x:i,y:r,startAngle:o,pixelMargin:a,fullCircles:s}=e,l=Math.max(e.outerRadius-a,0),c=e.innerRadius+a;let u;for(n&&va(t,e,o+Re),t.beginPath(),t.arc(i,r,c,o+Re,o,!0),u=0;u<s;++u)t.stroke();for(t.beginPath(),t.arc(i,r,l,o,o+Re),u=0;u<s;++u)t.stroke()}(t,e,c),c&&va(t,e,r),wa(t,e,n,i,r,o),t.stroke())})(t,this,a,r,s,o),t.restore()}}function ka(t,e,n=e){t.lineCap=fe(n.borderCapStyle,e.borderCapStyle),t.setLineDash(fe(n.borderDash,e.borderDash)),t.lineDashOffset=fe(n.borderDashOffset,e.borderDashOffset),t.lineJoin=fe(n.borderJoinStyle,e.borderJoinStyle),t.lineWidth=fe(n.borderWidth,e.borderWidth),t.strokeStyle=fe(n.borderColor,e.borderColor)}function Sa(t,e,n){t.lineTo(n.x,n.y)}function Ea(t,e,n={}){const i=t.length,{start:r=0,end:o=i-1}=n,{start:a,end:s}=e,l=Math.max(r,a),c=Math.min(o,s),u=r<a&&o<a||r>s&&o>s;return{count:i,start:l,loop:e.loop,ilen:c<l&&!u?i+c-l:c-l}}function Oa(t,e,n,i){const{points:r,options:o}=e,{count:a,start:s,loop:l,ilen:c}=Ea(r,n,i),u=function(t){return t.stepped?hi:t.tension||"monotone"===t.cubicInterpolationMode?di:Sa}(o);let h,d,f,{move:p=!0,reverse:g}=i||{};for(h=0;h<=c;++h)d=r[(s+(g?c-h:h))%a],d.skip||(p?(t.moveTo(d.x,d.y),p=!1):u(t,f,d,g,o.stepped),f=d);return l&&(d=r[(s+(g?c:0))%a],u(t,f,d,g,o.stepped)),!!l}function Ca(t,e,n,i){const r=e.points,{count:o,start:a,ilen:s}=Ea(r,n,i),{move:l=!0,reverse:c}=i||{};let u,h,d,f,p,g,m=0,b=0;const y=t=>(a+(c?s-t:t))%o,v=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(h=r[y(0)],t.moveTo(h.x,h.y)),u=0;u<=s;++u){if(h=r[y(u)],h.skip)continue;const e=h.x,n=h.y,i=0|e;i===d?(n<f?f=n:n>p&&(p=n),m=(b*m+e)/++b):(v(),t.lineTo(e,n),d=i,b=0,f=p=n),g=n}v()}function Pa(t){const e=t.options,n=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||n?Oa:Ca}_a.id="arc",_a.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0},_a.defaultRoutes={backgroundColor:"backgroundColor"};const Ma="function"==typeof Path2D;class La extends Gr{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const i=n.spanGaps?this._loop:this._fullLoop;$i(this._points,n,t,i,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const n=t.points,i=t.options.spanGaps,r=n.length;if(!r)return[];const o=!!t._loop,{start:a,end:s}=function(t,e,n,i){let r=0,o=e-1;if(n&&!i)for(;r<e&&!t[r].skip;)r++;for(;r<e&&t[r].skip;)r++;for(r%=e,n&&(o+=r);o>r&&t[o%e].skip;)o--;return o%=e,{start:r,end:o}}(n,r,o,i);return function(t,e,n,i){return i&&i.setContext&&n?function(t,e,n,i){const r=t._chart.getContext(),o=pr(t.options),{_datasetIndex:a,options:{spanGaps:s}}=t,l=n.length,c=[];let u=o,h=e[0].start,d=h;function f(t,e,i,r){const o=s?-1:1;if(t!==e){for(t+=l;n[t%l].skip;)t-=o;for(;n[e%l].skip;)e+=o;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:i,style:r}),u=r,h=e%l)}}for(const t of e){h=s?h:t.start;let e,o=n[h%l];for(d=h+1;d<=t.end;d++){const s=n[d%l];e=pr(i.setContext(Ei(r,{type:"segment",p0:o,p1:s,p0DataIndex:(d-1)%l,p1DataIndex:d%l,datasetIndex:a}))),gr(e,u)&&f(h,d-1,t.loop,u),o=s,u=e}h<d-1&&f(h,d-1,t.loop,u)}return c}(t,e,n,i):e}(t,!0===i?[{start:a,end:s,loop:o}]:function(t,e,n,i){const r=t.length,o=[];let a,s=e,l=t[e];for(a=e+1;a<=n;++a){const n=t[a%r];n.skip||n.stop?l.skip||(i=!1,o.push({start:e%r,end:(a-1)%r,loop:i}),e=s=n.stop?a:null):(s=a,l.skip&&(e=a)),l=n}return null!==s&&o.push({start:e%r,end:s%r,loop:i}),o}(n,a,s<a?s+r:s,!!t._fullLoop&&0===a&&s===r-1),n,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,n=t.length;return n&&e[t[n-1].end]}interpolate(t,e){const n=this.options,i=t[e],r=this.points,o=function(t,e){const n=[],i=t.segments;for(let r=0;r<i.length;r++){const o=fr(i[r],t.points,e);o.length&&n.push(...o)}return n}(this,{property:e,start:i,end:i});if(!o.length)return;const a=[],s=function(t){return t.stepped?rr:t.tension||"monotone"===t.cubicInterpolationMode?or:ir}(n);let l,c;for(l=0,c=o.length;l<c;++l){const{start:c,end:u}=o[l],h=r[c],d=r[u];if(h===d){a.push(h);continue}const f=s(h,d,Math.abs((i-h[e])/(d[e]-h[e])),n.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,n){return Pa(this)(t,this,e,n)}path(t,e,n){const i=this.segments,r=Pa(this);let o=this._loop;e=e||0,n=n||this.points.length-e;for(const a of i)o&=r(t,this,a,{start:e,end:e+n-1});return!!o}draw(t,e,n,i){const r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),function(t,e,n,i){Ma&&!e.options.segment?function(t,e,n,i){let r=e._path;r||(r=e._path=new Path2D,e.path(r,n,i)&&r.closePath()),ka(t,e.options),t.stroke(r)}(t,e,n,i):function(t,e,n,i){const{segments:r,options:o}=e,a=Pa(e);for(const s of r)ka(t,o,s.style),t.beginPath(),a(t,e,s,{start:n,end:n+i-1})&&t.closePath(),t.stroke()}(t,e,n,i)}(t,this,n,i),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Ra(t,e,n,i){const r=t.options,{[n]:o}=t.getProps([n],i);return Math.abs(e-o)<r.radius+r.hitRadius}La.id="line",La.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},La.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},La.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class Ta extends Gr{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.options,{x:r,y:o}=this.getProps(["x","y"],n);return Math.pow(t-r,2)+Math.pow(e-o,2)<Math.pow(i.hitRadius+i.radius,2)}inXRange(t,e){return Ra(this,t,"x",e)}inYRange(t,e){return Ra(this,t,"y",e)}getCenterPoint(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const n=this.options;this.skip||n.radius<.1||!li(this,e,this.size(n)/2)||(t.strokeStyle=n.borderColor,t.lineWidth=n.borderWidth,t.fillStyle=n.backgroundColor,ai(t,n,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Na(t,e){const{x:n,y:i,base:r,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let s,l,c,u,h;return t.horizontal?(h=a/2,s=Math.min(n,r),l=Math.max(n,r),c=i-h,u=i+h):(h=o/2,s=n-h,l=n+h,c=Math.min(i,r),u=Math.max(i,r)),{left:s,top:c,right:l,bottom:u}}function Da(t,e,n,i){return t?0:Je(e,n,i)}function Aa(t,e,n,i){const r=null===e,o=null===n,a=t&&!(r&&o)&&Na(t,i);return a&&(r||Ze(e,a.left,a.right))&&(o||Ze(n,a.top,a.bottom))}function Ia(t,e){t.rect(e.x,e.y,e.w,e.h)}function ja(t,e,n={}){const i=t.x!==n.x?-e:0,r=t.y!==n.y?-e:0,o=(t.x+t.w!==n.x+n.w?e:0)-i,a=(t.y+t.h!==n.y+n.h?e:0)-r;return{x:t.x+i,y:t.y+r,w:t.w+o,h:t.h+a,radius:t.radius}}Ta.id="point",Ta.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Ta.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Fa extends Gr{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:n,backgroundColor:i}}=this,{inner:r,outer:o}=function(t){const e=Na(t),n=e.right-e.left,i=e.bottom-e.top,r=function(t,e,n){const i=t.options.borderWidth,r=t.borderSkipped,o=xi(i);return{t:Da(r.top,o.top,0,n),r:Da(r.right,o.right,0,e),b:Da(r.bottom,o.bottom,0,n),l:Da(r.left,o.left,0,e)}}(t,n/2,i/2),o=function(t,e,n){const{enableBorderRadius:i}=t.getProps(["enableBorderRadius"]),r=t.options.borderRadius,o=wi(r),a=Math.min(e,n),s=t.borderSkipped,l=i||ue(r);return{topLeft:Da(!l||s.top||s.left,o.topLeft,0,a),topRight:Da(!l||s.top||s.right,o.topRight,0,a),bottomLeft:Da(!l||s.bottom||s.left,o.bottomLeft,0,a),bottomRight:Da(!l||s.bottom||s.right,o.bottomRight,0,a)}}(t,n/2,i/2);return{outer:{x:e.left,y:e.top,w:n,h:i,radius:o},inner:{x:e.left+r.l,y:e.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,o.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(r.b,r.r))}}}}(this),a=(s=o.radius).topLeft||s.topRight||s.bottomLeft||s.bottomRight?gi:Ia;var s;t.save(),o.w===r.w&&o.h===r.h||(t.beginPath(),a(t,ja(o,e,r)),t.clip(),a(t,ja(r,-e,o)),t.fillStyle=n,t.fill("evenodd")),t.beginPath(),a(t,ja(r,e)),t.fillStyle=i,t.fill(),t.restore()}inRange(t,e,n){return Aa(this,t,e,n)}inXRange(t,e){return Aa(this,t,null,e)}inYRange(t,e){return Aa(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:i,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(e+i)/2:e,y:r?n:(n+i)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Fa.id="bar",Fa.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Fa.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};const za=(t,e)=>{let{boxHeight:n=e,boxWidth:i=e}=t;return t.usePointStyle&&(n=Math.min(n,e),i=t.pointStyleWidth||Math.min(i,e)),{boxWidth:i,boxHeight:n,itemHeight:Math.max(e,n)}};class Va extends Gr{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){this.maxWidth=t,this.maxHeight=e,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=ge(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,n)=>t.sort(e,n,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const n=t.labels,i=ki(n.font),r=i.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:s}=za(n,r);let l,c;e.font=i.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(o,r,a,s)+10):(c=this.maxHeight,l=this._fitCols(o,r,a,s)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,n,i){const{ctx:r,maxWidth:o,options:{labels:{padding:a}}}=this,s=this.legendHitBoxes=[],l=this.lineWidths=[0],c=i+a;let u=t;r.textAlign="left",r.textBaseline="middle";let h=-1,d=-c;return this.legendItems.forEach(((t,f)=>{const p=n+e/2+r.measureText(t.text).width;(0===f||l[l.length-1]+p+2*a>o)&&(u+=c,l[l.length-(f>0?0:1)]=0,d+=c,h++),s[f]={left:0,top:d,row:h,width:p,height:i},l[l.length-1]+=p+a})),u}_fitCols(t,e,n,i){const{ctx:r,maxHeight:o,options:{labels:{padding:a}}}=this,s=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let u=a,h=0,d=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const g=n+e/2+r.measureText(t.text).width;o>0&&d+i+2*a>c&&(u+=h+a,l.push({width:h,height:d}),f+=h+a,p++,h=d=0),s[o]={left:f,top:d,col:p,width:g,height:i},h=Math.max(h,g),d+=i+a})),u+=h,l.push({width:h,height:d}),u}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:n,labels:{padding:i},rtl:r}}=this,o=lr(r,this.left,this.width);if(this.isHorizontal()){let r=0,a=un(n,this.left+i,this.right-this.lineWidths[r]);for(const s of e)r!==s.row&&(r=s.row,a=un(n,this.left+i,this.right-this.lineWidths[r])),s.top+=this.top+t+i,s.left=o.leftForLtr(o.x(a),s.width),a+=s.width+i}else{let r=0,a=un(n,this.top+t+i,this.bottom-this.columnSizes[r].height);for(const s of e)s.col!==r&&(r=s.col,a=un(n,this.top+t+i,this.bottom-this.columnSizes[r].height)),s.top=a,s.left+=this.left+i,s.left=o.leftForLtr(o.x(s.left),s.width),a+=s.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;ci(t,this),this._draw(),ui(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:n,ctx:i}=this,{align:r,labels:o}=t,a=ei.color,s=lr(t.rtl,this.left,this.width),l=ki(o.font),{color:c,padding:u}=o,h=l.size,d=h/2;let f;this.drawTitle(),i.textAlign=s.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=l.string;const{boxWidth:p,boxHeight:g,itemHeight:m}=za(o,h),b=this.isHorizontal(),y=this._computeTitleHeight();f=b?{x:un(r,this.left+u,this.right-n[0]),y:this.top+u+y,line:0}:{x:this.left+u,y:un(r,this.top+y+u,this.bottom-e[0].height),line:0},cr(this.ctx,t.textDirection);const v=m+u;this.legendItems.forEach(((x,w)=>{i.strokeStyle=x.fontColor||c,i.fillStyle=x.fontColor||c;const _=i.measureText(x.text).width,k=s.textAlign(x.textAlign||(x.textAlign=o.textAlign)),S=p+d+_;let E=f.x,O=f.y;s.setWidth(this.width),b?w>0&&E+S+u>this.right&&(O=f.y+=v,f.line++,E=f.x=un(r,this.left+u,this.right-n[f.line])):w>0&&O+v>this.bottom&&(E=f.x=E+e[f.line].width+u,f.line++,O=f.y=un(r,this.top+y+u,this.bottom-e[f.line].height)),function(t,e,n){if(isNaN(p)||p<=0||isNaN(g)||g<0)return;i.save();const r=fe(n.lineWidth,1);if(i.fillStyle=fe(n.fillStyle,a),i.lineCap=fe(n.lineCap,"butt"),i.lineDashOffset=fe(n.lineDashOffset,0),i.lineJoin=fe(n.lineJoin,"miter"),i.lineWidth=r,i.strokeStyle=fe(n.strokeStyle,a),i.setLineDash(fe(n.lineDash,[])),o.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},l=s.xPlus(t,p/2);si(i,a,l,e+d,o.pointStyleWidth&&p)}else{const o=e+Math.max((h-g)/2,0),a=s.leftForLtr(t,p),l=wi(n.borderRadius);i.beginPath(),Object.values(l).some((t=>0!==t))?gi(i,{x:a,y:o,w:p,h:g,radius:l}):i.rect(a,o,p,g),i.fill(),0!==r&&i.stroke()}i.restore()}(s.x(E),O,x),E=((t,e,n,i)=>t===(i?"left":"right")?n:"center"===t?(e+n)/2:e)(k,E+p+d,b?E+S:this.right,t.rtl),function(t,e,n){fi(i,n.text,t,e+m/2,l,{strikethrough:n.hidden,textAlign:s.textAlign(n.textAlign)})}(s.x(E),O,x),b?f.x+=S+u:f.y+=v})),ur(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,n=ki(e.font),i=_i(e.padding);if(!e.display)return;const r=lr(t.rtl,this.left,this.width),o=this.ctx,a=e.position,s=n.size/2,l=i.top+s;let c,u=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),c=this.top+l,u=un(t.align,u,this.right-h);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+un(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const d=un(a,u,u+h);o.textAlign=r.textAlign(cn(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=n.string,fi(o,e.text,d,c,n)}_computeTitleHeight(){const t=this.options.title,e=ki(t.font),n=_i(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){let n,i,r;if(Ze(t,this.left,this.right)&&Ze(e,this.top,this.bottom))for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(i=r[n],Ze(t,i.left,i.left+i.width)&&Ze(e,i.top,i.top+i.height))return this.legendItems[n];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const n=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(r=n,null!==(i=o)&&null!==r&&i.datasetIndex===r.datasetIndex&&i.index===r.index);o&&!a&&ge(e.onLeave,[t,o,this],this),this._hoveredItem=n,n&&!a&&ge(e.onHover,[t,n,this],this)}else n&&ge(e.onClick,[t,n,this],this);var i,r}}var Ba={id:"legend",_element:Va,start(t,e,n){const i=t.legend=new Va({ctx:t.ctx,options:n,chart:t});Lo.configure(t,i,n),Lo.addBox(t,i)},stop(t){Lo.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const i=t.legend;Lo.configure(t,i,n),i.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const i=e.datasetIndex,r=n.chart;r.isDatasetVisible(i)?(r.hide(i),e.hidden=!0):(r.show(i),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:r,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const a=t.controller.getStyle(n?0:void 0),s=_i(a.borderWidth);return{text:e[t.index].label,fillStyle:a.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(s.width+s.height)/4,strokeStyle:a.borderColor,pointStyle:i||a.pointStyle,rotation:a.rotation,textAlign:r||a.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Ha extends Gr{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const i=ce(n.text)?n.text.length:1;this._padding=_i(n.padding);const r=i*ki(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:i,right:r,options:o}=this,a=o.align;let s,l,c,u=0;return this.isHorizontal()?(l=un(a,n,r),c=e+t,s=r-n):("left"===o.position?(l=n+t,c=un(a,i,e),u=-.5*Le):(l=r-t,c=un(a,e,i),u=.5*Le),s=i-e),{titleX:l,titleY:c,maxWidth:s,rotation:u}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const n=ki(e.font),i=n.lineHeight/2+this._padding.top,{titleX:r,titleY:o,maxWidth:a,rotation:s}=this._drawArgs(i);fi(t,e.text,0,0,n,{color:e.color,maxWidth:a,rotation:s,textAlign:cn(e.align),textBaseline:"middle",translation:[r,o]})}}var Wa={id:"title",_element:Ha,start(t,e,n){!function(t,e){const n=new Ha({ctx:t.ctx,options:e,chart:t});Lo.configure(t,n,e),Lo.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;Lo.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const i=t.titleBlock;Lo.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};new WeakMap;const Ua={average(t){if(!t.length)return!1;let e,n,i=0,r=0,o=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();i+=t.x,r+=t.y,++o}}return{x:i/o,y:r/o}},nearest(t,e){if(!t.length)return!1;let n,i,r,o=e.x,a=e.y,s=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){const i=t[n].element;if(i&&i.hasValue()){const t=qe(e,i.getCenterPoint());t<s&&(s=t,r=i)}}if(r){const t=r.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function $a(t,e){return e&&(ce(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Ya(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Ka(t,e){const{element:n,datasetIndex:i,index:r}=e,o=t.getDatasetMeta(i).controller,{label:a,value:s}=o.getLabelAndValue(r);return{chart:t,label:a,parsed:o.getParsed(r),raw:t.data.datasets[i].data[r],formattedValue:s,dataset:o.getDataset(),dataIndex:r,datasetIndex:i,element:n}}function qa(t,e){const n=t.chart.ctx,{body:i,footer:r,title:o}=t,{boxWidth:a,boxHeight:s}=e,l=ki(e.bodyFont),c=ki(e.titleFont),u=ki(e.footerFont),h=o.length,d=r.length,f=i.length,p=_i(e.padding);let g=p.height,m=0,b=i.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,h&&(g+=h*c.lineHeight+(h-1)*e.titleSpacing+e.titleMarginBottom),b&&(g+=f*(e.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(b-f)*l.lineHeight+(b-1)*e.bodySpacing),d&&(g+=e.footerMarginTop+d*u.lineHeight+(d-1)*e.footerSpacing);let y=0;const v=function(t){m=Math.max(m,n.measureText(t).width+y)};return n.save(),n.font=c.string,me(t.title,v),n.font=l.string,me(t.beforeBody.concat(t.afterBody),v),y=e.displayColors?a+2+e.boxPadding:0,me(i,(t=>{me(t.before,v),me(t.lines,v),me(t.after,v)})),y=0,n.font=u.string,me(t.footer,v),n.restore(),m+=p.width,{width:m,height:g}}function Ga(t,e,n,i){const{x:r,width:o}=n,{width:a,chartArea:{left:s,right:l}}=t;let c="center";return"center"===i?c=r<=(s+l)/2?"left":"right":r<=o/2?c="left":r>=a-o/2&&(c="right"),function(t,e,n,i){const{x:r,width:o}=i,a=n.caretSize+n.caretPadding;return"left"===t&&r+o+a>e.width||"right"===t&&r-o-a<0||void 0}(c,t,e,n)&&(c="center"),c}function Qa(t,e,n){const i=n.yAlign||e.yAlign||function(t,e){const{y:n,height:i}=e;return n<i/2?"top":n>t.height-i/2?"bottom":"center"}(t,n);return{xAlign:n.xAlign||e.xAlign||Ga(t,e,n,i),yAlign:i}}function Xa(t,e,n,i){const{caretSize:r,caretPadding:o,cornerRadius:a}=t,{xAlign:s,yAlign:l}=n,c=r+o,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=wi(a);let p=function(t,e){let{x:n,width:i}=t;return"right"===e?n-=i:"center"===e&&(n-=i/2),n}(e,s);const g=function(t,e,n){let{y:i,height:r}=t;return"top"===e?i+=n:i-="bottom"===e?r+n:r/2,i}(e,l,c);return"center"===l?"left"===s?p+=c:"right"===s&&(p-=c):"left"===s?p-=Math.max(u,d)+r:"right"===s&&(p+=Math.max(h,f)+r),{x:Je(p,0,i.width-e.width),y:Je(g,0,i.height-e.height)}}function Ja(t,e,n){const i=_i(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-i.right:t.x+i.left}function Za(t){return $a([],Ya(t))}function ts(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}class es extends Gr{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,n=this.options.setContext(this.getContext()),i=n.enabled&&e.options.animation&&n.animations,r=new wr(this.chart,i);return i._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=(this,Ei(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:n}=e,i=n.beforeTitle.apply(this,[t]),r=n.title.apply(this,[t]),o=n.afterTitle.apply(this,[t]);let a=[];return a=$a(a,Ya(i)),a=$a(a,Ya(r)),a=$a(a,Ya(o)),a}getBeforeBody(t,e){return Za(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:n}=e,i=[];return me(t,(t=>{const e={before:[],lines:[],after:[]},r=ts(n,t);$a(e.before,Ya(r.beforeLabel.call(this,t))),$a(e.lines,r.label.call(this,t)),$a(e.after,Ya(r.afterLabel.call(this,t))),i.push(e)})),i}getAfterBody(t,e){return Za(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:n}=e,i=n.beforeFooter.apply(this,[t]),r=n.footer.apply(this,[t]),o=n.afterFooter.apply(this,[t]);let a=[];return a=$a(a,Ya(i)),a=$a(a,Ya(r)),a=$a(a,Ya(o)),a}_createItems(t){const e=this._active,n=this.chart.data,i=[],r=[],o=[];let a,s,l=[];for(a=0,s=e.length;a<s;++a)l.push(Ka(this.chart,e[a]));return t.filter&&(l=l.filter(((e,i,r)=>t.filter(e,i,r,n)))),t.itemSort&&(l=l.sort(((e,i)=>t.itemSort(e,i,n)))),me(l,(e=>{const n=ts(t.callbacks,e);i.push(n.labelColor.call(this,e)),r.push(n.labelPointStyle.call(this,e)),o.push(n.labelTextColor.call(this,e))})),this.labelColors=i,this.labelPointStyles=r,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const n=this.options.setContext(this.getContext()),i=this._active;let r,o=[];if(i.length){const t=Ua[n.position].call(this,i,this._eventPosition);o=this._createItems(n),this.title=this.getTitle(o,n),this.beforeBody=this.getBeforeBody(o,n),this.body=this.getBody(o,n),this.afterBody=this.getAfterBody(o,n),this.footer=this.getFooter(o,n);const e=this._size=qa(this,n),a=Object.assign({},t,e),s=Qa(this.chart,n,a),l=Xa(n,a,s,this.chart);this.xAlign=s.xAlign,this.yAlign=s.yAlign,r={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(r={opacity:0});this._tooltipItems=o,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,n,i){const r=this.getCaretPosition(t,n,i);e.lineTo(r.x1,r.y1),e.lineTo(r.x2,r.y2),e.lineTo(r.x3,r.y3)}getCaretPosition(t,e,n){const{xAlign:i,yAlign:r}=this,{caretSize:o,cornerRadius:a}=n,{topLeft:s,topRight:l,bottomLeft:c,bottomRight:u}=wi(a),{x:h,y:d}=t,{width:f,height:p}=e;let g,m,b,y,v,x;return"center"===r?(v=d+p/2,"left"===i?(g=h,m=g-o,y=v+o,x=v-o):(g=h+f,m=g+o,y=v-o,x=v+o),b=g):(m="left"===i?h+Math.max(s,c)+o:"right"===i?h+f-Math.max(l,u)-o:this.caretX,"top"===r?(y=d,v=y-o,g=m-o,b=m+o):(y=d+p,v=y+o,g=m+o,b=m-o),x=y),{x1:g,x2:m,x3:b,y1:y,y2:v,y3:x}}drawTitle(t,e,n){const i=this.title,r=i.length;let o,a,s;if(r){const l=lr(n.rtl,this.x,this.width);for(t.x=Ja(this,n.titleAlign,n),e.textAlign=l.textAlign(n.titleAlign),e.textBaseline="middle",o=ki(n.titleFont),a=n.titleSpacing,e.fillStyle=n.titleColor,e.font=o.string,s=0;s<r;++s)e.fillText(i[s],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,s+1===r&&(t.y+=n.titleMarginBottom-a)}}_drawColorBox(t,e,n,i,r){const o=this.labelColors[n],a=this.labelPointStyles[n],{boxHeight:s,boxWidth:l,boxPadding:c}=r,u=ki(r.bodyFont),h=Ja(this,"left",r),d=i.x(h),f=s<u.lineHeight?(u.lineHeight-s)/2:0,p=e.y+f;if(r.usePointStyle){const e={radius:Math.min(l,s)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},n=i.leftForLtr(d,l)+l/2,c=p+s/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,ai(t,e,n,c),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,ai(t,e,n,c)}else{t.lineWidth=ue(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=i.leftForLtr(d,l-c),n=i.leftForLtr(i.xPlus(d,1),l-c-2),a=wi(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=r.multiKeyBackground,gi(t,{x:e,y:p,w:l,h:s,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),gi(t,{x:n,y:p+1,w:l-2,h:s-2,radius:a}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(e,p,l,s),t.strokeRect(e,p,l,s),t.fillStyle=o.backgroundColor,t.fillRect(n,p+1,l-2,s-2))}t.fillStyle=this.labelTextColors[n]}drawBody(t,e,n){const{body:i}=this,{bodySpacing:r,bodyAlign:o,displayColors:a,boxHeight:s,boxWidth:l,boxPadding:c}=n,u=ki(n.bodyFont);let h=u.lineHeight,d=0;const f=lr(n.rtl,this.x,this.width),p=function(n){e.fillText(n,f.x(t.x+d),t.y+h/2),t.y+=h+r},g=f.textAlign(o);let m,b,y,v,x,w,_;for(e.textAlign=o,e.textBaseline="middle",e.font=u.string,t.x=Ja(this,g,n),e.fillStyle=n.bodyColor,me(this.beforeBody,p),d=a&&"right"!==g?"center"===o?l/2+c:l+2+c:0,v=0,w=i.length;v<w;++v){for(m=i[v],b=this.labelTextColors[v],e.fillStyle=b,me(m.before,p),y=m.lines,a&&y.length&&(this._drawColorBox(e,t,v,f,n),h=Math.max(u.lineHeight,s)),x=0,_=y.length;x<_;++x)p(y[x]),h=u.lineHeight;me(m.after,p)}d=0,h=u.lineHeight,me(this.afterBody,p),t.y-=r}drawFooter(t,e,n){const i=this.footer,r=i.length;let o,a;if(r){const s=lr(n.rtl,this.x,this.width);for(t.x=Ja(this,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=s.textAlign(n.footerAlign),e.textBaseline="middle",o=ki(n.footerFont),e.fillStyle=n.footerColor,e.font=o.string,a=0;a<r;++a)e.fillText(i[a],s.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+n.footerSpacing}}drawBackground(t,e,n,i){const{xAlign:r,yAlign:o}=this,{x:a,y:s}=t,{width:l,height:c}=n,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=wi(i.cornerRadius);e.fillStyle=i.backgroundColor,e.strokeStyle=i.borderColor,e.lineWidth=i.borderWidth,e.beginPath(),e.moveTo(a+u,s),"top"===o&&this.drawCaret(t,e,n,i),e.lineTo(a+l-h,s),e.quadraticCurveTo(a+l,s,a+l,s+h),"center"===o&&"right"===r&&this.drawCaret(t,e,n,i),e.lineTo(a+l,s+c-f),e.quadraticCurveTo(a+l,s+c,a+l-f,s+c),"bottom"===o&&this.drawCaret(t,e,n,i),e.lineTo(a+d,s+c),e.quadraticCurveTo(a,s+c,a,s+c-d),"center"===o&&"left"===r&&this.drawCaret(t,e,n,i),e.lineTo(a,s+u),e.quadraticCurveTo(a,s,a+u,s),e.closePath(),e.fill(),i.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,n=this.$animations,i=n&&n.x,r=n&&n.y;if(i||r){const n=Ua[t.position].call(this,this._active,this._eventPosition);if(!n)return;const o=this._size=qa(this,t),a=Object.assign({},n,this._size),s=Qa(e,t,a),l=Xa(t,a,s,e);i._to===l.x&&r._to===l.y||(this.xAlign=s.xAlign,this.yAlign=s.yAlign,this.width=o.width,this.height=o.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(e);const i={width:this.width,height:this.height},r={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const o=_i(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=n,this.drawBackground(r,t,i,e),cr(t,e.textDirection),r.y+=o.top,this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),ur(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this._active,i=t.map((({datasetIndex:t,index:e})=>{const n=this.chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}})),r=!be(n,i),o=this._positionChanged(i,e);(r||o)&&(this._active=i,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,n=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const i=this.options,r=this._active||[],o=this._getActiveElements(t,r,e,n),a=this._positionChanged(o,t),s=e||!be(o,r)||a;return s&&(this._active=o,(i.enabled||i.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),s}_getActiveElements(t,e,n,i){const r=this.options;if("mouseout"===t.type)return[];if(!i)return e;const o=this.chart.getElementsAtEventForMode(t,r.mode,r,n);return r.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:n,caretY:i,options:r}=this,o=Ua[r.position].call(this,t,e);return!1!==o&&(n!==o.x||i!==o.y)}}es.positioners=Ua;var ns={id:"tooltip",_element:es,positioners:Ua,afterInit(t,e,n){n&&(t.tooltip=new es({chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const n={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",n))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n)}},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:ae,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,i=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(i>0&&e.dataIndex<i)return n[e.dataIndex]}return""},afterTitle:ae,beforeBody:ae,beforeLabel:ae,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return le(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:ae,afterBody:ae,beforeFooter:ae,footer:ae,afterFooter:ae}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]};class is extends oo{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:n,label:i}of e)t[n]===i&&t.splice(n,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(le(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:Je(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n,i){const r=t.indexOf(e);return-1===r?((t,e,n,i)=>("string"==typeof e?(n=t.push(e)-1,i.unshift({index:n,label:e})):isNaN(e)&&(n=null),n))(t,e,n,i):r!==t.lastIndexOf(e)?n:r}(n,t,fe(e,t),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:n,max:i}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(n=0),e||(i=this.getLabels().length-1)),this.min=n,this.max=i}buildTicks(){const t=this.min,e=this.max,n=this.options.offset,i=[];let r=this.getLabels();r=0===t&&e===r.length-1?r:r.slice(t,e+1),this._valueRange=Math.max(r.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=t;n<=e;n++)i.push({value:n});return i}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function rs(t,e,{horizontal:n,minRotation:i}){const r=Ue(i),o=(n?Math.sin(r):Math.cos(r))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}is.id="category",is.defaults={ticks:{callback:is.prototype.getLabelForValue}};class os extends oo{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return le(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:n}=this.getUserBounds();let{min:i,max:r}=this;const o=t=>i=e?i:t,a=t=>r=n?r:t;if(t){const t=ze(i),e=ze(r);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(i===r){let e=1;(r>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*r)),a(r+e),t||o(i-e)}this.min=i,this.max=r}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:n,stepSize:i}=t;return i?(e=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let n=this.getTickLimit();n=Math.max(2,n);const i=function(t,e){const n=[],{bounds:i,step:r,min:o,max:a,precision:s,count:l,maxTicks:c,maxDigits:u,includeBounds:h}=t,d=r||1,f=c-1,{min:p,max:g}=e,m=!le(o),b=!le(a),y=!le(l),v=(g-p)/(u+1);let x,w,_,k,S=Ve((g-p)/f/d)*d;if(S<1e-14&&!m&&!b)return[{value:p},{value:g}];k=Math.ceil(g/S)-Math.floor(p/S),k>f&&(S=Ve(k*S/f/d)*d),le(s)||(x=Math.pow(10,s),S=Math.ceil(S*x)/x),"ticks"===i?(w=Math.floor(p/S)*S,_=Math.ceil(g/S)*S):(w=p,_=g),m&&b&&r&&function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t}((a-o)/r,S/1e3)?(k=Math.round(Math.min((a-o)/S,c)),S=(a-o)/k,w=o,_=a):y?(w=m?o:w,_=b?a:_,k=l-1,S=(_-w)/k):(k=(_-w)/S,k=He(k,Math.round(k),S/1e3)?Math.round(k):Math.ceil(k));const E=Math.max(Ye(S),Ye(w));x=Math.pow(10,le(s)?E:s),w=Math.round(w*x)/x,_=Math.round(_*x)/x;let O=0;for(m&&(h&&w!==o?(n.push({value:o}),w<o&&O++,He(Math.round((w+O*S)*x)/x,o,rs(o,v,t))&&O++):w<o&&O++);O<k;++O)n.push({value:Math.round((w+O*S)*x)/x});return b&&h&&_!==a?n.length&&He(n[n.length-1].value,a,rs(a,v,t))?n[n.length-1].value=a:n.push({value:a}):b&&_!==a||n.push({value:_}),n}({maxTicks:n,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&We(i,this,"value"),t.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const t=this.ticks;let e=this.min,n=this.max;if(super.configure(),this.options.offset&&t.length){const i=(n-e)/Math.max(t.length-1,1)/2;e-=i,n+=i}this._startValue=e,this._endValue=n,this._valueRange=n-e}getLabelForValue(t){return sr(t,this.chart.options.locale,this.options.ticks.format)}}class as extends os{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=he(t)?t:0,this.max=he(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,n=Ue(this.options.ticks.minRotation),i=(t?Math.sin(n):Math.cos(n))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,r.lineHeight/i))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function ss(t){return 1==t/Math.pow(10,Math.floor(Fe(t)))}as.id="linear",as.defaults={ticks:{callback:Xr.formatters.numeric}};class ls extends oo{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const n=os.prototype.parse.apply(this,[t,e]);if(0!==n)return he(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=he(t)?Math.max(0,t):null,this.max=he(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let n=this.min,i=this.max;const r=e=>n=t?n:e,o=t=>i=e?i:t,a=(t,e)=>Math.pow(10,Math.floor(Fe(t))+e);n===i&&(n<=0?(r(1),o(10)):(r(a(n,-1)),o(a(i,1)))),n<=0&&r(a(i,-1)),i<=0&&o(a(n,1)),this._zero&&this.min!==this._suggestedMin&&n===a(this.min,0)&&r(a(n,-1)),this.min=n,this.max=i}buildTicks(){const t=this.options,e=function(t,e){const n=Math.floor(Fe(e.max)),i=Math.ceil(e.max/Math.pow(10,n)),r=[];let o=de(t.min,Math.pow(10,Math.floor(Fe(e.min)))),a=Math.floor(Fe(o)),s=Math.floor(o/Math.pow(10,a)),l=a<0?Math.pow(10,Math.abs(a)):1;do{r.push({value:o,major:ss(o)}),++s,10===s&&(s=1,++a,l=a>=0?1:l),o=Math.round(s*Math.pow(10,a)*l)/l}while(a<n||a===n&&s<i);const c=de(t.max,o);return r.push({value:c,major:ss(o)}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&We(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":sr(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=Fe(t),this._valueRange=Fe(this.max)-Fe(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(Fe(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function cs(t){const e=t.ticks;if(e.display&&t.display){const t=_i(e.backdropPadding);return fe(e.font&&e.font.size,ei.font.size)+t.height}return 0}function us(t,e,n,i,r){return t===i||t===r?{start:e-n/2,end:e+n/2}:t<i||t>r?{start:e-n,end:e}:{start:e,end:e+n}}function hs(t,e,n,i,r){const o=Math.abs(Math.sin(n)),a=Math.abs(Math.cos(n));let s=0,l=0;i.start<e.l?(s=(e.l-i.start)/o,t.l=Math.min(t.l,e.l-s)):i.end>e.r&&(s=(i.end-e.r)/o,t.r=Math.max(t.r,e.r+s)),r.start<e.t?(l=(e.t-r.start)/a,t.t=Math.min(t.t,e.t-l)):r.end>e.b&&(l=(r.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function ds(t){return 0===t||180===t?"center":t<180?"left":"right"}function fs(t,e,n){return 90===n||270===n?t-=e/2:(n>270||n<90)&&(t-=e),t}function ps(t,e,n,i){const{ctx:r}=t;if(n)r.arc(t.xCenter,t.yCenter,e,0,Re);else{let n=t.getPointPosition(0,e);r.moveTo(n.x,n.y);for(let o=1;o<i;o++)n=t.getPointPosition(o,e),r.lineTo(n.x,n.y)}}ls.id="logarithmic",ls.defaults={ticks:{callback:Xr.formatters.logarithmic,major:{enabled:!0}}};class gs extends os{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=_i(cs(this.options)/2),e=this.width=this.maxWidth-t.width,n=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+n/2+t.top),this.drawingArea=Math.floor(Math.min(e,n)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=he(t)&&!isNaN(t)?t:0,this.max=he(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/cs(this.options))}generateTickLabels(t){os.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const n=ge(this.options.pointLabels.callback,[t,e],this);return n||0===n?n:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},n=Object.assign({},e),i=[],r=[],o=t._pointLabels.length,a=t.options.pointLabels,s=a.centerPointLabels?Le/o:0;for(let h=0;h<o;h++){const o=a.setContext(t.getPointLabelContext(h));r[h]=o.padding;const d=t.getPointPosition(h,t.drawingArea+r[h],s),f=ki(o.font),p=(l=t.ctx,c=f,u=ce(u=t._pointLabels[h])?u:[u],{w:ii(l,c.string,u),h:u.length*c.lineHeight});i[h]=p;const g=Qe(t.getIndexAngle(h)+s),m=Math.round($e(g));hs(n,e,g,us(m,d.x,p.w,0,180),us(m,d.y,p.h,90,270))}var l,c,u;t.setCenterPoint(e.l-n.l,n.r-e.r,e.t-n.t,n.b-e.b),t._pointLabelItems=function(t,e,n){const i=[],r=t._pointLabels.length,o=t.options,a=cs(o)/2,s=t.drawingArea,l=o.pointLabels.centerPointLabels?Le/r:0;for(let o=0;o<r;o++){const r=t.getPointPosition(o,s+a+n[o],l),d=Math.round($e(Qe(r.angle+Ae))),f=e[o],p=fs(r.y,f.h,d),g=ds(d),m=(c=r.x,u=f.w,"right"===(h=g)?c-=u:"center"===h&&(c-=u/2),c);i.push({x:r.x,y:p,textAlign:g,left:m,top:p,right:m+f.w,bottom:p+f.h})}var c,u,h;return i}(t,i,r)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,n,i){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((n-i)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,n,i))}getIndexAngle(t){return Qe(t*(Re/(this._pointLabels.length||1))+Ue(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(le(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(le(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const n=e[t];return function(t,e,n){return Ei(t,{label:n,index:e,type:"pointLabel"})}(this.getContext(),t,n)}}getPointPosition(t,e,n=0){const i=this.getIndexAngle(t)-Ae+n;return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter,angle:i}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:n,right:i,bottom:r}=this._pointLabelItems[t];return{left:e,top:n,right:i,bottom:r}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const n=this.ctx;n.save(),n.beginPath(),ps(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),n.closePath(),n.fillStyle=t,n.fill(),n.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:n,grid:i}=e,r=this._pointLabels.length;let o,a,s;if(e.pointLabels.display&&function(t,e){const{ctx:n,options:{pointLabels:i}}=t;for(let r=e-1;r>=0;r--){const e=i.setContext(t.getPointLabelContext(r)),o=ki(e.font),{x:a,y:s,textAlign:l,left:c,top:u,right:h,bottom:d}=t._pointLabelItems[r],{backdropColor:f}=e;if(!le(f)){const t=wi(e.borderRadius),i=_i(e.backdropPadding);n.fillStyle=f;const r=c-i.left,o=u-i.top,a=h-c+i.width,s=d-u+i.height;Object.values(t).some((t=>0!==t))?(n.beginPath(),gi(n,{x:r,y:o,w:a,h:s,radius:t}),n.fill()):n.fillRect(r,o,a,s)}fi(n,t._pointLabels[r],a,s+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(this,r),i.display&&this.ticks.forEach(((t,e)=>{0!==e&&(a=this.getDistanceFromCenterForValue(t.value),function(t,e,n,i){const r=t.ctx,o=e.circular,{color:a,lineWidth:s}=e;!o&&!i||!a||!s||n<0||(r.save(),r.strokeStyle=a,r.lineWidth=s,r.setLineDash(e.borderDash),r.lineDashOffset=e.borderDashOffset,r.beginPath(),ps(t,n,o,i),r.closePath(),r.stroke(),r.restore())}(this,i.setContext(this.getContext(e-1)),a,r))})),n.display){for(t.save(),o=r-1;o>=0;o--){const i=n.setContext(this.getPointLabelContext(o)),{color:r,lineWidth:l}=i;l&&r&&(t.lineWidth=l,t.strokeStyle=r,t.setLineDash(i.borderDash),t.lineDashOffset=i.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),s=this.getPointPosition(o,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(s.x,s.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,n=e.ticks;if(!n.display)return;const i=this.getIndexAngle(0);let r,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(i),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((i,a)=>{if(0===a&&!e.reverse)return;const s=n.setContext(this.getContext(a)),l=ki(s.font);if(r=this.getDistanceFromCenterForValue(this.ticks[a].value),s.showLabelBackdrop){t.font=l.string,o=t.measureText(i.label).width,t.fillStyle=s.backdropColor;const e=_i(s.backdropPadding);t.fillRect(-o/2-e.left,-r-l.size/2-e.top,o+e.width,l.size+e.height)}fi(t,i.label,0,-r,l,{color:s.color})})),t.restore()}drawTitle(){}}gs.id="radialLinear",gs.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Xr.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},gs.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},gs.descriptors={angleLines:{_fallback:"grid"}};const ms={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},bs=Object.keys(ms);function ys(t,e){return t-e}function vs(t,e){if(le(e))return null;const n=t._adapter,{parser:i,round:r,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof i&&(a=i(a)),he(a)||(a="string"==typeof i?n.parse(a,i):n.parse(a)),null===a?null:(r&&(a="week"!==r||!Be(o)&&!0!==o?n.startOf(a,r):n.startOf(a,"isoWeek",o)),+a)}function xs(t,e,n,i){const r=bs.length;for(let o=bs.indexOf(t);o<r-1;++o){const t=ms[bs[o]],r=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((n-e)/(r*t.size))<=i)return bs[o]}return bs[r-1]}function ws(t,e,n){if(n){if(n.length){const{lo:i,hi:r}=tn(n,e);t[n[i]>=e?n[i]:n[r]]=!0}}else t[e]=!0}function _s(t,e,n){const i=[],r={},o=e.length;let a,s;for(a=0;a<o;++a)s=e[a],r[s]=a,i.push({value:s,major:!1});return 0!==o&&n?function(t,e,n,i){const r=t._adapter,o=+r.startOf(e[0].value,i),a=e[e.length-1].value;let s,l;for(s=o;s<=a;s=+r.add(s,1,i))l=n[s],l>=0&&(e[l].major=!0);return e}(t,i,r,n):i}class ks extends oo{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const n=t.time||(t.time={}),i=this._adapter=new ho._date(t.adapters.date);i.init(e),_e(n.displayFormats,i.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:vs(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,n=t.time.unit||"day";let{min:i,max:r,minDefined:o,maxDefined:a}=this.getUserBounds();function s(t){o||isNaN(t.min)||(i=Math.min(i,t.min)),a||isNaN(t.max)||(r=Math.max(r,t.max))}o&&a||(s(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||s(this.getMinMax(!1))),i=he(i)&&!isNaN(i)?i:+e.startOf(Date.now(),n),r=he(r)&&!isNaN(r)?r:+e.endOf(Date.now(),n)+1,this.min=Math.min(i,r-1),this.max=Math.max(i+1,r)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],n=t[t.length-1]),{min:e,max:n}}buildTicks(){const t=this.options,e=t.time,n=t.ticks,i="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&i.length&&(this.min=this._userMin||i[0],this.max=this._userMax||i[i.length-1]);const r=this.min,o=function(t,e,n){let i=0,r=t.length;for(;i<r&&t[i]<e;)i++;for(;r>i&&t[r-1]>n;)r--;return i>0||r<t.length?t.slice(i,r):t}(i,r,this.max);return this._unit=e.unit||(n.autoSkip?xs(e.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(t,e,n,i,r){for(let o=bs.length-1;o>=bs.indexOf(n);o--){const n=bs[o];if(ms[n].common&&t._adapter.diff(r,i,n)>=e-1)return n}return bs[n?bs.indexOf(n):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(t){for(let e=bs.indexOf(t)+1,n=bs.length;e<n;++e)if(ms[bs[e]].common)return bs[e]}(this._unit):void 0,this.initOffsets(i),t.reverse&&o.reverse(),_s(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t){let e,n,i=0,r=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),i=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,n=this.getDecimalForValue(t[t.length-1]),r=1===t.length?n:(n-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;i=Je(i,0,o),r=Je(r,0,o),this._offsets={start:i,end:r,factor:1/(i+1+r)}}_generate(){const t=this._adapter,e=this.min,n=this.max,i=this.options,r=i.time,o=r.unit||xs(r.minUnit,e,n,this._getLabelCapacity(e)),a=fe(r.stepSize,1),s="week"===o&&r.isoWeekday,l=Be(s)||!0===s,c={};let u,h,d=e;if(l&&(d=+t.startOf(d,"isoWeek",s)),d=+t.startOf(d,l?"day":o),t.diff(n,e,o)>1e5*a)throw new Error(e+" and "+n+" are too far apart with stepSize of "+a+" "+o);const f="data"===i.ticks.source&&this.getDataTimestamps();for(u=d,h=0;u<n;u=+t.add(u,a,o),h++)ws(c,u,f);return u!==n&&"ticks"!==i.bounds&&1!==h||ws(c,u,f),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,n=this.options.time;return n.tooltipFormat?e.format(t,n.tooltipFormat):e.format(t,n.displayFormats.datetime)}_tickFormatFunction(t,e,n,i){const r=this.options,o=r.time.displayFormats,a=this._unit,s=this._majorUnit,l=a&&o[a],c=s&&o[s],u=n[e],h=s&&c&&u&&u.major,d=this._adapter.format(t,i||(h?c:l)),f=r.ticks.callback;return f?ge(f,[d,e,n],this):d}generateTickLabels(t){let e,n,i;for(e=0,n=t.length;e<n;++e)i=t[e],i.label=this._tickFormatFunction(i.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,n=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+n)*e.factor)}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+n*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,n=this.ctx.measureText(t).width,i=Ue(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(i),o=Math.sin(i),a=this._resolveTickFontOptions(0).size;return{w:n*r+a*o,h:n*o+a*r}}_getLabelCapacity(t){const e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,r=this._tickFormatFunction(t,0,_s(this,[t],this._majorUnit),i),o=this._getLabelSize(r),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,n=this._cache.data||[];if(n.length)return n;const i=this.getMatchingVisibleMetas();if(this._normalized&&i.length)return this._cache.data=i[0].controller.getAllParsedValues(this);for(t=0,e=i.length;t<e;++t)n=n.concat(i[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const t=this._cache.labels||[];let e,n;if(t.length)return t;const i=this.getLabels();for(e=0,n=i.length;e<n;++e)t.push(vs(this,i[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return an(t.sort(ys))}}function Ss(t,e,n){let i,r,o,a,s=0,l=t.length-1;n?(e>=t[s].pos&&e<=t[l].pos&&({lo:s,hi:l}=en(t,"pos",e)),({pos:i,time:o}=t[s]),({pos:r,time:a}=t[l])):(e>=t[s].time&&e<=t[l].time&&({lo:s,hi:l}=en(t,"time",e)),({time:i,pos:o}=t[s]),({time:r,pos:a}=t[l]));const c=r-i;return c?o+(a-o)*(e-i)/c:o}ks.id="time",ks.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Es extends ks{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Ss(e,this.min),this._tableRange=Ss(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:n}=this,i=[],r=[];let o,a,s,l,c;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=n&&i.push(l);if(i.length<2)return[{time:e,pos:0},{time:n,pos:1}];for(o=0,a=i.length;o<a;++o)c=i[o+1],s=i[o-1],l=i[o],Math.round((c+s)/2)!==l&&r.push({time:l,pos:o/(a-1)});return r}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),n=this.getLabelTimestamps();return t=e.length&&n.length?this.normalize(e.concat(n)):e.length?e:n,t=this._cache.all=t,t}getDecimalForValue(t){return(Ss(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return Ss(this._table,n*this._tableRange+this._minPos,!0)}}Es.id="timeseries",Es.defaults=ks.defaults;const Os="label";function Cs(t,e){"function"==typeof t?t(e):t&&(t.current=e)}function Ps(t,e){t.labels=e}function Ms(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Os;const i=[];t.datasets=e.map((e=>{const r=t.datasets.find((t=>t[n]===e[n]));return r&&e.data&&!i.includes(r)?(i.push(r),Object.assign(r,e),r):{...e}}))}function Ls(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Os;const n={labels:[],datasets:[]};return Ps(n,t.labels),Ms(n,t.datasets,e),n}function Rs(e,n){let{height:i=150,width:r=300,redraw:o=!1,datasetIdKey:a,type:s,data:l,options:c,plugins:u=[],fallbackContent:h,updateMode:d,...f}=e;const p=(0,t.useRef)(null),g=(0,t.useRef)(),m=()=>{p.current&&(g.current=new ma(p.current,{type:s,data:Ls(l,a),options:c&&{...c},plugins:u}),Cs(n,g.current))},b=()=>{Cs(n,null),g.current&&(g.current.destroy(),g.current=null)};return(0,t.useEffect)((()=>{var t,e;!o&&g.current&&c&&(t=g.current,e=c,Object.assign(t.options,e))}),[o,c]),(0,t.useEffect)((()=>{!o&&g.current&&Ps(g.current.config.data,l.labels)}),[o,l.labels]),(0,t.useEffect)((()=>{!o&&g.current&&l.datasets&&Ms(g.current.config.data,l.datasets,a)}),[o,l.datasets]),(0,t.useEffect)((()=>{g.current&&(o?(b(),setTimeout(m)):g.current.update(d))}),[o,c,l.labels,l.datasets,d]),(0,t.useEffect)((()=>{g.current&&(b(),setTimeout(m))}),[s]),(0,t.useEffect)((()=>(m(),()=>b())),[]),t.createElement("canvas",Object.assign({ref:p,role:"img",height:i,width:r},f),h)}const Ts=(0,t.forwardRef)(Rs);function Ns(e,n){return ma.register(n),(0,t.forwardRef)(((n,i)=>t.createElement(Ts,Object.assign({},n,{ref:i,type:e}))))}const Ds=Ns("line",$r);ma.register(is,as,Ta,La,Wa,ns,Ba);var As,Is=function(e){var n,i,r=e.schoolGraph,o=e.chartColors,a=t.useRef(null),s=Wt(),l=O((function(t){return t.data.hiddenGraphs})),c=O((function(t){return t.data[A.COUNTRY_FILTER].filterValue})),u=O((function(t){return t.data[A.CAMP_FILTER].filterValue})),h=function(t,e,n){var i=[],r=Object.values(P),o=function(t,e){return r.indexOf(t.x)-r.indexOf(e.x)};return t.forEach((function(t,r){i.push({pointStyle:"circle",pointRadius:7,pointHoverRadius:15,hidden:n.indexOf(r)>-1,label:r,borderColor:e[i.length],data:Array.from(t,(function(t){return{x:t[0],y:t[1]}})).sort(o)})})),{labels:Object.values(P),datasets:i}}(r,o,l),d={maintainAspectRatio:!1,responsive:!0,plugins:{legend:{display:!1},title:{display:!0,text:bt().t(As||(n=["NO of lessons"],i=["NO of lessons"],Object.defineProperty?Object.defineProperty(n,"raw",{value:i}):n.raw=i,As=n))}},animation:{duration:0}};return t.createElement("div",{style:{width:"100%",height:"39rem"}},t.createElement(Ds,{ref:a,onClick:function(t){var e=a.current;e&&function(t){if(t.length){var e=t[0],n=e.datasetIndex,i=e.index;s("/point/".concat(c,"/").concat(u,"/").concat(h.datasets[n].label,"/").concat(h.datasets[n].data[i].x))}}(function(t,e){return t.getElementsAtEventForMode(e.nativeEvent,"nearest",{intersect:!0},!1)}(e,t))},options:d,data:h}))};var js=function(e){var n=e.filteredOutput,i=e.chartColors;return t.createElement("aside",{className:"Xc9weATIBQzAilZMU7uA"},t.createElement(Bs,{placeName:n.campName,number:n.totalLessons}),t.createElement("div",{className:"KJuIlB4Mr_PfCsXCkueB"},t.createElement(Ws,{chartColors:i,schoolsMap:n.schoolLessons})))};var Fs,zs,Vs=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},Bs=function(e){var n=e.number,i=e.placeName,r=e.color,o=bt();return t.createElement("div",null,t.createElement("div",{style:{color:r},className:"OkPZ4UzC7oLPJoBIP9At"},t.createElement("span",{className:"P56RDvsg6RSK6dSDH3qa"},n),t.createElement("span",null,o.t(Fs||(Fs=Vs(["Lessons"],["Lessons"]))))),t.createElement("div",{style:{color:r},className:"WoA1mOd5f3SjfcMKA0hg"},o.t(zs||(zs=Vs(["in"],["in"])))," ",i))};var Hs=function(e){var n=e.schoolName,i=e.lessonsCount,r=e.color,o=E(),a=!O((function(t){return t.data.hiddenGraphs})).includes(n),s=a?D.HIDE_GRAPH:D.SHOW_GRAPH;return t.createElement("div",{onClick:function(){o(function(t,e){switch(e){case D.SHOW_GRAPH:return{type:D.SHOW_GRAPH,payload:t};case D.HIDE_GRAPH:return{type:D.HIDE_GRAPH,payload:t}}}(n,s))},style:a?{color:r}:void 0,className:"V_3rbrTcX_unlN86VAnj"},t.createElement("div",{style:a?{borderColor:r}:void 0,className:"_HGsARrDwnuSbSsXjW1r"},t.createElement("div",{style:a?{background:r}:void 0,className:"Heq43RmwAkjUFoQ6FOmq"})),t.createElement(Bs,{color:a?r:void 0,placeName:n,number:i}))},Ws=function(e){var n=e.schoolsMap,i=e.chartColors,r=function(t){var e=[];return t.forEach((function(t,n){e.push({schoolName:n,lessons:t})})),e}(n);return t.createElement("div",null,r.map((function(e,n){return t.createElement(Hs,{key:n,schoolName:e.schoolName,lessonsCount:e.lessons,color:i[n]})})))};var Us=function(){return t.createElement("div",{className:"oTk7W0cN__XgEZqKJrSr"},t.createElement("div",null),t.createElement("div",null),t.createElement("div",null),t.createElement("div",null))};var $s=function(){return t.createElement("div",{className:"s15UhtVWxDELC9oPfy_q"},t.createElement(Us,null))},Ys=function(t,e,n){var i=e.country,r=e.camp;void 0===n&&(n="");var o=Array.from(new Set(t.filter((function(t){return t.country===i&&t.camp===r})).map((function(t){return t.school}))));return o.push(I),{data:o,filterValue:o.includes(n)?n:o[0]}},Ks=function(t,e,n){var i=e.country;void 0===n&&(n="");var r=Array.from(new Set(t.filter((function(t){return t.country===i})).map((function(t){return t.camp}))));return{data:r,filterValue:r.includes(n)?n:r[0]}};var qs=function(){var e=O((function(t){return t.data})).data,n=O((function(t){return t.data[A.CAMP_FILTER].filterValue})),i=O((function(t){return t.data[A.SCHOOL_FILTER].filterValue})),r=O((function(t){return t.data[A.COUNTRY_FILTER].filterValue})),o=["#e8707d","#8a5ea9","#3ca6db","#385e77","#24a408"],a=t.useMemo((function(){return function(t,e){var n=e.countryFilter,i=e.campFilter,r=e.schoolFilter,o=new Map,a=t.filter((function(t){return t.camp===i&&t.country===n&&(t.school===r||r===I)}));a.forEach((function(t){var e,n=null!==(e=o.get(t.school))&&void 0!==e?e:0;o.set(t.school,n+t.lessons)}));var s=t.reduce((function(t,e){return e.camp===i&&e.country===n?t+e.lessons:t}),0),l=new Map;return a.forEach((function(t){var e,n=l.get(t.school);if(n){var i=null!==(e=n.get(t.month))&&void 0!==e?e:0;n.set(t.month,i+t.lessons),l.set(t.school,n)}else l.set(t.school,(new Map).set(t.month,t.lessons))})),{schoolLessons:o,totalLessons:s,campName:i,schoolGraph:l}}(e,{campFilter:n,schoolFilter:i,countryFilter:r})}),[e,n,i,r]);return t.createElement("div",{className:"wMp935v4yNo_KbcXy3Ln"},t.createElement("div",{className:"r1xlwRu8JgqpwKXmdHbS"},t.createElement("div",{className:"iv1jwckexGDZ8gcaYFLM"},t.createElement(Is,{schoolGraph:a.schoolGraph,chartColors:o})),t.createElement("div",{className:"ii_0WFvtb8zzLXw0fuXd"},t.createElement(js,{filteredOutput:a,chartColors:o}))))},Gs=function(t,e){t===L.AR?(document.body.dir=R.RTL,localStorage.setItem("lang",L.AR),e.changeLanguage("ar"),Qs("add")):(document.body.dir=R.LTR,localStorage.setItem("lang",L.EN),e.changeLanguage("en"),Qs("remove"))},Qs=function(t){void 0===t&&(t="add");var e=document.querySelectorAll('link[rel="stylesheet"]');"add"==t?e.forEach((function(t){if(t.href.endsWith(".chunk.css")){var e=document.createElement("link");e.href=t.href.replace(/\.css$/,".rtl.css"),e.rel="stylesheet",document.body.appendChild(e)}})):e.forEach((function(t){t.href.endsWith(".chunk.rtl.css")&&document.body.removeChild(t)}))};var Xs=function(){var e=function(){var e=bt().i18n,n=localStorage.getItem("lang")||L.EN;return t.useEffect((function(){n===L.AR&&Gs(L.AR,e)}),[]),{currentLang:n,changeLanguage:function(){n===L.EN?Gs(L.AR,e):Gs(L.EN,e)}}}(),n=e.currentLang,i=e.changeLanguage;return t.createElement("div",{className:"C8qCmf7kizYe3Awtm8gT",onClick:function(){i()}},n===L.AR?L.EN:L.AR)};var Js,Zs,tl;function el(){return el=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},el.apply(this,arguments)}const nl=function(e){return t.createElement("svg",el({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512",style:{enableBackground:"new 0 0 512 512"},xmlSpace:"preserve"},e),t.createElement("circle",{style:{fill:"#4a7dba"},cx:256,cy:256,r:244.87}),t.createElement("path",{style:{fill:"#e5e5e5"},d:"M256 256c0-90.635 49.245-169.762 122.435-212.103C342.417 23.061 300.603 11.13 256 11.13 120.762 11.13 11.13 120.762 11.13 256c0 135.237 109.631 244.87 244.87 244.87 44.603 0 86.417-11.931 122.435-32.767C305.245 425.762 256 346.635 256 256z"}),t.createElement("circle",{style:{fill:"#afafaf"},cx:77.913,cy:278.261,r:22.261}),t.createElement("circle",{style:{fill:"#afafaf"},cx:155.826,cy:378.435,r:33.391}),Js||(Js=t.createElement("path",{d:"M111.102 128.767c2.934 0 5.864-1.153 8.051-3.443C155.212 87.573 203.812 66.783 256 66.783c6.146 0 11.13-4.983 11.13-11.13s-4.984-11.13-11.13-11.13c-58.328 0-112.644 23.236-152.946 65.427-4.245 4.445-4.084 11.491.361 15.737a11.1 11.1 0 0 0 7.687 3.08zM83.181 153.914a11.064 11.064 0 0 0 6.2 1.896c3.583 0 7.102-1.725 9.254-4.916l.104-.155c3.378-5.112 1.966-11.959-3.131-15.359-5.096-3.4-12.006-2.01-15.431 3.07l-.021.031c-3.429 5.098-2.072 12 3.025 15.433z"})),Zs||(Zs=t.createElement("path",{d:"M267.411 511.74c1.256-.055 2.509-.124 3.761-.197.702-.041 1.405-.081 2.107-.128 61.875-4.097 119.484-30.139 163.74-74.395C485.372 388.667 512 324.38 512 256s-26.628-132.667-74.98-181.019C392.764 30.726 335.155 4.684 273.28.587c-.702-.047-1.405-.087-2.107-.128a292.082 292.082 0 0 0-3.761-.197 256.853 256.853 0 0 0-5.862-.193C259.7.028 257.851 0 256 0c-25.642 0-50.709 3.744-74.576 10.976a252.167 252.167 0 0 0-17.666 6.073c-32.906 12.69-63.091 32.246-88.777 57.933C26.628 123.333 0 187.619 0 256c0 68.38 26.628 132.667 74.981 181.019C123.333 485.372 187.62 512 256 512c1.851 0 3.7-.028 5.549-.068a251.56 251.56 0 0 0 5.862-.192zM489.739 256c0 84.058-44.61 157.885-111.39 199.078C309.582 412.649 267.13 336.981 267.13 256S309.582 99.351 378.349 56.922c66.78 41.193 111.39 115.02 111.39 199.078zm-467.478 0C22.261 127.116 127.116 22.261 256 22.261c2.11 0 4.217.031 6.323.088.492.013.981.04 1.473.056 1.636.055 3.271.116 4.904.205.486.027.969.063 1.455.092 1.655.1 3.308.209 4.959.345.421.035.839.076 1.26.112 1.727.151 3.452.315 5.173.504.346.038.691.08 1.037.119a237.78 237.78 0 0 1 6.227.793 240.037 240.037 0 0 1 6.24.966c1.936.327 3.866.678 5.791 1.054.15.029.301.057.451.087 1.998.394 3.99.813 5.976 1.258.085.02.17.037.255.056a233.779 233.779 0 0 1 18.058 4.842c1.538.481 3.068.983 4.592 1.494.275.092.551.179.826.273a232.16 232.16 0 0 1 25.133 10.223c-30.858 21.196-56.887 49.021-75.952 81.36-23.099 39.188-35.31 84.077-35.31 129.813s12.211 90.625 35.314 129.814c19.065 32.341 45.094 60.164 75.952 81.36a232.244 232.244 0 0 1-25.133 10.223c-.275.092-.551.18-.826.273a238.802 238.802 0 0 1-4.592 1.494 234.354 234.354 0 0 1-18.058 4.842l-.255.056c-1.986.445-3.978.865-5.976 1.258-.15.029-.301.057-.451.087-1.926.375-3.856.727-5.791 1.054-.21.036-.422.07-.632.105-1.865.309-3.734.597-5.608.861l-.825.116c-1.798.247-3.598.471-5.402.677-.346.039-.69.081-1.037.119a241.98 241.98 0 0 1-5.173.504c-.421.037-.839.078-1.26.112a228.04 228.04 0 0 1-4.959.345c-.485.029-.968.067-1.455.092-1.633.089-3.268.15-4.904.205-.492.017-.981.043-1.473.056a238.24 238.24 0 0 1-6.327.087C127.116 489.739 22.261 384.884 22.261 256z"})),tl||(tl=t.createElement("path",{d:"M77.913 244.87c-18.412 0-33.391 14.979-33.391 33.391s14.979 33.391 33.391 33.391 33.391-14.979 33.391-33.391-14.979-33.391-33.391-33.391zm0 44.521c-6.137 0-11.13-4.993-11.13-11.13s4.993-11.13 11.13-11.13 11.13 4.993 11.13 11.13-4.993 11.13-11.13 11.13zM155.826 333.913c-24.549 0-44.522 19.972-44.522 44.522s19.972 44.522 44.522 44.522 44.522-19.972 44.522-44.522-19.973-44.522-44.522-44.522zm0 66.783c-12.275 0-22.261-9.986-22.261-22.261s9.986-22.261 22.261-22.261 22.261 9.986 22.261 22.261-9.986 22.261-22.261 22.261z"})))};function il(){return il=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},il.apply(this,arguments)}const rl=function(e){return t.createElement("svg",il({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 473.931 473.931",style:{enableBackground:"new 0 0 473.931 473.931"},xmlSpace:"preserve"},e),t.createElement("circle",{style:{fill:"#f2be3e"},cx:236.966,cy:236.966,r:236.966}),t.createElement("circle",{style:{fill:"#f1eb75"},cx:236.966,cy:236.966,r:117.154}))},ol="MjctGqWVxNuJeE0o2oFP",al="YxBrn3Pz2521ag9D9F88";var sl=function(){return sl=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},sl.apply(this,arguments)},ll=function(){var e,n,i,r=t.useState((e=window.matchMedia("(prefers-color-scheme: dark)").matches,n=localStorage.getItem("theme"),{preferredTheme:i=e?M.DARK:M.LIGHT,currentTheme:null!=n?n:i})),o=r[0],a=r[1],s=o.currentTheme!==M.DARK?t.createElement(nl,null):t.createElement(rl,null);return t.useEffect((function(){o.preferredTheme===M.DARK&&o.currentTheme===M.LIGHT&&document.body.classList.add(al),o.preferredTheme===M.LIGHT&&o.currentTheme===M.DARK&&document.body.classList.add(ol)}),[]),t.createElement("button",{onClick:function(){var t;t=o.currentTheme===M.DARK?M.LIGHT:M.DARK,localStorage.setItem("theme",t),o.preferredTheme===M.DARK?document.body.classList.toggle(al):document.body.classList.toggle(ol),a(sl(sl({},o),{currentTheme:t}))},className:"HKlJw8TpWz4m5XQCx0RJ"},s)},cl=function(){return t.createElement("header",{className:"qitlpogRu2jO8ytW0Kab"},t.createElement(Zt,null),t.createElement("div",{className:"sIrOyLme7VDfwaCIaokO"},t.createElement(ll,null),t.createElement(Xs,null)))},ul=function(){var t=E(),e=O((function(t){return t.data.loaded})),n=O((function(t){return t.data.data}));return e||t((function(t){return F.fetchData().then((function(t){return t.json()})).then((function(e){t(function(t){return{type:N.GET_DATA,payload:j([],t,!0)}}(e))}))})),{loaded:e,data:n}},hl=function(){var e=ul().loaded;return t.createElement("div",null,!e&&t.createElement($s,null),t.createElement("main",{className:"vxa5_ohmobkzcIZeFLsx"},t.createElement(cl,null),t.createElement(oe,null),t.createElement(qs,null)))};var dl,fl,pl,gl,ml,bl=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},yl=function(){var e=ul().loaded,n=function(){let{matches:e}=(0,t.useContext)(Ot),n=e[e.length-1];return n?n.params:{}}(),i=n.country,r=n.camp,o=n.school,a=n.month,s=function(t,e,n,i){var r=O((function(t){return t.data.data})).reduce((function(r,o){return o.school===n&&o.camp===e&&o.country===t&&o.month==i?r+o.lessons:r}),0);return{country:t,camp:e,school:n,month:i,totalLessons:r}}(null!=i?i:"",null!=r?r:"",null!=o?o:"",null!=a?a:""),l=bt(),c=t.createElement("table",{className:"N7g7ntz5ewpIbn76r7NN"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null," ",l.t(dl||(dl=bl(["Country Name"],["Country Name"])))," "),t.createElement("th",null," ",l.t(fl||(fl=bl(["Camp Name"],["Camp Name"])))," "),t.createElement("th",null," ",l.t(pl||(pl=bl(["School Name"],["School Name"])))),t.createElement("th",null," ",l.t(gl||(gl=bl(["Month"],["Month"])))),t.createElement("th",null," ",l.t(ml||(ml=bl(["Total Lessons"],["Total Lessons"])))))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null," ",s.country," "),t.createElement("td",null," ",s.camp," "),t.createElement("td",null," ",s.school," "),t.createElement("td",null," ",s.month," "),t.createElement("td",null," ",s.totalLessons," ")))),u=t.createElement("div",null,"Not Found"),h=s?c:u;return e?t.createElement(t.Fragment,null,t.createElement("div",{className:"UccAauDxEFUvdE2pFGck"},t.createElement(cl,null),t.createElement("div",{className:"IjepusnKWagrnR4DlUV2"},h))):t.createElement($s,null)};function vl(t){return vl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},vl(t)}function xl(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function wl(t,e){return wl=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},wl(t,e)}function _l(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&wl(t,e)}function kl(t,e){if(e&&("object"===vl(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return xl(t)}function Sl(t){return Sl=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Sl(t)}function El(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Ol(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?El(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):El(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var Cl={type:"logger",log:function(t){this.output("log",t)},warn:function(t){this.output("warn",t)},error:function(t){this.output("error",t)},output:function(t,e){console&&console[t]&&console[t].apply(console,e)}},Pl=new(function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Y(this,t),this.init(e,n)}return q(t,[{key:"init",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=e.prefix||"i18next:",this.logger=t||Cl,this.options=e,this.debug=e.debug}},{key:"setDebug",value:function(t){this.debug=t}},{key:"log",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"log","",!0)}},{key:"warn",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"warn","",!0)}},{key:"error",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"error","")}},{key:"deprecate",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(t,e,n,i){return i&&!this.debug?null:("string"==typeof t[0]&&(t[0]="".concat(n).concat(this.prefix," ").concat(t[0])),this.logger[e](t))}},{key:"create",value:function(e){return new t(this.logger,Ol(Ol({},{prefix:"".concat(this.prefix,":").concat(e,":")}),this.options))}}]),t}()),Ml=function(){function t(){Y(this,t),this.observers={}}return q(t,[{key:"on",value:function(t,e){var n=this;return t.split(" ").forEach((function(t){n.observers[t]=n.observers[t]||[],n.observers[t].push(e)})),this}},{key:"off",value:function(t,e){this.observers[t]&&(e?this.observers[t]=this.observers[t].filter((function(t){return t!==e})):delete this.observers[t])}},{key:"emit",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];if(this.observers[t]){var r=[].concat(this.observers[t]);r.forEach((function(t){t.apply(void 0,n)}))}if(this.observers["*"]){var o=[].concat(this.observers["*"]);o.forEach((function(e){e.apply(e,[t].concat(n))}))}}}]),t}();function Ll(){var t,e,n=new Promise((function(n,i){t=n,e=i}));return n.resolve=t,n.reject=e,n}function Rl(t){return null==t?"":""+t}function Tl(t,e,n){t.forEach((function(t){e[t]&&(n[t]=e[t])}))}function Nl(t,e,n){function i(t){return t&&t.indexOf("###")>-1?t.replace(/###/g,"."):t}function r(){return!t||"string"==typeof t}for(var o="string"!=typeof e?[].concat(e):e.split(".");o.length>1;){if(r())return{};var a=i(o.shift());!t[a]&&n&&(t[a]=new n),t=Object.prototype.hasOwnProperty.call(t,a)?t[a]:{}}return r()?{}:{obj:t,k:i(o.shift())}}function Dl(t,e,n){var i=Nl(t,e,Object);i.obj[i.k]=n}function Al(t,e){var n=Nl(t,e),i=n.obj,r=n.k;if(i)return i[r]}function Il(t,e,n){var i=Al(t,n);return void 0!==i?i:Al(e,n)}function jl(t,e,n){for(var i in e)"__proto__"!==i&&"constructor"!==i&&(i in t?"string"==typeof t[i]||t[i]instanceof String||"string"==typeof e[i]||e[i]instanceof String?n&&(t[i]=e[i]):jl(t[i],e[i],n):t[i]=e[i]);return t}function Fl(t){return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var zl={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function Vl(t){return"string"==typeof t?t.replace(/[&<>"'\/]/g,(function(t){return zl[t]})):t}var Bl="undefined"!=typeof window&&window.navigator&&void 0===window.navigator.userAgentData&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1,Hl=[" ",",","?","!",";"];function Wl(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Ul(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Wl(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Wl(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function $l(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(t){if(t[e])return t[e];for(var i=e.split(n),r=t,o=0;o<i.length;++o){if(!r)return;if("string"==typeof r[i[o]]&&o+1<i.length)return;if(void 0===r[i[o]]){for(var a=2,s=i.slice(o,o+a).join(n),l=r[s];void 0===l&&i.length>o+a;)a++,l=r[s=i.slice(o,o+a).join(n)];if(void 0===l)return;if(null===l)return null;if(e.endsWith(s)){if("string"==typeof l)return l;if(s&&"string"==typeof l[s])return l[s]}var c=i.slice(o+a).join(n);return c?$l(l,c,n):void 0}r=r[i[o]]}return r}}var Yl=function(t){_l(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=Sl(e);if(n){var r=Sl(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return kl(this,t)});function r(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return Y(this,r),e=i.call(this),Bl&&Ml.call(xl(e)),e.data=t||{},e.options=n,void 0===e.options.keySeparator&&(e.options.keySeparator="."),void 0===e.options.ignoreJSONStructure&&(e.options.ignoreJSONStructure=!0),e}return q(r,[{key:"addNamespaces",value:function(t){this.options.ns.indexOf(t)<0&&this.options.ns.push(t)}},{key:"removeNamespaces",value:function(t){var e=this.options.ns.indexOf(t);e>-1&&this.options.ns.splice(e,1)}},{key:"getResource",value:function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},r=void 0!==i.keySeparator?i.keySeparator:this.options.keySeparator,o=void 0!==i.ignoreJSONStructure?i.ignoreJSONStructure:this.options.ignoreJSONStructure,a=[t,e];n&&"string"!=typeof n&&(a=a.concat(n)),n&&"string"==typeof n&&(a=a.concat(r?n.split(r):n)),t.indexOf(".")>-1&&(a=t.split("."));var s=Al(this.data,a);return s||!o||"string"!=typeof n?s:$l(this.data&&this.data[t]&&this.data[t][e],n,r)}},{key:"addResource",value:function(t,e,n,i){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},o=this.options.keySeparator;void 0===o&&(o=".");var a=[t,e];n&&(a=a.concat(o?n.split(o):n)),t.indexOf(".")>-1&&(i=e,e=(a=t.split("."))[1]),this.addNamespaces(e),Dl(this.data,a,i),r.silent||this.emit("added",t,e,n,i)}},{key:"addResources",value:function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var r in n)"string"!=typeof n[r]&&"[object Array]"!==Object.prototype.toString.apply(n[r])||this.addResource(t,e,r,n[r],{silent:!0});i.silent||this.emit("added",t,e,n)}},{key:"addResourceBundle",value:function(t,e,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[t,e];t.indexOf(".")>-1&&(i=n,n=e,e=(a=t.split("."))[1]),this.addNamespaces(e);var s=Al(this.data,a)||{};i?jl(s,n,r):s=Ul(Ul({},s),n),Dl(this.data,a,s),o.silent||this.emit("added",t,e,n)}},{key:"removeResourceBundle",value:function(t,e){this.hasResourceBundle(t,e)&&delete this.data[t][e],this.removeNamespaces(e),this.emit("removed",t,e)}},{key:"hasResourceBundle",value:function(t,e){return void 0!==this.getResource(t,e)}},{key:"getResourceBundle",value:function(t,e){return e||(e=this.options.defaultNS),"v1"===this.options.compatibilityAPI?Ul(Ul({},{}),this.getResource(t,e)):this.getResource(t,e)}},{key:"getDataByLanguage",value:function(t){return this.data[t]}},{key:"hasLanguageSomeTranslations",value:function(t){var e=this.getDataByLanguage(t);return!!(e&&Object.keys(e)||[]).find((function(t){return e[t]&&Object.keys(e[t]).length>0}))}},{key:"toJSON",value:function(){return this.data}}]),r}(Ml),Kl={processors:{},addPostProcessor:function(t){this.processors[t.name]=t},handle:function(t,e,n,i,r){var o=this;return t.forEach((function(t){o.processors[t]&&(e=o.processors[t].process(e,n,i,r))})),e}};function ql(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Gl(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ql(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ql(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var Ql={},Xl=function(t){_l(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=Sl(e);if(n){var r=Sl(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return kl(this,t)});function r(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Y(this,r),e=i.call(this),Bl&&Ml.call(xl(e)),Tl(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],t,xl(e)),e.options=n,void 0===e.options.keySeparator&&(e.options.keySeparator="."),e.logger=Pl.create("translator"),e}return q(r,[{key:"changeLanguage",value:function(t){t&&(this.language=t)}},{key:"exists",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==t)return!1;var n=this.resolve(t,e);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(t,e){var n=void 0!==e.nsSeparator?e.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");var i=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,r=e.ns||this.options.defaultNS||[],o=n&&t.indexOf(n)>-1,a=!(this.options.userDefinedKeySeparator||e.keySeparator||this.options.userDefinedNsSeparator||e.nsSeparator||function(t,e,n){e=e||"",n=n||"";var i=Hl.filter((function(t){return e.indexOf(t)<0&&n.indexOf(t)<0}));if(0===i.length)return!0;var r=new RegExp("(".concat(i.map((function(t){return"?"===t?"\\?":t})).join("|"),")")),o=!r.test(t);if(!o){var a=t.indexOf(n);a>0&&!r.test(t.substring(0,a))&&(o=!0)}return o}(t,n,i));if(o&&!a){var s=t.match(this.interpolator.nestingRegexp);if(s&&s.length>0)return{key:t,namespaces:r};var l=t.split(n);(n!==i||n===i&&this.options.ns.indexOf(l[0])>-1)&&(r=l.shift()),t=l.join(i)}return"string"==typeof r&&(r=[r]),{key:t,namespaces:r}}},{key:"translate",value:function(t,e,n){var i=this;if("object"!==vl(e)&&this.options.overloadTranslationOptionHandler&&(e=this.options.overloadTranslationOptionHandler(arguments)),e||(e={}),null==t)return"";Array.isArray(t)||(t=[String(t)]);var o=void 0!==e.returnDetails?e.returnDetails:this.options.returnDetails,a=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,s=this.extractFromKey(t[t.length-1],e),l=s.key,c=s.namespaces,u=c[c.length-1],h=e.lng||this.language,d=e.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(h&&"cimode"===h.toLowerCase()){if(d){var f=e.nsSeparator||this.options.nsSeparator;return o?(p.res="".concat(u).concat(f).concat(l),p):"".concat(u).concat(f).concat(l)}return o?(p.res=l,p):l}var p=this.resolve(t,e),g=p&&p.res,m=p&&p.usedKey||l,b=p&&p.exactUsedKey||l,y=Object.prototype.toString.apply(g),v=["[object Number]","[object Function]","[object RegExp]"],x=void 0!==e.joinArrays?e.joinArrays:this.options.joinArrays,w=!this.i18nFormat||this.i18nFormat.handleAsObject,_="string"!=typeof g&&"boolean"!=typeof g&&"number"!=typeof g;if(w&&g&&_&&v.indexOf(y)<0&&("string"!=typeof x||"[object Array]"!==y)){if(!e.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");var k=this.options.returnedObjectHandler?this.options.returnedObjectHandler(m,g,Gl(Gl({},e),{},{ns:c})):"key '".concat(l," (").concat(this.language,")' returned an object instead of string.");return o?(p.res=k,p):k}if(a){var S="[object Array]"===y,E=S?[]:{},O=S?b:m;for(var C in g)if(Object.prototype.hasOwnProperty.call(g,C)){var P="".concat(O).concat(a).concat(C);E[C]=this.translate(P,Gl(Gl({},e),{joinArrays:!1,ns:c})),E[C]===P&&(E[C]=g[C])}g=E}}else if(w&&"string"==typeof x&&"[object Array]"===y)(g=g.join(x))&&(g=this.extendTranslation(g,t,e,n));else{var M=!1,L=!1,R=void 0!==e.count&&"string"!=typeof e.count,T=r.hasDefaultValue(e),N=R?this.pluralResolver.getSuffix(h,e.count,e):"",D=e["defaultValue".concat(N)]||e.defaultValue;!this.isValidLookup(g)&&T&&(M=!0,g=D),this.isValidLookup(g)||(L=!0,g=l);var A=e.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey,I=A&&L?void 0:g,j=T&&D!==g&&this.options.updateMissing;if(L||M||j){if(this.logger.log(j?"updateKey":"missingKey",h,u,l,j?D:g),a){var F=this.resolve(l,Gl(Gl({},e),{},{keySeparator:!1}));F&&F.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var z=[],V=this.languageUtils.getFallbackCodes(this.options.fallbackLng,e.lng||this.language);if("fallback"===this.options.saveMissingTo&&V&&V[0])for(var B=0;B<V.length;B++)z.push(V[B]);else"all"===this.options.saveMissingTo?z=this.languageUtils.toResolveHierarchy(e.lng||this.language):z.push(e.lng||this.language);var H=function(t,n,r){var o=T&&r!==g?r:I;i.options.missingKeyHandler?i.options.missingKeyHandler(t,u,n,o,j,e):i.backendConnector&&i.backendConnector.saveMissing&&i.backendConnector.saveMissing(t,u,n,o,j,e),i.emit("missingKey",t,u,n,g)};this.options.saveMissing&&(this.options.saveMissingPlurals&&R?z.forEach((function(t){i.pluralResolver.getSuffixes(t,e).forEach((function(n){H([t],l+n,e["defaultValue".concat(n)]||D)}))})):H(z,l,D))}g=this.extendTranslation(g,t,e,p,n),L&&g===l&&this.options.appendNamespaceToMissingKey&&(g="".concat(u,":").concat(l)),(L||M)&&this.options.parseMissingKeyHandler&&(g="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?"".concat(u,":").concat(l):l,M?g:void 0):this.options.parseMissingKeyHandler(g))}return o?(p.res=g,p):g}},{key:"extendTranslation",value:function(t,e,n,i,r){var o=this;if(this.i18nFormat&&this.i18nFormat.parse)t=this.i18nFormat.parse(t,Gl(Gl({},this.options.interpolation.defaultVariables),n),i.usedLng,i.usedNS,i.usedKey,{resolved:i});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(Gl(Gl({},n),{interpolation:Gl(Gl({},this.options.interpolation),n.interpolation)}));var a,s="string"==typeof t&&(n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);if(s){var l=t.match(this.interpolator.nestingRegexp);a=l&&l.length}var c=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(c=Gl(Gl({},this.options.interpolation.defaultVariables),c)),t=this.interpolator.interpolate(t,c,n.lng||this.language,n),s){var u=t.match(this.interpolator.nestingRegexp);a<(u&&u.length)&&(n.nest=!1)}!1!==n.nest&&(t=this.interpolator.nest(t,(function(){for(var t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];return r&&r[0]===i[0]&&!n.context?(o.logger.warn("It seems you are nesting recursively key: ".concat(i[0]," in key: ").concat(e[0])),null):o.translate.apply(o,i.concat([e]))}),n)),n.interpolation&&this.interpolator.reset()}var h=n.postProcess||this.options.postProcess,d="string"==typeof h?[h]:h;return null!=t&&d&&d.length&&!1!==n.applyPostProcessor&&(t=Kl.handle(d,t,e,this.options&&this.options.postProcessPassResolved?Gl({i18nResolved:i},n):n,this)),t}},{key:"resolve",value:function(t){var e,n,i,r,o,a=this,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof t&&(t=[t]),t.forEach((function(t){if(!a.isValidLookup(e)){var l=a.extractFromKey(t,s),c=l.key;n=c;var u=l.namespaces;a.options.fallbackNS&&(u=u.concat(a.options.fallbackNS));var h=void 0!==s.count&&"string"!=typeof s.count,d=h&&!s.ordinal&&0===s.count&&a.pluralResolver.shouldUseIntlApi(),f=void 0!==s.context&&("string"==typeof s.context||"number"==typeof s.context)&&""!==s.context,p=s.lngs?s.lngs:a.languageUtils.toResolveHierarchy(s.lng||a.language,s.fallbackLng);u.forEach((function(t){a.isValidLookup(e)||(o=t,!Ql["".concat(p[0],"-").concat(t)]&&a.utils&&a.utils.hasLoadedNamespace&&!a.utils.hasLoadedNamespace(o)&&(Ql["".concat(p[0],"-").concat(t)]=!0,a.logger.warn('key "'.concat(n,'" for languages "').concat(p.join(", "),'" won\'t get resolved as namespace "').concat(o,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((function(n){if(!a.isValidLookup(e)){r=n;var o,l=[c];if(a.i18nFormat&&a.i18nFormat.addLookupKeys)a.i18nFormat.addLookupKeys(l,c,n,t,s);else{var u;h&&(u=a.pluralResolver.getSuffix(n,s.count,s));var p="".concat(a.options.pluralSeparator,"zero");if(h&&(l.push(c+u),d&&l.push(c+p)),f){var g="".concat(c).concat(a.options.contextSeparator).concat(s.context);l.push(g),h&&(l.push(g+u),d&&l.push(g+p))}}for(;o=l.pop();)a.isValidLookup(e)||(i=o,e=a.getResource(n,t,o,s))}})))}))}})),{res:e,usedKey:n,exactUsedKey:i,usedLng:r,usedNS:o}}},{key:"isValidLookup",value:function(t){return!(void 0===t||!this.options.returnNull&&null===t||!this.options.returnEmptyString&&""===t)}},{key:"getResource",value:function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(t,e,n,i):this.resourceStore.getResource(t,e,n,i)}}],[{key:"hasDefaultValue",value:function(t){var e="defaultValue";for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e===n.substring(0,e.length)&&void 0!==t[n])return!0;return!1}}]),r}(Ml);function Jl(t){return t.charAt(0).toUpperCase()+t.slice(1)}var Zl=function(){function t(e){Y(this,t),this.options=e,this.supportedLngs=this.options.supportedLngs||!1,this.logger=Pl.create("languageUtils")}return q(t,[{key:"getScriptPartFromCode",value:function(t){if(!t||t.indexOf("-")<0)return null;var e=t.split("-");return 2===e.length?null:(e.pop(),"x"===e[e.length-1].toLowerCase()?null:this.formatLanguageCode(e.join("-")))}},{key:"getLanguagePartFromCode",value:function(t){if(!t||t.indexOf("-")<0)return t;var e=t.split("-");return this.formatLanguageCode(e[0])}},{key:"formatLanguageCode",value:function(t){if("string"==typeof t&&t.indexOf("-")>-1){var e=["hans","hant","latn","cyrl","cans","mong","arab"],n=t.split("-");return this.options.lowerCaseLng?n=n.map((function(t){return t.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),e.indexOf(n[1].toLowerCase())>-1&&(n[1]=Jl(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),e.indexOf(n[1].toLowerCase())>-1&&(n[1]=Jl(n[1].toLowerCase())),e.indexOf(n[2].toLowerCase())>-1&&(n[2]=Jl(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?t.toLowerCase():t}},{key:"isSupportedCode",value:function(t){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(t=this.getLanguagePartFromCode(t)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(t)>-1}},{key:"getBestMatchFromCodes",value:function(t){var e,n=this;return t?(t.forEach((function(t){if(!e){var i=n.formatLanguageCode(t);n.options.supportedLngs&&!n.isSupportedCode(i)||(e=i)}})),!e&&this.options.supportedLngs&&t.forEach((function(t){if(!e){var i=n.getLanguagePartFromCode(t);if(n.isSupportedCode(i))return e=i;e=n.options.supportedLngs.find((function(t){if(0===t.indexOf(i))return t}))}})),e||(e=this.getFallbackCodes(this.options.fallbackLng)[0]),e):null}},{key:"getFallbackCodes",value:function(t,e){if(!t)return[];if("function"==typeof t&&(t=t(e)),"string"==typeof t&&(t=[t]),"[object Array]"===Object.prototype.toString.apply(t))return t;if(!e)return t.default||[];var n=t[e];return n||(n=t[this.getScriptPartFromCode(e)]),n||(n=t[this.formatLanguageCode(e)]),n||(n=t[this.getLanguagePartFromCode(e)]),n||(n=t.default),n||[]}},{key:"toResolveHierarchy",value:function(t,e){var n=this,i=this.getFallbackCodes(e||this.options.fallbackLng||[],t),r=[],o=function(t){t&&(n.isSupportedCode(t)?r.push(t):n.logger.warn("rejecting language code not found in supportedLngs: ".concat(t)))};return"string"==typeof t&&t.indexOf("-")>-1?("languageOnly"!==this.options.load&&o(this.formatLanguageCode(t)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&o(this.getScriptPartFromCode(t)),"currentOnly"!==this.options.load&&o(this.getLanguagePartFromCode(t))):"string"==typeof t&&o(this.formatLanguageCode(t)),i.forEach((function(t){r.indexOf(t)<0&&o(n.formatLanguageCode(t))})),r}}]),t}(),tc=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],ec={1:function(t){return Number(t>1)},2:function(t){return Number(1!=t)},3:function(t){return 0},4:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},5:function(t){return Number(0==t?0:1==t?1:2==t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5)},6:function(t){return Number(1==t?0:t>=2&&t<=4?1:2)},7:function(t){return Number(1==t?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},8:function(t){return Number(1==t?0:2==t?1:8!=t&&11!=t?2:3)},9:function(t){return Number(t>=2)},10:function(t){return Number(1==t?0:2==t?1:t<7?2:t<11?3:4)},11:function(t){return Number(1==t||11==t?0:2==t||12==t?1:t>2&&t<20?2:3)},12:function(t){return Number(t%10!=1||t%100==11)},13:function(t){return Number(0!==t)},14:function(t){return Number(1==t?0:2==t?1:3==t?2:3)},15:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&(t%100<10||t%100>=20)?1:2)},16:function(t){return Number(t%10==1&&t%100!=11?0:0!==t?1:2)},17:function(t){return Number(1==t||t%10==1&&t%100!=11?0:1)},18:function(t){return Number(0==t?0:1==t?1:2)},19:function(t){return Number(1==t?0:0==t||t%100>1&&t%100<11?1:t%100>10&&t%100<20?2:3)},20:function(t){return Number(1==t?0:0==t||t%100>0&&t%100<20?1:2)},21:function(t){return Number(t%100==1?1:t%100==2?2:t%100==3||t%100==4?3:0)},22:function(t){return Number(1==t?0:2==t?1:(t<0||t>10)&&t%10==0?2:3)}},nc=["v1","v2","v3"],ic={zero:0,one:1,two:2,few:3,many:4,other:5};function rc(){var t={};return tc.forEach((function(e){e.lngs.forEach((function(n){t[n]={numbers:e.nr,plurals:ec[e.fc]}}))})),t}var oc=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Y(this,t),this.languageUtils=e,this.options=n,this.logger=Pl.create("pluralResolver"),this.options.compatibilityJSON&&"v4"!==this.options.compatibilityJSON||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=rc()}return q(t,[{key:"addRule",value:function(t,e){this.rules[t]=e}},{key:"getRule",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(t,{type:e.ordinal?"ordinal":"cardinal"})}catch(t){return}return this.rules[t]||this.rules[this.languageUtils.getLanguagePartFromCode(t)]}},{key:"needsPlural",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.getRule(t,e);return this.shouldUseIntlApi()?n&&n.resolvedOptions().pluralCategories.length>1:n&&n.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(t,n).map((function(t){return"".concat(e).concat(t)}))}},{key:"getSuffixes",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=this.getRule(t,n);return i?this.shouldUseIntlApi()?i.resolvedOptions().pluralCategories.sort((function(t,e){return ic[t]-ic[e]})).map((function(t){return"".concat(e.options.prepend).concat(t)})):i.numbers.map((function(i){return e.getSuffix(t,i,n)})):[]}},{key:"getSuffix",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=this.getRule(t,n);return i?this.shouldUseIntlApi()?"".concat(this.options.prepend).concat(i.select(e)):this.getSuffixRetroCompatible(i,e):(this.logger.warn("no plural rule found for: ".concat(t)),"")}},{key:"getSuffixRetroCompatible",value:function(t,e){var n=this,i=t.noAbs?t.plurals(e):t.plurals(Math.abs(e)),r=t.numbers[i];this.options.simplifyPluralSuffix&&2===t.numbers.length&&1===t.numbers[0]&&(2===r?r="plural":1===r&&(r=""));var o=function(){return n.options.prepend&&r.toString()?n.options.prepend+r.toString():r.toString()};return"v1"===this.options.compatibilityJSON?1===r?"":"number"==typeof r?"_plural_".concat(r.toString()):o():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===t.numbers.length&&1===t.numbers[0]?o():this.options.prepend&&i.toString()?this.options.prepend+i.toString():i.toString()}},{key:"shouldUseIntlApi",value:function(){return!nc.includes(this.options.compatibilityJSON)}}]),t}();function ac(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function sc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ac(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ac(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var lc=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Y(this,t),this.logger=Pl.create("interpolator"),this.options=e,this.format=e.interpolation&&e.interpolation.format||function(t){return t},this.init(e)}return q(t,[{key:"init",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t.interpolation||(t.interpolation={escapeValue:!0});var e=t.interpolation;this.escape=void 0!==e.escape?e.escape:Vl,this.escapeValue=void 0===e.escapeValue||e.escapeValue,this.useRawValueToEscape=void 0!==e.useRawValueToEscape&&e.useRawValueToEscape,this.prefix=e.prefix?Fl(e.prefix):e.prefixEscaped||"{{",this.suffix=e.suffix?Fl(e.suffix):e.suffixEscaped||"}}",this.formatSeparator=e.formatSeparator?e.formatSeparator:e.formatSeparator||",",this.unescapePrefix=e.unescapeSuffix?"":e.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":e.unescapeSuffix||"",this.nestingPrefix=e.nestingPrefix?Fl(e.nestingPrefix):e.nestingPrefixEscaped||Fl("$t("),this.nestingSuffix=e.nestingSuffix?Fl(e.nestingSuffix):e.nestingSuffixEscaped||Fl(")"),this.nestingOptionsSeparator=e.nestingOptionsSeparator?e.nestingOptionsSeparator:e.nestingOptionsSeparator||",",this.maxReplaces=e.maxReplaces?e.maxReplaces:1e3,this.alwaysFormat=void 0!==e.alwaysFormat&&e.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var t="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(t,"g");var e="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(e,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(t,e,n,i){var r,o,a,s=this,l=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function c(t){return t.replace(/\$/g,"$$$$")}var u=function(t){if(t.indexOf(s.formatSeparator)<0){var r=Il(e,l,t);return s.alwaysFormat?s.format(r,void 0,n,sc(sc(sc({},i),e),{},{interpolationkey:t})):r}var o=t.split(s.formatSeparator),a=o.shift().trim(),c=o.join(s.formatSeparator).trim();return s.format(Il(e,l,a),c,n,sc(sc(sc({},i),e),{},{interpolationkey:a}))};this.resetRegExp();var h=i&&i.missingInterpolationHandler||this.options.missingInterpolationHandler,d=i&&i.interpolation&&void 0!==i.interpolation.skipOnVariables?i.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(t){return c(t)}},{regex:this.regexp,safeValue:function(t){return s.escapeValue?c(s.escape(t)):c(t)}}].forEach((function(e){for(a=0;r=e.regex.exec(t);){var n=r[1].trim();if(void 0===(o=u(n)))if("function"==typeof h){var l=h(t,r,i);o="string"==typeof l?l:""}else if(i&&i.hasOwnProperty(n))o="";else{if(d){o=r[0];continue}s.logger.warn("missed to pass in variable ".concat(n," for interpolating ").concat(t)),o=""}else"string"==typeof o||s.useRawValueToEscape||(o=Rl(o));var c=e.safeValue(o);if(t=t.replace(r[0],c),d?(e.regex.lastIndex+=o.length,e.regex.lastIndex-=r[0].length):e.regex.lastIndex=0,++a>=s.maxReplaces)break}})),t}},{key:"nest",value:function(t,e){var n,i,r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=sc({},o);function s(t,e){var n=this.nestingOptionsSeparator;if(t.indexOf(n)<0)return t;var i=t.split(new RegExp("".concat(n,"[ ]*{"))),r="{".concat(i[1]);t=i[0],r=(r=this.interpolate(r,a)).replace(/'/g,'"');try{a=JSON.parse(r),e&&(a=sc(sc({},e),a))}catch(e){return this.logger.warn("failed parsing options string in nesting for key ".concat(t),e),"".concat(t).concat(n).concat(r)}return delete a.defaultValue,t}for(a.applyPostProcessor=!1,delete a.defaultValue;n=this.nestingRegexp.exec(t);){var l=[],c=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){var u=n[1].split(this.formatSeparator).map((function(t){return t.trim()}));n[1]=u.shift(),l=u,c=!0}if((i=e(s.call(this,n[1].trim(),a),a))&&n[0]===t&&"string"!=typeof i)return i;"string"!=typeof i&&(i=Rl(i)),i||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(t)),i=""),c&&(i=l.reduce((function(t,e){return r.format(t,e,o.lng,sc(sc({},o),{},{interpolationkey:n[1].trim()}))}),i.trim())),t=t.replace(n[0],i),this.regexp.lastIndex=0}return t}}]),t}();function cc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function uc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?cc(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):cc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var hc=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Y(this,t),this.logger=Pl.create("formatter"),this.options=e,this.formats={number:function(t,e,n){return new Intl.NumberFormat(e,n).format(t)},currency:function(t,e,n){return new Intl.NumberFormat(e,uc(uc({},n),{},{style:"currency"})).format(t)},datetime:function(t,e,n){return new Intl.DateTimeFormat(e,uc({},n)).format(t)},relativetime:function(t,e,n){return new Intl.RelativeTimeFormat(e,uc({},n)).format(t,n.range||"day")},list:function(t,e,n){return new Intl.ListFormat(e,uc({},n)).format(t)}},this.init(e)}return q(t,[{key:"init",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}},n=e.interpolation;this.formatSeparator=n.formatSeparator?n.formatSeparator:n.formatSeparator||","}},{key:"add",value:function(t,e){this.formats[t.toLowerCase().trim()]=e}},{key:"format",value:function(t,e,n,i){var r=this;return e.split(this.formatSeparator).reduce((function(t,e){var o=function(t){var e=t.toLowerCase().trim(),n={};if(t.indexOf("(")>-1){var i=t.split("(");e=i[0].toLowerCase().trim();var r=i[1].substring(0,i[1].length-1);"currency"===e&&r.indexOf(":")<0?n.currency||(n.currency=r.trim()):"relativetime"===e&&r.indexOf(":")<0?n.range||(n.range=r.trim()):r.split(";").forEach((function(t){if(t){var e=V(o=t.split(":"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(o)||H(o)||W(),i=e[0],r=e.slice(1).join(":").trim().replace(/^'+|'+$/g,"");n[i.trim()]||(n[i.trim()]=r),"false"===r&&(n[i.trim()]=!1),"true"===r&&(n[i.trim()]=!0),isNaN(r)||(n[i.trim()]=parseInt(r,10))}var o}))}return{formatName:e,formatOptions:n}}(e),a=o.formatName,s=o.formatOptions;if(r.formats[a]){var l=t;try{var c=i&&i.formatParams&&i.formatParams[i.interpolationkey]||{},u=c.locale||c.lng||i.locale||i.lng||n;l=r.formats[a](t,u,uc(uc(uc({},s),i),c))}catch(t){r.logger.warn(t)}return l}return r.logger.warn("there was no format function for ".concat(a)),t}),t)}}]),t}();function dc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function fc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?dc(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):dc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var pc=function(t){_l(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=Sl(e);if(n){var r=Sl(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return kl(this,t)});function r(t,e,n){var o,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return Y(this,r),o=i.call(this),Bl&&Ml.call(xl(o)),o.backend=t,o.store=e,o.services=n,o.languageUtils=n.languageUtils,o.options=a,o.logger=Pl.create("backendConnector"),o.waitingReads=[],o.maxParallelReads=a.maxParallelReads||10,o.readingCalls=0,o.maxRetries=a.maxRetries>=0?a.maxRetries:5,o.retryTimeout=a.retryTimeout>=1?a.retryTimeout:350,o.state={},o.queue=[],o.backend&&o.backend.init&&o.backend.init(n,a.backend,a),o}return q(r,[{key:"queueLoad",value:function(t,e,n,i){var r=this,o={},a={},s={},l={};return t.forEach((function(t){var i=!0;e.forEach((function(e){var s="".concat(t,"|").concat(e);!n.reload&&r.store.hasResourceBundle(t,e)?r.state[s]=2:r.state[s]<0||(1===r.state[s]?void 0===a[s]&&(a[s]=!0):(r.state[s]=1,i=!1,void 0===a[s]&&(a[s]=!0),void 0===o[s]&&(o[s]=!0),void 0===l[e]&&(l[e]=!0)))})),i||(s[t]=!0)})),(Object.keys(o).length||Object.keys(a).length)&&this.queue.push({pending:a,pendingCount:Object.keys(a).length,loaded:{},errors:[],callback:i}),{toLoad:Object.keys(o),pending:Object.keys(a),toLoadLanguages:Object.keys(s),toLoadNamespaces:Object.keys(l)}}},{key:"loaded",value:function(t,e,n){var i=t.split("|"),r=i[0],o=i[1];e&&this.emit("failedLoading",r,o,e),n&&this.store.addResourceBundle(r,o,n),this.state[t]=e?-1:2;var a={};this.queue.forEach((function(n){var i,s,l,c,u;i=n.loaded,s=o,(c=(l=Nl(i,[r],Object)).obj)[u=l.k]=c[u]||[],c[u].push(s),function(t,e){void 0!==t.pending[e]&&(delete t.pending[e],t.pendingCount--)}(n,t),e&&n.errors.push(e),0!==n.pendingCount||n.done||(Object.keys(n.loaded).forEach((function(t){a[t]||(a[t]={});var e=n.loaded[t];e.length&&e.forEach((function(e){void 0===a[t][e]&&(a[t][e]=!0)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",a),this.queue=this.queue.filter((function(t){return!t.done}))}},{key:"read",value:function(t,e,n){var i=this,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,a=arguments.length>5?arguments[5]:void 0;return t.length?this.readingCalls>=this.maxParallelReads?void this.waitingReads.push({lng:t,ns:e,fcName:n,tried:r,wait:o,callback:a}):(this.readingCalls++,this.backend[n](t,e,(function(s,l){if(i.readingCalls--,i.waitingReads.length>0){var c=i.waitingReads.shift();i.read(c.lng,c.ns,c.fcName,c.tried,c.wait,c.callback)}s&&l&&r<i.maxRetries?setTimeout((function(){i.read.call(i,t,e,n,r+1,2*o,a)}),o):a(s,l)}))):a(null,{})}},{key:"prepareLoading",value:function(t,e){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),r&&r();"string"==typeof t&&(t=this.languageUtils.toResolveHierarchy(t)),"string"==typeof e&&(e=[e]);var o=this.queueLoad(t,e,i,r);if(!o.toLoad.length)return o.pending.length||r(),null;o.toLoad.forEach((function(t){n.loadOne(t)}))}},{key:"load",value:function(t,e,n){this.prepareLoading(t,e,{},n)}},{key:"reload",value:function(t,e,n){this.prepareLoading(t,e,{reload:!0},n)}},{key:"loadOne",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=t.split("|"),r=i[0],o=i[1];this.read(r,o,"read",void 0,void 0,(function(i,a){i&&e.logger.warn("".concat(n,"loading namespace ").concat(o," for language ").concat(r," failed"),i),!i&&a&&e.logger.log("".concat(n,"loaded namespace ").concat(o," for language ").concat(r),a),e.loaded(t,i,a)}))}},{key:"saveMissing",value:function(t,e,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(e)?this.logger.warn('did not save key "'.concat(n,'" as the namespace "').concat(e,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"):null!=n&&""!==n&&(this.backend&&this.backend.create&&this.backend.create(t,e,n,i,null,fc(fc({},o),{},{isUpdate:r})),t&&t[0]&&this.store.addResource(t[0],e,n,i))}}]),r}(Ml);function gc(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(t){var e={};if("object"===vl(t[1])&&(e=t[1]),"string"==typeof t[1]&&(e.defaultValue=t[1]),"string"==typeof t[2]&&(e.tDescription=t[2]),"object"===vl(t[2])||"object"===vl(t[3])){var n=t[3]||t[2];Object.keys(n).forEach((function(t){e[t]=n[t]}))}return e},interpolation:{escapeValue:!0,format:function(t,e,n,i){return t},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function mc(t){return"string"==typeof t.ns&&(t.ns=[t.ns]),"string"==typeof t.fallbackLng&&(t.fallbackLng=[t.fallbackLng]),"string"==typeof t.fallbackNS&&(t.fallbackNS=[t.fallbackNS]),t.supportedLngs&&t.supportedLngs.indexOf("cimode")<0&&(t.supportedLngs=t.supportedLngs.concat(["cimode"])),t}function bc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function yc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?bc(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):bc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function vc(){}function xc(t){Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach((function(e){"function"==typeof t[e]&&(t[e]=t[e].bind(t))}))}var wc=function(t){_l(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=Sl(e);if(n){var r=Sl(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return kl(this,t)});function r(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;if(Y(this,r),t=i.call(this),Bl&&Ml.call(xl(t)),t.options=mc(e),t.services={},t.logger=Pl,t.modules={external:[]},xc(xl(t)),n&&!t.isInitialized&&!e.isClone){if(!t.options.initImmediate)return t.init(e,n),kl(t,xl(t));setTimeout((function(){t.init(e,n)}),0)}return t}return q(r,[{key:"init",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;"function"==typeof e&&(n=e,e={}),!e.defaultNS&&!1!==e.defaultNS&&e.ns&&("string"==typeof e.ns?e.defaultNS=e.ns:e.ns.indexOf("translation")<0&&(e.defaultNS=e.ns[0]));var i=gc();function r(t){return t?"function"==typeof t?new t:t:null}if(this.options=yc(yc(yc({},i),this.options),mc(e)),"v1"!==this.options.compatibilityAPI&&(this.options.interpolation=yc(yc({},i.interpolation),this.options.interpolation)),void 0!==e.keySeparator&&(this.options.userDefinedKeySeparator=e.keySeparator),void 0!==e.nsSeparator&&(this.options.userDefinedNsSeparator=e.nsSeparator),!this.options.isClone){var o;this.modules.logger?Pl.init(r(this.modules.logger),this.options):Pl.init(null,this.options),this.modules.formatter?o=this.modules.formatter:"undefined"!=typeof Intl&&(o=hc);var a=new Zl(this.options);this.store=new Yl(this.options.resources,this.options);var s=this.services;s.logger=Pl,s.resourceStore=this.store,s.languageUtils=a,s.pluralResolver=new oc(a,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!o||this.options.interpolation.format&&this.options.interpolation.format!==i.interpolation.format||(s.formatter=r(o),s.formatter.init(s,this.options),this.options.interpolation.format=s.formatter.format.bind(s.formatter)),s.interpolator=new lc(this.options),s.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},s.backendConnector=new pc(r(this.modules.backend),s.resourceStore,s,this.options),s.backendConnector.on("*",(function(e){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];t.emit.apply(t,[e].concat(i))})),this.modules.languageDetector&&(s.languageDetector=r(this.modules.languageDetector),s.languageDetector.init(s,this.options.detection,this.options)),this.modules.i18nFormat&&(s.i18nFormat=r(this.modules.i18nFormat),s.i18nFormat.init&&s.i18nFormat.init(this)),this.translator=new Xl(this.services,this.options),this.translator.on("*",(function(e){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];t.emit.apply(t,[e].concat(i))})),this.modules.external.forEach((function(e){e.init&&e.init(t)}))}if(this.format=this.options.interpolation.format,n||(n=vc),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var l=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);l.length>0&&"dev"!==l[0]&&(this.options.lng=l[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");var c=["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"];c.forEach((function(e){t[e]=function(){var n;return(n=t.store)[e].apply(n,arguments)}}));var u=["addResource","addResources","addResourceBundle","removeResourceBundle"];u.forEach((function(e){t[e]=function(){var n;return(n=t.store)[e].apply(n,arguments),t}}));var h=Ll(),d=function(){var e=function(e,i){t.isInitialized&&!t.initializedStoreOnce&&t.logger.warn("init: i18next is already initialized. You should call init just once!"),t.isInitialized=!0,t.options.isClone||t.logger.log("initialized",t.options),t.emit("initialized",t.options),h.resolve(i),n(e,i)};if(t.languages&&"v1"!==t.options.compatibilityAPI&&!t.isInitialized)return e(null,t.t.bind(t));t.changeLanguage(t.options.lng,e)};return this.options.resources||!this.options.initImmediate?d():setTimeout(d,0),h}},{key:"loadResources",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:vc,i=n,r="string"==typeof t?t:this.language;if("function"==typeof t&&(i=t),!this.options.resources||this.options.partialBundledLanguages){if(r&&"cimode"===r.toLowerCase())return i();var o=[],a=function(t){t&&e.services.languageUtils.toResolveHierarchy(t).forEach((function(t){o.indexOf(t)<0&&o.push(t)}))};if(r)a(r);else{var s=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);s.forEach((function(t){return a(t)}))}this.options.preload&&this.options.preload.forEach((function(t){return a(t)})),this.services.backendConnector.load(o,this.options.ns,(function(t){t||e.resolvedLanguage||!e.language||e.setResolvedLanguage(e.language),i(t)}))}else i(null)}},{key:"reloadResources",value:function(t,e,n){var i=Ll();return t||(t=this.languages),e||(e=this.options.ns),n||(n=vc),this.services.backendConnector.reload(t,e,(function(t){i.resolve(),n(t)})),i}},{key:"use",value:function(t){if(!t)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!t.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===t.type&&(this.modules.backend=t),("logger"===t.type||t.log&&t.warn&&t.error)&&(this.modules.logger=t),"languageDetector"===t.type&&(this.modules.languageDetector=t),"i18nFormat"===t.type&&(this.modules.i18nFormat=t),"postProcessor"===t.type&&Kl.addPostProcessor(t),"formatter"===t.type&&(this.modules.formatter=t),"3rdParty"===t.type&&this.modules.external.push(t),this}},{key:"setResolvedLanguage",value:function(t){if(t&&this.languages&&!(["cimode","dev"].indexOf(t)>-1))for(var e=0;e<this.languages.length;e++){var n=this.languages[e];if(!(["cimode","dev"].indexOf(n)>-1)&&this.store.hasLanguageSomeTranslations(n)){this.resolvedLanguage=n;break}}}},{key:"changeLanguage",value:function(t,e){var n=this;this.isLanguageChangingTo=t;var i=Ll();this.emit("languageChanging",t);var r=function(t){n.language=t,n.languages=n.services.languageUtils.toResolveHierarchy(t),n.resolvedLanguage=void 0,n.setResolvedLanguage(t)},o=function(o){t||o||!n.services.languageDetector||(o=[]);var a="string"==typeof o?o:n.services.languageUtils.getBestMatchFromCodes(o);a&&(n.language||r(a),n.translator.language||n.translator.changeLanguage(a),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(a)),n.loadResources(a,(function(t){!function(t,o){o?(r(o),n.translator.changeLanguage(o),n.isLanguageChangingTo=void 0,n.emit("languageChanged",o),n.logger.log("languageChanged",o)):n.isLanguageChangingTo=void 0,i.resolve((function(){return n.t.apply(n,arguments)})),e&&e(t,(function(){return n.t.apply(n,arguments)}))}(t,a)}))};return t||!this.services.languageDetector||this.services.languageDetector.async?!t&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(o):o(t):o(this.services.languageDetector.detect()),i}},{key:"getFixedT",value:function(t,e,n){var i=this,r=function t(e,r){var o;if("object"!==vl(r)){for(var a=arguments.length,s=new Array(a>2?a-2:0),l=2;l<a;l++)s[l-2]=arguments[l];o=i.options.overloadTranslationOptionHandler([e,r].concat(s))}else o=yc({},r);o.lng=o.lng||t.lng,o.lngs=o.lngs||t.lngs,o.ns=o.ns||t.ns,o.keyPrefix=o.keyPrefix||n||t.keyPrefix;var c=i.options.keySeparator||".",u=o.keyPrefix?"".concat(o.keyPrefix).concat(c).concat(e):e;return i.t(u,o)};return"string"==typeof t?r.lng=t:r.lngs=t,r.ns=e,r.keyPrefix=n,r}},{key:"t",value:function(){var t;return this.translator&&(t=this.translator).translate.apply(t,arguments)}},{key:"exists",value:function(){var t;return this.translator&&(t=this.translator).exists.apply(t,arguments)}},{key:"setDefaultNamespace",value:function(t){this.options.defaultNS=t}},{key:"hasLoadedNamespace",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var i=this.resolvedLanguage||this.languages[0],r=!!this.options&&this.options.fallbackLng,o=this.languages[this.languages.length-1];if("cimode"===i.toLowerCase())return!0;var a=function(t,n){var i=e.services.backendConnector.state["".concat(t,"|").concat(n)];return-1===i||2===i};if(n.precheck){var s=n.precheck(this,a);if(void 0!==s)return s}return!(!this.hasResourceBundle(i,t)&&this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages)&&(!a(i,t)||r&&!a(o,t)))}},{key:"loadNamespaces",value:function(t,e){var n=this,i=Ll();return this.options.ns?("string"==typeof t&&(t=[t]),t.forEach((function(t){n.options.ns.indexOf(t)<0&&n.options.ns.push(t)})),this.loadResources((function(t){i.resolve(),e&&e(t)})),i):(e&&e(),Promise.resolve())}},{key:"loadLanguages",value:function(t,e){var n=Ll();"string"==typeof t&&(t=[t]);var i=this.options.preload||[],r=t.filter((function(t){return i.indexOf(t)<0}));return r.length?(this.options.preload=i.concat(r),this.loadResources((function(t){n.resolve(),e&&e(t)})),n):(e&&e(),Promise.resolve())}},{key:"dir",value:function(t){return t||(t=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),t?["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(this.services.languageUtils.getLanguagePartFromCode(t))>-1||t.toLowerCase().indexOf("-arab")>1?"rtl":"ltr":"rtl"}},{key:"cloneInstance",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:vc,i=yc(yc(yc({},this.options),e),{isClone:!0}),o=new r(i),a=["store","services","language"];return a.forEach((function(e){o[e]=t[e]})),o.services=yc({},this.services),o.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},o.translator=new Xl(o.services,o.options),o.translator.on("*",(function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];o.emit.apply(o,[t].concat(n))})),o.init(i,n),o.translator.options=o.options,o.translator.backendConnector.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},o}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}]),r}(Ml);$(wc,"createInstance",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1?arguments[1]:void 0;return new wc(t,e)}));var _c=wc.createInstance();_c.createInstance=wc.createInstance,_c.createInstance,_c.init,_c.loadResources,_c.reloadResources,_c.use,_c.changeLanguage,_c.getFixedT,_c.t,_c.exists,_c.setDefaultNamespace,_c.hasLoadedNamespace,_c.loadNamespaces,_c.loadLanguages;const kc=_c,Sc=JSON.parse('{"Analysis Chart":"مخطط التحليل","Number of lessons":"عدد الدروس","Select Country":"حدد الدولة","Select Camp":"حدد معسكر","Select School":"حدد المدرسة","NO of lessons":"عدد الدروس","Lessons":"دروس","in":"في","Country Name":"اسم البلد","Camp Name":"اسم المعسكر","Month":"الشهر","School Name":"اسم المدرسة","Total Lessons":"عدد الدروس"}');function Ec(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Oc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Ec(Object(n),!0).forEach((function(e){$(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ec(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Cc(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}kc.use(at).init({lng:"en",fallbackLng:"en",resources:{en:{translation:{}},ar:{translation:Sc}},interpolation:{escapeValue:!1}});var Pc="function"==typeof Symbol&&Symbol.observable||"@@observable",Mc=function(){return Math.random().toString(36).substring(7).split("").join(".")},Lc={INIT:"@@redux/INIT"+Mc(),REPLACE:"@@redux/REPLACE"+Mc(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Mc()}};function Rc(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function Tc(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function Nc(t){return function(e){var n=e.dispatch,i=e.getState;return function(e){return function(r){return"function"==typeof r?r(n,i,t):e(r)}}}}var Dc=Nc();Dc.withExtraArgument=Nc;const Ac=Dc;var Ic,jc=function(){return jc=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},jc.apply(this,arguments)},Fc=function(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))},zc={data:[],filterValue:""},Vc=((Ic={data:[]})[A.COUNTRY_FILTER]=zc,Ic[A.CAMP_FILTER]=zc,Ic[A.SCHOOL_FILTER]=zc,Ic.loaded=!1,Ic.hiddenGraphs=[],Ic),Bc=function(t){for(var e=Object.keys(t),n={},i=0;i<e.length;i++){var r=e[i];"function"==typeof t[r]&&(n[r]=t[r])}var o,a=Object.keys(n);try{!function(t){Object.keys(t).forEach((function(e){var n=t[e];if(void 0===n(void 0,{type:Lc.INIT}))throw new Error(Cc(12));if(void 0===n(void 0,{type:Lc.PROBE_UNKNOWN_ACTION()}))throw new Error(Cc(13))}))}(n)}catch(t){o=t}return function(t,e){if(void 0===t&&(t={}),o)throw o;for(var i=!1,r={},s=0;s<a.length;s++){var l=a[s],c=n[l],u=t[l],h=c(u,e);if(void 0===h)throw e&&e.type,new Error(Cc(14));r[l]=h,i=i||h!==u}return(i=i||a.length!==Object.keys(t).length)?r:t}}({data:function(t,e){var n,i,r,o;switch(void 0===t&&(t=Vc),e.type){case N.GET_DATA:var a=e.payload,s={data:Array.from(new Set(a.map((function(t){return t.country})))),filterValue:a[0].country},l=Ks(a,{country:s.filterValue}),c=Ys(a,{country:s.filterValue,camp:l.filterValue});return(n={data:a,loaded:!0})[A.COUNTRY_FILTER]=s,n[A.CAMP_FILTER]=l,n[A.SCHOOL_FILTER]=c,n.hiddenGraphs=[],n;case T.CHANGE_COUNTRY:var u=t[A.CAMP_FILTER].filterValue,h=t[A.SCHOOL_FILTER].filterValue,d=jc(jc({},t.COUNTRY_FILTER),{filterValue:e.payload}),f=Ks(t.data,{country:d.filterValue},u),p=Ys(t.data,{country:d.filterValue,camp:f.filterValue},h);return jc(jc({},t),((i={})[A.COUNTRY_FILTER]=d,i[A.CAMP_FILTER]=f,i[A.SCHOOL_FILTER]=p,i.hiddenGraphs=[],i));case T.CHANGE_CAMP:var g=t[A.SCHOOL_FILTER].filterValue;return f=jc(jc({},t[A.CAMP_FILTER]),{filterValue:e.payload}),p=Ys(t.data,{country:t[A.COUNTRY_FILTER].filterValue,camp:f.filterValue},g),jc(jc({},t),((r={})[A.CAMP_FILTER]=f,r[A.SCHOOL_FILTER]=p,r.hiddenGraphs=[],r));case T.CHANGE_SCHOOL:return jc(jc({},t),((o={})[A.SCHOOL_FILTER]=jc(jc({},t[A.SCHOOL_FILTER]),{filterValue:e.payload}),o.hiddenGraphs=[],o));case D.SHOW_GRAPH:var m=t.hiddenGraphs.filter((function(t){return t!=e.payload}));return jc(jc({},t),{hiddenGraphs:m});case D.HIDE_GRAPH:return m=Fc(Fc([],t.hiddenGraphs,!0),[e.payload],!1),jc(jc({},t),{hiddenGraphs:m});default:return Vc}}}),Hc=function t(e,n,i){var r;if("function"==typeof n&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw new Error(Cc(0));if("function"==typeof n&&void 0===i&&(i=n,n=void 0),void 0!==i){if("function"!=typeof i)throw new Error(Cc(1));return i(t)(e,n)}if("function"!=typeof e)throw new Error(Cc(2));var o=e,a=n,s=[],l=s,c=!1;function u(){l===s&&(l=s.slice())}function h(){if(c)throw new Error(Cc(3));return a}function d(t){if("function"!=typeof t)throw new Error(Cc(4));if(c)throw new Error(Cc(5));var e=!0;return u(),l.push(t),function(){if(e){if(c)throw new Error(Cc(6));e=!1,u();var n=l.indexOf(t);l.splice(n,1),s=null}}}function f(t){if(!Rc(t))throw new Error(Cc(7));if(void 0===t.type)throw new Error(Cc(8));if(c)throw new Error(Cc(9));try{c=!0,a=o(a,t)}finally{c=!1}for(var e=s=l,n=0;n<e.length;n++)(0,e[n])();return t}function p(t){if("function"!=typeof t)throw new Error(Cc(10));o=t,f({type:Lc.REPLACE})}function g(){var t,e=d;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(Cc(11));function n(){t.next&&t.next(h())}return n(),{unsubscribe:e(n)}}})[Pc]=function(){return this},t}return f({type:Lc.INIT}),(r={dispatch:f,subscribe:d,getState:h,replaceReducer:p})[Pc]=g,r}(Bc,function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),i=function(){throw new Error(Cc(15))},r={getState:n.getState,dispatch:function(){return i.apply(void 0,arguments)}},o=e.map((function(t){return t(r)}));return i=Tc.apply(void 0,o)(n.dispatch),Oc(Oc({},n),{},{dispatch:i})}}}(Ac));e.render(t.createElement((function({store:e,context:n,children:i,serverState:r}){const o=(0,t.useMemo)((()=>{const t=function(t,e){let n,i=m;function r(){a.onStateChange&&a.onStateChange()}function o(){n||(n=e?e.addNestedSub(r):t.subscribe(r),i=function(){const t=c();let e=null,n=null;return{clear(){e=null,n=null},notify(){t((()=>{let t=e;for(;t;)t.callback(),t=t.next}))},get(){let t=[],n=e;for(;n;)t.push(n),n=n.next;return t},subscribe(t){let i=!0,r=n={callback:t,next:null,prev:n};return r.prev?r.prev.next=r:e=r,function(){i&&null!==e&&(i=!1,r.next?r.next.prev=r.prev:n=r.prev,r.prev?r.prev.next=r.next:e=r.next)}}}}())}const a={addNestedSub:function(t){return o(),i.subscribe(t)},notifyNestedSubs:function(){i.notify()},handleChangeWrapper:r,isSubscribed:function(){return Boolean(n)},trySubscribe:o,tryUnsubscribe:function(){n&&(n(),n=void 0,i.clear(),i=m)},getListeners:()=>i};return a}(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0}}),[e,r]),a=(0,t.useMemo)((()=>e.getState()),[e]);b((()=>{const{subscription:t}=o;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),a!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[o,a]);const s=n||u;return t.createElement(s.Provider,{value:o},i)}),{store:Hc},t.createElement((function(e){let{basename:n,children:i,window:r}=e,o=(0,t.useRef)();null==o.current&&(o.current=function(t){void 0===t&&(t={});var e=t.window,n=void 0===e?document.defaultView:e,i=n.history;function r(){var t=n.location,e=t.pathname,r=t.search,o=t.hash,a=i.state||{};return[a.idx,{pathname:e,search:r,hash:o,state:a.usr||null,key:a.key||"default"}]}var o=null;n.addEventListener("popstate",(function(){if(o)h.call(o),o=null;else{var t=gt.Pop,e=r(),n=e[0],i=e[1];if(h.length){if(null!=n){var a=l-n;a&&(o={action:t,location:i,retry:function(){b(-1*a)}},b(a))}}else m(t)}}));var a=gt.Pop,s=r(),l=s[0],c=s[1],u=wt(),h=wt();function d(t){return"string"==typeof t?t:_t(t)}function f(t,e){return void 0===e&&(e=null),yt({pathname:c.pathname,hash:"",search:""},"string"==typeof t?kt(t):t,{state:e,key:Math.random().toString(36).substr(2,8)})}function p(t,e){return[{usr:t.state,key:t.key,idx:e},d(t)]}function g(t,e,n){return!h.length||(h.call({action:t,location:e,retry:n}),!1)}function m(t){a=t;var e=r();l=e[0],c=e[1],u.call({action:a,location:c})}function b(t){i.go(t)}null==l&&(l=0,i.replaceState(yt({},i.state,{idx:l}),""));var y={get action(){return a},get location(){return c},createHref:d,push:function t(e,r){var o=gt.Push,a=f(e,r);if(g(o,a,(function(){t(e,r)}))){var s=p(a,l+1),c=s[0],u=s[1];try{i.pushState(c,"",u)}catch(t){n.location.assign(u)}m(o)}},replace:function t(e,n){var r=gt.Replace,o=f(e,n);if(g(r,o,(function(){t(e,n)}))){var a=p(o,l),s=a[0],c=a[1];i.replaceState(s,"",c),m(r)}},go:b,back:function(){b(-1)},forward:function(){b(1)},listen:function(t){return u.push(t)},block:function(t){var e=h.push(t);return 1===h.length&&n.addEventListener(vt,xt),function(){e(),h.length||n.removeEventListener(vt,xt)}}};return y}({window:r}));let a=o.current,[s,l]=(0,t.useState)({action:a.action,location:a.location});return(0,t.useLayoutEffect)((()=>a.listen(l)),[a]),(0,t.createElement)(Yt,{basename:n,children:i,location:s.location,navigationType:s.action,navigator:a})}),{basename:process.env.PUBLIC_URL},t.createElement((function(){return t.createElement(t.Fragment,null,t.createElement(Kt,null,t.createElement($t,{path:"/",element:t.createElement(hl,null)}),t.createElement($t,{path:"point/:country/:camp/:school/:month",element:t.createElement(yl,null)})))}),null))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQU8sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUFPLEtBQU0sS0FBTSxLQUFNLE1BQU8sTUFBTyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFBTyxLQUFNLE1BQU8sTUFBTyxLQUFNLFFBQVMsS0FBTSxNQUFPLEtBQU0sS0FBTSxLQUFNLE1BQU8sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUN6WXFFLEdBQUksQ0FBQyxFQUFHLEdBQ1JydkgsR0FBSSxHQUNILENBQ0RnckgsS0FBTSxDQUFDLEtBQU0sS0FBTSxNQUFPLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFBTyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUFPLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ3hJcUUsR0FBSSxDQUFDLEdBQ0xydkgsR0FBSSxHQUNILENBQ0RnckgsS0FBTSxDQUFDLEtBQU0sS0FBTSxNQUFPLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDbERxRSxHQUFJLENBQUMsRUFBRyxFQUFHLEdBQ1hydkgsR0FBSSxHQUNILENBQ0RnckgsS0FBTSxDQUFDLE1BQ1BxRSxHQUFJLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEtBQ3JCcnZILEdBQUksR0FDSCxDQUNEZ3JILEtBQU0sQ0FBQyxLQUFNLE1BQ2JxRSxHQUFJLENBQUMsRUFBRyxFQUFHLEdBQ1hydkgsR0FBSSxHQUNILENBQ0RnckgsS0FBTSxDQUFDLE1BQU8sTUFDZHFFLEdBQUksQ0FBQyxFQUFHLEVBQUcsR0FDWHJ2SCxHQUFJLEdBQ0gsQ0FDRGdySCxLQUFNLENBQUMsTUFDUHFFLEdBQUksQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUNkcnZILEdBQUksR0FDSCxDQUNEZ3JILEtBQU0sQ0FBQyxNQUNQcUUsR0FBSSxDQUFDLEVBQUcsR0FDUnJ2SCxHQUFJLEdBQ0gsQ0FDRGdySCxLQUFNLENBQUMsTUFDUHFFLEdBQUksQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQ2pCcnZILEdBQUksSUFDSCxDQUNEZ3JILEtBQU0sQ0FBQyxNQUNQcUUsR0FBSSxDQUFDLEVBQUcsRUFBRyxFQUFHLElBQ2RydkgsR0FBSSxJQUNILENBQ0RnckgsS0FBTSxDQUFDLE1BQ1BxRSxHQUFJLENBQUMsRUFBRyxHQUNScnZILEdBQUksSUFDSCxDQUNEZ3JILEtBQU0sQ0FBQyxNQUNQcUUsR0FBSSxDQUFDLEVBQUcsR0FDUnJ2SCxHQUFJLElBQ0gsQ0FDRGdySCxLQUFNLENBQUMsTUFDUHFFLEdBQUksQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUNkcnZILEdBQUksSUFDSCxDQUNEZ3JILEtBQU0sQ0FBQyxNQUNQcUUsR0FBSSxDQUFDLEVBQUcsRUFBRyxJQUNYcnZILEdBQUksSUFDSCxDQUNEZ3JILEtBQU0sQ0FBQyxNQUNQcUUsR0FBSSxDQUFDLEVBQUcsRUFBRyxHQUNYcnZILEdBQUksSUFDSCxDQUNEZ3JILEtBQU0sQ0FBQyxNQUNQcUUsR0FBSSxDQUFDLEVBQUcsR0FDUnJ2SCxHQUFJLElBQ0gsQ0FDRGdySCxLQUFNLENBQUMsT0FDUHFFLEdBQUksQ0FBQyxFQUFHLEVBQUcsR0FDWHJ2SCxHQUFJLElBQ0gsQ0FDRGdySCxLQUFNLENBQUMsTUFDUHFFLEdBQUksQ0FBQyxFQUFHLEVBQUcsR0FBSSxJQUNmcnZILEdBQUksSUFDSCxDQUNEZ3JILEtBQU0sQ0FBQyxNQUNQcUUsR0FBSSxDQUFDLEVBQUcsR0FDUnJ2SCxHQUFJLEdBQ0gsQ0FDRGdySCxLQUFNLENBQUMsTUFDUHFFLEdBQUksQ0FBQyxFQUFHLEVBQUcsSUFDWHJ2SCxHQUFJLElBQ0gsQ0FDRGdySCxLQUFNLENBQUMsTUFDUHFFLEdBQUksQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUNkcnZILEdBQUksSUFDSCxDQUNEZ3JILEtBQU0sQ0FBQyxLQUFNLE1BQ2JxRSxHQUFJLENBQUMsRUFBRyxFQUFHLEdBQUksSUFDZnJ2SCxHQUFJLEtBRUZzdkgsR0FBcUIsQ0FD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ZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9hc3NldHMvaWNvbnMvZHJvcGRvd25BcnJvdy5zdmciLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JhdGNoLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVJlZHV4Q29udGV4dC5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZURpc3BhdGNoLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvcmVkdXgvaG9va3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2FwaS9hcGkudHMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL3R5cGVzLnRzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9yZWR1eC9hY3Rpb25zL2RhdGEudHMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24udHN4Iiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL3N0eWxlcy9kcm9wZG93bi5zY3NzPzhhOTYiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtaTE4bmV4dC9kaXN0L2VzL3VuZXNjYXBlLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1pMThuZXh0L2Rpc3QvZXMvY29udGV4dC5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtaTE4bmV4dC9kaXN0L2VzL3V0aWxzLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1pMThuZXh0L2Rpc3QvZXMvdXNlVHJhbnNsYXRpb24uanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9sb2dvL2xvZ28udHN4Iiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL2xvZ28vc3R5bGVzL2xvZ28uc2Nzcz82NjZlIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL2xlc3NvbnNGaWx0ZXJzL2xlc3NvbnNGaWx0ZXJzLnRzeCIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9sZXNzb25zRmlsdGVycy9zdHlsZXMvbGVzc29uc0ZpbHRlcnMuc2Nzcz9kMGUzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NodW5rcy9oZWxwZXJzLnNlZ21lbnQubWpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NoYXJ0Lm1qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtY2hhcnRqcy0yL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2NvbXBvbmVudHMvY2hhcnQvY2hhcnQudHN4Iiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL2xlc3NvbnNMZWdlbmRzL2xlc3NvbnNMZWdlbmRzLnRzeCIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9sZXNzb25zTGVnZW5kcy9zdHlsZXMvbGVzc29uc0xlZ2VuZHMuc2Nzcz9hNGQ3Iiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL3NjaG9vbHNMZWdlbmQvbGVnZW5kSW5mby50c3giLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2NvbXBvbmVudHMvc2Nob29sc0xlZ2VuZC9zdHlsZXMvbGVnZW5kSW5mby5zY3NzPzUzZjAiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2NvbXBvbmVudHMvc2Nob29sc0xlZ2VuZC9zY2hvb2xDYXJkLnRzeCIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9zY2hvb2xzTGVnZW5kL3N0eWxlcy9zY2hvb2xDYXJkLnNjc3M/YzE4MCIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9zY2hvb2xzTGVnZW5kL3NjaG9vbHNMZWdlbmQudHN4Iiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL2xvYWRpbmdTcGlubmVyL2xvYWRpbmdTcGlubmVyLnRzeCIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9sb2FkaW5nU3Bpbm5lci9zdHlsZXMvbG9hZGluZ1NwaW5uZXIuc2Nzcz81YjNhIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL2xvYWRpbmdTY3JlZW4vbG9hZGluZ1NjcmVlbi50c3giLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2NvbXBvbmVudHMvbG9hZGluZ1NjcmVlbi9zdHlsZXMvbG9hZGluZ1NjcmVlbi5zY3NzPzUyNmQiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL3V0aWxzL3V0aWxzLnRzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL2NoYXJ0Q29udGFpbmVyL2NoYXJ0Q29udGFpbmVyLnRzeCIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9jaGFydENvbnRhaW5lci9zdHlsZXMvY2hhcnRDb250YWluZXIuc2Nzcz84NzNjIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL2hlYWRlci9ob29rcy91c2VMYW5ndWFnZVN3aXRjaGVyLnRzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9jb21wb25lbnRzL2hlYWRlci9sYW5ndWFnZVN3aXRjaGVyLnRzeCIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9oZWFkZXIvc3R5bGVzL2xhbmd1YWdlU3dpdGNoZXIuc2Nzcz8yYjUyIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9hc3NldHMvaWNvbnMvbW9vbi5zdmciLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2Fzc2V0cy9pY29ucy9zdW4uc3ZnIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9zdHlsZXMvX2NvbG9ycy5zY3NzP2ZmOWQiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2NvbXBvbmVudHMvaGVhZGVyL2hvb2tzL3VzZUdldEN1cnJlbnRUaGVtZS50cyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9oZWFkZXIvdGhlbWVTd2l0Y2hlci50c3giLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2NvbXBvbmVudHMvaGVhZGVyL3N0eWxlcy90aGVtZVN3aXRjaGVyLnNjc3M/NTg4NSIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9oZWFkZXIvaGVhZGVyLnRzeCIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvY29tcG9uZW50cy9oZWFkZXIvc3R5bGVzL2hlYWRlci5zY3NzPzExMTkiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2hvb2tzL3VzZUZldGNoRGF0YS50cyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvcGFnZXMvbWFpblBhZ2UvbWFpblBhZ2UudHN4Iiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9wYWdlcy9tYWluUGFnZS9zdHlsZXMvbWFpblBhZ2Uuc2Nzcz80ZWJjIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9wYWdlcy9wb2ludHBhZ2UvcG9pbnRQYWdlLnRzeCIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvaG9va3MvdXNlR2V0UG9pbnREYXRhLnRzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9wYWdlcy9wb2ludHBhZ2Uvc3R5bGVzL3BvaW50UGFnZS5zY3NzPzFmYmQiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL25vZGVfbW9kdWxlcy9pMThuZXh0L2Rpc3QvZXNtL2kxOG5leHQuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2kxOG4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9yZWR1eC9yZWR1Y2Vycy9kYXRhUmVkdWNlci50cyIsIndlYnBhY2s6Ly92b2lzLXRhc2svLi9zcmMvcmVkdXgvcmVkdWNlcnMvcm9vdFJlZHVjZXIudHMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL3JlZHV4L3N0b3JlLnRzIiwid2VicGFjazovL3ZvaXMtdGFzay8uL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdm9pcy10YXNrLy4vc3JjL2FwcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksYz1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLGQ9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLGU9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLGY9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLGc9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLGg9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksaz1TeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksbT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksbj1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksdD1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpLHU7dT1TeW1ib2wuZm9yKFwicmVhY3QubW9kdWxlLnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHYoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHI9YS4kJHR5cGVvZjtzd2l0Y2gocil7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIG06Y2FzZSBuOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBoOmNhc2UgbDpjYXNlIHE6Y2FzZSBwOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiByfX1jYXNlIGM6cmV0dXJuIHJ9fX1leHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWc7ZXhwb3J0cy5FbGVtZW50PWI7ZXhwb3J0cy5Gb3J3YXJkUmVmPWw7ZXhwb3J0cy5GcmFnbWVudD1kO2V4cG9ydHMuTGF6eT1xO2V4cG9ydHMuTWVtbz1wO2V4cG9ydHMuUG9ydGFsPWM7ZXhwb3J0cy5Qcm9maWxlcj1mO2V4cG9ydHMuU3RyaWN0TW9kZT1lO2V4cG9ydHMuU3VzcGVuc2U9bTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0PW47ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1sfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXF9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cH07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1tfTtleHBvcnRzLmlzU3VzcGVuc2VMaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT1lfHxhPT09bXx8YT09PW58fGE9PT10fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1sfHxhLiQkdHlwZW9mPT09dXx8dm9pZCAwIT09YS5nZXRNb2R1bGVJZCk/ITA6ITF9O2V4cG9ydHMudHlwZU9mPXY7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGU9cmVxdWlyZShcInJlYWN0XCIpO2Z1bmN0aW9uIGgoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBrPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOmgsbD1lLnVzZVN0YXRlLG09ZS51c2VFZmZlY3Qsbj1lLnVzZUxheW91dEVmZmVjdCxwPWUudXNlRGVidWdWYWx1ZTtmdW5jdGlvbiBxKGEsYil7dmFyIGQ9YigpLGY9bCh7aW5zdDp7dmFsdWU6ZCxnZXRTbmFwc2hvdDpifX0pLGM9ZlswXS5pbnN0LGc9ZlsxXTtuKGZ1bmN0aW9uKCl7Yy52YWx1ZT1kO2MuZ2V0U25hcHNob3Q9YjtyKGMpJiZnKHtpbnN0OmN9KX0sW2EsZCxiXSk7bShmdW5jdGlvbigpe3IoYykmJmcoe2luc3Q6Y30pO3JldHVybiBhKGZ1bmN0aW9uKCl7cihjKSYmZyh7aW5zdDpjfSl9KX0sW2FdKTtwKGQpO3JldHVybiBkfVxuZnVuY3Rpb24gcihhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGQ9YigpO3JldHVybiFrKGEsZCl9Y2F0Y2goZil7cmV0dXJuITB9fWZ1bmN0aW9uIHQoYSxiKXtyZXR1cm4gYigpfXZhciB1PVwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudD90OnE7ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT12b2lkIDAhPT1lLnVzZVN5bmNFeHRlcm5hbFN0b3JlP2UudXNlU3luY0V4dGVybmFsU3RvcmU6dTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGg9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcInVzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW1cIik7ZnVuY3Rpb24gcChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6cCxyPW4udXNlU3luY0V4dGVybmFsU3RvcmUsdD1oLnVzZVJlZix1PWgudXNlRWZmZWN0LHY9aC51c2VNZW1vLHc9aC51c2VEZWJ1Z1ZhbHVlO1xuZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3Rvcj1mdW5jdGlvbihhLGIsZSxsLGcpe3ZhciBjPXQobnVsbCk7aWYobnVsbD09PWMuY3VycmVudCl7dmFyIGY9e2hhc1ZhbHVlOiExLHZhbHVlOm51bGx9O2MuY3VycmVudD1mfWVsc2UgZj1jLmN1cnJlbnQ7Yz12KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhKXtpZighYyl7Yz0hMDtkPWE7YT1sKGEpO2lmKHZvaWQgMCE9PWcmJmYuaGFzVmFsdWUpe3ZhciBiPWYudmFsdWU7aWYoZyhiLGEpKXJldHVybiBrPWJ9cmV0dXJuIGs9YX1iPWs7aWYocShkLGEpKXJldHVybiBiO3ZhciBlPWwoYSk7aWYodm9pZCAwIT09ZyYmZyhiLGUpKXJldHVybiBiO2Q9YTtyZXR1cm4gaz1lfXZhciBjPSExLGQsayxtPXZvaWQgMD09PWU/bnVsbDplO3JldHVybltmdW5jdGlvbigpe3JldHVybiBhKGIoKSl9LG51bGw9PT1tP3ZvaWQgMDpmdW5jdGlvbigpe3JldHVybiBhKG0oKSl9XX0sW2IsZSxsLGddKTt2YXIgZD1yKGEsY1swXSxjWzFdKTtcbnUoZnVuY3Rpb24oKXtmLmhhc1ZhbHVlPSEwO2YudmFsdWU9ZH0sW2RdKTt3KGQpO3JldHVybiBkfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltL3dpdGgtc2VsZWN0b3IucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsInZhciBfcGF0aDtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG52YXIgU3ZnRHJvcGRvd25BcnJvdyA9IGZ1bmN0aW9uIFN2Z0Ryb3Bkb3duQXJyb3cocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHdpZHRoOiAxMC42MDUsXG4gICAgaGVpZ2h0OiAxNS41NTVcbiAgfSwgcHJvcHMpLCBfcGF0aCB8fCAoX3BhdGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwibTIuODI4IDE1LjU1NSA3Ljc3Ny03Ljc3OUwyLjgyOCAwIDAgMi44MjhsNC45NDkgNC45NDhMMCAxMi43MjdsMi44MjggMi44Mjh6XCJcbiAgfSkpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN2Z0Ryb3Bkb3duQXJyb3c7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxubGV0IGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IGNvbnN0IHNldEJhdGNoID0gbmV3QmF0Y2ggPT4gYmF0Y2ggPSBuZXdCYXRjaDsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCBjb25zdCBnZXRCYXRjaCA9ICgpID0+IGJhdGNoOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgY29uc3QgUmVhY3RSZWR1eENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RSZWR1eENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YC4gVGhpcyBpcyBhIGxvdy1sZXZlbFxyXG4gKiBob29rIHRoYXQgeW91IHNob3VsZCB1c3VhbGx5IG5vdCBuZWVkIHRvIGNhbGwgZGlyZWN0bHkuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQoKVxyXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChSZWFjdFJlZHV4Q29udGV4dCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbnRleHRWYWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+Jyk7XG4gIH1cblxuICByZXR1cm4gY29udGV4dFZhbHVlO1xufSIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IG5vdEluaXRpYWxpemVkIH0gZnJvbSAnLi4vdXRpbHMvdXNlU3luY0V4dGVybmFsU3RvcmUnO1xubGV0IHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yID0gbm90SW5pdGlhbGl6ZWQ7XG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZVVzZVNlbGVjdG9yID0gZm4gPT4ge1xuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciA9IGZuO1xufTtcblxuY29uc3QgcmVmRXF1YWxpdHkgPSAoYSwgYikgPT4gYSA9PT0gYjtcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0KSB7XG4gIGNvbnN0IHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6ICgpID0+IHVzZUNvbnRleHQoY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZXF1YWxpdHlGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhbiBlcXVhbGl0eSBmdW5jdGlvbiB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uLFxuICAgICAgZ2V0U2VydmVyU3RhdGVcbiAgICB9ID0gdXNlUmVkdXhDb250ZXh0KCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRTdGF0ZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yKHN1YnNjcmlwdGlvbi5hZGROZXN0ZWRTdWIsIHN0b3JlLmdldFN0YXRlLCBnZXRTZXJ2ZXJTdGF0ZSB8fCBzdG9yZS5nZXRTdGF0ZSwgc2VsZWN0b3IsIGVxdWFsaXR5Rm4pO1xuICAgIHVzZURlYnVnVmFsdWUoc2VsZWN0ZWRTdGF0ZSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXHJcbiAqXHJcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXHJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXHJcbiAqIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBuZWVkcyB0byBiZSByZS1yZW5kZXJlZC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBlcXVhbGl0eUZuIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgZXF1YWxpdHlcclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXHJcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VTZWxlY3RvciA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3Rvckhvb2soKTsiLCJleHBvcnQgY29uc3Qgbm90SW5pdGlhbGl6ZWQgPSAoKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcigndVNFUyBub3QgaW5pdGlhbGl6ZWQhJyk7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgY29uc3QgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICBsZXQgZmlyc3QgPSBudWxsO1xuICBsZXQgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuXG4gICAgbm90aWZ5KCkge1xuICAgICAgYmF0Y2goKCkgPT4ge1xuICAgICAgICBsZXQgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGdldCgpIHtcbiAgICAgIGxldCBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIGxldCBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcblxuICAgIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgbGV0IGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBsZXQgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcHJldjogbGFzdFxuICAgICAgfTtcblxuICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJzdCA9IGxpc3RlbmVyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGZpcnN0ID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lci5uZXh0KSB7XG4gICAgICAgICAgbGlzdGVuZXIubmV4dC5wcmV2ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gIH07XG59XG5cbmNvbnN0IG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeSgpIHt9LFxuXG4gIGdldDogKCkgPT4gW11cbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgbGV0IHVuc3Vic2NyaWJlO1xuICBsZXQgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcblxuICBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gbGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih1bnN1YnNjcmliZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUgPSBwYXJlbnRTdWIgPyBwYXJlbnRTdWIuYWRkTmVzdGVkU3ViKGhhbmRsZUNoYW5nZVdyYXBwZXIpIDogc3RvcmUuc3Vic2NyaWJlKGhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgbGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgdW5zdWJzY3JpYmUgPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3Vic2NyaXB0aW9uID0ge1xuICAgIGFkZE5lc3RlZFN1YixcbiAgICBub3RpZnlOZXN0ZWRTdWJzLFxuICAgIGhhbmRsZUNoYW5nZVdyYXBwZXIsXG4gICAgaXNTdWJzY3JpYmVkLFxuICAgIHRyeVN1YnNjcmliZSxcbiAgICB0cnlVbnN1YnNjcmliZSxcbiAgICBnZXRMaXN0ZW5lcnM6ICgpID0+IGxpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuLy8gTWF0Y2hlcyBsb2dpYyBpbiBSZWFjdCdzIGBzaGFyZWQvRXhlY3V0aW9uRW52aXJvbm1lbnRgIGZpbGVcblxuZXhwb3J0IGNvbnN0IGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpO1xuZXhwb3J0IGNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSBjYW5Vc2VET00gPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcIl07XG5cbi8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuLi9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeSc7XG5pbXBvcnQgeyBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3J5IH0gZnJvbSAnLi4vY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IHsgbWFwU3RhdGVUb1Byb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCB7IG1lcmdlUHJvcHNGYWN0b3J5IH0gZnJvbSAnLi4vY29ubmVjdC9tZXJnZVByb3BzJztcbmltcG9ydCB7IGNyZWF0ZVN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCB7IG5vdEluaXRpYWxpemVkIH0gZnJvbSAnLi4vdXRpbHMvdXNlU3luY0V4dGVybmFsU3RvcmUnO1xubGV0IHVzZVN5bmNFeHRlcm5hbFN0b3JlID0gbm90SW5pdGlhbGl6ZWQ7XG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUNvbm5lY3QgPSBmbiA9PiB7XG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlID0gZm47XG59OyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG5jb25zdCBFTVBUWV9BUlJBWSA9IFtudWxsLCAwXTtcbmNvbnN0IE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTsgLy8gQXR0ZW1wdHMgdG8gc3RyaW5naWZ5IHdoYXRldmVyIG5vdC1yZWFsbHktYS1jb21wb25lbnQgdmFsdWUgd2Ugd2VyZSBnaXZlblxuLy8gZm9yIGxvZ2dpbmcgaW4gYW4gZXJyb3IgbWVzc2FnZVxuXG5jb25zdCBzdHJpbmdpZnlDb21wb25lbnQgPSBDb21wID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbi8vIFRoaXMgaXMgXCJqdXN0XCIgYSBgdXNlTGF5b3V0RWZmZWN0YCwgYnV0IHdpdGggdHdvIG1vZGlmaWNhdGlvbnM6XG4vLyAtIHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIGB1c2VFZmZlY3RgIGluIFNTUiB0byBhdm9pZCBhbm5veWluZyB3YXJuaW5nc1xuLy8gLSB3ZSBleHRyYWN0IHRoaXMgdG8gYSBzZXBhcmF0ZSBmdW5jdGlvbiB0byBhdm9pZCBjbG9zaW5nIG92ZXIgdmFsdWVzXG4vLyAgIGFuZCBjYXVzaW5nIG1lbW9yeSBsZWFrc1xuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGVmZmVjdEZ1bmMsIGVmZmVjdEFyZ3MsIGRlcGVuZGVuY2llcykge1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IGVmZmVjdEZ1bmMoLi4uZWZmZWN0QXJncyksIGRlcGVuZGVuY2llcyk7XG59IC8vIEVmZmVjdCBjYWxsYmFjaywgZXh0cmFjdGVkOiBhc3NpZ24gdGhlIGxhdGVzdCBwcm9wcyB2YWx1ZXMgdG8gcmVmcyBmb3IgbGF0ZXIgdXNhZ2VcblxuXG5mdW5jdGlvbiBjYXB0dXJlV3JhcHBlclByb3BzKGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCAvLyBhY3R1YWxDaGlsZFByb3BzOiB1bmtub3duLFxuY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IGZhbHNlOyAvLyBJZiB0aGUgcmVuZGVyIHdhcyBmcm9tIGEgc3RvcmUgdXBkYXRlLCBjbGVhciBvdXQgdGhhdCByZWZlcmVuY2UgYW5kIGNhc2NhZGUgdGhlIHN1YnNjcmliZXIgdXBkYXRlXG5cbiAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCkge1xuICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG51bGw7XG4gICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICB9XG59IC8vIEVmZmVjdCBjYWxsYmFjaywgZXh0cmFjdGVkOiBzdWJzY3JpYmUgdG8gdGhlIFJlZHV4IHN0b3JlIG9yIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLFxuLy8gY2hlY2sgZm9yIHVwZGF0ZXMgYWZ0ZXIgZGlzcGF0Y2hlZCBhY3Rpb25zLCBhbmQgdHJpZ2dlciByZS1yZW5kZXJzLlxuXG5cbmZ1bmN0aW9uIHN1YnNjcmliZVVwZGF0ZXMoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgaXNNb3VudGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCAvLyBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoOiBSZWFjdC5EaXNwYXRjaDxhbnk+LFxuYWRkaXRpb25hbFN1YnNjcmliZUxpc3RlbmVyKSB7XG4gIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gKCkgPT4ge307IC8vIENhcHR1cmUgdmFsdWVzIGZvciBjaGVja2luZyBpZiBhbmQgd2hlbiB0aGlzIGNvbXBvbmVudCB1bm1vdW50c1xuXG4gIGxldCBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICBsZXQgbGFzdFRocm93bkVycm9yID0gbnVsbDsgLy8gV2UnbGwgcnVuIHRoaXMgY2FsbGJhY2sgZXZlcnkgdGltZSBhIHN0b3JlIHN1YnNjcmlwdGlvbiB1cGRhdGUgcHJvcGFnYXRlcyB0byB0aGlzIGNvbXBvbmVudFxuXG4gIGNvbnN0IGNoZWNrRm9yVXBkYXRlcyA9ICgpID0+IHtcbiAgICBpZiAoZGlkVW5zdWJzY3JpYmUgfHwgIWlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAvLyBEb24ndCBydW4gc3RhbGUgbGlzdGVuZXJzLlxuICAgICAgLy8gUmVkdXggZG9lc24ndCBndWFyYW50ZWUgdW5zdWJzY3JpcHRpb25zIGhhcHBlbiB1bnRpbCBuZXh0IGRpc3BhdGNoLlxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVE9ETyBXZSdyZSBjdXJyZW50bHkgY2FsbGluZyBnZXRTdGF0ZSBvdXJzZWx2ZXMgaGVyZSwgcmF0aGVyIHRoYW4gbGV0dGluZyBgdVNFU2AgZG8gaXRcblxuXG4gICAgY29uc3QgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgbGV0IG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJvciA9IGU7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgIH1cblxuICAgIGlmICghZXJyb3IpIHtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBUT0RPIFRoaXMgaXMgaGFja3kgYW5kIG5vdCBob3cgYHVTRVNgIGlzIG1lYW50IHRvIGJlIHVzZWRcbiAgICAgIC8vIFRyaWdnZXIgdGhlIFJlYWN0IGB1c2VTeW5jRXh0ZXJuYWxTdG9yZWAgc3Vic2NyaWJlclxuXG4gICAgICBhZGRpdGlvbmFsU3Vic2NyaWJlTGlzdGVuZXIoKTtcbiAgICB9XG4gIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICBjb25zdCB1bnN1YnNjcmliZVdyYXBwZXIgPSAoKSA9PiB7XG4gICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcblxuICAgIGlmIChsYXN0VGhyb3duRXJyb3IpIHtcbiAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBjYXVnaHQgYW4gZXJyb3IgZHVlIHRvIGEgYmFkIG1hcFN0YXRlIGZ1bmN0aW9uLCBidXQgdGhlXG4gICAgICAvLyBwYXJlbnQgcmUtcmVuZGVyZWQgd2l0aG91dCB0aGlzIGNvbXBvbmVudCBhbmQgd2UncmUgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBhcyBsb25nIGFzIHdlIGRvIHRvcC1kb3duIHN1YnNjcmlwdGlvbnMgY29ycmVjdGx5LCBidXRcbiAgICAgIC8vIGlmIHdlIGV2ZXIgZG8gdGhvc2Ugd3JvbmcsIHRoaXMgdGhyb3cgd2lsbCBzdXJmYWNlIHRoZSBlcnJvciBpbiBvdXIgdGVzdHMuXG4gICAgICAvLyBJbiB0aGF0IGNhc2UsIHRocm93IHRoZSBlcnJvciBmcm9tIGhlcmUgc28gaXQgZG9lc24ndCBnZXQgbG9zdC5cbiAgICAgIHRocm93IGxhc3RUaHJvd25FcnJvcjtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlcjtcbn0gLy8gUmVkdWNlciBpbml0aWFsIHN0YXRlIGNyZWF0aW9uIGZvciBvdXIgdXBkYXRlIHJlZHVjZXJcblxuXG5jb25zdCBpbml0U3RhdGVVcGRhdGVzID0gKCkgPT4gRU1QVFlfQVJSQVk7XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG4vKipcclxuICogSW5mZXJzIHRoZSB0eXBlIG9mIHByb3BzIHRoYXQgYSBjb25uZWN0b3Igd2lsbCBpbmplY3QgaW50byBhIGNvbXBvbmVudC5cclxuICovXG5cblxubGV0IGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24gPSBmYWxzZTtcbi8qKlxyXG4gKiBDb25uZWN0cyBhIFJlYWN0IGNvbXBvbmVudCB0byBhIFJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiAtIFdpdGhvdXQgYXJndW1lbnRzLCBqdXN0IHdyYXBzIHRoZSBjb21wb25lbnQsIHdpdGhvdXQgY2hhbmdpbmcgdGhlIGJlaGF2aW9yIC8gcHJvcHNcclxuICpcclxuICogLSBJZiAyIHBhcmFtcyBhcmUgcGFzc2VkICgzcmQgcGFyYW0sIG1lcmdlUHJvcHMsIGlzIHNraXBwZWQpLCBkZWZhdWx0IGJlaGF2aW9yXHJcbiAqIGlzIHRvIG92ZXJyaWRlIG93blByb3BzIChhcyBzdGF0ZWQgaW4gdGhlIGRvY3MpLCBzbyB3aGF0IHJlbWFpbnMgaXMgZXZlcnl0aGluZyB0aGF0J3NcclxuICogbm90IGEgc3RhdGUgb3IgZGlzcGF0Y2ggcHJvcFxyXG4gKlxyXG4gKiAtIFdoZW4gM3JkIHBhcmFtIGlzIHBhc3NlZCwgd2UgZG9uJ3Qga25vdyBpZiBvd25Qcm9wcyBwcm9wYWdhdGUgYW5kIHdoZXRoZXIgdGhleVxyXG4gKiBzaG91bGQgYmUgdmFsaWQgY29tcG9uZW50IHByb3BzLCBiZWNhdXNlIGl0IGRlcGVuZHMgb24gbWVyZ2VQcm9wcyBpbXBsZW1lbnRhdGlvbi5cclxuICogQXMgc3VjaCwgaXQgaXMgdGhlIHVzZXIncyByZXNwb25zaWJpbGl0eSB0byBleHRlbmQgb3duUHJvcHMgaW50ZXJmYWNlIGZyb20gc3RhdGUgb3JcclxuICogZGlzcGF0Y2ggcHJvcHMgb3IgYm90aCB3aGVuIGFwcGxpY2FibGVcclxuICpcclxuICogQHBhcmFtIG1hcFN0YXRlVG9Qcm9wcyBBIGZ1bmN0aW9uIHRoYXQgZXh0cmFjdHMgdmFsdWVzIGZyb20gc3RhdGVcclxuICogQHBhcmFtIG1hcERpc3BhdGNoVG9Qcm9wcyBTZXR1cCBmb3IgZGlzcGF0Y2hpbmcgYWN0aW9uc1xyXG4gKiBAcGFyYW0gbWVyZ2VQcm9wcyBPcHRpb25hbCBjYWxsYmFjayB0byBtZXJnZSBzdGF0ZSBhbmQgZGlzcGF0Y2ggcHJvcHMgdG9nZXRoZXJcclxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3IgY29uZmlndXJpbmcgdGhlIGNvbm5lY3Rpb25cclxuICpcclxuICovXG5cbmZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIHtcbiAgLy8gVGhlIGBwdXJlYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZCwgc28gVFMgZG9lc24ndCBsaWtlIHVzIGRlc3RydWN0dXJpbmcgdGhpcyB0byBjaGVjayBpdHMgZXhpc3RlbmNlLlxuICAvLyBAdHMtaWdub3JlXG4gIHB1cmUsXG4gIGFyZVN0YXRlc0VxdWFsID0gc3RyaWN0RXF1YWwsXG4gIGFyZU93blByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIGFyZVN0YXRlUHJvcHNFcXVhbCA9IHNoYWxsb3dFcXVhbCxcbiAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IHNoYWxsb3dFcXVhbCxcbiAgLy8gdXNlIFJlYWN0J3MgZm9yd2FyZFJlZiB0byBleHBvc2UgYSByZWYgb2YgdGhlIHdyYXBwZWQgY29tcG9uZW50XG4gIGZvcndhcmRSZWYgPSBmYWxzZSxcbiAgLy8gdGhlIGNvbnRleHQgY29uc3VtZXIgdG8gdXNlXG4gIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dFxufSA9IHt9KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHB1cmUgIT09IHVuZGVmaW5lZCAmJiAhaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbikge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbiA9IHRydWU7XG4gICAgICB3YXJuaW5nKCdUaGUgYHB1cmVgIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLiBgY29ubmVjdGAgaXMgbm93IGFsd2F5cyBhIFwicHVyZS9tZW1vaXplZFwiIGNvbXBvbmVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IENvbnRleHQgPSBjb250ZXh0O1xuICBjb25zdCBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWFwU3RhdGVUb1Byb3BzRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMpO1xuICBjb25zdCBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeShtYXBEaXNwYXRjaFRvUHJvcHMpO1xuICBjb25zdCBpbml0TWVyZ2VQcm9wcyA9IG1lcmdlUHJvcHNGYWN0b3J5KG1lcmdlUHJvcHMpO1xuICBjb25zdCBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyk7XG5cbiAgY29uc3Qgd3JhcFdpdGhDb25uZWN0ID0gV3JhcHBlZENvbXBvbmVudCA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBjb25uZWN0LiBJbnN0ZWFkIHJlY2VpdmVkICR7c3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpfWApO1xuICAgIH1cblxuICAgIGNvbnN0IHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgY29uc3QgZGlzcGxheU5hbWUgPSBgQ29ubmVjdCgke3dyYXBwZWRDb21wb25lbnROYW1lfSlgO1xuICAgIGNvbnN0IHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSB7XG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudCxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMsXG4gICAgICBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgY29uc3QgW3Byb3BzQ29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGFjdHVhbCBcImRhdGFcIiBwcm9wcyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVyIGNvbXBvbmVudCxcbiAgICAgICAgLy8gYW5kIHZhbHVlcyBuZWVkZWQgdG8gY29udHJvbCBiZWhhdmlvciAoZm9yd2FyZGVkIHJlZnMsIGFsdGVybmF0ZSBjb250ZXh0IGluc3RhbmNlcykuXG4gICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXG4gICAgICAgIH0gPSBwcm9wcyxcbiAgICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSk7XG4gICAgICBjb25zdCBDb250ZXh0VG9Vc2UgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgLy8gVXNlcnMgbWF5IG9wdGlvbmFsbHkgcGFzcyBpbiBhIGN1c3RvbSBjb250ZXh0IGluc3RhbmNlIHRvIHVzZSBpbnN0ZWFkIG9mIG91ciBSZWFjdFJlZHV4Q29udGV4dC5cbiAgICAgICAgLy8gTWVtb2l6ZSB0aGUgY2hlY2sgdGhhdCBkZXRlcm1pbmVzIHdoaWNoIGNvbnRleHQgaW5zdGFuY2Ugd2Ugc2hvdWxkIHVzZS5cbiAgICAgICAgcmV0dXJuIHByb3BzQ29udGV4dCAmJiBwcm9wc0NvbnRleHQuQ29uc3VtZXIgJiYgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpc0NvbnRleHRDb25zdW1lciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIGNvbnN0IGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG5cbiAgICAgIGNvbnN0IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZ2V0U3RhdGUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgY29uc3QgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIFwic3RvcmVcIiBpbiB0aGUgY29udGV4dCBvZiBgICsgYFwiJHtkaXNwbGF5TmFtZX1cIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgYCArIGBvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgYCArIGBSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvICR7ZGlzcGxheU5hbWV9IGluIGNvbm5lY3Qgb3B0aW9ucy5gKTtcbiAgICAgIH0gLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG5cblxuICAgICAgY29uc3Qgc3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBwcm9wcy5zdG9yZSA6IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIGNvbnN0IGdldFNlcnZlclN0YXRlID0gZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPyBjb250ZXh0VmFsdWUuZ2V0U2VydmVyU3RhdGUgOiBzdG9yZS5nZXRTdGF0ZTtcbiAgICAgIGNvbnN0IGNoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuICAgICAgY29uc3QgW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic10gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyB1bmRlZmluZWQgOiBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gVGhpcyBjYW5cbiAgICAgICAgLy8gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24ncyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZSAgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cblxuICAgICAgICBjb25zdCBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSk7IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG4gICAgICBjb25zdCBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0sIFtkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZSwgc3Vic2NyaXB0aW9uXSk7IC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcblxuICAgICAgY29uc3QgbGFzdENoaWxkUHJvcHMgPSB1c2VSZWYoKTtcbiAgICAgIGNvbnN0IGxhc3RXcmFwcGVyUHJvcHMgPSB1c2VSZWYod3JhcHBlclByb3BzKTtcbiAgICAgIGNvbnN0IGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIGNvbnN0IHJlbmRlcklzU2NoZWR1bGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIGNvbnN0IGlzUHJvY2Vzc2luZ0Rpc3BhdGNoID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIGNvbnN0IGlzTW91bnRlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICB9LCBbXSk7XG4gICAgICBjb25zdCBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgICAgLy8gLSBUaGlzIHJlbmRlciBtYXkgaGF2ZSBiZWVuIHRyaWdnZXJlZCBieSBhIFJlZHV4IHN0b3JlIHVwZGF0ZSB0aGF0IHByb2R1Y2VkIG5ldyBjaGlsZCBwcm9wc1xuICAgICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAgIC8vIEJ1dCwgaWYgd2UgaGF2ZSBuZXcgd3JhcHBlciBwcm9wcywgdGhvc2UgbWlnaHQgY2hhbmdlIHRoZSBjaGlsZCBwcm9wcywgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGluZ3MuXG4gICAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQ7XG4gICAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvIHRoaXMgYmVjYXVzZSBvbiByZW5kZXJzIF9ub3RfIGNhdXNlZCBieSBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRoZSBsYXRlc3Qgc3RvcmUgc3RhdGVcbiAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgICAgfSwgW3N0b3JlLCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIGNvbnN0IHN1YnNjcmliZUZvclJlYWN0ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZSA9IHJlYWN0TGlzdGVuZXIgPT4ge1xuICAgICAgICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN1YnNjcmliZVVwZGF0ZXMoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGlzTW91bnRlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgcmVhY3RMaXN0ZW5lcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZTtcbiAgICAgIH0sIFtzdWJzY3JpcHRpb25dKTtcbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTtcbiAgICAgIGxldCBhY3R1YWxDaGlsZFByb3BzO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhY3R1YWxDaGlsZFByb3BzID0gdXNlU3luY0V4dGVybmFsU3RvcmUoIC8vIFRPRE8gV2UncmUgcGFzc2luZyB0aHJvdWdoIGEgYmlnIHdyYXBwZXIgdGhhdCBkb2VzIGEgYnVuY2ggb2YgZXh0cmEgc2lkZSBlZmZlY3RzIGJlc2lkZXMgc3Vic2NyaWJpbmdcbiAgICAgICAgc3Vic2NyaWJlRm9yUmVhY3QsIC8vIFRPRE8gVGhpcyBpcyBpbmNyZWRpYmx5IGhhY2t5LiBXZSd2ZSBhbHJlYWR5IHByb2Nlc3NlZCB0aGUgc3RvcmUgdXBkYXRlIGFuZCBjYWxjdWxhdGVkIG5ldyBjaGlsZCBwcm9wcyxcbiAgICAgICAgLy8gVE9ETyBhbmQgd2UncmUganVzdCBwYXNzaW5nIHRoYXQgdGhyb3VnaCBzbyBpdCB0cmlnZ2VycyBhIHJlLXJlbmRlciBmb3IgdXMgcmF0aGVyIHRoYW4gcmVseWluZyBvbiBgdVNFU2AuXG4gICAgICAgIGFjdHVhbENoaWxkUHJvcHNTZWxlY3RvciwgZ2V0U2VydmVyU3RhdGUgPyAoKSA9PiBjaGlsZFByb3BzU2VsZWN0b3IoZ2V0U2VydmVyU3RhdGUoKSwgd3JhcHBlclByb3BzKSA6IGFjdHVhbENoaWxkUHJvcHNTZWxlY3Rvcik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgICAgIDtcbiAgICAgICAgICBlcnIubWVzc2FnZSArPSBgXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG4ke2xhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFja31cXG5cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICAgICAgfSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICBjb25zdCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICAgIH0pKVxuICAgICAgICApO1xuICAgICAgfSwgW3JlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICBjb25zdCByZW5kZXJlZENoaWxkID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfVxuXG4gICAgY29uc3QgX0Nvbm5lY3QgPSBSZWFjdC5tZW1vKENvbm5lY3RGdW5jdGlvbik7XG5cbiAgICAvLyBBZGQgYSBoYWNreSBjYXN0IHRvIGdldCB0aGUgcmlnaHQgb3V0cHV0IHR5cGVcbiAgICBjb25zdCBDb25uZWN0ID0gX0Nvbm5lY3Q7XG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gQ29ubmVjdEZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgICBpZiAoZm9yd2FyZFJlZikge1xuICAgICAgY29uc3QgX2ZvcndhcmRlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGZvcndhcmRlZCA9IF9mb3J3YXJkZWQ7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xuXG4gIHJldHVybiB3cmFwV2l0aENvbm5lY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3Q7IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0KSB7XG4gIGNvbnN0IHVzZVJlZHV4Q29udGV4dCA9IC8vIEB0cy1pZ25vcmVcbiAgY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogKCkgPT4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVN0b3JlKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0b3JlXG4gICAgfSA9IHVzZVJlZHV4Q29udGV4dCgpOyAvLyBAdHMtaWdub3JlXG5cbiAgICByZXR1cm4gc3RvcmU7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSByZWR1eCBzdG9yZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBFeGFtcGxlQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKVxyXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgY29uc3QgdXNlU3RvcmUgPSAvKiNfX1BVUkVfXyovY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hIb29rKGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dCkge1xuICBjb25zdCB1c2VTdG9yZSA9IC8vIEB0cy1pZ25vcmVcbiAgY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0U3RvcmUgOiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaDtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBgZGlzcGF0Y2hgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xyXG4gKiAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxyXG4gKiAgIGNvbnN0IGluY3JlYXNlQ291bnRlciA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ2luY3JlYXNlLWNvdW50ZXInIH0pLCBbXSlcclxuICogICByZXR1cm4gKFxyXG4gKiAgICAgPGRpdj5cclxuICogICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cclxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZWFzZUNvdW50ZXJ9PkluY3JlYXNlIGNvdW50ZXI8L2J1dHRvbj5cclxuICogICAgIDwvZGl2PlxyXG4gKiAgIClcclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVzZURpc3BhdGNoID0gLyojX19QVVJFX18qL2NyZWF0ZURpc3BhdGNoSG9vaygpOyIsIi8vIFRoZSBwcmltYXJ5IGVudHJ5IHBvaW50IGFzc3VtZXMgd2UncmUgd29ya2luZyB3aXRoIHN0YW5kYXJkIFJlYWN0RE9NL1JOLCBidXRcbi8vIG9sZGVyIHZlcnNpb25zIHRoYXQgZG8gbm90IGluY2x1ZGUgYHVzZVN5bmNFeHRlcm5hbFN0b3JlYCAoUmVhY3QgMTYuOSAtIDE3LngpLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGUgdXNlU3luY0V4dGVybmFsU3RvcmUgY29tcGF0IHNoaW0gaXMgbmVlZGVkLlxuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmUgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltJztcbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIH0gZnJvbSAndXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS93aXRoLXNlbGVjdG9yJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyBpbml0aWFsaXplVXNlU2VsZWN0b3IgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IGluaXRpYWxpemVDb25uZWN0IH0gZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3QnO1xuaW5pdGlhbGl6ZVVzZVNlbGVjdG9yKHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yKTtcbmluaXRpYWxpemVDb25uZWN0KHVzZVN5bmNFeHRlcm5hbFN0b3JlKTsgLy8gRW5hYmxlIGJhdGNoZWQgdXBkYXRlcyBpbiBvdXIgc3Vic2NyaXB0aW9ucyBmb3IgdXNlXG4vLyB3aXRoIHN0YW5kYXJkIFJlYWN0IHJlbmRlcmVycyAoUmVhY3RET00sIFJlYWN0IE5hdGl2ZSlcblxuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgYmF0Y2ggfTtcbmV4cG9ydCAqIGZyb20gJy4vZXhwb3J0cyc7IiwiaW1wb3J0IHsgVHlwZWRVc2VTZWxlY3Rvckhvb2ssIHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB0eXBlIHsgUm9vdFN0YXRlLCBBcHBEaXNwYXRjaCB9IGZyb20gJ0ByZWR1eC9zdG9yZSc7XG5cbi8vIFVzZSB0aHJvdWdob3V0IHlvdXIgYXBwIGluc3RlYWQgb2YgcGxhaW4gYHVzZURpc3BhdGNoYCBhbmQgYHVzZVNlbGVjdG9yYFxuZXhwb3J0IGNvbnN0IHVzZUFwcERpc3BhdGNoOiAoKSA9PiBBcHBEaXNwYXRjaCA9IHVzZURpc3BhdGNoO1xuZXhwb3J0IGNvbnN0IHVzZUFwcFNlbGVjdG9yOiBUeXBlZFVzZVNlbGVjdG9ySG9vazxSb290U3RhdGU+ID0gdXNlU2VsZWN0b3I7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBUEkge1xuICBhcGlVUkwgPVxuICAgICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYWJkZWxyaG1hbi1hcm5vcy9hbmFseXNpcy1mZS1jaGFsbGVuZ2UvbWFzdGVyL2RhdGEuanNvbic7XG5cbiAgZmV0Y2hEYXRhKCk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gZmV0Y2godGhpcy5hcGlVUkwpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4JztcblxuZXhwb3J0IGNvbnN0IFNob3dBbGxTY2hvb2xzID0gJ1Nob3cgQWxsJztcblxuZXhwb3J0IGVudW0gTW9udGhzIHtcbiAgSkFOID0gJ0phbicsXG4gIEZFQiA9ICdGZWInLFxuICBNQVIgPSAnTWFyJyxcbiAgQVBSID0gJ0FwcicsXG4gIE1BWSA9ICdNYXknLFxuICBKVU4gPSAnSnVuJyxcbiAgSlVMID0gJ0p1bCcsXG4gIEFVRyA9ICdBdWcnLFxuICBTRVAgPSAnU2VwJyxcbiAgT0NUID0gJ09jdCcsXG4gIE5PViA9ICdOb3YnLFxuICBERUMgPSAnRGVjJyxcbn1cblxuZXhwb3J0IGVudW0gVGhlbWUge1xuICBMSUdIVCA9ICdMSUdIVCcsXG4gIERBUksgPSAnREFSSycsXG59XG5cbmV4cG9ydCBlbnVtIExhbmd1YWdlcyB7XG4gIEVOID0gJ0VOJyxcbiAgQVIgPSAnQVInLFxufVxuXG5leHBvcnQgZW51bSBEaXJlY3Rpb25zIHtcbiAgUlRMID0gJ3J0bCcsXG4gIExUUiA9ICdsdHInLFxufVxuXG5leHBvcnQgZW51bSBGaWx0ZXJBY3Rpb25UeXBlcyB7XG4gIENIQU5HRV9TQ0hPT0wgPSAnQ0hBTkdFX1NDSE9PTCcsXG4gIENIQU5HRV9DQU1QID0gJ0NIQU5HRV9DQU1QJyxcbiAgQ0hBTkdFX0NPVU5UUlkgPSAnQ0hBTkdFX0NPVU5UUlknLFxufVxuXG5leHBvcnQgZW51bSBBY3Rpb25UeXBlcyB7XG4gIEdFVF9EQVRBID0gJ0dFVF9EQVRBJyxcbn1cblxuZXhwb3J0IGVudW0gVG9nZ2xlR3JhcGhUeXBlcyB7XG4gIEhJREVfR1JBUEggPSAnSElERV9HUkFQSCcsXG4gIFNIT1dfR1JBUEggPSAnU0hPV19HUkFQSCcsXG59XG5cbmV4cG9ydCBlbnVtIEZpbHRlclR5cGUge1xuICBDT1VOVFJZX0ZJTFRFUiA9ICdDT1VOVFJZX0ZJTFRFUicsXG4gIENBTVBfRklMVEVSID0gJ0NBTVBfRklMVEVSJyxcbiAgU0NIT09MX0ZJTFRFUiA9ICdTQ0hPT0xfRklMVEVSJyxcbn1cblxuZXhwb3J0IHR5cGUgRGF0YSA9IHtcbiAgaWQ6IHN0cmluZztcbiAgbW9udGg6IGtleW9mIE1vbnRocztcbiAgY2FtcDogc3RyaW5nO1xuICBjb3VudHJ5OiBzdHJpbmc7XG4gIHNjaG9vbDogc3RyaW5nO1xuICBsZXNzb25zOiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBBY3Rpb248VD4gPSB7XG4gIHR5cGU6IEZpbHRlckFjdGlvblR5cGVzIHwgQWN0aW9uVHlwZXMgfCBUb2dnbGVHcmFwaFR5cGVzO1xuICBwYXlsb2FkOiBUO1xufTtcblxuZXhwb3J0IHR5cGUgQXN5bmNBY3Rpb24gPSAoZGlzcGF0Y2g6IERpc3BhdGNoKSA9PiBQcm9taXNlPHZvaWQ+O1xuXG5leHBvcnQgdHlwZSBEYXRhU3RhdGUgPSB7XG4gIGRhdGE6IERhdGFbXTtcbiAgW0ZpbHRlclR5cGUuQ09VTlRSWV9GSUxURVJdOiBGaWx0ZXI7XG4gIFtGaWx0ZXJUeXBlLkNBTVBfRklMVEVSXTogRmlsdGVyO1xuICBbRmlsdGVyVHlwZS5TQ0hPT0xfRklMVEVSXTogRmlsdGVyO1xuICBsb2FkZWQ6IGJvb2xlYW47XG4gIGhpZGRlbkdyYXBoczogc3RyaW5nW107XG59O1xuXG5leHBvcnQgdHlwZSBGaWx0ZXIgPSB7XG4gIGRhdGE6IHN0cmluZ1tdO1xuICBmaWx0ZXJWYWx1ZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgRmlsdGVyT3V0cHV0ID0ge1xuICB0b3RhbExlc3NvbnM6IG51bWJlcjtcbiAgY2FtcE5hbWU6IHN0cmluZztcbiAgc2Nob29sTGVzc29uczogTWFwPHN0cmluZywgbnVtYmVyPjtcbiAgc2Nob29sR3JhcGg6IE1hcDxzdHJpbmcsIE1hcDxrZXlvZiBNb250aHMsIG51bWJlcj4+O1xufTtcbiIsImltcG9ydCBBUEkgZnJvbSAnYXBpL2FwaSc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvblR5cGVzLCBEYXRhLCBGaWx0ZXJBY3Rpb25UeXBlcywgRmlsdGVyVHlwZSwgVG9nZ2xlR3JhcGhUeXBlcyB9IGZyb20gJ0B0eXBlcyc7XG5pbXBvcnQgeyBEaXNwYXRjaCB9IGZyb20gJ3JlZHV4JztcblxuY29uc3QgYXBpOiBBUEkgPSBuZXcgQVBJKCk7XG5cbmV4cG9ydCBjb25zdCBnZXREYXRhID0gKCkgPT4ge1xuICByZXR1cm4gKGRpc3BhdGNoOiBEaXNwYXRjaCkgPT4ge1xuICAgIHJldHVybiBhcGlcbiAgICAgIC5mZXRjaERhdGEoKVxuICAgICAgLnRoZW4oKHJlczogUmVzcG9uc2UpID0+IHJlcy5qc29uKCkpXG4gICAgICAudGhlbigoZGF0YTogRGF0YVtdKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKGdldERhdGFTdWNjZXNzKGRhdGEpKTtcbiAgICAgIH0pO1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGNoYW5nZUZpbHRlciA9IChmaWx0ZXJWYWx1ZTogc3RyaW5nLCBmaWx0ZXJBY3Rpb25UeXBlOiBGaWx0ZXJUeXBlKTogQWN0aW9uPHN0cmluZz4gPT4ge1xuICBzd2l0Y2ggKGZpbHRlckFjdGlvblR5cGUpIHtcbiAgICBjYXNlIEZpbHRlclR5cGUuQ0FNUF9GSUxURVI6XG4gICAgICByZXR1cm4geyB0eXBlOiBGaWx0ZXJBY3Rpb25UeXBlcy5DSEFOR0VfQ0FNUCwgcGF5bG9hZDogZmlsdGVyVmFsdWUgfTtcbiAgICBjYXNlIEZpbHRlclR5cGUuQ09VTlRSWV9GSUxURVI6XG4gICAgICByZXR1cm4geyB0eXBlOiBGaWx0ZXJBY3Rpb25UeXBlcy5DSEFOR0VfQ09VTlRSWSwgcGF5bG9hZDogZmlsdGVyVmFsdWUgfTtcbiAgICBjYXNlIEZpbHRlclR5cGUuU0NIT09MX0ZJTFRFUjpcbiAgICAgIHJldHVybiB7IHR5cGU6IEZpbHRlckFjdGlvblR5cGVzLkNIQU5HRV9TQ0hPT0wsIHBheWxvYWQ6IGZpbHRlclZhbHVlIH07XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0b2dnbGVHcmFwaCA9IChcbiAgZ3JhcGhOYW1lOiBzdHJpbmcsXG4gIHRvZ2dsZUdyYXBoQWN0aW9uOiBUb2dnbGVHcmFwaFR5cGVzLFxuKTogQWN0aW9uPHN0cmluZz4gPT4ge1xuICBzd2l0Y2ggKHRvZ2dsZUdyYXBoQWN0aW9uKSB7XG4gICAgY2FzZSBUb2dnbGVHcmFwaFR5cGVzLlNIT1dfR1JBUEg6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRvZ2dsZUdyYXBoVHlwZXMuU0hPV19HUkFQSCxcbiAgICAgICAgcGF5bG9hZDogZ3JhcGhOYW1lLFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBUb2dnbGVHcmFwaFR5cGVzLkhJREVfR1JBUEg6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRvZ2dsZUdyYXBoVHlwZXMuSElERV9HUkFQSCxcbiAgICAgICAgcGF5bG9hZDogZ3JhcGhOYW1lLFxuICAgICAgfTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IGdldERhdGFTdWNjZXNzID0gKGRhdGE6IERhdGFbXSk6IEFjdGlvbjxEYXRhW10+ID0+ICh7XG4gIHR5cGU6IEFjdGlvblR5cGVzLkdFVF9EQVRBLFxuICBwYXlsb2FkOiBbLi4uZGF0YV0sXG59KTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMvZHJvcGRvd24uc2Nzcyc7XG5pbXBvcnQgRHJvcGRvd25BcnJvdyBmcm9tICdhc3NldHMvaWNvbnMvZHJvcGRvd25BcnJvdy5zdmcnO1xuaW1wb3J0IHsgdXNlQXBwRGlzcGF0Y2gsIHVzZUFwcFNlbGVjdG9yIH0gZnJvbSAnQHJlZHV4L2hvb2tzJztcbmltcG9ydCB7IEZpbHRlclR5cGUgfSBmcm9tICdAdHlwZXMnO1xuaW1wb3J0IHsgY2hhbmdlRmlsdGVyIH0gZnJvbSAnQHJlZHV4L2FjdGlvbnMvZGF0YSc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGZpbHRlck5hbWU6IEZpbHRlclR5cGU7XG59O1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd24gPSAoeyBsYWJlbCwgZmlsdGVyTmFtZSB9OiBQcm9wcyk6IEpTWC5FbGVtZW50ID0+IHtcbiAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB7IGRhdGEsIGZpbHRlclZhbHVlIH06IHsgZGF0YTogc3RyaW5nW107IGZpbHRlclZhbHVlOiBzdHJpbmcgfSA9IHVzZUFwcFNlbGVjdG9yKFxuICAgIChzdGF0ZSkgPT4gc3RhdGUuZGF0YVtmaWx0ZXJOYW1lXSxcbiAgKTtcblxuICBjb25zdCBkaXNwYXRjaCA9IHVzZUFwcERpc3BhdGNoKCk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgaWYgKHJlZi5jdXJyZW50ICYmICFyZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpKSB7XG4gICAgICBzZXRPcGVuKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrT3V0c2lkZSwgdHJ1ZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2tPdXRzaWRlLCB0cnVlKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGl0ZW06IHN0cmluZykgPT4ge1xuICAgICAgZGlzcGF0Y2goY2hhbmdlRmlsdGVyKGl0ZW0sIGZpbHRlck5hbWUpKTtcbiAgICB9LFxuICAgIFtkaXNwYXRjaF0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGxhYmVsIGNsYXNzTmFtZT17c3R5bGVzLmxhYmVsfT57bGFiZWx9PC9sYWJlbD5cblxuICAgICAgPGRpdiByZWY9e3JlZn0gY2xhc3NOYW1lPXtzdHlsZXMuZHJvcGRvd25TZWxlY3RvckNvbnRhaW5lcn0gb25DbGljaz17KCkgPT4gc2V0T3Blbighb3Blbil9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmRyb3Bkb3duSGVyb0l0ZW19PlxuICAgICAgICAgIDxzcGFuPntmaWx0ZXJWYWx1ZX08L3NwYW4+XG4gICAgICAgICAgPERyb3Bkb3duQXJyb3cgY2xhc3NOYW1lPXtzdHlsZXMub3BlbmVkQXJyb3d9IC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHtvcGVuICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm9wdGlvbnNDb250YWluZXJ9PlxuICAgICAgICAgICAge2RhdGEubWFwKChpdGVtOiBzdHJpbmcsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDaGFuZ2UoaXRlbSl9IGNsYXNzTmFtZT17c3R5bGVzLm9wdGlvbn0+XG4gICAgICAgICAgICAgICAgICB7aXRlbX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJsYWJlbFwiOlwiRGJfeHBqWHZUTkg1OEtraUUzRDJcIixcImRyb3Bkb3duU2VsZWN0b3JDb250YWluZXJcIjpcIkNRa1ZET3NodUhSN1ZwV3ZtWUxxXCIsXCJvcHRpb25zQ29udGFpbmVyXCI6XCJyOUVzbU92RUMzZWwyWXY2Nm53b1wiLFwib3B0aW9uXCI6XCJ6UG1IQ0lUb3VPelpFRk9GWTFUdlwiLFwiZHJvcGRvd25IZXJvSXRlbVwiOlwia1RqNzdMQm5LaEtyY3hNUmVyaWpcIixcIm9wZW5lZEFycm93XCI6XCJQVDJMODNwSzgzTE1yQTFtZ3VKdlwifTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJ2YXIgbWF0Y2hIdG1sRW50aXR5ID0gLyYoPzphbXB8IzM4fGx0fCM2MHxndHwjNjJ8YXBvc3wjMzl8cXVvdHwjMzR8bmJzcHwjMTYwfGNvcHl8IzE2OXxyZWd8IzE3NHxoZWxsaXB8IzgyMzApOy9nO1xudmFyIGh0bWxFbnRpdGllcyA9IHtcbiAgJyZhbXA7JzogJyYnLFxuICAnJiMzODsnOiAnJicsXG4gICcmbHQ7JzogJzwnLFxuICAnJiM2MDsnOiAnPCcsXG4gICcmZ3Q7JzogJz4nLFxuICAnJiM2MjsnOiAnPicsXG4gICcmYXBvczsnOiBcIidcIixcbiAgJyYjMzk7JzogXCInXCIsXG4gICcmcXVvdDsnOiAnXCInLFxuICAnJiMzNDsnOiAnXCInLFxuICAnJm5ic3A7JzogJyAnLFxuICAnJiMxNjA7JzogJyAnLFxuICAnJmNvcHk7JzogJ8KpJyxcbiAgJyYjMTY5Oyc6ICfCqScsXG4gICcmcmVnOyc6ICfCricsXG4gICcmIzE3NDsnOiAnwq4nLFxuICAnJmhlbGxpcDsnOiAn4oCmJyxcbiAgJyYjODIzMDsnOiAn4oCmJ1xufTtcblxudmFyIHVuZXNjYXBlSHRtbEVudGl0eSA9IGZ1bmN0aW9uIHVuZXNjYXBlSHRtbEVudGl0eShtKSB7XG4gIHJldHVybiBodG1sRW50aXRpZXNbbV07XG59O1xuXG5leHBvcnQgdmFyIHVuZXNjYXBlID0gZnVuY3Rpb24gdW5lc2NhcGUodGV4dCkge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKG1hdGNoSHRtbEVudGl0eSwgdW5lc2NhcGVIdG1sRW50aXR5KTtcbn07IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1bmVzY2FwZSB9IGZyb20gJy4vdW5lc2NhcGUnO1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBiaW5kSTE4bjogJ2xhbmd1YWdlQ2hhbmdlZCcsXG4gIGJpbmRJMThuU3RvcmU6ICcnLFxuICB0cmFuc0VtcHR5Tm9kZVZhbHVlOiAnJyxcbiAgdHJhbnNTdXBwb3J0QmFzaWNIdG1sTm9kZXM6IHRydWUsXG4gIHRyYW5zV3JhcFRleHROb2RlczogJycsXG4gIHRyYW5zS2VlcEJhc2ljSHRtbE5vZGVzRm9yOiBbJ2JyJywgJ3N0cm9uZycsICdpJywgJ3AnXSxcbiAgdXNlU3VzcGVuc2U6IHRydWUsXG4gIHVuZXNjYXBlOiB1bmVzY2FwZVxufTtcbnZhciBpMThuSW5zdGFuY2U7XG5leHBvcnQgdmFyIEkxOG5Db250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRzKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIGRlZmF1bHRPcHRpb25zID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0T3B0aW9ucyksIG9wdGlvbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRzKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgdmFyIFJlcG9ydE5hbWVzcGFjZXMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlcG9ydE5hbWVzcGFjZXMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcG9ydE5hbWVzcGFjZXMpO1xuXG4gICAgdGhpcy51c2VkTmFtZXNwYWNlcyA9IHt9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlcG9ydE5hbWVzcGFjZXMsIFt7XG4gICAga2V5OiBcImFkZFVzZWROYW1lc3BhY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFVzZWROYW1lc3BhY2VzKG5hbWVzcGFjZXMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIG5hbWVzcGFjZXMuZm9yRWFjaChmdW5jdGlvbiAobnMpIHtcbiAgICAgICAgaWYgKCFfdGhpcy51c2VkTmFtZXNwYWNlc1tuc10pIF90aGlzLnVzZWROYW1lc3BhY2VzW25zXSA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VXNlZE5hbWVzcGFjZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlZE5hbWVzcGFjZXMoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy51c2VkTmFtZXNwYWNlcyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlcG9ydE5hbWVzcGFjZXM7XG59KCk7XG5leHBvcnQgZnVuY3Rpb24gc2V0STE4bihpbnN0YW5jZSkge1xuICBpMThuSW5zdGFuY2UgPSBpbnN0YW5jZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRJMThuKCkge1xuICByZXR1cm4gaTE4bkluc3RhbmNlO1xufVxuZXhwb3J0IHZhciBpbml0UmVhY3RJMThuZXh0ID0ge1xuICB0eXBlOiAnM3JkUGFydHknLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KGluc3RhbmNlKSB7XG4gICAgc2V0RGVmYXVsdHMoaW5zdGFuY2Uub3B0aW9ucy5yZWFjdCk7XG4gICAgc2V0STE4bihpbnN0YW5jZSk7XG4gIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gY29tcG9zZUluaXRpYWxQcm9wcyhGb3JDb21wb25lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChjdHgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciBpMThuSW5pdGlhbFByb3BzID0gZ2V0SW5pdGlhbFByb3BzKCk7XG5cbiAgICAgIGlmIChGb3JDb21wb25lbnQuZ2V0SW5pdGlhbFByb3BzKSB7XG4gICAgICAgIEZvckNvbXBvbmVudC5nZXRJbml0aWFsUHJvcHMoY3R4KS50aGVuKGZ1bmN0aW9uIChjb21wb25lbnRzSW5pdGlhbFByb3BzKSB7XG4gICAgICAgICAgcmVzb2x2ZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbXBvbmVudHNJbml0aWFsUHJvcHMpLCBpMThuSW5pdGlhbFByb3BzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShpMThuSW5pdGlhbFByb3BzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsUHJvcHMoKSB7XG4gIHZhciBpMThuID0gZ2V0STE4bigpO1xuICB2YXIgbmFtZXNwYWNlcyA9IGkxOG4ucmVwb3J0TmFtZXNwYWNlcyA/IGkxOG4ucmVwb3J0TmFtZXNwYWNlcy5nZXRVc2VkTmFtZXNwYWNlcygpIDogW107XG4gIHZhciByZXQgPSB7fTtcbiAgdmFyIGluaXRpYWxJMThuU3RvcmUgPSB7fTtcbiAgaTE4bi5sYW5ndWFnZXMuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgIGluaXRpYWxJMThuU3RvcmVbbF0gPSB7fTtcbiAgICBuYW1lc3BhY2VzLmZvckVhY2goZnVuY3Rpb24gKG5zKSB7XG4gICAgICBpbml0aWFsSTE4blN0b3JlW2xdW25zXSA9IGkxOG4uZ2V0UmVzb3VyY2VCdW5kbGUobCwgbnMpIHx8IHt9O1xuICAgIH0pO1xuICB9KTtcbiAgcmV0LmluaXRpYWxJMThuU3RvcmUgPSBpbml0aWFsSTE4blN0b3JlO1xuICByZXQuaW5pdGlhbExhbmd1YWdlID0gaTE4bi5sYW5ndWFnZTtcbiAgcmV0dXJuIHJldDtcbn0iLCJleHBvcnQgZnVuY3Rpb24gd2FybigpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XG4gICAgdmFyIF9jb25zb2xlO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIGFyZ3NbMF0gPSBcInJlYWN0LWkxOG5leHQ6OiBcIi5jb25jYXQoYXJnc1swXSk7XG5cbiAgICAoX2NvbnNvbGUgPSBjb25zb2xlKS53YXJuLmFwcGx5KF9jb25zb2xlLCBhcmdzKTtcbiAgfVxufVxudmFyIGFscmVhZHlXYXJuZWQgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiB3YXJuT25jZSgpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJiBhbHJlYWR5V2FybmVkW2FyZ3NbMF1dKSByZXR1cm47XG4gIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIGFscmVhZHlXYXJuZWRbYXJnc1swXV0gPSBuZXcgRGF0ZSgpO1xuICB3YXJuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbG9hZE5hbWVzcGFjZXMoaTE4biwgbnMsIGNiKSB7XG4gIGkxOG4ubG9hZE5hbWVzcGFjZXMobnMsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaTE4bi5pc0luaXRpYWxpemVkKSB7XG4gICAgICBjYigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaW5pdGlhbGl6ZWQgPSBmdW5jdGlvbiBpbml0aWFsaXplZCgpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaTE4bi5vZmYoJ2luaXRpYWxpemVkJywgaW5pdGlhbGl6ZWQpO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgY2IoKTtcbiAgICAgIH07XG5cbiAgICAgIGkxOG4ub24oJ2luaXRpYWxpemVkJywgaW5pdGlhbGl6ZWQpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9sZEkxOG5leHRIYXNMb2FkZWROYW1lc3BhY2UobnMsIGkxOG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICB2YXIgbG5nID0gaTE4bi5sYW5ndWFnZXNbMF07XG4gIHZhciBmYWxsYmFja0xuZyA9IGkxOG4ub3B0aW9ucyA/IGkxOG4ub3B0aW9ucy5mYWxsYmFja0xuZyA6IGZhbHNlO1xuICB2YXIgbGFzdExuZyA9IGkxOG4ubGFuZ3VhZ2VzW2kxOG4ubGFuZ3VhZ2VzLmxlbmd0aCAtIDFdO1xuICBpZiAobG5nLnRvTG93ZXJDYXNlKCkgPT09ICdjaW1vZGUnKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgbG9hZE5vdFBlbmRpbmcgPSBmdW5jdGlvbiBsb2FkTm90UGVuZGluZyhsLCBuKSB7XG4gICAgdmFyIGxvYWRTdGF0ZSA9IGkxOG4uc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5zdGF0ZVtcIlwiLmNvbmNhdChsLCBcInxcIikuY29uY2F0KG4pXTtcbiAgICByZXR1cm4gbG9hZFN0YXRlID09PSAtMSB8fCBsb2FkU3RhdGUgPT09IDI7XG4gIH07XG5cbiAgaWYgKG9wdGlvbnMuYmluZEkxOG4gJiYgb3B0aW9ucy5iaW5kSTE4bi5pbmRleE9mKCdsYW5ndWFnZUNoYW5naW5nJykgPiAtMSAmJiBpMThuLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IuYmFja2VuZCAmJiBpMThuLmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvICYmICFsb2FkTm90UGVuZGluZyhpMThuLmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvLCBucykpIHJldHVybiBmYWxzZTtcbiAgaWYgKGkxOG4uaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykpIHJldHVybiB0cnVlO1xuICBpZiAoIWkxOG4uc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5iYWNrZW5kIHx8IGkxOG4ub3B0aW9ucy5yZXNvdXJjZXMgJiYgIWkxOG4ub3B0aW9ucy5wYXJ0aWFsQnVuZGxlZExhbmd1YWdlcykgcmV0dXJuIHRydWU7XG4gIGlmIChsb2FkTm90UGVuZGluZyhsbmcsIG5zKSAmJiAoIWZhbGxiYWNrTG5nIHx8IGxvYWROb3RQZW5kaW5nKGxhc3RMbmcsIG5zKSkpIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNMb2FkZWROYW1lc3BhY2UobnMsIGkxOG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gIGlmICghaTE4bi5sYW5ndWFnZXMgfHwgIWkxOG4ubGFuZ3VhZ2VzLmxlbmd0aCkge1xuICAgIHdhcm5PbmNlKCdpMThuLmxhbmd1YWdlcyB3ZXJlIHVuZGVmaW5lZCBvciBlbXB0eScsIGkxOG4ubGFuZ3VhZ2VzKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBpc05ld2VySTE4bmV4dCA9IGkxOG4ub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlICE9PSB1bmRlZmluZWQ7XG5cbiAgaWYgKCFpc05ld2VySTE4bmV4dCkge1xuICAgIHJldHVybiBvbGRJMThuZXh0SGFzTG9hZGVkTmFtZXNwYWNlKG5zLCBpMThuLCBvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBpMThuLmhhc0xvYWRlZE5hbWVzcGFjZShucywge1xuICAgIHByZWNoZWNrOiBmdW5jdGlvbiBwcmVjaGVjayhpMThuSW5zdGFuY2UsIGxvYWROb3RQZW5kaW5nKSB7XG4gICAgICBpZiAob3B0aW9ucy5iaW5kSTE4biAmJiBvcHRpb25zLmJpbmRJMThuLmluZGV4T2YoJ2xhbmd1YWdlQ2hhbmdpbmcnKSA+IC0xICYmIGkxOG5JbnN0YW5jZS5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLmJhY2tlbmQgJiYgaTE4bkluc3RhbmNlLmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvICYmICFsb2FkTm90UGVuZGluZyhpMThuSW5zdGFuY2UuaXNMYW5ndWFnZUNoYW5naW5nVG8sIG5zKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSB7XG4gIHJldHVybiBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgKHR5cGVvZiBDb21wb25lbnQgPT09ICdzdHJpbmcnICYmIENvbXBvbmVudC5sZW5ndGggPiAwID8gQ29tcG9uZW50IDogJ1Vua25vd24nKTtcbn0iLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSB7IHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsgfSBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEkxOG4sIGdldERlZmF1bHRzLCBSZXBvcnROYW1lc3BhY2VzLCBJMThuQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCc7XG5pbXBvcnQgeyB3YXJuT25jZSwgbG9hZE5hbWVzcGFjZXMsIGhhc0xvYWRlZE5hbWVzcGFjZSB9IGZyb20gJy4vdXRpbHMnO1xuXG52YXIgdXNlUHJldmlvdXMgPSBmdW5jdGlvbiB1c2VQcmV2aW91cyh2YWx1ZSwgaWdub3JlKSB7XG4gIHZhciByZWYgPSB1c2VSZWYoKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZWYuY3VycmVudCA9IGlnbm9yZSA/IHJlZi5jdXJyZW50IDogdmFsdWU7XG4gIH0sIFt2YWx1ZSwgaWdub3JlXSk7XG4gIHJldHVybiByZWYuY3VycmVudDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VUcmFuc2xhdGlvbihucykge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgaTE4bkZyb21Qcm9wcyA9IHByb3BzLmkxOG47XG5cbiAgdmFyIF9yZWYgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KSB8fCB7fSxcbiAgICAgIGkxOG5Gcm9tQ29udGV4dCA9IF9yZWYuaTE4bixcbiAgICAgIGRlZmF1bHROU0Zyb21Db250ZXh0ID0gX3JlZi5kZWZhdWx0TlM7XG5cbiAgdmFyIGkxOG4gPSBpMThuRnJvbVByb3BzIHx8IGkxOG5Gcm9tQ29udGV4dCB8fCBnZXRJMThuKCk7XG4gIGlmIChpMThuICYmICFpMThuLnJlcG9ydE5hbWVzcGFjZXMpIGkxOG4ucmVwb3J0TmFtZXNwYWNlcyA9IG5ldyBSZXBvcnROYW1lc3BhY2VzKCk7XG5cbiAgaWYgKCFpMThuKSB7XG4gICAgd2Fybk9uY2UoJ1lvdSB3aWxsIG5lZWQgdG8gcGFzcyBpbiBhbiBpMThuZXh0IGluc3RhbmNlIGJ5IHVzaW5nIGluaXRSZWFjdEkxOG5leHQnKTtcblxuICAgIHZhciBub3RSZWFkeVQgPSBmdW5jdGlvbiBub3RSZWFkeVQoaykge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaykgPyBrW2subGVuZ3RoIC0gMV0gOiBrO1xuICAgIH07XG5cbiAgICB2YXIgcmV0Tm90UmVhZHkgPSBbbm90UmVhZHlULCB7fSwgZmFsc2VdO1xuICAgIHJldE5vdFJlYWR5LnQgPSBub3RSZWFkeVQ7XG4gICAgcmV0Tm90UmVhZHkuaTE4biA9IHt9O1xuICAgIHJldE5vdFJlYWR5LnJlYWR5ID0gZmFsc2U7XG4gICAgcmV0dXJuIHJldE5vdFJlYWR5O1xuICB9XG5cbiAgaWYgKGkxOG4ub3B0aW9ucy5yZWFjdCAmJiBpMThuLm9wdGlvbnMucmVhY3Qud2FpdCAhPT0gdW5kZWZpbmVkKSB3YXJuT25jZSgnSXQgc2VlbXMgeW91IGFyZSBzdGlsbCB1c2luZyB0aGUgb2xkIHdhaXQgb3B0aW9uLCB5b3UgbWF5IG1pZ3JhdGUgdG8gdGhlIG5ldyB1c2VTdXNwZW5zZSBiZWhhdmlvdXIuJyk7XG5cbiAgdmFyIGkxOG5PcHRpb25zID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGdldERlZmF1bHRzKCkpLCBpMThuLm9wdGlvbnMucmVhY3QpLCBwcm9wcyk7XG5cbiAgdmFyIHVzZVN1c3BlbnNlID0gaTE4bk9wdGlvbnMudXNlU3VzcGVuc2UsXG4gICAgICBrZXlQcmVmaXggPSBpMThuT3B0aW9ucy5rZXlQcmVmaXg7XG4gIHZhciBuYW1lc3BhY2VzID0gbnMgfHwgZGVmYXVsdE5TRnJvbUNvbnRleHQgfHwgaTE4bi5vcHRpb25zICYmIGkxOG4ub3B0aW9ucy5kZWZhdWx0TlM7XG4gIG5hbWVzcGFjZXMgPSB0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBbbmFtZXNwYWNlc10gOiBuYW1lc3BhY2VzIHx8IFsndHJhbnNsYXRpb24nXTtcbiAgaWYgKGkxOG4ucmVwb3J0TmFtZXNwYWNlcy5hZGRVc2VkTmFtZXNwYWNlcykgaTE4bi5yZXBvcnROYW1lc3BhY2VzLmFkZFVzZWROYW1lc3BhY2VzKG5hbWVzcGFjZXMpO1xuICB2YXIgcmVhZHkgPSAoaTE4bi5pc0luaXRpYWxpemVkIHx8IGkxOG4uaW5pdGlhbGl6ZWRTdG9yZU9uY2UpICYmIG5hbWVzcGFjZXMuZXZlcnkoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gaGFzTG9hZGVkTmFtZXNwYWNlKG4sIGkxOG4sIGkxOG5PcHRpb25zKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZ2V0VCgpIHtcbiAgICByZXR1cm4gaTE4bi5nZXRGaXhlZFQobnVsbCwgaTE4bk9wdGlvbnMubnNNb2RlID09PSAnZmFsbGJhY2snID8gbmFtZXNwYWNlcyA6IG5hbWVzcGFjZXNbMF0sIGtleVByZWZpeCk7XG4gIH1cblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZ2V0VCksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIHQgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0VCA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGpvaW5lZE5TID0gbmFtZXNwYWNlcy5qb2luKCk7XG4gIHZhciBwcmV2aW91c0pvaW5lZE5TID0gdXNlUHJldmlvdXMoam9pbmVkTlMpO1xuICB2YXIgaXNNb3VudGVkID0gdXNlUmVmKHRydWUpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBiaW5kSTE4biA9IGkxOG5PcHRpb25zLmJpbmRJMThuLFxuICAgICAgICBiaW5kSTE4blN0b3JlID0gaTE4bk9wdGlvbnMuYmluZEkxOG5TdG9yZTtcbiAgICBpc01vdW50ZWQuY3VycmVudCA9IHRydWU7XG5cbiAgICBpZiAoIXJlYWR5ICYmICF1c2VTdXNwZW5zZSkge1xuICAgICAgbG9hZE5hbWVzcGFjZXMoaTE4biwgbmFtZXNwYWNlcywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNNb3VudGVkLmN1cnJlbnQpIHNldFQoZ2V0VCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVhZHkgJiYgcHJldmlvdXNKb2luZWROUyAmJiBwcmV2aW91c0pvaW5lZE5TICE9PSBqb2luZWROUyAmJiBpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgc2V0VChnZXRUKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBib3VuZFJlc2V0KCkge1xuICAgICAgaWYgKGlzTW91bnRlZC5jdXJyZW50KSBzZXRUKGdldFQpO1xuICAgIH1cblxuICAgIGlmIChiaW5kSTE4biAmJiBpMThuKSBpMThuLm9uKGJpbmRJMThuLCBib3VuZFJlc2V0KTtcbiAgICBpZiAoYmluZEkxOG5TdG9yZSAmJiBpMThuKSBpMThuLnN0b3JlLm9uKGJpbmRJMThuU3RvcmUsIGJvdW5kUmVzZXQpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc01vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgaWYgKGJpbmRJMThuICYmIGkxOG4pIGJpbmRJMThuLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gaTE4bi5vZmYoZSwgYm91bmRSZXNldCk7XG4gICAgICB9KTtcbiAgICAgIGlmIChiaW5kSTE4blN0b3JlICYmIGkxOG4pIGJpbmRJMThuU3RvcmUuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBpMThuLnN0b3JlLm9mZihlLCBib3VuZFJlc2V0KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0sIFtpMThuLCBqb2luZWROU10pO1xuICB2YXIgaXNJbml0aWFsID0gdXNlUmVmKHRydWUpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc01vdW50ZWQuY3VycmVudCAmJiAhaXNJbml0aWFsLmN1cnJlbnQpIHtcbiAgICAgIHNldFQoZ2V0VCk7XG4gICAgfVxuXG4gICAgaXNJbml0aWFsLmN1cnJlbnQgPSBmYWxzZTtcbiAgfSwgW2kxOG4sIGtleVByZWZpeF0pO1xuICB2YXIgcmV0ID0gW3QsIGkxOG4sIHJlYWR5XTtcbiAgcmV0LnQgPSB0O1xuICByZXQuaTE4biA9IGkxOG47XG4gIHJldC5yZWFkeSA9IHJlYWR5O1xuICBpZiAocmVhZHkpIHJldHVybiByZXQ7XG4gIGlmICghcmVhZHkgJiYgIXVzZVN1c3BlbnNlKSByZXR1cm4gcmV0O1xuICB0aHJvdyBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIGxvYWROYW1lc3BhY2VzKGkxOG4sIG5hbWVzcGFjZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuXG4vKipcclxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjYWN0aW9uXHJcbiAqL1xudmFyIEFjdGlvbjtcblxuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXHJcbiAgICogQSBQT1AgaW5kaWNhdGVzIGEgY2hhbmdlIHRvIGFuIGFyYml0cmFyeSBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaFxyXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXHJcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXHJcbiAgICpcclxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXHJcbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxyXG4gICAqIEEgUFVTSCBpbmRpY2F0ZXMgYSBuZXcgZW50cnkgYmVpbmcgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2ggYXMgd2hlblxyXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcclxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cclxuICAgKi9cblxuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxyXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXHJcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxyXG4gICAqL1xuXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcblxudmFyIHJlYWRPbmx5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iajtcbn07XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxudmFyIEJlZm9yZVVubG9hZEV2ZW50VHlwZSA9ICdiZWZvcmV1bmxvYWQnO1xudmFyIEhhc2hDaGFuZ2VFdmVudFR5cGUgPSAnaGFzaGNoYW5nZSc7XG52YXIgUG9wU3RhdGVFdmVudFR5cGUgPSAncG9wc3RhdGUnO1xuLyoqXHJcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXHJcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XHJcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkd2luZG93ID0gX29wdGlvbnMud2luZG93LFxuICAgICAgd2luZG93ID0gX29wdGlvbnMkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zJHdpbmRvdztcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICBmdW5jdGlvbiBnZXRJbmRleEFuZExvY2F0aW9uKCkge1xuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgICAgICBuZXh0SW5kZXggPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblswXSxcbiAgICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlciB3aGF0XG4gICAgICAgICAgLy8gaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24yWzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjJbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9IC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuXG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc2VhcmNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCkge1xuICAgIHJldHVybiBbe1xuICAgICAgdXNyOiBuZXh0TG9jYXRpb24uc3RhdGUsXG4gICAgICBrZXk6IG5leHRMb2NhdGlvbi5rZXksXG4gICAgICBpZHg6IGluZGV4XG4gICAgfSwgY3JlYXRlSHJlZihuZXh0TG9jYXRpb24pXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFsbG93VHgoYWN0aW9uLCBsb2NhdGlvbiwgcmV0cnkpIHtcbiAgICByZXR1cm4gIWJsb2NrZXJzLmxlbmd0aCB8fCAoYmxvY2tlcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgIHJldHJ5OiByZXRyeVxuICAgIH0pLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVR4KG5leHRBY3Rpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuXG4gICAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMyA9IGdldEluZGV4QW5kTG9jYXRpb24oKTtcblxuICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzBdO1xuICAgIGxvY2F0aW9uID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzFdO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIHZhciBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCArIDEpLFxuICAgICAgICAgIGhpc3RvcnlTdGF0ZSA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVclswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuICAgICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cblxuXG4gICAgICB0cnkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgICB9XG5cbiAgICAgIGFwcGx5VHgobmV4dEFjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcmVwbGFjZSh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMiA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4KSxcbiAgICAgICAgICBoaXN0b3J5U3RhdGUgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIyWzBdLFxuICAgICAgICAgIHVybCA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVcjJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuXG5cbiAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgJycsIHVybCk7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhkZWx0YSk7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHZhciB1bmJsb2NrID0gYmxvY2tlcnMucHVzaChibG9ja2VyKTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVuYmxvY2soKTsgLy8gUmVtb3ZlIHRoZSBiZWZvcmV1bmxvYWQgbGlzdGVuZXIgc28gdGhlIGRvY3VtZW50IG1heVxuICAgICAgICAvLyBzdGlsbCBiZSBzYWx2YWdlYWJsZSBpbiB0aGUgcGFnZWhpZGUgZXZlbnQuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyN1bmxvYWRpbmctZG9jdW1lbnRzXG5cbiAgICAgICAgaWYgKCFibG9ja2Vycy5sZW5ndGgpIHtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxyXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxyXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxyXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xyXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9uczIgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMyJHdpbmRvdyA9IF9vcHRpb25zMi53aW5kb3csXG4gICAgICB3aW5kb3cgPSBfb3B0aW9uczIkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zMiR3aW5kb3c7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG5cbiAgZnVuY3Rpb24gZ2V0SW5kZXhBbmRMb2NhdGlvbigpIHtcbiAgICB2YXIgX3BhcnNlUGF0aCA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpLFxuICAgICAgICBfcGFyc2VQYXRoJHBhdGhuYW1lID0gX3BhcnNlUGF0aC5wYXRobmFtZSxcbiAgICAgICAgcGF0aG5hbWUgPSBfcGFyc2VQYXRoJHBhdGhuYW1lID09PSB2b2lkIDAgPyAnLycgOiBfcGFyc2VQYXRoJHBhdGhuYW1lLFxuICAgICAgICBfcGFyc2VQYXRoJHNlYXJjaCA9IF9wYXJzZVBhdGguc2VhcmNoLFxuICAgICAgICBzZWFyY2ggPSBfcGFyc2VQYXRoJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcGFyc2VQYXRoJHNlYXJjaCxcbiAgICAgICAgX3BhcnNlUGF0aCRoYXNoID0gX3BhcnNlUGF0aC5oYXNoLFxuICAgICAgICBoYXNoID0gX3BhcnNlUGF0aCRoYXNoID09PSB2b2lkIDAgPyAnJyA6IF9wYXJzZVBhdGgkaGFzaDtcblxuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjQgPSBnZXRJbmRleEFuZExvY2F0aW9uKCksXG4gICAgICAgICAgbmV4dEluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb240WzBdLFxuICAgICAgICAgIG5leHRMb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uNFsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlclxuICAgICAgICAgIC8vIHdoYXQgaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTsgLy8gcG9wc3RhdGUgZG9lcyBub3QgZmlyZSBvbiBoYXNoY2hhbmdlIGluIElFIDExIGFuZCBvbGQgKHRyaWRlbnQpIEVkZ2VcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvQVBJL1dpbmRvdy9wb3BzdGF0ZV9ldmVudFxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudFR5cGUsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2dldEluZGV4QW5kTG9jYXRpb241ID0gZ2V0SW5kZXhBbmRMb2NhdGlvbigpLFxuICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjVbMV07IC8vIElnbm9yZSBleHRyYW5lb3VzIGhhc2hjaGFuZ2UgZXZlbnRzLlxuXG5cbiAgICBpZiAoY3JlYXRlUGF0aChuZXh0TG9jYXRpb24pICE9PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkge1xuICAgICAgaGFuZGxlUG9wKCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uNiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb242WzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjZbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCYXNlSHJlZigpIHtcbiAgICB2YXIgYmFzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykge1xuICAgIHJldHVybiBnZXRCYXNlSHJlZigpICsgJyMnICsgKHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBoYXNoOiAnJyxcbiAgICAgIHNlYXJjaDogJydcbiAgICB9LCB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlQW5kVXJsKG5leHRMb2NhdGlvbiwgaW5kZXgpIHtcbiAgICByZXR1cm4gW3tcbiAgICAgIHVzcjogbmV4dExvY2F0aW9uLnN0YXRlLFxuICAgICAga2V5OiBuZXh0TG9jYXRpb24ua2V5LFxuICAgICAgaWR4OiBpbmRleFxuICAgIH0sIGNyZWF0ZUhyZWYobmV4dExvY2F0aW9uKV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uKSB7XG4gICAgYWN0aW9uID0gbmV4dEFjdGlvbjtcblxuICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjcgPSBnZXRJbmRleEFuZExvY2F0aW9uKCk7XG5cbiAgICBpbmRleCA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1swXTtcbiAgICBsb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1sxXTtcbiAgICBsaXN0ZW5lcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcHVzaCh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobmV4dExvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMyA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4ICsgMSksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyM1swXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIzWzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcbiAgICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCAnJywgdXJsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgICAgfVxuXG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG5leHRMb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnJlcGxhY2UoXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIikgOiB2b2lkIDA7XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgdmFyIF9nZXRIaXN0b3J5U3RhdGVBbmRVcjQgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyNFswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXI0WzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcblxuXG4gICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnbyhkZWx0YSkge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28oZGVsdGEpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICB9LFxuXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGJhY2s6IGZ1bmN0aW9uIGJhY2soKSB7XG4gICAgICBnbygtMSk7XG4gICAgfSxcbiAgICBmb3J3YXJkOiBmdW5jdGlvbiBmb3J3YXJkKCkge1xuICAgICAgZ28oMSk7XG4gICAgfSxcbiAgICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIGJsb2NrOiBmdW5jdGlvbiBibG9jayhibG9ja2VyKSB7XG4gICAgICB2YXIgdW5ibG9jayA9IGJsb2NrZXJzLnB1c2goYmxvY2tlcik7XG5cbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB1bmJsb2NrKCk7IC8vIFJlbW92ZSB0aGUgYmVmb3JldW5sb2FkIGxpc3RlbmVyIHNvIHRoZSBkb2N1bWVudCBtYXlcbiAgICAgICAgLy8gc3RpbGwgYmUgc2FsdmFnZWFibGUgaW4gdGhlIHBhZ2VoaWRlIGV2ZW50LlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jdW5sb2FkaW5nLWRvY3VtZW50c1xuXG4gICAgICAgIGlmICghYmxvY2tlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcclxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxyXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZW1lbW9yeWhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zMyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9uczMkaW5pdGlhbEVudHIgPSBfb3B0aW9uczMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9vcHRpb25zMyRpbml0aWFsRW50ciA9PT0gdm9pZCAwID8gWycvJ10gOiBfb3B0aW9uczMkaW5pdGlhbEVudHIsXG4gICAgICBpbml0aWFsSW5kZXggPSBfb3B0aW9uczMuaW5pdGlhbEluZGV4O1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICB2YXIgbG9jYXRpb24gPSByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogJy8nLFxuICAgICAgc2VhcmNoOiAnJyxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc3RhdGU6IG51bGwsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSwgdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IHBhcnNlUGF0aChlbnRyeSkgOiBlbnRyeSkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsIFwiUmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGNyZWF0ZU1lbW9yeUhpc3RvcnkoeyBpbml0aWFsRW50cmllcyB9KSAoaW52YWxpZCBlbnRyeTogXCIgKyBKU09OLnN0cmluZ2lmeShlbnRyeSkgKyBcIilcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9KTtcbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4ID09IG51bGwgPyBlbnRyaWVzLmxlbmd0aCAtIDEgOiBpbml0aWFsSW5kZXgsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICB2YXIgbG9jYXRpb24gPSBlbnRyaWVzW2luZGV4XTtcbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBoYXNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuICAgIGxvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIGVudHJpZXMubGVuZ3RoLCBuZXh0TG9jYXRpb24pO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeS5yZXBsYWNlKFwiICsgSlNPTi5zdHJpbmdpZnkodG8pICsgXCIpXCIpIDogdm9pZCAwO1xuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGluZGV4ICsgZGVsdGEsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHJldHVybiBibG9ja2Vycy5wdXNoKGJsb2NrZXIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuXG5mdW5jdGlvbiBwcm9tcHRCZWZvcmVVbmxvYWQoZXZlbnQpIHtcbiAgLy8gQ2FuY2VsIHRoZSBldmVudC5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gQ2hyb21lIChhbmQgbGVnYWN5IElFKSByZXF1aXJlcyByZXR1cm5WYWx1ZSB0byBiZSBzZXQuXG5cbiAgZXZlbnQucmV0dXJuVmFsdWUgPSAnJztcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRzKCkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIGhhbmRsZXJzLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgcHVzaDogZnVuY3Rpb24gcHVzaChmbikge1xuICAgICAgaGFuZGxlcnMucHVzaChmbik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVyICE9PSBmbjtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY2FsbDogZnVuY3Rpb24gY2FsbChhcmcpIHtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbiAmJiBmbihhcmcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZXBhdGhcclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIHZhciBfcmVmJHBhdGhuYW1lID0gX3JlZi5wYXRobmFtZSxcbiAgICAgIHBhdGhuYW1lID0gX3JlZiRwYXRobmFtZSA9PT0gdm9pZCAwID8gJy8nIDogX3JlZiRwYXRobmFtZSxcbiAgICAgIF9yZWYkc2VhcmNoID0gX3JlZi5zZWFyY2gsXG4gICAgICBzZWFyY2ggPSBfcmVmJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHNlYXJjaCxcbiAgICAgIF9yZWYkaGFzaCA9IF9yZWYuaGFzaCxcbiAgICAgIGhhc2ggPSBfcmVmJGhhc2ggPT09IHZvaWQgMCA/ICcnIDogX3JlZiRoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcclxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjcGFyc2VwYXRoXHJcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGFyc2VkUGF0aCA9IHt9O1xuXG4gIGlmIChwYXRoKSB7XG4gICAgdmFyIGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuXG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG5cbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cblxuZXhwb3J0IHsgQWN0aW9uLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuMy4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCB7IHBhcnNlUGF0aCwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgQWN0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5leHBvcnQgeyBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCBjcmVhdGVFbGVtZW50LCB1c2VTdGF0ZSwgdXNlTGF5b3V0RWZmZWN0LCBDaGlsZHJlbiwgaXNWYWxpZEVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5cbmNvbnN0IExvY2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cblxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgUm91dGVyIVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleSwgY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQgJiYgIWFscmVhZHlXYXJuZWRba2V5XSkge1xuICAgIGFscmVhZHlXYXJuZWRba2V5XSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCB3aXRoIHBhcmFtcyBpbnRlcnBvbGF0ZWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNnZW5lcmF0ZXBhdGhcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoLnJlcGxhY2UoLzooXFx3KykvZywgKF8sIGtleSkgPT4ge1xuICAgICEocGFyYW1zW2tleV0gIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gcGFyYW1zW2tleV07XG4gIH0pLnJlcGxhY2UoL1xcLypcXCokLywgXyA9PiBwYXJhbXNbXCIqXCJdID09IG51bGwgPyBcIlwiIDogcGFyYW1zW1wiKlwiXS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSk7XG59XG4vKipcbiAqIEEgUm91dGVNYXRjaCBjb250YWlucyBpbmZvIGFib3V0IGhvdyBhIHJvdXRlIG1hdGNoZWQgYSBVUkwuXG4gKi9cblxuLyoqXG4gKiBNYXRjaGVzIHRoZSBnaXZlbiByb3V0ZXMgdG8gYSBsb2NhdGlvbiBhbmQgcmV0dXJucyB0aGUgbWF0Y2ggZGF0YS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI21hdGNocm91dGVzXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbiA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgbGV0IHBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIiwgYmFzZW5hbWUpO1xuXG4gIGlmIChwYXRobmFtZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7XG4gIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTtcbiAgbGV0IG1hdGNoZXMgPSBudWxsO1xuXG4gIGZvciAobGV0IGkgPSAwOyBtYXRjaGVzID09IG51bGwgJiYgaSA8IGJyYW5jaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgbWF0Y2hlcyA9IG1hdGNoUm91dGVCcmFuY2goYnJhbmNoZXNbaV0sIHBhdGhuYW1lKTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuUm91dGVzKHJvdXRlcywgYnJhbmNoZXMsIHBhcmVudHNNZXRhLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChicmFuY2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgYnJhbmNoZXMgPSBbXTtcbiAgfVxuXG4gIGlmIChwYXJlbnRzTWV0YSA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50c01ldGEgPSBbXTtcbiAgfVxuXG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gXCJcIjtcbiAgfVxuXG4gIHJvdXRlcy5mb3JFYWNoKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgbWV0YSA9IHtcbiAgICAgIHJlbGF0aXZlUGF0aDogcm91dGUucGF0aCB8fCBcIlwiLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuSW5kZXg6IGluZGV4LFxuICAgICAgcm91dGVcbiAgICB9O1xuXG4gICAgaWYgKG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAhbWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChwYXJlbnRQYXRoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBYnNvbHV0ZSByb3V0ZSBwYXRoIFxcXCJcIiArIG1ldGEucmVsYXRpdmVQYXRoICsgXCJcXFwiIG5lc3RlZCB1bmRlciBwYXRoIFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIiBpcyBub3QgdmFsaWQuIEFuIGFic29sdXRlIGNoaWxkIHJvdXRlIHBhdGggXCIpICsgXCJtdXN0IHN0YXJ0IHdpdGggdGhlIGNvbWJpbmVkIHBhdGggb2YgYWxsIGl0cyBwYXJlbnQgcm91dGVzLlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTsgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5IHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuXG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICEocm91dGUuaW5kZXggIT09IHRydWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkluZGV4IHJvdXRlcyBtdXN0IG5vdCBoYXZlIGNoaWxkIHJvdXRlcy4gUGxlYXNlIHJlbW92ZSBcIiArIChcImFsbCBjaGlsZCByb3V0ZXMgZnJvbSByb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIuXCIpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBmbGF0dGVuUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBicmFuY2hlcywgcm91dGVzTWV0YSwgcGF0aCk7XG4gICAgfSAvLyBSb3V0ZXMgd2l0aG91dCBhIHBhdGggc2hvdWxkbid0IGV2ZXIgbWF0Y2ggYnkgdGhlbXNlbHZlcyB1bmxlc3MgdGhleSBhcmVcbiAgICAvLyBpbmRleCByb3V0ZXMsIHNvIGRvbid0IGFkZCB0aGVtIHRvIHRoZSBsaXN0IG9mIHBvc3NpYmxlIGJyYW5jaGVzLlxuXG5cbiAgICBpZiAocm91dGUucGF0aCA9PSBudWxsICYmICFyb3V0ZS5pbmRleCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGJyYW5jaGVzLnB1c2goe1xuICAgICAgcGF0aCxcbiAgICAgIHNjb3JlOiBjb21wdXRlU2NvcmUocGF0aCwgcm91dGUuaW5kZXgpLFxuICAgICAgcm91dGVzTWV0YVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGJyYW5jaGVzO1xufVxuXG5mdW5jdGlvbiByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcykge1xuICBicmFuY2hlcy5zb3J0KChhLCBiKSA9PiBhLnNjb3JlICE9PSBiLnNjb3JlID8gYi5zY29yZSAtIGEuc2NvcmUgLy8gSGlnaGVyIHNjb3JlIGZpcnN0XG4gIDogY29tcGFyZUluZGV4ZXMoYS5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCksIGIucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpKSk7XG59XG5cbmNvbnN0IHBhcmFtUmUgPSAvXjpcXHcrJC87XG5jb25zdCBkeW5hbWljU2VnbWVudFZhbHVlID0gMztcbmNvbnN0IGluZGV4Um91dGVWYWx1ZSA9IDI7XG5jb25zdCBlbXB0eVNlZ21lbnRWYWx1ZSA9IDE7XG5jb25zdCBzdGF0aWNTZWdtZW50VmFsdWUgPSAxMDtcbmNvbnN0IHNwbGF0UGVuYWx0eSA9IC0yO1xuXG5jb25zdCBpc1NwbGF0ID0gcyA9PiBzID09PSBcIipcIjtcblxuZnVuY3Rpb24gY29tcHV0ZVNjb3JlKHBhdGgsIGluZGV4KSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBsZXQgaW5pdGlhbFNjb3JlID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gIGlmIChzZWdtZW50cy5zb21lKGlzU3BsYXQpKSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IHNwbGF0UGVuYWx0eTtcbiAgfVxuXG4gIGlmIChpbmRleCkge1xuICAgIGluaXRpYWxTY29yZSArPSBpbmRleFJvdXRlVmFsdWU7XG4gIH1cblxuICByZXR1cm4gc2VnbWVudHMuZmlsdGVyKHMgPT4gIWlzU3BsYXQocykpLnJlZHVjZSgoc2NvcmUsIHNlZ21lbnQpID0+IHNjb3JlICsgKHBhcmFtUmUudGVzdChzZWdtZW50KSA/IGR5bmFtaWNTZWdtZW50VmFsdWUgOiBzZWdtZW50ID09PSBcIlwiID8gZW1wdHlTZWdtZW50VmFsdWUgOiBzdGF0aWNTZWdtZW50VmFsdWUpLCBpbml0aWFsU2NvcmUpO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlSW5kZXhlcyhhLCBiKSB7XG4gIGxldCBzaWJsaW5ncyA9IGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLnNsaWNlKDAsIC0xKS5ldmVyeSgobiwgaSkgPT4gbiA9PT0gYltpXSk7XG4gIHJldHVybiBzaWJsaW5ncyA/IC8vIElmIHR3byByb3V0ZXMgYXJlIHNpYmxpbmdzLCB3ZSBzaG91bGQgdHJ5IHRvIG1hdGNoIHRoZSBlYXJsaWVyIHNpYmxpbmdcbiAgLy8gZmlyc3QuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBoYXZlIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgdGhlIG1hdGNoaW5nXG4gIC8vIGJlaGF2aW9yIGJ5IHNpbXBseSBwdXR0aW5nIHJvdXRlcyB3aXRoIGlkZW50aWNhbCBwYXRocyBpbiB0aGUgb3JkZXIgdGhleVxuICAvLyB3YW50IHRoZW0gdHJpZWQuXG4gIGFbYS5sZW5ndGggLSAxXSAtIGJbYi5sZW5ndGggLSAxXSA6IC8vIE90aGVyd2lzZSwgaXQgZG9lc24ndCByZWFsbHkgbWFrZSBzZW5zZSB0byByYW5rIG5vbi1zaWJsaW5ncyBieSBpbmRleCxcbiAgLy8gc28gdGhleSBzb3J0IGVxdWFsbHkuXG4gIDA7XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGVCcmFuY2goYnJhbmNoLCBwYXRobmFtZSkge1xuICBsZXQge1xuICAgIHJvdXRlc01ldGFcbiAgfSA9IGJyYW5jaDtcbiAgbGV0IG1hdGNoZWRQYXJhbXMgPSB7fTtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzTWV0YS5sZW5ndGg7ICsraSkge1xuICAgIGxldCBtZXRhID0gcm91dGVzTWV0YVtpXTtcbiAgICBsZXQgZW5kID0gaSA9PT0gcm91dGVzTWV0YS5sZW5ndGggLSAxO1xuICAgIGxldCByZW1haW5pbmdQYXRobmFtZSA9IG1hdGNoZWRQYXRobmFtZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKG1hdGNoZWRQYXRobmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoUGF0aCh7XG4gICAgICBwYXRoOiBtZXRhLnJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IG1ldGEuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVuZFxuICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICBPYmplY3QuYXNzaWduKG1hdGNoZWRQYXJhbXMsIG1hdGNoLnBhcmFtcyk7XG4gICAgbGV0IHJvdXRlID0gbWV0YS5yb3V0ZTtcbiAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgcGFyYW1zOiBtYXRjaGVkUGFyYW1zLFxuICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgICAgcGF0aG5hbWVCYXNlOiBub3JtYWxpemVQYXRobmFtZShqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSkpLFxuICAgICAgcm91dGVcbiAgICB9KTtcblxuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIEEgUGF0aFBhdHRlcm4gaXMgdXNlZCB0byBtYXRjaCBvbiBzb21lIHBvcnRpb24gb2YgYSBVUkwgcGF0aG5hbWUuXG4gKi9cblxuXG4vKipcbiAqIFBlcmZvcm1zIHBhdHRlcm4gbWF0Y2hpbmcgb24gYSBVUkwgcGF0aG5hbWUgYW5kIHJldHVybnMgaW5mb3JtYXRpb24gYWJvdXRcbiAqIHRoZSBtYXRjaC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI21hdGNocGF0aFxuICovXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiKSB7XG4gICAgcGF0dGVybiA9IHtcbiAgICAgIHBhdGg6IHBhdHRlcm4sXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgIGVuZDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBsZXQgW21hdGNoZXIsIHBhcmFtTmFtZXNdID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKTtcbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zID0gcGFyYW1OYW1lcy5yZWR1Y2UoKG1lbW8sIHBhcmFtTmFtZSwgaW5kZXgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBhdGhuYW1lQmFzZSBoZXJlIHVzaW5nIHRoZSByYXcgc3BsYXQgdmFsdWVcbiAgICAvLyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmFtc1tcIipcIl0gbGF0ZXIgYmVjYXVzZSBpdCB3aWxsIGJlIGRlY29kZWQgdGhlblxuICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICBsZXQgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCI7XG4gICAgICBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUuc2xpY2UoMCwgbWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCAtIHNwbGF0VmFsdWUubGVuZ3RoKS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gICAgfVxuXG4gICAgbWVtb1twYXJhbU5hbWVdID0gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCIsIHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSxcbiAgICBwYXRobmFtZUJhc2UsXG4gICAgcGF0dGVyblxuICB9O1xufVxuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoLCBjYXNlU2Vuc2l0aXZlLCBlbmQpIHtcbiAgaWYgKGNhc2VTZW5zaXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHBhdGggPT09IFwiKlwiIHx8ICFwYXRoLmVuZHNXaXRoKFwiKlwiKSB8fCBwYXRoLmVuZHNXaXRoKFwiLypcIiksIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKSA6IHZvaWQgMDtcbiAgbGV0IHBhcmFtTmFtZXMgPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9IFwiXlwiICsgcGF0aC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAucmVwbGFjZSgvXlxcLyovLCBcIi9cIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgL1xuICAucmVwbGFjZSgvW1xcXFwuKiteJD97fXwoKVtcXF1dL2csIFwiXFxcXCQmXCIpIC8vIEVzY2FwZSBzcGVjaWFsIHJlZ2V4IGNoYXJzXG4gIC5yZXBsYWNlKC86KFxcdyspL2csIChfLCBwYXJhbU5hbWUpID0+IHtcbiAgICBwYXJhbU5hbWVzLnB1c2gocGFyYW1OYW1lKTtcbiAgICByZXR1cm4gXCIoW15cXFxcL10rKVwiO1xuICB9KTtcblxuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goXCIqXCIpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2Uge1xuICAgIHJlZ2V4cFNvdXJjZSArPSBlbmQgPyBcIlxcXFwvKiRcIiAvLyBXaGVuIG1hdGNoaW5nIHRvIHRoZSBlbmQsIGlnbm9yZSB0cmFpbGluZyBzbGFzaGVzXG4gICAgOiAvLyBPdGhlcndpc2UsIG1hdGNoIGEgd29yZCBib3VuZGFyeSBvciBhIHByb2NlZWRpbmcgLy4gVGhlIHdvcmQgYm91bmRhcnkgcmVzdHJpY3RzXG4gICAgLy8gcGFyZW50IHJvdXRlcyB0byBtYXRjaGluZyBvbmx5IHRoZWlyIG93biB3b3JkcyBhbmQgbm90aGluZyBtb3JlLCBlLmcuIHBhcmVudFxuICAgIC8vIHJvdXRlIFwiL2hvbWVcIiBzaG91bGQgbm90IG1hdGNoIFwiL2hvbWUyXCIuXG4gICAgLy8gQWRkaXRpb25hbGx5LCBhbGxvdyBwYXRocyBzdGFydGluZyB3aXRoIGAuYCwgYC1gLCBgfmAsIGFuZCB1cmwtZW5jb2RlZCBlbnRpdGllcyxcbiAgICAvLyBidXQgZG8gbm90IGNvbnN1bWUgdGhlIGNoYXJhY3RlciBpbiB0aGUgbWF0Y2hlZCBwYXRoIHNvIHRoZXkgY2FuIG1hdGNoIGFnYWluc3RcbiAgICAvLyBuZXN0ZWQgcGF0aHMuXG4gICAgXCIoPzooPz1bLn4tXXwlWzAtOUEtRl17Mn0pfFxcXFxifFxcXFwvfCQpXCI7XG4gIH1cblxuICBsZXQgbWF0Y2hlciA9IG5ldyBSZWdFeHAocmVnZXhwU291cmNlLCBjYXNlU2Vuc2l0aXZlID8gdW5kZWZpbmVkIDogXCJpXCIpO1xuICByZXR1cm4gW21hdGNoZXIsIHBhcmFtTmFtZXNdO1xufVxuXG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIFJldHVybnMgYSByZXNvbHZlZCBwYXRoIG9iamVjdCByZWxhdGl2ZSB0byB0aGUgZ2l2ZW4gcGF0aG5hbWUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNyZXNvbHZlcGF0aFxuICovXG5cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGgodG8sIGZyb21QYXRobmFtZSkge1xuICBpZiAoZnJvbVBhdGhuYW1lID09PSB2b2lkIDApIHtcbiAgICBmcm9tUGF0aG5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVUbyh0b0FyZywgcm91dGVQYXRobmFtZXMsIGxvY2F0aW9uUGF0aG5hbWUpIHtcbiAgbGV0IHRvID0gdHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvQXJnKSA6IHRvQXJnO1xuICBsZXQgdG9QYXRobmFtZSA9IHRvQXJnID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0by5wYXRobmFtZTsgLy8gSWYgYSBwYXRobmFtZSBpcyBleHBsaWNpdGx5IHByb3ZpZGVkIGluIGB0b2AsIGl0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGVcbiAgLy8gcm91dGUgY29udGV4dC4gVGhpcyBpcyBleHBsYWluZWQgaW4gYE5vdGUgb24gYDxMaW5rIHRvPmAgdmFsdWVzYCBpbiBvdXJcbiAgLy8gbWlncmF0aW9uIGd1aWRlIGZyb20gdjUgYXMgYSBtZWFucyBvZiBkaXNhbWJpZ3VhdGlvbiBiZXR3ZWVuIGB0b2AgdmFsdWVzXG4gIC8vIHRoYXQgYmVnaW4gd2l0aCBgL2AgYW5kIHRob3NlIHRoYXQgZG8gbm90LiBIb3dldmVyLCB0aGlzIGlzIHByb2JsZW1hdGljIGZvclxuICAvLyBgdG9gIHZhbHVlcyB0aGF0IGRvIG5vdCBwcm92aWRlIGEgcGF0aG5hbWUuIGB0b2AgY2FuIHNpbXBseSBiZSBhIHNlYXJjaCBvclxuICAvLyBoYXNoIHN0cmluZywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgYXNzdW1lIHRoYXQgdGhlIG5hdmlnYXRpb24gaXMgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24ncyBwYXRobmFtZSBhbmQgKm5vdCogdGhlIHJvdXRlIHBhdGhuYW1lLlxuXG4gIGxldCBmcm9tO1xuXG4gIGlmICh0b1BhdGhuYW1lID09IG51bGwpIHtcbiAgICBmcm9tID0gbG9jYXRpb25QYXRobmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm91dGVQYXRobmFtZUluZGV4ID0gcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMTtcblxuICAgIGlmICh0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTsgLy8gRWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnMgXCJnbyB1cCBvbmUgcm91dGVcIiBpbnN0ZWFkIG9mIFwiZ28gdXAgb25lXG4gICAgICAvLyBVUkwgc2VnbWVudFwiLiAgVGhpcyBpcyBhIGtleSBkaWZmZXJlbmNlIGZyb20gaG93IDxhIGhyZWY+IHdvcmtzIGFuZCBhXG4gICAgICAvLyBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGEgXCJ0b1wiIHZhbHVlIGluc3RlYWQgb2YgYSBcImhyZWZcIi5cblxuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuXG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfSAvLyBJZiB0aGVyZSBhcmUgbW9yZSBcIi4uXCIgc2VnbWVudHMgdGhhbiBwYXJlbnQgcm91dGVzLCByZXNvbHZlIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHJvb3QgLyBVUkwuXG5cblxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuXG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pOyAvLyBFbnN1cmUgdGhlIHBhdGhuYW1lIGhhcyBhIHRyYWlsaW5nIHNsYXNoIGlmIHRoZSBvcmlnaW5hbCB0byB2YWx1ZSBoYWQgb25lLlxuXG4gIGlmICh0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpICYmICFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn1cbmZ1bmN0aW9uIGdldFRvUGF0aG5hbWUodG8pIHtcbiAgLy8gRW1wdHkgc3RyaW5ncyBzaG91bGQgYmUgdHJlYXRlZCB0aGUgc2FtZSBhcyAvIHBhdGhzXG4gIHJldHVybiB0byA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIiA/IFwiL1wiIDogdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZSA6IHRvLnBhdGhuYW1lO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikgcmV0dXJuIHBhdGhuYW1lO1xuXG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoYmFzZW5hbWUubGVuZ3RoKTtcblxuICBpZiAobmV4dENoYXIgJiYgbmV4dENoYXIgIT09IFwiL1wiKSB7XG4gICAgLy8gcGF0aG5hbWUgZG9lcyBub3Qgc3RhcnQgd2l0aCBiYXNlbmFtZS9cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXRobmFtZS5zbGljZShiYXNlbmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xufVxuY29uc3Qgam9pblBhdGhzID0gcGF0aHMgPT4gcGF0aHMuam9pbihcIi9cIikucmVwbGFjZSgvXFwvXFwvKy9nLCBcIi9cIik7XG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG5cbmNvbnN0IG5vcm1hbGl6ZVNlYXJjaCA9IHNlYXJjaCA9PiAhc2VhcmNoIHx8IHNlYXJjaCA9PT0gXCI/XCIgPyBcIlwiIDogc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG5cbmNvbnN0IG5vcm1hbGl6ZUhhc2ggPSBoYXNoID0+ICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZ1bGwgaHJlZiBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgZm9yIGJ1aWxkaW5nXG4gKiBjdXN0b20gbGlua3MgdGhhdCBhcmUgYWxzbyBhY2Nlc3NpYmxlIGFuZCBwcmVzZXJ2ZSByaWdodC1jbGljayBiZWhhdmlvci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZWhyZWZcbiAqL1xuXG5mdW5jdGlvbiB1c2VIcmVmKHRvKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gdXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0byk7XG4gIGxldCBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lO1xuXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBsZXQgdG9QYXRobmFtZSA9IGdldFRvUGF0aG5hbWUodG8pO1xuICAgIGxldCBlbmRzV2l0aFNsYXNoID0gdG9QYXRobmFtZSAhPSBudWxsICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICAgIGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgKyAoZW5kc1dpdGhTbGFzaCA/IFwiL1wiIDogXCJcIikgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRobmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIG5hdmlnYXRvci5jcmVhdGVIcmVmKHtcbiAgICBwYXRobmFtZTogam9pbmVkUGF0aG5hbWUsXG4gICAgc2VhcmNoLFxuICAgIGhhc2hcbiAgfSk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYSA8Um91dGVyPi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZWlucm91dGVyY29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZUluUm91dGVyQ29udGV4dCgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSAhPSBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZWxvY2F0aW9uXG4gKi9cblxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5sb2NhdGlvbjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZW5hdmlnYXRpb250eXBlXG4gKi9cblxuZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgVVJMIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogPE5hdkxpbms+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbWF0Y2hcbiAqL1xuXG5mdW5jdGlvbiB1c2VNYXRjaChwYXR0ZXJuKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VNYXRjaCgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBwYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSwgW3BhdGhuYW1lLCBwYXR0ZXJuXSk7XG59XG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gaW1wZXJhdGl2ZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBsb2NhdGlvbi4gVXNlZCBieSA8TGluaz5zLCBidXRcbiAqIG1heSBhbHNvIGJlIHVzZWQgYnkgb3RoZXIgZWxlbWVudHMgdG8gY2hhbmdlIHRoZSBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZW5hdmlnYXRlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTmF2aWdhdGUoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSB1c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSB1c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShtYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IHVzZVJlZihmYWxzZSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIFwiWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gXCIgKyBcInlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLlwiKSA6IHZvaWQgMDtcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUpO1xuXG4gICAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgICAgcGF0aC5wYXRobmFtZSA9IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICB9XG5cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xuICByZXR1cm4gbmF2aWdhdGU7XG59XG5jb25zdCBPdXRsZXRDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZW91dGxldGNvbnRleHRcbiAqL1xuXG5mdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChPdXRsZXRDb250ZXh0KTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuIFVzZWQgaW50ZXJuYWxseSBieSA8T3V0bGV0PiB0byByZW5kZXIgY2hpbGQgcm91dGVzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlb3V0bGV0XG4gKi9cblxuZnVuY3Rpb24gdXNlT3V0bGV0KGNvbnRleHQpIHtcbiAgbGV0IG91dGxldCA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KS5vdXRsZXQ7XG5cbiAgaWYgKG91dGxldCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChPdXRsZXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFxuICAgIH0sIG91dGxldCk7XG4gIH1cblxuICByZXR1cm4gb3V0bGV0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBrZXkvdmFsdWUgcGFpcnMgb2YgdGhlIGR5bmFtaWMgcGFyYW1zIGZyb20gdGhlIGN1cnJlbnRcbiAqIFVSTCB0aGF0IHdlcmUgbWF0Y2hlZCBieSB0aGUgcm91dGUgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZXBhcmFtc1xuICovXG5cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSB1c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG59XG4vKipcbiAqIFJlc29sdmVzIHRoZSBwYXRobmFtZSBvZiB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlcmVzb2x2ZWRwYXRoXG4gKi9cblxuZnVuY3Rpb24gdXNlUmVzb2x2ZWRQYXRoKHRvKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkobWF0Y2hlcy5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lKSwgW3RvLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWVdKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gPE91dGxldD4gdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2Vyb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIG1hdGNoZXM6IHBhcmVudE1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBwYXJlbnRNYXRjaGVzW3BhcmVudE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGxldCBwYXJlbnRQYXJhbXMgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbiAgbGV0IHBhcmVudFBhdGhuYW1lID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWUgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50Um91dGUgPSByb3V0ZU1hdGNoICYmIHJvdXRlTWF0Y2gucm91dGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vIFlvdSB3b24ndCBnZXQgYSB3YXJuaW5nIGFib3V0IDIgZGlmZmVyZW50IDxSb3V0ZXM+IHVuZGVyIGEgPFJvdXRlPlxuICAgIC8vIHdpdGhvdXQgYSB0cmFpbGluZyAqLCBidXQgdGhpcyBpcyBhIGJlc3QtZWZmb3J0IHdhcm5pbmcgYW55d2F5IHNpbmNlIHdlXG4gICAgLy8gY2Fubm90IGV2ZW4gZ2l2ZSB0aGUgd2FybmluZyB1bmxlc3MgdGhleSBsYW5kIGF0IHRoZSBwYXJlbnQgcm91dGUuXG4gICAgLy9cbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vXG4gICAgLy8gPFJvdXRlcz5cbiAgICAvLyAgIHsvKiBUaGlzIHJvdXRlIHBhdGggTVVTVCBlbmQgd2l0aCAvKiBiZWNhdXNlIG90aGVyd2lzZVxuICAgIC8vICAgICAgIGl0IHdpbGwgbmV2ZXIgbWF0Y2ggL2Jsb2cvcG9zdC8xMjMgKi99XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2dcIiBlbGVtZW50PXs8QmxvZyAvPn0gLz5cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZy9mZWVkXCIgZWxlbWVudD17PEJsb2dGZWVkIC8+fSAvPlxuICAgIC8vIDwvUm91dGVzPlxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gQmxvZygpIHtcbiAgICAvLyAgIHJldHVybiAoXG4gICAgLy8gICAgIDxSb3V0ZXM+XG4gICAgLy8gICAgICAgPFJvdXRlIHBhdGg9XCJwb3N0LzppZFwiIGVsZW1lbnQ9ezxQb3N0IC8+fSAvPlxuICAgIC8vICAgICA8L1JvdXRlcz5cbiAgICAvLyAgICk7XG4gICAgLy8gfVxuICAgIGxldCBwYXJlbnRQYXRoID0gcGFyZW50Um91dGUgJiYgcGFyZW50Um91dGUucGF0aCB8fCBcIlwiO1xuICAgIHdhcm5pbmdPbmNlKHBhcmVudFBhdGhuYW1lLCAhcGFyZW50Um91dGUgfHwgcGFyZW50UGF0aC5lbmRzV2l0aChcIipcIiksIFwiWW91IHJlbmRlcmVkIGRlc2NlbmRhbnQgPFJvdXRlcz4gKG9yIGNhbGxlZCBgdXNlUm91dGVzKClgKSBhdCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGhuYW1lICsgXCJcXFwiICh1bmRlciA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPikgYnV0IHRoZSBcIikgKyBcInBhcmVudCByb3V0ZSBwYXRoIGhhcyBubyB0cmFpbGluZyBcXFwiKlxcXCIuIFRoaXMgbWVhbnMgaWYgeW91IG5hdmlnYXRlIFwiICsgXCJkZWVwZXIsIHRoZSBwYXJlbnQgd29uJ3QgbWF0Y2ggYW55bW9yZSBhbmQgdGhlcmVmb3JlIHRoZSBjaGlsZCBcIiArIFwicm91dGVzIHdpbGwgbmV2ZXIgcmVuZGVyLlxcblxcblwiICsgKFwiUGxlYXNlIGNoYW5nZSB0aGUgcGFyZW50IDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+IHRvIDxSb3V0ZSBcIikgKyAoXCJwYXRoPVxcXCJcIiArIChwYXJlbnRQYXRoID09PSBcIi9cIiA/IFwiKlwiIDogcGFyZW50UGF0aCArIFwiLypcIikgKyBcIlxcXCI+LlwiKSk7XG4gIH1cblxuICBsZXQgbG9jYXRpb25Gcm9tQ29udGV4dCA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBsb2NhdGlvbjtcblxuICBpZiAobG9jYXRpb25BcmcpIHtcbiAgICB2YXIgX3BhcnNlZExvY2F0aW9uQXJnJHBhO1xuXG4gICAgbGV0IHBhcnNlZExvY2F0aW9uQXJnID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICAgICEocGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiB8fCAoKF9wYXJzZWRMb2NhdGlvbkFyZyRwYSA9IHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lKSA9PSBudWxsID8gdm9pZCAwIDogX3BhcnNlZExvY2F0aW9uQXJnJHBhLnN0YXJ0c1dpdGgocGFyZW50UGF0aG5hbWVCYXNlKSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIldoZW4gb3ZlcnJpZGluZyB0aGUgbG9jYXRpb24gdXNpbmcgYDxSb3V0ZXMgbG9jYXRpb24+YCBvciBgdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pYCwgXCIgKyBcInRoZSBsb2NhdGlvbiBwYXRobmFtZSBtdXN0IGJlZ2luIHdpdGggdGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBcIiArIChcIm1hdGNoZWQgYnkgYWxsIHBhcmVudCByb3V0ZXMuIFRoZSBjdXJyZW50IHBhdGhuYW1lIGJhc2UgaXMgXFxcIlwiICsgcGFyZW50UGF0aG5hbWVCYXNlICsgXCJcXFwiIFwiKSArIChcImJ1dCBwYXRobmFtZSBcXFwiXCIgKyBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSArIFwiXFxcIiB3YXMgZ2l2ZW4gaW4gdGhlIGBsb2NhdGlvbmAgcHJvcC5cIikpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuXG4gIGxldCBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiO1xuICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShwYXJlbnRQYXRobmFtZUJhc2UubGVuZ3RoKSB8fCBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXMsIHtcbiAgICBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWVcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocGFyZW50Um91dGUgfHwgbWF0Y2hlcyAhPSBudWxsLCBcIk5vIHJvdXRlcyBtYXRjaGVkIGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhtYXRjaGVzID09IG51bGwgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCwgXCJNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIGRvZXMgbm90IGhhdmUgYW4gZWxlbWVudC4gXCIgKyBcIlRoaXMgbWVhbnMgaXQgd2lsbCByZW5kZXIgYW4gPE91dGxldCAvPiB3aXRoIGEgbnVsbCB2YWx1ZSBieSBkZWZhdWx0IHJlc3VsdGluZyBpbiBhbiBcXFwiZW1wdHlcXFwiIHBhZ2UuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgcGF0aG5hbWVCYXNlOiBtYXRjaC5wYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGFyZW50UGF0aG5hbWVCYXNlIDogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsIG1hdGNoLnBhdGhuYW1lQmFzZV0pXG4gIH0pKSwgcGFyZW50TWF0Y2hlcyk7XG59XG5mdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzLCBwYXJlbnRNYXRjaGVzKSB7XG4gIGlmIChwYXJlbnRNYXRjaGVzID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRNYXRjaGVzID0gW107XG4gIH1cblxuICBpZiAobWF0Y2hlcyA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIG1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IG1hdGNoLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG1hdGNoLnJvdXRlLmVsZW1lbnQgOiBvdXRsZXQsXG4gICAgICB2YWx1ZToge1xuICAgICAgICBvdXRsZXQsXG4gICAgICAgIG1hdGNoZXM6IHBhcmVudE1hdGNoZXMuY29uY2F0KG1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgbnVsbCk7XG59XG5cbi8qKlxuICogQSA8Um91dGVyPiB0aGF0IHN0b3JlcyBhbGwgZW50cmllcyBpbiBtZW1vcnkuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNtZW1vcnlyb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBpbml0aWFsRW50cmllcyxcbiAgICBpbml0aWFsSW5kZXhcbiAgfSA9IF9yZWY7XG4gIGxldCBoaXN0b3J5UmVmID0gdXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleFxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI25hdmlnYXRlXG4gKi9cbmZ1bmN0aW9uIE5hdmlnYXRlKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgdG8sXG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZVxuICB9ID0gX3JlZjI7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCkuc3RhdGljLCBcIjxOYXZpZ2F0ZT4gbXVzdCBub3QgYmUgdXNlZCBvbiB0aGUgaW5pdGlhbCByZW5kZXIgaW4gYSA8U3RhdGljUm91dGVyPi4gXCIgKyBcIlRoaXMgaXMgYSBuby1vcCwgYnV0IHlvdSBzaG91bGQgbW9kaWZ5IHlvdXIgY29kZSBzbyB0aGUgPE5hdmlnYXRlPiBpcyBcIiArIFwib25seSBldmVyIHJlbmRlcmVkIGluIHJlc3BvbnNlIHRvIHNvbWUgdXNlciBpbnRlcmFjdGlvbiBvciBzdGF0ZSBjaGFuZ2UuXCIpIDogdm9pZCAwO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGVcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjb3V0bGV0XG4gKi9cbmZ1bmN0aW9uIE91dGxldChwcm9wcykge1xuICByZXR1cm4gdXNlT3V0bGV0KHByb3BzLmNvbnRleHQpO1xufVxuXG4vKipcbiAqIERlY2xhcmVzIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgYXQgYSBjZXJ0YWluIFVSTCBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjcm91dGVcbiAqL1xuZnVuY3Rpb24gUm91dGUoX3Byb3BzKSB7XG4gICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQSA8Um91dGU+IGlzIG9ubHkgZXZlciB0byBiZSB1c2VkIGFzIHRoZSBjaGlsZCBvZiA8Um91dGVzPiBlbGVtZW50LCBcIiArIFwibmV2ZXIgcmVuZGVyZWQgZGlyZWN0bHkuIFBsZWFzZSB3cmFwIHlvdXIgPFJvdXRlPiBpbiBhIDxSb3V0ZXM+LlwiKSA6IGludmFyaWFudChmYWxzZSkgO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgPFJvdXRlcj4gZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSA8QnJvd3NlclJvdXRlcj5cbiAqIGluIHdlYiBicm93c2VycyBvciBhIDxTdGF0aWNSb3V0ZXI+IGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlXG4gIH0gPSBfcmVmMztcbiAgISF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90IHJlbmRlciBhIDxSb3V0ZXI+IGluc2lkZSBhbm90aGVyIDxSb3V0ZXI+LlwiICsgXCIgWW91IHNob3VsZCBuZXZlciBoYXZlIG1vcmUgdGhhbiBvbmUgaW4geW91ciBhcHAuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IGJhc2VuYW1lID0gbm9ybWFsaXplUGF0aG5hbWUoYmFzZW5hbWVQcm9wKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gdXNlTWVtbygoKSA9PiAoe1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3BcbiAgfSksIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCBzdGF0aWNQcm9wXSk7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuICBsZXQgbG9jYXRpb24gPSB1c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcblxuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2gsXG4gICAgICBzdGF0ZSxcbiAgICAgIGtleVxuICAgIH07XG4gIH0sIFtiYXNlbmFtZSwgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCwgc3RhdGUsIGtleV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uICE9IG51bGwsIFwiPFJvdXRlciBiYXNlbmFtZT1cXFwiXCIgKyBiYXNlbmFtZSArIFwiXFxcIj4gaXMgbm90IGFibGUgdG8gbWF0Y2ggdGhlIFVSTCBcIiArIChcIlxcXCJcIiArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCArIFwiXFxcIiBiZWNhdXNlIGl0IGRvZXMgbm90IHN0YXJ0IHdpdGggdGhlIFwiKSArIFwiYmFzZW5hbWUsIHNvIHRoZSA8Um91dGVyPiB3b24ndCByZW5kZXIgYW55dGhpbmcuXCIpIDogdm9pZCAwO1xuXG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbmF2aWdhdGlvbkNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHZhbHVlOiB7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfVxuICB9KSk7XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgPFJvdXRlPiBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNyb3V0ZXNcbiAqL1xuZnVuY3Rpb24gUm91dGVzKF9yZWY0KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbG9jYXRpb25cbiAgfSA9IF9yZWY0O1xuICByZXR1cm4gdXNlUm91dGVzKGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiksIGxvY2F0aW9uKTtcbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjY3JlYXRlcm91dGVzZnJvbWNoaWxkcmVuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIGxldCByb3V0ZXMgPSBbXTtcbiAgQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZWxlbWVudCA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL2lzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAvLyBJZ25vcmUgbm9uLWVsZW1lbnRzLiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gbW9yZSBlYXNpbHkgaW5saW5lXG4gICAgICAvLyBjb25kaXRpb25hbHMgaW4gdGhlaXIgcm91dGUgY29uZmlnLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KHJvdXRlcywgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAhKGVsZW1lbnQudHlwZSA9PT0gUm91dGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIltcIiArICh0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWUpICsgXCJdIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGVsZW1lbnQucHJvcHMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZWxlbWVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoXG4gICAgfTtcblxuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByb3V0ZXMucHVzaChyb3V0ZSk7XG4gIH0pO1xuICByZXR1cm4gcm91dGVzO1xufVxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5cbmZ1bmN0aW9uIHJlbmRlck1hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyk7XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVzLCBMb2NhdGlvbkNvbnRleHQgYXMgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgTmF2aWdhdGlvbkNvbnRleHQgYXMgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBSb3V0ZUNvbnRleHQgYXMgVU5TQUZFX1JvdXRlQ29udGV4dCwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSb3V0ZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgRE9NIHY2LjMuMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgeyB1c2VSZWYsIHVzZVN0YXRlLCB1c2VMYXlvdXRFZmZlY3QsIGNyZWF0ZUVsZW1lbnQsIGZvcndhcmRSZWYsIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5IH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgeyBSb3V0ZXIsIHVzZUhyZWYsIGNyZWF0ZVBhdGgsIHVzZUxvY2F0aW9uLCB1c2VSZXNvbHZlZFBhdGgsIHVzZU5hdmlnYXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZW5kZXJNYXRjaGVzLCByZXNvbHZlUGF0aCwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUm91dGVzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2xpY2tcIiwgXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcInRhcmdldFwiLCBcInRvXCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiY2hpbGRyZW5cIl07XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IFJvdXRlciFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDT01QT05FTlRTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gUHJvdmlkZXMgdGhlIGNsZWFuZXN0IFVSTHMuXG4gKi9cbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoX3JlZikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjtcbiAgbGV0IGhpc3RvcnlSZWYgPSB1c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3dcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIEhhc2hSb3V0ZXIoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWYyO1xuICBsZXQgaGlzdG9yeVJlZiA9IHVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvd1xuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cbmZ1bmN0aW9uIEhpc3RvcnlSb3V0ZXIoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBoaXN0b3J5XG4gIH0gPSBfcmVmMztcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cbmNvbnN0IExpbmsgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiBMaW5rV2l0aFJlZihfcmVmNCwgcmVmKSB7XG4gIGxldCB7XG4gICAgb25DbGljayxcbiAgICByZWxvYWREb2N1bWVudCxcbiAgICByZXBsYWNlID0gZmFsc2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHRvXG4gIH0gPSBfcmVmNCxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNCwgX2V4Y2x1ZGVkKTtcblxuICBsZXQgaHJlZiA9IHVzZUhyZWYodG8pO1xuICBsZXQgaW50ZXJuYWxPbkNsaWNrID0gdXNlTGlua0NsaWNrSGFuZGxlcih0bywge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuXG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmICFyZWxvYWREb2N1bWVudCkge1xuICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9KSlcbiAgKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbn1cblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdkxpbmtXaXRoUmVmKF9yZWY1LCByZWYpIHtcbiAgbGV0IHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFByb3AgPSBcInBhZ2VcIixcbiAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wID0gXCJcIixcbiAgICBlbmQgPSBmYWxzZSxcbiAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgIHRvLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmNSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNSwgX2V4Y2x1ZGVkMik7XG5cbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8pO1xuICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgdG9QYXRobmFtZSA9IHBhdGgucGF0aG5hbWU7XG5cbiAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB0b1BhdGhuYW1lID0gdG9QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgbGV0IGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiO1xuICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcbiAgbGV0IGNsYXNzTmFtZTtcblxuICBpZiAodHlwZW9mIGNsYXNzTmFtZVByb3AgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3Aoe1xuICAgICAgaXNBY3RpdmVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0XG4gICAgLy8gdmFsdWUgZm9yIGBhY3RpdmVDbGFzc05hbWVgLCBidXQgd2UgYXJlIHJlbW92aW5nIHRoYXQgQVBJIGFuZCBjYW4gc3RpbGxcbiAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uXG4gICAgY2xhc3NOYW1lID0gW2NsYXNzTmFtZVByb3AsIGlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IG51bGxdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgfVxuXG4gIGxldCBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcCh7XG4gICAgaXNBY3RpdmVcbiAgfSkgOiBzdHlsZVByb3A7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0bzogdG9cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oe1xuICAgIGlzQWN0aXZlXG4gIH0pIDogY2hpbGRyZW4pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSE9PS1Ncbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZVxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBJZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mXG4gICAgICAvLyBhIHB1c2gsIHNvIGRvIHRoZSBzYW1lIGhlcmUuXG5cbiAgICAgIGxldCByZXBsYWNlID0gISFyZXBsYWNlUHJvcCB8fCBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcbiAgICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2UsXG4gICAgICAgIHN0YXRlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtsb2NhdGlvbiwgbmF2aWdhdGUsIHBhdGgsIHJlcGxhY2VQcm9wLCBzdGF0ZSwgdGFyZ2V0LCB0b10pO1xufVxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5cbmZ1bmN0aW9uIHVzZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09IFwidW5kZWZpbmVkXCIsIFwiWW91IGNhbm5vdCB1c2UgdGhlIGB1c2VTZWFyY2hQYXJhbXNgIGhvb2sgaW4gYSBicm93c2VyIHRoYXQgZG9lcyBub3QgXCIgKyBcInN1cHBvcnQgdGhlIFVSTFNlYXJjaFBhcmFtcyBBUEkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnQgSW50ZXJuZXQgXCIgKyBcIkV4cGxvcmVyIDExLCB3ZSByZWNvbW1lbmQgeW91IGxvYWQgYSBwb2x5ZmlsbCBzdWNoIGFzIFwiICsgXCJodHRwczovL2dpdGh1Yi5jb20vdW5nYXAvdXJsLXNlYXJjaC1wYXJhbXNcXG5cXG5cIiArIFwiSWYgeW91J3JlIHVuc3VyZSBob3cgdG8gbG9hZCBwb2x5ZmlsbHMsIHdlIHJlY29tbWVuZCB5b3UgY2hlY2sgb3V0IFwiICsgXCJodHRwczovL3BvbHlmaWxsLmlvL3YzLyB3aGljaCBwcm92aWRlcyBzb21lIHJlY29tbWVuZGF0aW9ucyBhYm91dCBob3cgXCIgKyBcInRvIGxvYWQgcG9seWZpbGxzIG9ubHkgZm9yIHVzZXJzIHRoYXQgbmVlZCB0aGVtLCBpbnN0ZWFkIG9mIGZvciBldmVyeSBcIiArIFwidXNlci5cIikgOiB2b2lkIDA7XG4gIGxldCBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmID0gdXNlUmVmKGNyZWF0ZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gdXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyhsb2NhdGlvbi5zZWFyY2gpO1xuXG4gICAgZm9yIChsZXQga2V5IG9mIGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYuY3VycmVudC5rZXlzKCkpIHtcbiAgICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYuY3VycmVudC5nZXRBbGwoa2V5KS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VhcmNoUGFyYW1zO1xuICB9LCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSB1c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIG5hdmlnYXRlKFwiP1wiICsgY3JlYXRlU2VhcmNoUGFyYW1zKG5leHRJbml0KSwgbmF2aWdhdGVPcHRpb25zKTtcbiAgfSwgW25hdmlnYXRlXSk7XG4gIHJldHVybiBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbXNdO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBpbml0aWFsaXplci5cbiAqXG4gKiBUaGlzIGlzIGlkZW50aWNhbCB0byBgbmV3IFVSTFNlYXJjaFBhcmFtcyhpbml0KWAgZXhjZXB0IGl0IGFsc29cbiAqIHN1cHBvcnRzIGFycmF5cyBhcyB2YWx1ZXMgaW4gdGhlIG9iamVjdCBmb3JtIG9mIHRoZSBpbml0aWFsaXplclxuICogaW5zdGVhZCBvZiBqdXN0IHN0cmluZ3MuIFRoaXMgaXMgY29udmVuaWVudCB3aGVuIHlvdSBuZWVkIG11bHRpcGxlXG4gKiB2YWx1ZXMgZm9yIGEgZ2l2ZW4ga2V5LCBidXQgZG9uJ3Qgd2FudCB0byB1c2UgYW4gYXJyYXkgaW5pdGlhbGl6ZXIuXG4gKlxuICogRm9yIGV4YW1wbGUsIGluc3RlYWQgb2Y6XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhbXG4gKiAgICAgWydzb3J0JywgJ25hbWUnXSxcbiAqICAgICBbJ3NvcnQnLCAncHJpY2UnXVxuICogICBdKTtcbiAqXG4gKiB5b3UgY2FuIGRvOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh7XG4gKiAgICAgc29ydDogWyduYW1lJywgJ3ByaWNlJ11cbiAqICAgfSk7XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNlYXJjaFBhcmFtcyhpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gXCJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoaW5pdCkgfHwgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IGluaXQgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICByZXR1cm4gbWVtby5jb25jYXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAodiA9PiBba2V5LCB2XSkgOiBbW2tleSwgdmFsdWVdXSk7XG4gIH0sIFtdKSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmssIGNyZWF0ZVNlYXJjaFBhcmFtcywgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMvbG9nby5zY3NzJztcblxuZXhwb3J0IGNvbnN0IExvZ28gPSAoKTogSlNYLkVsZW1lbnQgPT4ge1xuICBjb25zdCBpMThuID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmxvZ299PlxuICAgICAgPExpbmsgdG89eycvJ30+e2kxOG4udGBBbmFseXNpcyBDaGFydGB9PC9MaW5rPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wibG9nb1wiOlwicHNRQXI0Sk5jekpLcmpLRU44a1ZcIn07IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRHJvcGRvd24gfSBmcm9tICdAY29tcG9uZW50cyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzL2xlc3NvbnNGaWx0ZXJzLnNjc3MnO1xuaW1wb3J0IHsgRmlsdGVyVHlwZSB9IGZyb20gJ0B0eXBlcyc7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnO1xuXG5leHBvcnQgY29uc3QgTGVzc29uc0ZpbHRlcnMgPSAoKSA9PiB7XG4gIGNvbnN0IGkxOG4gPSB1c2VUcmFuc2xhdGlvbigpO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm1haW5UaXRsZX0+e2kxOG4udGBOdW1iZXIgb2YgbGVzc29uc2B9PC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZHJvcGRvd25zQ29udGFpbmVyfT5cbiAgICAgICAgPERyb3Bkb3duIGxhYmVsPXtpMThuLnRgU2VsZWN0IENvdW50cnlgfSBmaWx0ZXJOYW1lPXtGaWx0ZXJUeXBlLkNPVU5UUllfRklMVEVSfSAvPlxuICAgICAgICA8RHJvcGRvd24gbGFiZWw9e2kxOG4udGBTZWxlY3QgQ2FtcGB9IGZpbHRlck5hbWU9e0ZpbHRlclR5cGUuQ0FNUF9GSUxURVJ9IC8+XG4gICAgICAgIDxEcm9wZG93biBsYWJlbD17aTE4bi50YFNlbGVjdCBTY2hvb2xgfSBmaWx0ZXJOYW1lPXtGaWx0ZXJUeXBlLlNDSE9PTF9GSUxURVJ9IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIm1haW5UaXRsZVwiOlwid0tOaTgwa1ZlRnFtNmVjVHFCZEVcIixcImRyb3Bkb3duc0NvbnRhaW5lclwiOlwieWlwZUJWNUNvV25LUUtXekpuQ21cIn07IiwiLyohXG4gKiBDaGFydC5qcyB2My45LjFcbiAqIGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnXG4gKiAoYykgMjAyMiBDaGFydC5qcyBDb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG5mdW5jdGlvbiBub29wKCkge31cbmNvbnN0IHVpZCA9IChmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpZCsrO1xuICB9O1xufSgpKTtcbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWYodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh0eXBlLnNsaWNlKDAsIDcpID09PSAnW29iamVjdCcgJiYgdHlwZS5zbGljZSgtNikgPT09ICdBcnJheV0nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuY29uc3QgaXNOdW1iZXJGaW5pdGUgPSAodmFsdWUpID0+ICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSAmJiBpc0Zpbml0ZSgrdmFsdWUpO1xuZnVuY3Rpb24gZmluaXRlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgcmV0dXJuIGlzTnVtYmVyRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuZnVuY3Rpb24gdmFsdWVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xufVxuY29uc3QgdG9QZXJjZW50YWdlID0gKHZhbHVlLCBkaW1lbnNpb24pID0+XG4gIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/XG4gICAgcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDBcbiAgICA6IHZhbHVlIC8gZGltZW5zaW9uO1xuY29uc3QgdG9EaW1lbnNpb24gPSAodmFsdWUsIGRpbWVuc2lvbikgPT5cbiAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID9cbiAgICBwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMCAqIGRpbWVuc2lvblxuICAgIDogK3ZhbHVlO1xuZnVuY3Rpb24gY2FsbGJhY2soZm4sIGFyZ3MsIHRoaXNBcmcpIHtcbiAgaWYgKGZuICYmIHR5cGVvZiBmbi5jYWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG59XG5mdW5jdGlvbiBlYWNoKGxvb3BhYmxlLCBmbiwgdGhpc0FyZywgcmV2ZXJzZSkge1xuICBsZXQgaSwgbGVuLCBrZXlzO1xuICBpZiAoaXNBcnJheShsb29wYWJsZSkpIHtcbiAgICBsZW4gPSBsb29wYWJsZS5sZW5ndGg7XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVbaV0sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxvb3BhYmxlKSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyhsb29wYWJsZSk7XG4gICAgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2tleXNbaV1dLCBrZXlzW2ldKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIF9lbGVtZW50c0VxdWFsKGEwLCBhMSkge1xuICBsZXQgaSwgaWxlbiwgdjAsIHYxO1xuICBpZiAoIWEwIHx8ICFhMSB8fCBhMC5sZW5ndGggIT09IGExLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGkgPSAwLCBpbGVuID0gYTAubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgdjAgPSBhMFtpXTtcbiAgICB2MSA9IGExW2ldO1xuICAgIGlmICh2MC5kYXRhc2V0SW5kZXggIT09IHYxLmRhdGFzZXRJbmRleCB8fCB2MC5pbmRleCAhPT0gdjEuaW5kZXgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBjbG9uZSQxKHNvdXJjZSkge1xuICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgcmV0dXJuIHNvdXJjZS5tYXAoY2xvbmUkMSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIGNvbnN0IGtsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgayA9IDA7XG4gICAgZm9yICg7IGsgPCBrbGVuOyArK2spIHtcbiAgICAgIHRhcmdldFtrZXlzW2tdXSA9IGNsb25lJDEoc291cmNlW2tleXNba11dKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICByZXR1cm4gc291cmNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgcmV0dXJuIFsnX19wcm90b19fJywgJ3Byb3RvdHlwZScsICdjb25zdHJ1Y3RvciddLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG59XG5mdW5jdGlvbiBfbWVyZ2VyKGtleSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICBjb25zdCBzdmFsID0gc291cmNlW2tleV07XG4gIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgIG1lcmdlKHR2YWwsIHN2YWwsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFtrZXldID0gY2xvbmUkMShzdmFsKTtcbiAgfVxufVxuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc291cmNlcyA9IGlzQXJyYXkoc291cmNlKSA/IHNvdXJjZSA6IFtzb3VyY2VdO1xuICBjb25zdCBpbGVuID0gc291cmNlcy5sZW5ndGg7XG4gIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IG1lcmdlciA9IG9wdGlvbnMubWVyZ2VyIHx8IF9tZXJnZXI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgc291cmNlID0gc291cmNlc1tpXTtcbiAgICBpZiAoIWlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICBmb3IgKGxldCBrID0gMCwga2xlbiA9IGtleXMubGVuZ3RoOyBrIDwga2xlbjsgKytrKSB7XG4gICAgICBtZXJnZXIoa2V5c1trXSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gbWVyZ2VJZih0YXJnZXQsIHNvdXJjZSkge1xuICByZXR1cm4gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIHttZXJnZXI6IF9tZXJnZXJJZn0pO1xufVxuZnVuY3Rpb24gX21lcmdlcklmKGtleSwgdGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICBjb25zdCBzdmFsID0gc291cmNlW2tleV07XG4gIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgIG1lcmdlSWYodHZhbCwgc3ZhbCk7XG4gIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IGNsb25lJDEoc3ZhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9kZXByZWNhdGVkKHNjb3BlLCB2YWx1ZSwgcHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oc2NvcGUgKyAnOiBcIicgKyBwcmV2aW91cyArXG5cdFx0XHQnXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcIicgKyBjdXJyZW50ICsgJ1wiIGluc3RlYWQnKTtcbiAgfVxufVxuY29uc3Qga2V5UmVzb2x2ZXJzID0ge1xuICAnJzogdiA9PiB2LFxuICB4OiBvID0+IG8ueCxcbiAgeTogbyA9PiBvLnlcbn07XG5mdW5jdGlvbiByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KSB7XG4gIGNvbnN0IHJlc29sdmVyID0ga2V5UmVzb2x2ZXJzW2tleV0gfHwgKGtleVJlc29sdmVyc1trZXldID0gX2dldEtleVJlc29sdmVyKGtleSkpO1xuICByZXR1cm4gcmVzb2x2ZXIob2JqKTtcbn1cbmZ1bmN0aW9uIF9nZXRLZXlSZXNvbHZlcihrZXkpIHtcbiAgY29uc3Qga2V5cyA9IF9zcGxpdEtleShrZXkpO1xuICByZXR1cm4gb2JqID0+IHtcbiAgICBmb3IgKGNvbnN0IGsgb2Yga2V5cykge1xuICAgICAgaWYgKGsgPT09ICcnKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgb2JqID0gb2JqICYmIG9ialtrXTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbn1cbmZ1bmN0aW9uIF9zcGxpdEtleShrZXkpIHtcbiAgY29uc3QgcGFydHMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgY29uc3Qga2V5cyA9IFtdO1xuICBsZXQgdG1wID0gJyc7XG4gIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgIHRtcCArPSBwYXJ0O1xuICAgIGlmICh0bXAuZW5kc1dpdGgoJ1xcXFwnKSkge1xuICAgICAgdG1wID0gdG1wLnNsaWNlKDAsIC0xKSArICcuJztcbiAgICB9IGVsc2Uge1xuICAgICAga2V5cy5wdXNoKHRtcCk7XG4gICAgICB0bXAgPSAnJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiBfY2FwaXRhbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbmNvbnN0IGRlZmluZWQgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG5jb25zdCBzZXRzRXF1YWwgPSAoYSwgYikgPT4ge1xuICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCBpdGVtIG9mIGEpIHtcbiAgICBpZiAoIWIuaGFzKGl0ZW0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmZ1bmN0aW9uIF9pc0NsaWNrRXZlbnQoZSkge1xuICByZXR1cm4gZS50eXBlID09PSAnbW91c2V1cCcgfHwgZS50eXBlID09PSAnY2xpY2snIHx8IGUudHlwZSA9PT0gJ2NvbnRleHRtZW51Jztcbn1cblxuY29uc3QgUEkgPSBNYXRoLlBJO1xuY29uc3QgVEFVID0gMiAqIFBJO1xuY29uc3QgUElUQVUgPSBUQVUgKyBQSTtcbmNvbnN0IElORklOSVRZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuY29uc3QgUkFEX1BFUl9ERUcgPSBQSSAvIDE4MDtcbmNvbnN0IEhBTEZfUEkgPSBQSSAvIDI7XG5jb25zdCBRVUFSVEVSX1BJID0gUEkgLyA0O1xuY29uc3QgVFdPX1RISVJEU19QSSA9IFBJICogMiAvIDM7XG5jb25zdCBsb2cxMCA9IE1hdGgubG9nMTA7XG5jb25zdCBzaWduID0gTWF0aC5zaWduO1xuZnVuY3Rpb24gbmljZU51bShyYW5nZSkge1xuICBjb25zdCByb3VuZGVkUmFuZ2UgPSBNYXRoLnJvdW5kKHJhbmdlKTtcbiAgcmFuZ2UgPSBhbG1vc3RFcXVhbHMocmFuZ2UsIHJvdW5kZWRSYW5nZSwgcmFuZ2UgLyAxMDAwKSA/IHJvdW5kZWRSYW5nZSA6IHJhbmdlO1xuICBjb25zdCBuaWNlUmFuZ2UgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChyYW5nZSkpKTtcbiAgY29uc3QgZnJhY3Rpb24gPSByYW5nZSAvIG5pY2VSYW5nZTtcbiAgY29uc3QgbmljZUZyYWN0aW9uID0gZnJhY3Rpb24gPD0gMSA/IDEgOiBmcmFjdGlvbiA8PSAyID8gMiA6IGZyYWN0aW9uIDw9IDUgPyA1IDogMTA7XG4gIHJldHVybiBuaWNlRnJhY3Rpb24gKiBuaWNlUmFuZ2U7XG59XG5mdW5jdGlvbiBfZmFjdG9yaXplKHZhbHVlKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0KHZhbHVlKTtcbiAgbGV0IGk7XG4gIGZvciAoaSA9IDE7IGkgPCBzcXJ0OyBpKyspIHtcbiAgICBpZiAodmFsdWUgJSBpID09PSAwKSB7XG4gICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlIC8gaSk7XG4gICAgfVxuICB9XG4gIGlmIChzcXJ0ID09PSAoc3FydCB8IDApKSB7XG4gICAgcmVzdWx0LnB1c2goc3FydCk7XG4gIH1cbiAgcmVzdWx0LnNvcnQoKGEsIGIpID0+IGEgLSBiKS5wb3AoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKG4pIHtcbiAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbmZ1bmN0aW9uIGFsbW9zdEVxdWFscyh4LCB5LCBlcHNpbG9uKSB7XG4gIHJldHVybiBNYXRoLmFicyh4IC0geSkgPCBlcHNpbG9uO1xufVxuZnVuY3Rpb24gYWxtb3N0V2hvbGUoeCwgZXBzaWxvbikge1xuICBjb25zdCByb3VuZGVkID0gTWF0aC5yb3VuZCh4KTtcbiAgcmV0dXJuICgocm91bmRlZCAtIGVwc2lsb24pIDw9IHgpICYmICgocm91bmRlZCArIGVwc2lsb24pID49IHgpO1xufVxuZnVuY3Rpb24gX3NldE1pbkFuZE1heEJ5S2V5KGFycmF5LCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgIHZhbHVlID0gYXJyYXlbaV1bcHJvcGVydHldO1xuICAgIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgICB0YXJnZXQubWluID0gTWF0aC5taW4odGFyZ2V0Lm1pbiwgdmFsdWUpO1xuICAgICAgdGFyZ2V0Lm1heCA9IE1hdGgubWF4KHRhcmdldC5tYXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRvUmFkaWFucyhkZWdyZWVzKSB7XG4gIHJldHVybiBkZWdyZWVzICogKFBJIC8gMTgwKTtcbn1cbmZ1bmN0aW9uIHRvRGVncmVlcyhyYWRpYW5zKSB7XG4gIHJldHVybiByYWRpYW5zICogKDE4MCAvIFBJKTtcbn1cbmZ1bmN0aW9uIF9kZWNpbWFsUGxhY2VzKHgpIHtcbiAgaWYgKCFpc051bWJlckZpbml0ZSh4KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgZSA9IDE7XG4gIGxldCBwID0gMDtcbiAgd2hpbGUgKE1hdGgucm91bmQoeCAqIGUpIC8gZSAhPT0geCkge1xuICAgIGUgKj0gMTA7XG4gICAgcCsrO1xuICB9XG4gIHJldHVybiBwO1xufVxuZnVuY3Rpb24gZ2V0QW5nbGVGcm9tUG9pbnQoY2VudHJlUG9pbnQsIGFuZ2xlUG9pbnQpIHtcbiAgY29uc3QgZGlzdGFuY2VGcm9tWENlbnRlciA9IGFuZ2xlUG9pbnQueCAtIGNlbnRyZVBvaW50Lng7XG4gIGNvbnN0IGRpc3RhbmNlRnJvbVlDZW50ZXIgPSBhbmdsZVBvaW50LnkgLSBjZW50cmVQb2ludC55O1xuICBjb25zdCByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG4gIGxldCBhbmdsZSA9IE1hdGguYXRhbjIoZGlzdGFuY2VGcm9tWUNlbnRlciwgZGlzdGFuY2VGcm9tWENlbnRlcik7XG4gIGlmIChhbmdsZSA8ICgtMC41ICogUEkpKSB7XG4gICAgYW5nbGUgKz0gVEFVO1xuICB9XG4gIHJldHVybiB7XG4gICAgYW5nbGUsXG4gICAgZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuICB9O1xufVxuZnVuY3Rpb24gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKHB0MSwgcHQyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocHQyLnggLSBwdDEueCwgMikgKyBNYXRoLnBvdyhwdDIueSAtIHB0MS55LCAyKSk7XG59XG5mdW5jdGlvbiBfYW5nbGVEaWZmKGEsIGIpIHtcbiAgcmV0dXJuIChhIC0gYiArIFBJVEFVKSAlIFRBVSAtIFBJO1xufVxuZnVuY3Rpb24gX25vcm1hbGl6ZUFuZ2xlKGEpIHtcbiAgcmV0dXJuIChhICUgVEFVICsgVEFVKSAlIFRBVTtcbn1cbmZ1bmN0aW9uIF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0LCBlbmQsIHNhbWVBbmdsZUlzRnVsbENpcmNsZSkge1xuICBjb25zdCBhID0gX25vcm1hbGl6ZUFuZ2xlKGFuZ2xlKTtcbiAgY29uc3QgcyA9IF9ub3JtYWxpemVBbmdsZShzdGFydCk7XG4gIGNvbnN0IGUgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgY29uc3QgYW5nbGVUb1N0YXJ0ID0gX25vcm1hbGl6ZUFuZ2xlKHMgLSBhKTtcbiAgY29uc3QgYW5nbGVUb0VuZCA9IF9ub3JtYWxpemVBbmdsZShlIC0gYSk7XG4gIGNvbnN0IHN0YXJ0VG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gcyk7XG4gIGNvbnN0IGVuZFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIGUpO1xuICByZXR1cm4gYSA9PT0gcyB8fCBhID09PSBlIHx8IChzYW1lQW5nbGVJc0Z1bGxDaXJjbGUgJiYgcyA9PT0gZSlcbiAgICB8fCAoYW5nbGVUb1N0YXJ0ID4gYW5nbGVUb0VuZCAmJiBzdGFydFRvQW5nbGUgPCBlbmRUb0FuZ2xlKTtcbn1cbmZ1bmN0aW9uIF9saW1pdFZhbHVlKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHZhbHVlKSk7XG59XG5mdW5jdGlvbiBfaW50MTZSYW5nZSh2YWx1ZSkge1xuICByZXR1cm4gX2xpbWl0VmFsdWUodmFsdWUsIC0zMjc2OCwgMzI3NjcpO1xufVxuZnVuY3Rpb24gX2lzQmV0d2Vlbih2YWx1ZSwgc3RhcnQsIGVuZCwgZXBzaWxvbiA9IDFlLTYpIHtcbiAgcmV0dXJuIHZhbHVlID49IE1hdGgubWluKHN0YXJ0LCBlbmQpIC0gZXBzaWxvbiAmJiB2YWx1ZSA8PSBNYXRoLm1heChzdGFydCwgZW5kKSArIGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIF9sb29rdXAodGFibGUsIHZhbHVlLCBjbXApIHtcbiAgY21wID0gY21wIHx8ICgoaW5kZXgpID0+IHRhYmxlW2luZGV4XSA8IHZhbHVlKTtcbiAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgbGV0IGxvID0gMDtcbiAgbGV0IG1pZDtcbiAgd2hpbGUgKGhpIC0gbG8gPiAxKSB7XG4gICAgbWlkID0gKGxvICsgaGkpID4+IDE7XG4gICAgaWYgKGNtcChtaWQpKSB7XG4gICAgICBsbyA9IG1pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaGkgPSBtaWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB7bG8sIGhpfTtcbn1cbmNvbnN0IF9sb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSwgbGFzdCkgPT5cbiAgX2xvb2t1cCh0YWJsZSwgdmFsdWUsIGxhc3RcbiAgICA/IGluZGV4ID0+IHRhYmxlW2luZGV4XVtrZXldIDw9IHZhbHVlXG4gICAgOiBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA8IHZhbHVlKTtcbmNvbnN0IF9ybG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpID0+XG4gIF9sb29rdXAodGFibGUsIHZhbHVlLCBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA+PSB2YWx1ZSk7XG5mdW5jdGlvbiBfZmlsdGVyQmV0d2Vlbih2YWx1ZXMsIG1pbiwgbWF4KSB7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSB2YWx1ZXMubGVuZ3RoO1xuICB3aGlsZSAoc3RhcnQgPCBlbmQgJiYgdmFsdWVzW3N0YXJ0XSA8IG1pbikge1xuICAgIHN0YXJ0Kys7XG4gIH1cbiAgd2hpbGUgKGVuZCA+IHN0YXJ0ICYmIHZhbHVlc1tlbmQgLSAxXSA+IG1heCkge1xuICAgIGVuZC0tO1xuICB9XG4gIHJldHVybiBzdGFydCA+IDAgfHwgZW5kIDwgdmFsdWVzLmxlbmd0aFxuICAgID8gdmFsdWVzLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgOiB2YWx1ZXM7XG59XG5jb25zdCBhcnJheUV2ZW50cyA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXTtcbmZ1bmN0aW9uIGxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuICBpZiAoYXJyYXkuX2NoYXJ0anMpIHtcbiAgICBhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZToge1xuICAgICAgbGlzdGVuZXJzOiBbbGlzdGVuZXJdXG4gICAgfVxuICB9KTtcbiAgYXJyYXlFdmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ19vbkRhdGEnICsgX2NhcGl0YWxpemUoa2V5KTtcbiAgICBjb25zdCBiYXNlID0gYXJyYXlba2V5XTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdFttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvYmplY3RbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gIGNvbnN0IHN0dWIgPSBhcnJheS5fY2hhcnRqcztcbiAgaWYgKCFzdHViKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBkZWxldGUgYXJyYXlba2V5XTtcbiAgfSk7XG4gIGRlbGV0ZSBhcnJheS5fY2hhcnRqcztcbn1cbmZ1bmN0aW9uIF9hcnJheVVuaXF1ZShpdGVtcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGxldCBpLCBpbGVuO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgc2V0LmFkZChpdGVtc1tpXSk7XG4gIH1cbiAgaWYgKHNldC5zaXplID09PSBpbGVuKSB7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5cbmZ1bmN0aW9uIGZvbnRTdHJpbmcocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcbiAgcmV0dXJuIGZvbnRTdHlsZSArICcgJyArIHBpeGVsU2l6ZSArICdweCAnICsgZm9udEZhbWlseTtcbn1cbmNvbnN0IHJlcXVlc3RBbmltRnJhbWUgPSAoZnVuY3Rpb24oKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbn0oKSk7XG5mdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcsIHVwZGF0ZUZuKSB7XG4gIGNvbnN0IHVwZGF0ZUFyZ3MgPSB1cGRhdGVGbiB8fCAoKGFyZ3MpID0+IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpKTtcbiAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgbGV0IGFyZ3MgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLnJlc3QpIHtcbiAgICBhcmdzID0gdXBkYXRlQXJncyhyZXN0KTtcbiAgICBpZiAoIXRpY2tpbmcpIHtcbiAgICAgIHRpY2tpbmcgPSB0cnVlO1xuICAgICAgcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCkgPT4ge1xuICAgICAgICB0aWNraW5nID0gZmFsc2U7XG4gICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIGRlbGF5KSB7XG4gIGxldCB0aW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGlmIChkZWxheSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZm4sIGRlbGF5LCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBkZWxheTtcbiAgfTtcbn1cbmNvbnN0IF90b0xlZnRSaWdodENlbnRlciA9IChhbGlnbikgPT4gYWxpZ24gPT09ICdzdGFydCcgPyAnbGVmdCcgOiBhbGlnbiA9PT0gJ2VuZCcgPyAncmlnaHQnIDogJ2NlbnRlcic7XG5jb25zdCBfYWxpZ25TdGFydEVuZCA9IChhbGlnbiwgc3RhcnQsIGVuZCkgPT4gYWxpZ24gPT09ICdzdGFydCcgPyBzdGFydCA6IGFsaWduID09PSAnZW5kJyA/IGVuZCA6IChzdGFydCArIGVuZCkgLyAyO1xuY29uc3QgX3RleHRYID0gKGFsaWduLCBsZWZ0LCByaWdodCwgcnRsKSA9PiB7XG4gIGNvbnN0IGNoZWNrID0gcnRsID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgcmV0dXJuIGFsaWduID09PSBjaGVjayA/IHJpZ2h0IDogYWxpZ24gPT09ICdjZW50ZXInID8gKGxlZnQgKyByaWdodCkgLyAyIDogbGVmdDtcbn07XG5mdW5jdGlvbiBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCkge1xuICBjb25zdCBwb2ludENvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGNvdW50ID0gcG9pbnRDb3VudDtcbiAgaWYgKG1ldGEuX3NvcnRlZCkge1xuICAgIGNvbnN0IHtpU2NhbGUsIF9wYXJzZWR9ID0gbWV0YTtcbiAgICBjb25zdCBheGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3Qge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoTWF0aC5taW4oXG4gICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBpU2NhbGUuYXhpcywgbWluKS5sbyxcbiAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gcG9pbnRDb3VudCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1pbikpLmxvKSxcbiAgICAgIDAsIHBvaW50Q291bnQgLSAxKTtcbiAgICB9XG4gICAgaWYgKG1heERlZmluZWQpIHtcbiAgICAgIGNvdW50ID0gX2xpbWl0VmFsdWUoTWF0aC5tYXgoXG4gICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBpU2NhbGUuYXhpcywgbWF4LCB0cnVlKS5oaSArIDEsXG4gICAgICAgIGFuaW1hdGlvbnNEaXNhYmxlZCA/IDAgOiBfbG9va3VwQnlLZXkocG9pbnRzLCBheGlzLCBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShtYXgpLCB0cnVlKS5oaSArIDEpLFxuICAgICAgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge3N0YXJ0LCBjb3VudH07XG59XG5mdW5jdGlvbiBfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpIHtcbiAgY29uc3Qge3hTY2FsZSwgeVNjYWxlLCBfc2NhbGVSYW5nZXN9ID0gbWV0YTtcbiAgY29uc3QgbmV3UmFuZ2VzID0ge1xuICAgIHhtaW46IHhTY2FsZS5taW4sXG4gICAgeG1heDogeFNjYWxlLm1heCxcbiAgICB5bWluOiB5U2NhbGUubWluLFxuICAgIHltYXg6IHlTY2FsZS5tYXhcbiAgfTtcbiAgaWYgKCFfc2NhbGVSYW5nZXMpIHtcbiAgICBtZXRhLl9zY2FsZVJhbmdlcyA9IG5ld1JhbmdlcztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBjaGFuZ2VkID0gX3NjYWxlUmFuZ2VzLnhtaW4gIT09IHhTY2FsZS5taW5cblx0XHR8fCBfc2NhbGVSYW5nZXMueG1heCAhPT0geFNjYWxlLm1heFxuXHRcdHx8IF9zY2FsZVJhbmdlcy55bWluICE9PSB5U2NhbGUubWluXG5cdFx0fHwgX3NjYWxlUmFuZ2VzLnltYXggIT09IHlTY2FsZS5tYXg7XG4gIE9iamVjdC5hc3NpZ24oX3NjYWxlUmFuZ2VzLCBuZXdSYW5nZXMpO1xuICByZXR1cm4gY2hhbmdlZDtcbn1cblxuY29uc3QgYXRFZGdlID0gKHQpID0+IHQgPT09IDAgfHwgdCA9PT0gMTtcbmNvbnN0IGVsYXN0aWNJbiA9ICh0LCBzLCBwKSA9PiAtKE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgLSBzKSAqIFRBVSAvIHApKTtcbmNvbnN0IGVsYXN0aWNPdXQgPSAodCwgcywgcCkgPT4gTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkgKyAxO1xuY29uc3QgZWZmZWN0cyA9IHtcbiAgbGluZWFyOiB0ID0+IHQsXG4gIGVhc2VJblF1YWQ6IHQgPT4gdCAqIHQsXG4gIGVhc2VPdXRRdWFkOiB0ID0+IC10ICogKHQgLSAyKSxcbiAgZWFzZUluT3V0UXVhZDogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdFxuICAgIDogLTAuNSAqICgoLS10KSAqICh0IC0gMikgLSAxKSxcbiAgZWFzZUluQ3ViaWM6IHQgPT4gdCAqIHQgKiB0LFxuICBlYXNlT3V0Q3ViaWM6IHQgPT4gKHQgLT0gMSkgKiB0ICogdCArIDEsXG4gIGVhc2VJbk91dEN1YmljOiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0ICogdFxuICAgIDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKyAyKSxcbiAgZWFzZUluUXVhcnQ6IHQgPT4gdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1YXJ0OiB0ID0+IC0oKHQgLT0gMSkgKiB0ICogdCAqIHQgLSAxKSxcbiAgZWFzZUluT3V0UXVhcnQ6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHQgKiB0ICogdFxuICAgIDogLTAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpLFxuICBlYXNlSW5RdWludDogdCA9PiB0ICogdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1aW50OiB0ID0+ICh0IC09IDEpICogdCAqIHQgKiB0ICogdCArIDEsXG4gIGVhc2VJbk91dFF1aW50OiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0XG4gICAgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMiksXG4gIGVhc2VJblNpbmU6IHQgPT4gLU1hdGguY29zKHQgKiBIQUxGX1BJKSArIDEsXG4gIGVhc2VPdXRTaW5lOiB0ID0+IE1hdGguc2luKHQgKiBIQUxGX1BJKSxcbiAgZWFzZUluT3V0U2luZTogdCA9PiAtMC41ICogKE1hdGguY29zKFBJICogdCkgLSAxKSxcbiAgZWFzZUluRXhwbzogdCA9PiAodCA9PT0gMCkgPyAwIDogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSxcbiAgZWFzZU91dEV4cG86IHQgPT4gKHQgPT09IDEpID8gMSA6IC1NYXRoLnBvdygyLCAtMTAgKiB0KSArIDEsXG4gIGVhc2VJbk91dEV4cG86IHQgPT4gYXRFZGdlKHQpID8gdCA6IHQgPCAwLjVcbiAgICA/IDAuNSAqIE1hdGgucG93KDIsIDEwICogKHQgKiAyIC0gMSkpXG4gICAgOiAwLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqICh0ICogMiAtIDEpKSArIDIpLFxuICBlYXNlSW5DaXJjOiB0ID0+ICh0ID49IDEpID8gdCA6IC0oTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKSxcbiAgZWFzZU91dENpcmM6IHQgPT4gTWF0aC5zcXJ0KDEgLSAodCAtPSAxKSAqIHQpLFxuICBlYXNlSW5PdXRDaXJjOiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKVxuICAgIDogMC41ICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpLFxuICBlYXNlSW5FbGFzdGljOiB0ID0+IGF0RWRnZSh0KSA/IHQgOiBlbGFzdGljSW4odCwgMC4wNzUsIDAuMyksXG4gIGVhc2VPdXRFbGFzdGljOiB0ID0+IGF0RWRnZSh0KSA/IHQgOiBlbGFzdGljT3V0KHQsIDAuMDc1LCAwLjMpLFxuICBlYXNlSW5PdXRFbGFzdGljKHQpIHtcbiAgICBjb25zdCBzID0gMC4xMTI1O1xuICAgIGNvbnN0IHAgPSAwLjQ1O1xuICAgIHJldHVybiBhdEVkZ2UodCkgPyB0IDpcbiAgICAgIHQgPCAwLjVcbiAgICAgICAgPyAwLjUgKiBlbGFzdGljSW4odCAqIDIsIHMsIHApXG4gICAgICAgIDogMC41ICsgMC41ICogZWxhc3RpY091dCh0ICogMiAtIDEsIHMsIHApO1xuICB9LFxuICBlYXNlSW5CYWNrKHQpIHtcbiAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgfSxcbiAgZWFzZU91dEJhY2sodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiAodCAtPSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gIH0sXG4gIGVhc2VJbk91dEJhY2sodCkge1xuICAgIGxldCBzID0gMS43MDE1ODtcbiAgICBpZiAoKHQgLz0gMC41KSA8IDEpIHtcbiAgICAgIHJldHVybiAwLjUgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpO1xuICAgIH1cbiAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgKyBzKSArIDIpO1xuICB9LFxuICBlYXNlSW5Cb3VuY2U6IHQgPT4gMSAtIGVmZmVjdHMuZWFzZU91dEJvdW5jZSgxIC0gdCksXG4gIGVhc2VPdXRCb3VuY2UodCkge1xuICAgIGNvbnN0IG0gPSA3LjU2MjU7XG4gICAgY29uc3QgZCA9IDIuNzU7XG4gICAgaWYgKHQgPCAoMSAvIGQpKSB7XG4gICAgICByZXR1cm4gbSAqIHQgKiB0O1xuICAgIH1cbiAgICBpZiAodCA8ICgyIC8gZCkpIHtcbiAgICAgIHJldHVybiBtICogKHQgLT0gKDEuNSAvIGQpKSAqIHQgKyAwLjc1O1xuICAgIH1cbiAgICBpZiAodCA8ICgyLjUgLyBkKSkge1xuICAgICAgcmV0dXJuIG0gKiAodCAtPSAoMi4yNSAvIGQpKSAqIHQgKyAwLjkzNzU7XG4gICAgfVxuICAgIHJldHVybiBtICogKHQgLT0gKDIuNjI1IC8gZCkpICogdCArIDAuOTg0Mzc1O1xuICB9LFxuICBlYXNlSW5PdXRCb3VuY2U6IHQgPT4gKHQgPCAwLjUpXG4gICAgPyBlZmZlY3RzLmVhc2VJbkJvdW5jZSh0ICogMikgKiAwLjVcbiAgICA6IGVmZmVjdHMuZWFzZU91dEJvdW5jZSh0ICogMiAtIDEpICogMC41ICsgMC41LFxufTtcblxuLyohXG4gKiBAa3Vya2xlL2NvbG9yIHYwLjIuMVxuICogaHR0cHM6Ly9naXRodWIuY29tL2t1cmtsZS9jb2xvciNyZWFkbWVcbiAqIChjKSAyMDIyIEp1a2thIEt1cmtlbGFcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG5mdW5jdGlvbiByb3VuZCh2KSB7XG4gIHJldHVybiB2ICsgMC41IHwgMDtcbn1cbmNvbnN0IGxpbSA9ICh2LCBsLCBoKSA9PiBNYXRoLm1heChNYXRoLm1pbih2LCBoKSwgbCk7XG5mdW5jdGlvbiBwMmIodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAyLjU1KSwgMCwgMjU1KTtcbn1cbmZ1bmN0aW9uIG4yYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDI1NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBiMm4odikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgLyAyLjU1KSAvIDEwMCwgMCwgMSk7XG59XG5mdW5jdGlvbiBuMnAodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAxMDApLCAwLCAxMDApO1xufVxuY29uc3QgbWFwJDEgPSB7MDogMCwgMTogMSwgMjogMiwgMzogMywgNDogNCwgNTogNSwgNjogNiwgNzogNywgODogOCwgOTogOSwgQTogMTAsIEI6IDExLCBDOiAxMiwgRDogMTMsIEU6IDE0LCBGOiAxNSwgYTogMTAsIGI6IDExLCBjOiAxMiwgZDogMTMsIGU6IDE0LCBmOiAxNX07XG5jb25zdCBoZXggPSBbLi4uJzAxMjM0NTY3ODlBQkNERUYnXTtcbmNvbnN0IGgxID0gYiA9PiBoZXhbYiAmIDB4Rl07XG5jb25zdCBoMiA9IGIgPT4gaGV4WyhiICYgMHhGMCkgPj4gNF0gKyBoZXhbYiAmIDB4Rl07XG5jb25zdCBlcSA9IGIgPT4gKChiICYgMHhGMCkgPj4gNCkgPT09IChiICYgMHhGKTtcbmNvbnN0IGlzU2hvcnQgPSB2ID0+IGVxKHYucikgJiYgZXEodi5nKSAmJiBlcSh2LmIpICYmIGVxKHYuYSk7XG5mdW5jdGlvbiBoZXhQYXJzZShzdHIpIHtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIHZhciByZXQ7XG4gIGlmIChzdHJbMF0gPT09ICcjJykge1xuICAgIGlmIChsZW4gPT09IDQgfHwgbGVuID09PSA1KSB7XG4gICAgICByZXQgPSB7XG4gICAgICAgIHI6IDI1NSAmIG1hcCQxW3N0clsxXV0gKiAxNyxcbiAgICAgICAgZzogMjU1ICYgbWFwJDFbc3RyWzJdXSAqIDE3LFxuICAgICAgICBiOiAyNTUgJiBtYXAkMVtzdHJbM11dICogMTcsXG4gICAgICAgIGE6IGxlbiA9PT0gNSA/IG1hcCQxW3N0cls0XV0gKiAxNyA6IDI1NVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gNyB8fCBsZW4gPT09IDkpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogbWFwJDFbc3RyWzFdXSA8PCA0IHwgbWFwJDFbc3RyWzJdXSxcbiAgICAgICAgZzogbWFwJDFbc3RyWzNdXSA8PCA0IHwgbWFwJDFbc3RyWzRdXSxcbiAgICAgICAgYjogbWFwJDFbc3RyWzVdXSA8PCA0IHwgbWFwJDFbc3RyWzZdXSxcbiAgICAgICAgYTogbGVuID09PSA5ID8gKG1hcCQxW3N0cls3XV0gPDwgNCB8IG1hcCQxW3N0cls4XV0pIDogMjU1XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuY29uc3QgYWxwaGEgPSAoYSwgZikgPT4gYSA8IDI1NSA/IGYoYSkgOiAnJztcbmZ1bmN0aW9uIGhleFN0cmluZyh2KSB7XG4gIHZhciBmID0gaXNTaG9ydCh2KSA/IGgxIDogaDI7XG4gIHJldHVybiB2XG4gICAgPyAnIycgKyBmKHYucikgKyBmKHYuZykgKyBmKHYuYikgKyBhbHBoYSh2LmEsIGYpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5jb25zdCBIVUVfUkUgPSAvXihoc2xhP3xod2J8aHN2KVxcKFxccyooWy0rLmVcXGRdKykoPzpkZWcpP1tcXHMsXSsoWy0rLmVcXGRdKyklW1xccyxdKyhbLSsuZVxcZF0rKSUoPzpbXFxzLF0rKFstKy5lXFxkXSspKCUpPyk/XFxzKlxcKSQvO1xuZnVuY3Rpb24gaHNsMnJnYm4oaCwgcywgbCkge1xuICBjb25zdCBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuICByZXR1cm4gW2YoMCksIGYoOCksIGYoNCldO1xufVxuZnVuY3Rpb24gaHN2MnJnYm4oaCwgcywgdikge1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyA2MCkgJSA2KSA9PiB2IC0gdiAqIHMgKiBNYXRoLm1heChNYXRoLm1pbihrLCA0IC0gaywgMSksIDApO1xuICByZXR1cm4gW2YoNSksIGYoMyksIGYoMSldO1xufVxuZnVuY3Rpb24gaHdiMnJnYm4oaCwgdywgYikge1xuICBjb25zdCByZ2IgPSBoc2wycmdibihoLCAxLCAwLjUpO1xuICBsZXQgaTtcbiAgaWYgKHcgKyBiID4gMSkge1xuICAgIGkgPSAxIC8gKHcgKyBiKTtcbiAgICB3ICo9IGk7XG4gICAgYiAqPSBpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICByZ2JbaV0gKj0gMSAtIHcgLSBiO1xuICAgIHJnYltpXSArPSB3O1xuICB9XG4gIHJldHVybiByZ2I7XG59XG5mdW5jdGlvbiBodWVWYWx1ZShyLCBnLCBiLCBkLCBtYXgpIHtcbiAgaWYgKHIgPT09IG1heCkge1xuICAgIHJldHVybiAoKGcgLSBiKSAvIGQpICsgKGcgPCBiID8gNiA6IDApO1xuICB9XG4gIGlmIChnID09PSBtYXgpIHtcbiAgICByZXR1cm4gKGIgLSByKSAvIGQgKyAyO1xuICB9XG4gIHJldHVybiAociAtIGcpIC8gZCArIDQ7XG59XG5mdW5jdGlvbiByZ2IyaHNsKHYpIHtcbiAgY29uc3QgcmFuZ2UgPSAyNTU7XG4gIGNvbnN0IHIgPSB2LnIgLyByYW5nZTtcbiAgY29uc3QgZyA9IHYuZyAvIHJhbmdlO1xuICBjb25zdCBiID0gdi5iIC8gcmFuZ2U7XG4gIGNvbnN0IG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICBjb25zdCBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgY29uc3QgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgbGV0IGgsIHMsIGQ7XG4gIGlmIChtYXggIT09IG1pbikge1xuICAgIGQgPSBtYXggLSBtaW47XG4gICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgIGggPSBodWVWYWx1ZShyLCBnLCBiLCBkLCBtYXgpO1xuICAgIGggPSBoICogNjAgKyAwLjU7XG4gIH1cbiAgcmV0dXJuIFtoIHwgMCwgcyB8fCAwLCBsXTtcbn1cbmZ1bmN0aW9uIGNhbGxuKGYsIGEsIGIsIGMpIHtcbiAgcmV0dXJuIChcbiAgICBBcnJheS5pc0FycmF5KGEpXG4gICAgICA/IGYoYVswXSwgYVsxXSwgYVsyXSlcbiAgICAgIDogZihhLCBiLCBjKVxuICApLm1hcChuMmIpO1xufVxuZnVuY3Rpb24gaHNsMnJnYihoLCBzLCBsKSB7XG4gIHJldHVybiBjYWxsbihoc2wycmdibiwgaCwgcywgbCk7XG59XG5mdW5jdGlvbiBod2IycmdiKGgsIHcsIGIpIHtcbiAgcmV0dXJuIGNhbGxuKGh3YjJyZ2JuLCBoLCB3LCBiKTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2IoaCwgcywgdikge1xuICByZXR1cm4gY2FsbG4oaHN2MnJnYm4sIGgsIHMsIHYpO1xufVxuZnVuY3Rpb24gaHVlKGgpIHtcbiAgcmV0dXJuIChoICUgMzYwICsgMzYwKSAlIDM2MDtcbn1cbmZ1bmN0aW9uIGh1ZVBhcnNlKHN0cikge1xuICBjb25zdCBtID0gSFVFX1JFLmV4ZWMoc3RyKTtcbiAgbGV0IGEgPSAyNTU7XG4gIGxldCB2O1xuICBpZiAoIW0pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1bNV0gIT09IHYpIHtcbiAgICBhID0gbVs2XSA/IHAyYigrbVs1XSkgOiBuMmIoK21bNV0pO1xuICB9XG4gIGNvbnN0IGggPSBodWUoK21bMl0pO1xuICBjb25zdCBwMSA9ICttWzNdIC8gMTAwO1xuICBjb25zdCBwMiA9ICttWzRdIC8gMTAwO1xuICBpZiAobVsxXSA9PT0gJ2h3YicpIHtcbiAgICB2ID0gaHdiMnJnYihoLCBwMSwgcDIpO1xuICB9IGVsc2UgaWYgKG1bMV0gPT09ICdoc3YnKSB7XG4gICAgdiA9IGhzdjJyZ2IoaCwgcDEsIHAyKTtcbiAgfSBlbHNlIHtcbiAgICB2ID0gaHNsMnJnYihoLCBwMSwgcDIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgcjogdlswXSxcbiAgICBnOiB2WzFdLFxuICAgIGI6IHZbMl0sXG4gICAgYTogYVxuICB9O1xufVxuZnVuY3Rpb24gcm90YXRlKHYsIGRlZykge1xuICB2YXIgaCA9IHJnYjJoc2wodik7XG4gIGhbMF0gPSBodWUoaFswXSArIGRlZyk7XG4gIGggPSBoc2wycmdiKGgpO1xuICB2LnIgPSBoWzBdO1xuICB2LmcgPSBoWzFdO1xuICB2LmIgPSBoWzJdO1xufVxuZnVuY3Rpb24gaHNsU3RyaW5nKHYpIHtcbiAgaWYgKCF2KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGEgPSByZ2IyaHNsKHYpO1xuICBjb25zdCBoID0gYVswXTtcbiAgY29uc3QgcyA9IG4ycChhWzFdKTtcbiAgY29uc3QgbCA9IG4ycChhWzJdKTtcbiAgcmV0dXJuIHYuYSA8IDI1NVxuICAgID8gYGhzbGEoJHtofSwgJHtzfSUsICR7bH0lLCAke2Iybih2LmEpfSlgXG4gICAgOiBgaHNsKCR7aH0sICR7c30lLCAke2x9JSlgO1xufVxuY29uc3QgbWFwID0ge1xuICB4OiAnZGFyaycsXG4gIFo6ICdsaWdodCcsXG4gIFk6ICdyZScsXG4gIFg6ICdibHUnLFxuICBXOiAnZ3InLFxuICBWOiAnbWVkaXVtJyxcbiAgVTogJ3NsYXRlJyxcbiAgQTogJ2VlJyxcbiAgVDogJ29sJyxcbiAgUzogJ29yJyxcbiAgQjogJ3JhJyxcbiAgQzogJ2xhdGVnJyxcbiAgRDogJ2lnaHRzJyxcbiAgUjogJ2luJyxcbiAgUTogJ3R1cnF1b2lzJyxcbiAgRTogJ2hpJyxcbiAgUDogJ3JvJyxcbiAgTzogJ2FsJyxcbiAgTjogJ2xlJyxcbiAgTTogJ2RlJyxcbiAgTDogJ3llbGxvJyxcbiAgRjogJ2VuJyxcbiAgSzogJ2NoJyxcbiAgRzogJ2Fya3MnLFxuICBIOiAnZWEnLFxuICBJOiAnaWdodGcnLFxuICBKOiAnd2gnXG59O1xuY29uc3QgbmFtZXMkMSA9IHtcbiAgT2ljZVhlOiAnZjBmOGZmJyxcbiAgYW50aXF1ZXdFdGU6ICdmYWViZDcnLFxuICBhcXVhOiAnZmZmZicsXG4gIGFxdWFtYXJSZTogJzdmZmZkNCcsXG4gIGF6dVk6ICdmMGZmZmYnLFxuICBiZWlnZTogJ2Y1ZjVkYycsXG4gIGJpc3F1ZTogJ2ZmZTRjNCcsXG4gIGJsYWNrOiAnMCcsXG4gIGJsYW5LZWRPbW9uZDogJ2ZmZWJjZCcsXG4gIFhlOiAnZmYnLFxuICBYZXZpVGV0OiAnOGEyYmUyJyxcbiAgYlB3bjogJ2E1MmEyYScsXG4gIGJ1cmx5d29vZDogJ2RlYjg4NycsXG4gIGNhTXRYZTogJzVmOWVhMCcsXG4gIEthcnRZdXNlOiAnN2ZmZjAwJyxcbiAgS29jVGF0ZTogJ2QyNjkxZScsXG4gIGNTTzogJ2ZmN2Y1MCcsXG4gIGNTbmZsb3dlclhlOiAnNjQ5NWVkJyxcbiAgY1Nuc2lsazogJ2ZmZjhkYycsXG4gIGNyaW1zb246ICdkYzE0M2MnLFxuICBjeWFuOiAnZmZmZicsXG4gIHhYZTogJzhiJyxcbiAgeGN5YW46ICc4YjhiJyxcbiAgeGdUTW5QZDogJ2I4ODYwYicsXG4gIHhXYXk6ICdhOWE5YTknLFxuICB4Z1lGOiAnNjQwMCcsXG4gIHhnWXk6ICdhOWE5YTknLFxuICB4a2hha2k6ICdiZGI3NmInLFxuICB4bWFnRnRhOiAnOGIwMDhiJyxcbiAgeFRpdmVnWUY6ICc1NTZiMmYnLFxuICB4U2FuZ2U6ICdmZjhjMDAnLFxuICB4U2NFZDogJzk5MzJjYycsXG4gIHhZZDogJzhiMDAwMCcsXG4gIHhzT21vbjogJ2U5OTY3YScsXG4gIHhzSGdZRjogJzhmYmM4ZicsXG4gIHhVWGU6ICc0ODNkOGInLFxuICB4VVdheTogJzJmNGY0ZicsXG4gIHhVZ1l5OiAnMmY0ZjRmJyxcbiAgeFFlOiAnY2VkMScsXG4gIHh2aVRldDogJzk0MDBkMycsXG4gIGRBcHBSazogJ2ZmMTQ5MycsXG4gIGRBcHNreVhlOiAnYmZmZicsXG4gIGRpbVdheTogJzY5Njk2OScsXG4gIGRpbWdZeTogJzY5Njk2OScsXG4gIGRvZGdlclhlOiAnMWU5MGZmJyxcbiAgZmlZYnJpY2s6ICdiMjIyMjInLFxuICBmbFNPd0V0ZTogJ2ZmZmFmMCcsXG4gIGZvWXN0V0FuOiAnMjI4YjIyJyxcbiAgZnVLc2lhOiAnZmYwMGZmJyxcbiAgZ2FSc2JTbzogJ2RjZGNkYycsXG4gIGdob3N0d0V0ZTogJ2Y4ZjhmZicsXG4gIGdUZDogJ2ZmZDcwMCcsXG4gIGdUTW5QZDogJ2RhYTUyMCcsXG4gIFdheTogJzgwODA4MCcsXG4gIGdZRjogJzgwMDAnLFxuICBnWUZMdzogJ2FkZmYyZicsXG4gIGdZeTogJzgwODA4MCcsXG4gIGhvbmV5TXc6ICdmMGZmZjAnLFxuICBob3RwUms6ICdmZjY5YjQnLFxuICBSZGlhbllkOiAnY2Q1YzVjJyxcbiAgUmRpZ286ICc0YjAwODInLFxuICBpdlN5OiAnZmZmZmYwJyxcbiAga2hha2k6ICdmMGU2OGMnLFxuICBsYXZGTXI6ICdlNmU2ZmEnLFxuICBsYXZGTXJYc2g6ICdmZmYwZjUnLFxuICBsYXduZ1lGOiAnN2NmYzAwJyxcbiAgTm1vbmNFZmZvbjogJ2ZmZmFjZCcsXG4gIFpYZTogJ2FkZDhlNicsXG4gIFpjU086ICdmMDgwODAnLFxuICBaY3lhbjogJ2UwZmZmZicsXG4gIFpnVE1uUGRMdzogJ2ZhZmFkMicsXG4gIFpXYXk6ICdkM2QzZDMnLFxuICBaZ1lGOiAnOTBlZTkwJyxcbiAgWmdZeTogJ2QzZDNkMycsXG4gIFpwUms6ICdmZmI2YzEnLFxuICBac09tb246ICdmZmEwN2EnLFxuICBac0hnWUY6ICcyMGIyYWEnLFxuICBac2t5WGU6ICc4N2NlZmEnLFxuICBaVVdheTogJzc3ODg5OScsXG4gIFpVZ1l5OiAnNzc4ODk5JyxcbiAgWnN0QWxYZTogJ2IwYzRkZScsXG4gIFpMdzogJ2ZmZmZlMCcsXG4gIGxpbWU6ICdmZjAwJyxcbiAgbGltZWdZRjogJzMyY2QzMicsXG4gIGxSRjogJ2ZhZjBlNicsXG4gIG1hZ0Z0YTogJ2ZmMDBmZicsXG4gIG1hUG9uOiAnODAwMDAwJyxcbiAgVmFxdWFtYXJSZTogJzY2Y2RhYScsXG4gIFZYZTogJ2NkJyxcbiAgVlNjRWQ6ICdiYTU1ZDMnLFxuICBWcHVycE46ICc5MzcwZGInLFxuICBWc0hnWUY6ICczY2IzNzEnLFxuICBWVVhlOiAnN2I2OGVlJyxcbiAgVnNwclJnZ1lGOiAnZmE5YScsXG4gIFZRZTogJzQ4ZDFjYycsXG4gIFZ2aVRldFlkOiAnYzcxNTg1JyxcbiAgbWlkbmlnaHRYZTogJzE5MTk3MCcsXG4gIG1SdGNZYW06ICdmNWZmZmEnLFxuICBtaXN0eVBzZTogJ2ZmZTRlMScsXG4gIG1vY2Nhc1I6ICdmZmU0YjUnLFxuICBuYXZham93RXRlOiAnZmZkZWFkJyxcbiAgbmF2eTogJzgwJyxcbiAgVGRsYWNlOiAnZmRmNWU2JyxcbiAgVGl2ZTogJzgwODAwMCcsXG4gIFRpdmVkQmI6ICc2YjhlMjMnLFxuICBTYW5nZTogJ2ZmYTUwMCcsXG4gIFNhbmdlWWQ6ICdmZjQ1MDAnLFxuICBTY0VkOiAnZGE3MGQ2JyxcbiAgcE9lZ1RNblBkOiAnZWVlOGFhJyxcbiAgcE9lZ1lGOiAnOThmYjk4JyxcbiAgcE9lUWU6ICdhZmVlZWUnLFxuICBwT2V2aVRldFlkOiAnZGI3MDkzJyxcbiAgcGFwYXlhd0VwOiAnZmZlZmQ1JyxcbiAgcEhLcHVmZjogJ2ZmZGFiOScsXG4gIHBlcnU6ICdjZDg1M2YnLFxuICBwUms6ICdmZmMwY2InLFxuICBwbHVtOiAnZGRhMGRkJyxcbiAgcG93TXJYZTogJ2IwZTBlNicsXG4gIHB1cnBOOiAnODAwMDgwJyxcbiAgWWJlY2NhcHVycE46ICc2NjMzOTknLFxuICBZZDogJ2ZmMDAwMCcsXG4gIFBzeWJyb3duOiAnYmM4ZjhmJyxcbiAgUHlPWGU6ICc0MTY5ZTEnLFxuICBzYWRkTmJQd246ICc4YjQ1MTMnLFxuICBzT21vbjogJ2ZhODA3MicsXG4gIHNhbmR5YlB3bjogJ2Y0YTQ2MCcsXG4gIHNIZ1lGOiAnMmU4YjU3JyxcbiAgc0hzaGVsbDogJ2ZmZjVlZScsXG4gIHNpRm5hOiAnYTA1MjJkJyxcbiAgc2lsdmVyOiAnYzBjMGMwJyxcbiAgc2t5WGU6ICc4N2NlZWInLFxuICBVWGU6ICc2YTVhY2QnLFxuICBVV2F5OiAnNzA4MDkwJyxcbiAgVWdZeTogJzcwODA5MCcsXG4gIHNub3c6ICdmZmZhZmEnLFxuICBzcHJSZ2dZRjogJ2ZmN2YnLFxuICBzdEFsWGU6ICc0NjgyYjQnLFxuICB0YW46ICdkMmI0OGMnLFxuICB0ZU86ICc4MDgwJyxcbiAgdEVzdE46ICdkOGJmZDgnLFxuICB0b21hdG86ICdmZjYzNDcnLFxuICBRZTogJzQwZTBkMCcsXG4gIHZpVGV0OiAnZWU4MmVlJyxcbiAgSkh0OiAnZjVkZWIzJyxcbiAgd0V0ZTogJ2ZmZmZmZicsXG4gIHdFdGVzbW9rZTogJ2Y1ZjVmNScsXG4gIEx3OiAnZmZmZjAwJyxcbiAgTHdnWUY6ICc5YWNkMzInXG59O1xuZnVuY3Rpb24gdW5wYWNrKCkge1xuICBjb25zdCB1bnBhY2tlZCA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmFtZXMkMSk7XG4gIGNvbnN0IHRrZXlzID0gT2JqZWN0LmtleXMobWFwKTtcbiAgbGV0IGksIGosIGssIG9rLCBuaztcbiAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBvayA9IG5rID0ga2V5c1tpXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgdGtleXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGsgPSB0a2V5c1tqXTtcbiAgICAgIG5rID0gbmsucmVwbGFjZShrLCBtYXBba10pO1xuICAgIH1cbiAgICBrID0gcGFyc2VJbnQobmFtZXMkMVtva10sIDE2KTtcbiAgICB1bnBhY2tlZFtua10gPSBbayA+PiAxNiAmIDB4RkYsIGsgPj4gOCAmIDB4RkYsIGsgJiAweEZGXTtcbiAgfVxuICByZXR1cm4gdW5wYWNrZWQ7XG59XG5sZXQgbmFtZXM7XG5mdW5jdGlvbiBuYW1lUGFyc2Uoc3RyKSB7XG4gIGlmICghbmFtZXMpIHtcbiAgICBuYW1lcyA9IHVucGFjaygpO1xuICAgIG5hbWVzLnRyYW5zcGFyZW50ID0gWzAsIDAsIDAsIDBdO1xuICB9XG4gIGNvbnN0IGEgPSBuYW1lc1tzdHIudG9Mb3dlckNhc2UoKV07XG4gIHJldHVybiBhICYmIHtcbiAgICByOiBhWzBdLFxuICAgIGc6IGFbMV0sXG4gICAgYjogYVsyXSxcbiAgICBhOiBhLmxlbmd0aCA9PT0gNCA/IGFbM10gOiAyNTVcbiAgfTtcbn1cbmNvbnN0IFJHQl9SRSA9IC9ecmdiYT9cXChcXHMqKFstKy5cXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpPyg/OltcXHMsL10rKFstKy5lXFxkXSspKCUpPyk/XFxzKlxcKSQvO1xuZnVuY3Rpb24gcmdiUGFyc2Uoc3RyKSB7XG4gIGNvbnN0IG0gPSBSR0JfUkUuZXhlYyhzdHIpO1xuICBsZXQgYSA9IDI1NTtcbiAgbGV0IHIsIGcsIGI7XG4gIGlmICghbSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobVs3XSAhPT0gcikge1xuICAgIGNvbnN0IHYgPSArbVs3XTtcbiAgICBhID0gbVs4XSA/IHAyYih2KSA6IGxpbSh2ICogMjU1LCAwLCAyNTUpO1xuICB9XG4gIHIgPSArbVsxXTtcbiAgZyA9ICttWzNdO1xuICBiID0gK21bNV07XG4gIHIgPSAyNTUgJiAobVsyXSA/IHAyYihyKSA6IGxpbShyLCAwLCAyNTUpKTtcbiAgZyA9IDI1NSAmIChtWzRdID8gcDJiKGcpIDogbGltKGcsIDAsIDI1NSkpO1xuICBiID0gMjU1ICYgKG1bNl0gPyBwMmIoYikgOiBsaW0oYiwgMCwgMjU1KSk7XG4gIHJldHVybiB7XG4gICAgcjogcixcbiAgICBnOiBnLFxuICAgIGI6IGIsXG4gICAgYTogYVxuICB9O1xufVxuZnVuY3Rpb24gcmdiU3RyaW5nKHYpIHtcbiAgcmV0dXJuIHYgJiYgKFxuICAgIHYuYSA8IDI1NVxuICAgICAgPyBgcmdiYSgke3Yucn0sICR7di5nfSwgJHt2LmJ9LCAke2Iybih2LmEpfSlgXG4gICAgICA6IGByZ2IoJHt2LnJ9LCAke3YuZ30sICR7di5ifSlgXG4gICk7XG59XG5jb25zdCB0byA9IHYgPT4gdiA8PSAwLjAwMzEzMDggPyB2ICogMTIuOTIgOiBNYXRoLnBvdyh2LCAxLjAgLyAyLjQpICogMS4wNTUgLSAwLjA1NTtcbmNvbnN0IGZyb20gPSB2ID0+IHYgPD0gMC4wNDA0NSA/IHYgLyAxMi45MiA6IE1hdGgucG93KCh2ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShyZ2IxLCByZ2IyLCB0KSB7XG4gIGNvbnN0IHIgPSBmcm9tKGIybihyZ2IxLnIpKTtcbiAgY29uc3QgZyA9IGZyb20oYjJuKHJnYjEuZykpO1xuICBjb25zdCBiID0gZnJvbShiMm4ocmdiMS5iKSk7XG4gIHJldHVybiB7XG4gICAgcjogbjJiKHRvKHIgKyB0ICogKGZyb20oYjJuKHJnYjIucikpIC0gcikpKSxcbiAgICBnOiBuMmIodG8oZyArIHQgKiAoZnJvbShiMm4ocmdiMi5nKSkgLSBnKSkpLFxuICAgIGI6IG4yYih0byhiICsgdCAqIChmcm9tKGIybihyZ2IyLmIpKSAtIGIpKSksXG4gICAgYTogcmdiMS5hICsgdCAqIChyZ2IyLmEgLSByZ2IxLmEpXG4gIH07XG59XG5mdW5jdGlvbiBtb2RIU0wodiwgaSwgcmF0aW8pIHtcbiAgaWYgKHYpIHtcbiAgICBsZXQgdG1wID0gcmdiMmhzbCh2KTtcbiAgICB0bXBbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0bXBbaV0gKyB0bXBbaV0gKiByYXRpbywgaSA9PT0gMCA/IDM2MCA6IDEpKTtcbiAgICB0bXAgPSBoc2wycmdiKHRtcCk7XG4gICAgdi5yID0gdG1wWzBdO1xuICAgIHYuZyA9IHRtcFsxXTtcbiAgICB2LmIgPSB0bXBbMl07XG4gIH1cbn1cbmZ1bmN0aW9uIGNsb25lKHYsIHByb3RvKSB7XG4gIHJldHVybiB2ID8gT2JqZWN0LmFzc2lnbihwcm90byB8fCB7fSwgdikgOiB2O1xufVxuZnVuY3Rpb24gZnJvbU9iamVjdChpbnB1dCkge1xuICB2YXIgdiA9IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID49IDMpIHtcbiAgICAgIHYgPSB7cjogaW5wdXRbMF0sIGc6IGlucHV0WzFdLCBiOiBpbnB1dFsyXSwgYTogMjU1fTtcbiAgICAgIGlmIChpbnB1dC5sZW5ndGggPiAzKSB7XG4gICAgICAgIHYuYSA9IG4yYihpbnB1dFszXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHYgPSBjbG9uZShpbnB1dCwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDF9KTtcbiAgICB2LmEgPSBuMmIodi5hKTtcbiAgfVxuICByZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uUGFyc2Uoc3RyKSB7XG4gIGlmIChzdHIuY2hhckF0KDApID09PSAncicpIHtcbiAgICByZXR1cm4gcmdiUGFyc2Uoc3RyKTtcbiAgfVxuICByZXR1cm4gaHVlUGFyc2Uoc3RyKTtcbn1cbmNsYXNzIENvbG9yIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgIGxldCB2O1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdiA9IGZyb21PYmplY3QoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHYgPSBoZXhQYXJzZShpbnB1dCkgfHwgbmFtZVBhcnNlKGlucHV0KSB8fCBmdW5jdGlvblBhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdGhpcy5fcmdiID0gdjtcbiAgICB0aGlzLl92YWxpZCA9ICEhdjtcbiAgfVxuICBnZXQgdmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkO1xuICB9XG4gIGdldCByZ2IoKSB7XG4gICAgdmFyIHYgPSBjbG9uZSh0aGlzLl9yZ2IpO1xuICAgIGlmICh2KSB7XG4gICAgICB2LmEgPSBiMm4odi5hKTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cbiAgc2V0IHJnYihvYmopIHtcbiAgICB0aGlzLl9yZ2IgPSBmcm9tT2JqZWN0KG9iaik7XG4gIH1cbiAgcmdiU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IHJnYlN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhleFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoZXhTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBoc2xTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gaHNsU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgbWl4KGNvbG9yLCB3ZWlnaHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbnN0IGMxID0gdGhpcy5yZ2I7XG4gICAgICBjb25zdCBjMiA9IGNvbG9yLnJnYjtcbiAgICAgIGxldCB3MjtcbiAgICAgIGNvbnN0IHAgPSB3ZWlnaHQgPT09IHcyID8gMC41IDogd2VpZ2h0O1xuICAgICAgY29uc3QgdyA9IDIgKiBwIC0gMTtcbiAgICAgIGNvbnN0IGEgPSBjMS5hIC0gYzIuYTtcbiAgICAgIGNvbnN0IHcxID0gKCh3ICogYSA9PT0gLTEgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuICAgICAgdzIgPSAxIC0gdzE7XG4gICAgICBjMS5yID0gMHhGRiAmIHcxICogYzEuciArIHcyICogYzIuciArIDAuNTtcbiAgICAgIGMxLmcgPSAweEZGICYgdzEgKiBjMS5nICsgdzIgKiBjMi5nICsgMC41O1xuICAgICAgYzEuYiA9IDB4RkYgJiB3MSAqIGMxLmIgKyB3MiAqIGMyLmIgKyAwLjU7XG4gICAgICBjMS5hID0gcCAqIGMxLmEgKyAoMSAtIHApICogYzIuYTtcbiAgICAgIHRoaXMucmdiID0gYzE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGludGVycG9sYXRlKGNvbG9yLCB0KSB7XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICB0aGlzLl9yZ2IgPSBpbnRlcnBvbGF0ZSh0aGlzLl9yZ2IsIGNvbG9yLl9yZ2IsIHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKHRoaXMucmdiKTtcbiAgfVxuICBhbHBoYShhKSB7XG4gICAgdGhpcy5fcmdiLmEgPSBuMmIoYSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXJlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxIC0gcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ3JleXNjYWxlKCkge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICBjb25zdCB2YWwgPSByb3VuZChyZ2IuciAqIDAuMyArIHJnYi5nICogMC41OSArIHJnYi5iICogMC4xMSk7XG4gICAgcmdiLnIgPSByZ2IuZyA9IHJnYi5iID0gdmFsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9wYXF1ZXIocmF0aW8pIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgcmdiLmEgKj0gMSArIHJhdGlvO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG5lZ2F0ZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5fcmdiO1xuICAgIHYuciA9IDI1NSAtIHYucjtcbiAgICB2LmcgPSAyNTUgLSB2Lmc7XG4gICAgdi5iID0gMjU1IC0gdi5iO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGxpZ2h0ZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCByYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZGFya2VuKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMiwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzYXR1cmF0ZShyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDEsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkZXNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByb3RhdGUoZGVnKSB7XG4gICAgcm90YXRlKHRoaXMuX3JnYiwgZGVnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuZnVuY3Rpb24gaW5kZXhfZXNtKGlucHV0KSB7XG4gIHJldHVybiBuZXcgQ29sb3IoaW5wdXQpO1xufVxuXG5mdW5jdGlvbiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgdHlwZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdbb2JqZWN0IENhbnZhc1BhdHRlcm5dJyB8fCB0eXBlID09PSAnW29iamVjdCBDYW52YXNHcmFkaWVudF0nO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbG9yKHZhbHVlKSB7XG4gIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSA/IHZhbHVlIDogaW5kZXhfZXNtKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldEhvdmVyQ29sb3IodmFsdWUpIHtcbiAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpXG4gICAgPyB2YWx1ZVxuICAgIDogaW5kZXhfZXNtKHZhbHVlKS5zYXR1cmF0ZSgwLjUpLmRhcmtlbigwLjEpLmhleFN0cmluZygpO1xufVxuXG5jb25zdCBvdmVycmlkZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gZ2V0U2NvcGUkMShub2RlLCBrZXkpIHtcbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gIGZvciAobGV0IGkgPSAwLCBuID0ga2V5cy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBjb25zdCBrID0ga2V5c1tpXTtcbiAgICBub2RlID0gbm9kZVtrXSB8fCAobm9kZVtrXSA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gc2V0KHJvb3QsIHNjb3BlLCB2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiBzY29wZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCBzY29wZSksIHZhbHVlcyk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlKGdldFNjb3BlJDEocm9vdCwgJycpLCBzY29wZSk7XG59XG5jbGFzcyBEZWZhdWx0cyB7XG4gIGNvbnN0cnVjdG9yKF9kZXNjcmlwdG9ycykge1xuICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgdGhpcy5ib3JkZXJDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgIHRoaXMuY29sb3IgPSAnIzY2Nic7XG4gICAgdGhpcy5kYXRhc2V0cyA9IHt9O1xuICAgIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyA9IChjb250ZXh0KSA9PiBjb250ZXh0LmNoYXJ0LnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICB0aGlzLmVsZW1lbnRzID0ge307XG4gICAgdGhpcy5ldmVudHMgPSBbXG4gICAgICAnbW91c2Vtb3ZlJyxcbiAgICAgICdtb3VzZW91dCcsXG4gICAgICAnY2xpY2snLFxuICAgICAgJ3RvdWNoc3RhcnQnLFxuICAgICAgJ3RvdWNobW92ZSdcbiAgICBdO1xuICAgIHRoaXMuZm9udCA9IHtcbiAgICAgIGZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuICAgICAgc2l6ZTogMTIsXG4gICAgICBzdHlsZTogJ25vcm1hbCcsXG4gICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICB3ZWlnaHQ6IG51bGxcbiAgICB9O1xuICAgIHRoaXMuaG92ZXIgPSB7fTtcbiAgICB0aGlzLmhvdmVyQmFja2dyb3VuZENvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcik7XG4gICAgdGhpcy5ob3ZlckJvcmRlckNvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKTtcbiAgICB0aGlzLmhvdmVyQ29sb3IgPSAoY3R4LCBvcHRpb25zKSA9PiBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuY29sb3IpO1xuICAgIHRoaXMuaW5kZXhBeGlzID0gJ3gnO1xuICAgIHRoaXMuaW50ZXJhY3Rpb24gPSB7XG4gICAgICBtb2RlOiAnbmVhcmVzdCcsXG4gICAgICBpbnRlcnNlY3Q6IHRydWUsXG4gICAgICBpbmNsdWRlSW52aXNpYmxlOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5tYWludGFpbkFzcGVjdFJhdGlvID0gdHJ1ZTtcbiAgICB0aGlzLm9uSG92ZXIgPSBudWxsO1xuICAgIHRoaXMub25DbGljayA9IG51bGw7XG4gICAgdGhpcy5wYXJzaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnBsdWdpbnMgPSB7fTtcbiAgICB0aGlzLnJlc3BvbnNpdmUgPSB0cnVlO1xuICAgIHRoaXMuc2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zY2FsZXMgPSB7fTtcbiAgICB0aGlzLnNob3dMaW5lID0gdHJ1ZTtcbiAgICB0aGlzLmRyYXdBY3RpdmVFbGVtZW50c09uVG9wID0gdHJ1ZTtcbiAgICB0aGlzLmRlc2NyaWJlKF9kZXNjcmlwdG9ycyk7XG4gIH1cbiAgc2V0KHNjb3BlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gc2V0KHRoaXMsIHNjb3BlLCB2YWx1ZXMpO1xuICB9XG4gIGdldChzY29wZSkge1xuICAgIHJldHVybiBnZXRTY29wZSQxKHRoaXMsIHNjb3BlKTtcbiAgfVxuICBkZXNjcmliZShzY29wZSwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIHNldChkZXNjcmlwdG9ycywgc2NvcGUsIHZhbHVlcyk7XG4gIH1cbiAgb3ZlcnJpZGUoc2NvcGUsIHZhbHVlcykge1xuICAgIHJldHVybiBzZXQob3ZlcnJpZGVzLCBzY29wZSwgdmFsdWVzKTtcbiAgfVxuICByb3V0ZShzY29wZSwgbmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpIHtcbiAgICBjb25zdCBzY29wZU9iamVjdCA9IGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICAgIGNvbnN0IHRhcmdldFNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCB0YXJnZXRTY29wZSk7XG4gICAgY29uc3QgcHJpdmF0ZU5hbWUgPSAnXycgKyBuYW1lO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNjb3BlT2JqZWN0LCB7XG4gICAgICBbcHJpdmF0ZU5hbWVdOiB7XG4gICAgICAgIHZhbHVlOiBzY29wZU9iamVjdFtuYW1lXSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBbbmFtZV06IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIGNvbnN0IGxvY2FsID0gdGhpc1twcml2YXRlTmFtZV07XG4gICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0U2NvcGVPYmplY3RbdGFyZ2V0TmFtZV07XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGxvY2FsKSkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRhcmdldCwgbG9jYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWVPckRlZmF1bHQobG9jYWwsIHRhcmdldCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHRoaXNbcHJpdmF0ZU5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxudmFyIGRlZmF1bHRzID0gbmV3IERlZmF1bHRzKHtcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiAhbmFtZS5zdGFydHNXaXRoKCdvbicpLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2V2ZW50cycsXG4gIGhvdmVyOiB7XG4gICAgX2ZhbGxiYWNrOiAnaW50ZXJhY3Rpb24nXG4gIH0sXG4gIGludGVyYWN0aW9uOiB7XG4gICAgX3NjcmlwdGFibGU6IGZhbHNlLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICB9XG59KTtcblxuZnVuY3Rpb24gdG9Gb250U3RyaW5nKGZvbnQpIHtcbiAgaWYgKCFmb250IHx8IGlzTnVsbE9yVW5kZWYoZm9udC5zaXplKSB8fCBpc051bGxPclVuZGVmKGZvbnQuZmFtaWx5KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAoZm9udC5zdHlsZSA/IGZvbnQuc3R5bGUgKyAnICcgOiAnJylcblx0XHQrIChmb250LndlaWdodCA/IGZvbnQud2VpZ2h0ICsgJyAnIDogJycpXG5cdFx0KyBmb250LnNpemUgKyAncHggJ1xuXHRcdCsgZm9udC5mYW1pbHk7XG59XG5mdW5jdGlvbiBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgc3RyaW5nKSB7XG4gIGxldCB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ107XG4gIGlmICghdGV4dFdpZHRoKSB7XG4gICAgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddID0gY3R4Lm1lYXN1cmVUZXh0KHN0cmluZykud2lkdGg7XG4gICAgZ2MucHVzaChzdHJpbmcpO1xuICB9XG4gIGlmICh0ZXh0V2lkdGggPiBsb25nZXN0KSB7XG4gICAgbG9uZ2VzdCA9IHRleHRXaWR0aDtcbiAgfVxuICByZXR1cm4gbG9uZ2VzdDtcbn1cbmZ1bmN0aW9uIF9sb25nZXN0VGV4dChjdHgsIGZvbnQsIGFycmF5T2ZUaGluZ3MsIGNhY2hlKSB7XG4gIGNhY2hlID0gY2FjaGUgfHwge307XG4gIGxldCBkYXRhID0gY2FjaGUuZGF0YSA9IGNhY2hlLmRhdGEgfHwge307XG4gIGxldCBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgfHwgW107XG4gIGlmIChjYWNoZS5mb250ICE9PSBmb250KSB7XG4gICAgZGF0YSA9IGNhY2hlLmRhdGEgPSB7fTtcbiAgICBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gW107XG4gICAgY2FjaGUuZm9udCA9IGZvbnQ7XG4gIH1cbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmZvbnQgPSBmb250O1xuICBsZXQgbG9uZ2VzdCA9IDA7XG4gIGNvbnN0IGlsZW4gPSBhcnJheU9mVGhpbmdzLmxlbmd0aDtcbiAgbGV0IGksIGosIGpsZW4sIHRoaW5nLCBuZXN0ZWRUaGluZztcbiAgZm9yIChpID0gMDsgaSA8IGlsZW47IGkrKykge1xuICAgIHRoaW5nID0gYXJyYXlPZlRoaW5nc1tpXTtcbiAgICBpZiAodGhpbmcgIT09IHVuZGVmaW5lZCAmJiB0aGluZyAhPT0gbnVsbCAmJiBpc0FycmF5KHRoaW5nKSAhPT0gdHJ1ZSkge1xuICAgICAgbG9uZ2VzdCA9IF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCB0aGluZyk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHRoaW5nKSkge1xuICAgICAgZm9yIChqID0gMCwgamxlbiA9IHRoaW5nLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuICAgICAgICBuZXN0ZWRUaGluZyA9IHRoaW5nW2pdO1xuICAgICAgICBpZiAobmVzdGVkVGhpbmcgIT09IHVuZGVmaW5lZCAmJiBuZXN0ZWRUaGluZyAhPT0gbnVsbCAmJiAhaXNBcnJheShuZXN0ZWRUaGluZykpIHtcbiAgICAgICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIG5lc3RlZFRoaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjdHgucmVzdG9yZSgpO1xuICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gIGlmIChnY0xlbiA+IGFycmF5T2ZUaGluZ3MubGVuZ3RoKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGdjTGVuOyBpKyspIHtcbiAgICAgIGRlbGV0ZSBkYXRhW2djW2ldXTtcbiAgICB9XG4gICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgfVxuICByZXR1cm4gbG9uZ2VzdDtcbn1cbmZ1bmN0aW9uIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgd2lkdGgpIHtcbiAgY29uc3QgZGV2aWNlUGl4ZWxSYXRpbyA9IGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvO1xuICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAhPT0gMCA/IE1hdGgubWF4KHdpZHRoIC8gMiwgMC41KSA6IDA7XG4gIHJldHVybiBNYXRoLnJvdW5kKChwaXhlbCAtIGhhbGZXaWR0aCkgKiBkZXZpY2VQaXhlbFJhdGlvKSAvIGRldmljZVBpeGVsUmF0aW8gKyBoYWxmV2lkdGg7XG59XG5mdW5jdGlvbiBjbGVhckNhbnZhcyhjYW52YXMsIGN0eCkge1xuICBjdHggPSBjdHggfHwgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5yZXNldFRyYW5zZm9ybSgpO1xuICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnQoY3R4LCBvcHRpb25zLCB4LCB5KSB7XG4gIGRyYXdQb2ludExlZ2VuZChjdHgsIG9wdGlvbnMsIHgsIHksIG51bGwpO1xufVxuZnVuY3Rpb24gZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgdykge1xuICBsZXQgdHlwZSwgeE9mZnNldCwgeU9mZnNldCwgc2l6ZSwgY29ybmVyUmFkaXVzLCB3aWR0aDtcbiAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnBvaW50U3R5bGU7XG4gIGNvbnN0IHJvdGF0aW9uID0gb3B0aW9ucy5yb3RhdGlvbjtcbiAgY29uc3QgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG4gIGxldCByYWQgPSAocm90YXRpb24gfHwgMCkgKiBSQURfUEVSX0RFRztcbiAgaWYgKHN0eWxlICYmIHR5cGVvZiBzdHlsZSA9PT0gJ29iamVjdCcpIHtcbiAgICB0eXBlID0gc3R5bGUudG9TdHJpbmcoKTtcbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgSFRNTEltYWdlRWxlbWVudF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XScpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgY3R4LnJvdGF0ZShyYWQpO1xuICAgICAgY3R4LmRyYXdJbWFnZShzdHlsZSwgLXN0eWxlLndpZHRoIC8gMiwgLXN0eWxlLmhlaWdodCAvIDIsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDw9IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBzd2l0Y2ggKHN0eWxlKSB7XG4gIGRlZmF1bHQ6XG4gICAgaWYgKHcpIHtcbiAgICAgIGN0eC5lbGxpcHNlKHgsIHksIHcgLyAyLCByYWRpdXMsIDAsIDAsIFRBVSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBUQVUpO1xuICAgIH1cbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3RyaWFuZ2xlJzpcbiAgICBjdHgubW92ZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3JlY3RSb3VuZGVkJzpcbiAgICBjb3JuZXJSYWRpdXMgPSByYWRpdXMgKiAwLjUxNjtcbiAgICBzaXplID0gcmFkaXVzIC0gY29ybmVyUmFkaXVzO1xuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICBjdHguYXJjKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBQSSwgcmFkIC0gSEFMRl9QSSk7XG4gICAgY3R4LmFyYyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gSEFMRl9QSSwgcmFkKTtcbiAgICBjdHguYXJjKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQsIHJhZCArIEhBTEZfUEkpO1xuICAgIGN0eC5hcmMoeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCArIEhBTEZfUEksIHJhZCArIFBJKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3JlY3QnOlxuICAgIGlmICghcm90YXRpb24pIHtcbiAgICAgIHNpemUgPSBNYXRoLlNRUlQxXzIgKiByYWRpdXM7XG4gICAgICB3aWR0aCA9IHcgPyB3IC8gMiA6IHNpemU7XG4gICAgICBjdHgucmVjdCh4IC0gd2lkdGgsIHkgLSBzaXplLCAyICogd2lkdGgsIDIgKiBzaXplKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgY2FzZSAncmVjdFJvdCc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAnY3Jvc3NSb3QnOlxuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICBjYXNlICdjcm9zcyc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlICdzdGFyJzpcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlICdsaW5lJzpcbiAgICB4T2Zmc2V0ID0gdyA/IHcgLyAyIDogTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlICdkYXNoJzpcbiAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguY29zKHJhZCkgKiByYWRpdXMsIHkgKyBNYXRoLnNpbihyYWQpICogcmFkaXVzKTtcbiAgICBicmVhaztcbiAgfVxuICBjdHguZmlsbCgpO1xuICBpZiAob3B0aW9ucy5ib3JkZXJXaWR0aCA+IDApIHtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9pc1BvaW50SW5BcmVhKHBvaW50LCBhcmVhLCBtYXJnaW4pIHtcbiAgbWFyZ2luID0gbWFyZ2luIHx8IDAuNTtcbiAgcmV0dXJuICFhcmVhIHx8IChwb2ludCAmJiBwb2ludC54ID4gYXJlYS5sZWZ0IC0gbWFyZ2luICYmIHBvaW50LnggPCBhcmVhLnJpZ2h0ICsgbWFyZ2luICYmXG5cdFx0cG9pbnQueSA+IGFyZWEudG9wIC0gbWFyZ2luICYmIHBvaW50LnkgPCBhcmVhLmJvdHRvbSArIG1hcmdpbik7XG59XG5mdW5jdGlvbiBjbGlwQXJlYShjdHgsIGFyZWEpIHtcbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgucmVjdChhcmVhLmxlZnQsIGFyZWEudG9wLCBhcmVhLnJpZ2h0IC0gYXJlYS5sZWZ0LCBhcmVhLmJvdHRvbSAtIGFyZWEudG9wKTtcbiAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIHVuY2xpcEFyZWEoY3R4KSB7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBfc3RlcHBlZExpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXAsIG1vZGUpIHtcbiAgaWYgKCFwcmV2aW91cykge1xuICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gIH1cbiAgaWYgKG1vZGUgPT09ICdtaWRkbGUnKSB7XG4gICAgY29uc3QgbWlkcG9pbnQgPSAocHJldmlvdXMueCArIHRhcmdldC54KSAvIDIuMDtcbiAgICBjdHgubGluZVRvKG1pZHBvaW50LCBwcmV2aW91cy55KTtcbiAgICBjdHgubGluZVRvKG1pZHBvaW50LCB0YXJnZXQueSk7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2FmdGVyJyAhPT0gISFmbGlwKSB7XG4gICAgY3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgcHJldmlvdXMueSk7XG4gIH1cbiAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gX2JlemllckN1cnZlVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG4gIGlmICghcHJldmlvdXMpIHtcbiAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICB9XG4gIGN0eC5iZXppZXJDdXJ2ZVRvKFxuICAgIGZsaXAgPyBwcmV2aW91cy5jcDF4IDogcHJldmlvdXMuY3AyeCxcbiAgICBmbGlwID8gcHJldmlvdXMuY3AxeSA6IHByZXZpb3VzLmNwMnksXG4gICAgZmxpcCA/IHRhcmdldC5jcDJ4IDogdGFyZ2V0LmNwMXgsXG4gICAgZmxpcCA/IHRhcmdldC5jcDJ5IDogdGFyZ2V0LmNwMXksXG4gICAgdGFyZ2V0LngsXG4gICAgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gcmVuZGVyVGV4dChjdHgsIHRleHQsIHgsIHksIGZvbnQsIG9wdHMgPSB7fSkge1xuICBjb25zdCBsaW5lcyA9IGlzQXJyYXkodGV4dCkgPyB0ZXh0IDogW3RleHRdO1xuICBjb25zdCBzdHJva2UgPSBvcHRzLnN0cm9rZVdpZHRoID4gMCAmJiBvcHRzLnN0cm9rZUNvbG9yICE9PSAnJztcbiAgbGV0IGksIGxpbmU7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5mb250ID0gZm9udC5zdHJpbmc7XG4gIHNldFJlbmRlck9wdHMoY3R4LCBvcHRzKTtcbiAgZm9yIChpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgbGluZSA9IGxpbmVzW2ldO1xuICAgIGlmIChzdHJva2UpIHtcbiAgICAgIGlmIChvcHRzLnN0cm9rZUNvbG9yKSB7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuc3Ryb2tlQ29sb3I7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5zdHJva2VXaWR0aCkpIHtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdHMuc3Ryb2tlV2lkdGg7XG4gICAgICB9XG4gICAgICBjdHguc3Ryb2tlVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICB9XG4gICAgY3R4LmZpbGxUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgIGRlY29yYXRlVGV4dChjdHgsIHgsIHksIGxpbmUsIG9wdHMpO1xuICAgIHkgKz0gZm9udC5saW5lSGVpZ2h0O1xuICB9XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cykge1xuICBpZiAob3B0cy50cmFuc2xhdGlvbikge1xuICAgIGN0eC50cmFuc2xhdGUob3B0cy50cmFuc2xhdGlvblswXSwgb3B0cy50cmFuc2xhdGlvblsxXSk7XG4gIH1cbiAgaWYgKCFpc051bGxPclVuZGVmKG9wdHMucm90YXRpb24pKSB7XG4gICAgY3R4LnJvdGF0ZShvcHRzLnJvdGF0aW9uKTtcbiAgfVxuICBpZiAob3B0cy5jb2xvcikge1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9yO1xuICB9XG4gIGlmIChvcHRzLnRleHRBbGlnbikge1xuICAgIGN0eC50ZXh0QWxpZ24gPSBvcHRzLnRleHRBbGlnbjtcbiAgfVxuICBpZiAob3B0cy50ZXh0QmFzZWxpbmUpIHtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gb3B0cy50ZXh0QmFzZWxpbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlY29yYXRlVGV4dChjdHgsIHgsIHksIGxpbmUsIG9wdHMpIHtcbiAgaWYgKG9wdHMuc3RyaWtldGhyb3VnaCB8fCBvcHRzLnVuZGVybGluZSkge1xuICAgIGNvbnN0IG1ldHJpY3MgPSBjdHgubWVhc3VyZVRleHQobGluZSk7XG4gICAgY29uc3QgbGVmdCA9IHggLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94TGVmdDtcbiAgICBjb25zdCByaWdodCA9IHggKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94UmlnaHQ7XG4gICAgY29uc3QgdG9wID0geSAtIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQ7XG4gICAgY29uc3QgYm90dG9tID0geSArIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50O1xuICAgIGNvbnN0IHlEZWNvcmF0aW9uID0gb3B0cy5zdHJpa2V0aHJvdWdoID8gKHRvcCArIGJvdHRvbSkgLyAyIDogYm90dG9tO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGU7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLmRlY29yYXRpb25XaWR0aCB8fCAyO1xuICAgIGN0eC5tb3ZlVG8obGVmdCwgeURlY29yYXRpb24pO1xuICAgIGN0eC5saW5lVG8ocmlnaHQsIHlEZWNvcmF0aW9uKTtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHJlY3QpIHtcbiAgY29uc3Qge3gsIHksIHcsIGgsIHJhZGl1c30gPSByZWN0O1xuICBjdHguYXJjKHggKyByYWRpdXMudG9wTGVmdCwgeSArIHJhZGl1cy50b3BMZWZ0LCByYWRpdXMudG9wTGVmdCwgLUhBTEZfUEksIFBJLCB0cnVlKTtcbiAgY3R4LmxpbmVUbyh4LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0KTtcbiAgY3R4LmFyYyh4ICsgcmFkaXVzLmJvdHRvbUxlZnQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbUxlZnQsIHJhZGl1cy5ib3R0b21MZWZ0LCBQSSwgSEFMRl9QSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoKTtcbiAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy5ib3R0b21SaWdodCwgeSArIGggLSByYWRpdXMuYm90dG9tUmlnaHQsIHJhZGl1cy5ib3R0b21SaWdodCwgSEFMRl9QSSwgMCwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHcsIHkgKyByYWRpdXMudG9wUmlnaHQpO1xuICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLnRvcFJpZ2h0LCB5ICsgcmFkaXVzLnRvcFJpZ2h0LCByYWRpdXMudG9wUmlnaHQsIDAsIC1IQUxGX1BJLCB0cnVlKTtcbiAgY3R4LmxpbmVUbyh4ICsgcmFkaXVzLnRvcExlZnQsIHkpO1xufVxuXG5jb25zdCBMSU5FX0hFSUdIVCA9IG5ldyBSZWdFeHAoL14obm9ybWFsfChcXGQrKD86XFwuXFxkKyk/KShweHxlbXwlKT8pJC8pO1xuY29uc3QgRk9OVF9TVFlMRSA9IG5ldyBSZWdFeHAoL14obm9ybWFsfGl0YWxpY3xpbml0aWFsfGluaGVyaXR8dW5zZXR8KG9ibGlxdWUoIC0/WzAtOV0/WzAtOV1kZWcpPykpJC8pO1xuZnVuY3Rpb24gdG9MaW5lSGVpZ2h0KHZhbHVlLCBzaXplKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSAoJycgKyB2YWx1ZSkubWF0Y2goTElORV9IRUlHSFQpO1xuICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlc1sxXSA9PT0gJ25vcm1hbCcpIHtcbiAgICByZXR1cm4gc2l6ZSAqIDEuMjtcbiAgfVxuICB2YWx1ZSA9ICttYXRjaGVzWzJdO1xuICBzd2l0Y2ggKG1hdGNoZXNbM10pIHtcbiAgY2FzZSAncHgnOlxuICAgIHJldHVybiB2YWx1ZTtcbiAgY2FzZSAnJSc6XG4gICAgdmFsdWUgLz0gMTAwO1xuICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzaXplICogdmFsdWU7XG59XG5jb25zdCBudW1iZXJPclplcm8gPSB2ID0+ICt2IHx8IDA7XG5mdW5jdGlvbiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgcHJvcHMpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGNvbnN0IG9ialByb3BzID0gaXNPYmplY3QocHJvcHMpO1xuICBjb25zdCBrZXlzID0gb2JqUHJvcHMgPyBPYmplY3Qua2V5cyhwcm9wcykgOiBwcm9wcztcbiAgY29uc3QgcmVhZCA9IGlzT2JqZWN0KHZhbHVlKVxuICAgID8gb2JqUHJvcHNcbiAgICAgID8gcHJvcCA9PiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZVtwcm9wXSwgdmFsdWVbcHJvcHNbcHJvcF1dKVxuICAgICAgOiBwcm9wID0+IHZhbHVlW3Byb3BdXG4gICAgOiAoKSA9PiB2YWx1ZTtcbiAgZm9yIChjb25zdCBwcm9wIG9mIGtleXMpIHtcbiAgICByZXRbcHJvcF0gPSBudW1iZXJPclplcm8ocmVhZChwcm9wKSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHRvVFJCTCh2YWx1ZSkge1xuICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHt0b3A6ICd5JywgcmlnaHQ6ICd4JywgYm90dG9tOiAneScsIGxlZnQ6ICd4J30pO1xufVxuZnVuY3Rpb24gdG9UUkJMQ29ybmVycyh2YWx1ZSkge1xuICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIFsndG9wTGVmdCcsICd0b3BSaWdodCcsICdib3R0b21MZWZ0JywgJ2JvdHRvbVJpZ2h0J10pO1xufVxuZnVuY3Rpb24gdG9QYWRkaW5nKHZhbHVlKSB7XG4gIGNvbnN0IG9iaiA9IHRvVFJCTCh2YWx1ZSk7XG4gIG9iai53aWR0aCA9IG9iai5sZWZ0ICsgb2JqLnJpZ2h0O1xuICBvYmouaGVpZ2h0ID0gb2JqLnRvcCArIG9iai5ib3R0b207XG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiB0b0ZvbnQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZhbGxiYWNrID0gZmFsbGJhY2sgfHwgZGVmYXVsdHMuZm9udDtcbiAgbGV0IHNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnNpemUsIGZhbGxiYWNrLnNpemUpO1xuICBpZiAodHlwZW9mIHNpemUgPT09ICdzdHJpbmcnKSB7XG4gICAgc2l6ZSA9IHBhcnNlSW50KHNpemUsIDEwKTtcbiAgfVxuICBsZXQgc3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnN0eWxlLCBmYWxsYmFjay5zdHlsZSk7XG4gIGlmIChzdHlsZSAmJiAhKCcnICsgc3R5bGUpLm1hdGNoKEZPTlRfU1RZTEUpKSB7XG4gICAgY29uc29sZS53YXJuKCdJbnZhbGlkIGZvbnQgc3R5bGUgc3BlY2lmaWVkOiBcIicgKyBzdHlsZSArICdcIicpO1xuICAgIHN0eWxlID0gJyc7XG4gIH1cbiAgY29uc3QgZm9udCA9IHtcbiAgICBmYW1pbHk6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZmFtaWx5LCBmYWxsYmFjay5mYW1pbHkpLFxuICAgIGxpbmVIZWlnaHQ6IHRvTGluZUhlaWdodCh2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmxpbmVIZWlnaHQsIGZhbGxiYWNrLmxpbmVIZWlnaHQpLCBzaXplKSxcbiAgICBzaXplLFxuICAgIHN0eWxlLFxuICAgIHdlaWdodDogdmFsdWVPckRlZmF1bHQob3B0aW9ucy53ZWlnaHQsIGZhbGxiYWNrLndlaWdodCksXG4gICAgc3RyaW5nOiAnJ1xuICB9O1xuICBmb250LnN0cmluZyA9IHRvRm9udFN0cmluZyhmb250KTtcbiAgcmV0dXJuIGZvbnQ7XG59XG5mdW5jdGlvbiByZXNvbHZlKGlucHV0cywgY29udGV4dCwgaW5kZXgsIGluZm8pIHtcbiAgbGV0IGNhY2hlYWJsZSA9IHRydWU7XG4gIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGlucHV0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICB2YWx1ZSA9IGlucHV0c1tpXTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlKGNvbnRleHQpO1xuICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlW2luZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGluZm8gJiYgIWNhY2hlYWJsZSkge1xuICAgICAgICBpbmZvLmNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX2FkZEdyYWNlKG1pbm1heCwgZ3JhY2UsIGJlZ2luQXRaZXJvKSB7XG4gIGNvbnN0IHttaW4sIG1heH0gPSBtaW5tYXg7XG4gIGNvbnN0IGNoYW5nZSA9IHRvRGltZW5zaW9uKGdyYWNlLCAobWF4IC0gbWluKSAvIDIpO1xuICBjb25zdCBrZWVwWmVybyA9ICh2YWx1ZSwgYWRkKSA9PiBiZWdpbkF0WmVybyAmJiB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSArIGFkZDtcbiAgcmV0dXJuIHtcbiAgICBtaW46IGtlZXBaZXJvKG1pbiwgLU1hdGguYWJzKGNoYW5nZSkpLFxuICAgIG1heDoga2VlcFplcm8obWF4LCBjaGFuZ2UpXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0KHBhcmVudENvbnRleHQsIGNvbnRleHQpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShwYXJlbnRDb250ZXh0KSwgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzID0gWycnXSwgcm9vdFNjb3BlcyA9IHNjb3BlcywgZmFsbGJhY2ssIGdldFRhcmdldCA9ICgpID0+IHNjb3Blc1swXSkge1xuICBpZiAoIWRlZmluZWQoZmFsbGJhY2spKSB7XG4gICAgZmFsbGJhY2sgPSBfcmVzb2x2ZSgnX2ZhbGxiYWNrJywgc2NvcGVzKTtcbiAgfVxuICBjb25zdCBjYWNoZSA9IHtcbiAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ09iamVjdCcsXG4gICAgX2NhY2hlYWJsZTogdHJ1ZSxcbiAgICBfc2NvcGVzOiBzY29wZXMsXG4gICAgX3Jvb3RTY29wZXM6IHJvb3RTY29wZXMsXG4gICAgX2ZhbGxiYWNrOiBmYWxsYmFjayxcbiAgICBfZ2V0VGFyZ2V0OiBnZXRUYXJnZXQsXG4gICAgb3ZlcnJpZGU6IChzY29wZSkgPT4gX2NyZWF0ZVJlc29sdmVyKFtzY29wZSwgLi4uc2NvcGVzXSwgcHJlZml4ZXMsIHJvb3RTY29wZXMsIGZhbGxiYWNrKSxcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICBkZWxldGUgc2NvcGVzWzBdW3Byb3BdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsXG4gICAgICAgICgpID0+IF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHRhcmdldCkpO1xuICAgIH0sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5fc2NvcGVzWzBdLCBwcm9wKTtcbiAgICB9LFxuICAgIGdldFByb3RvdHlwZU9mKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yoc2NvcGVzWzBdKTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpLmluY2x1ZGVzKHByb3ApO1xuICAgIH0sXG4gICAgb3duS2V5cyh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0YXJnZXQuX3N0b3JhZ2UgfHwgKHRhcmdldC5fc3RvcmFnZSA9IGdldFRhcmdldCgpKTtcbiAgICAgIHRhcmdldFtwcm9wXSA9IHN0b3JhZ2VbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gX2F0dGFjaENvbnRleHQocHJveHksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgY29uc3QgY2FjaGUgPSB7XG4gICAgX2NhY2hlYWJsZTogZmFsc2UsXG4gICAgX3Byb3h5OiBwcm94eSxcbiAgICBfY29udGV4dDogY29udGV4dCxcbiAgICBfc3ViUHJveHk6IHN1YlByb3h5LFxuICAgIF9zdGFjazogbmV3IFNldCgpLFxuICAgIF9kZXNjcmlwdG9yczogX2Rlc2NyaXB0b3JzKHByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgIHNldENvbnRleHQ6IChjdHgpID0+IF9hdHRhY2hDb250ZXh0KHByb3h5LCBjdHgsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgIG92ZXJyaWRlOiAoc2NvcGUpID0+IF9hdHRhY2hDb250ZXh0KHByb3h5Lm92ZXJyaWRlKHNjb3BlKSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cylcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIGRlbGV0ZSBwcm94eVtwcm9wXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCxcbiAgICAgICAgKCkgPT4gX3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSk7XG4gICAgfSxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0Ll9kZXNjcmlwdG9ycy5hbGxLZXlzXG4gICAgICAgID8gUmVmbGVjdC5oYXMocHJveHksIHByb3ApID8ge2VudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0gOiB1bmRlZmluZWRcbiAgICAgICAgOiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm94eSwgcHJvcCk7XG4gICAgfSxcbiAgICBnZXRQcm90b3R5cGVPZigpIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHByb3h5KTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCk7XG4gICAgfSxcbiAgICBvd25LZXlzKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwcm94eSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgcHJveHlbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gX2Rlc2NyaXB0b3JzKHByb3h5LCBkZWZhdWx0cyA9IHtzY3JpcHRhYmxlOiB0cnVlLCBpbmRleGFibGU6IHRydWV9KSB7XG4gIGNvbnN0IHtfc2NyaXB0YWJsZSA9IGRlZmF1bHRzLnNjcmlwdGFibGUsIF9pbmRleGFibGUgPSBkZWZhdWx0cy5pbmRleGFibGUsIF9hbGxLZXlzID0gZGVmYXVsdHMuYWxsS2V5c30gPSBwcm94eTtcbiAgcmV0dXJuIHtcbiAgICBhbGxLZXlzOiBfYWxsS2V5cyxcbiAgICBzY3JpcHRhYmxlOiBfc2NyaXB0YWJsZSxcbiAgICBpbmRleGFibGU6IF9pbmRleGFibGUsXG4gICAgaXNTY3JpcHRhYmxlOiBpc0Z1bmN0aW9uKF9zY3JpcHRhYmxlKSA/IF9zY3JpcHRhYmxlIDogKCkgPT4gX3NjcmlwdGFibGUsXG4gICAgaXNJbmRleGFibGU6IGlzRnVuY3Rpb24oX2luZGV4YWJsZSkgPyBfaW5kZXhhYmxlIDogKCkgPT4gX2luZGV4YWJsZVxuICB9O1xufVxuY29uc3QgcmVhZEtleSA9IChwcmVmaXgsIG5hbWUpID0+IHByZWZpeCA/IHByZWZpeCArIF9jYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbmNvbnN0IG5lZWRzU3ViUmVzb2x2ZXIgPSAocHJvcCwgdmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSAmJiBwcm9wICE9PSAnYWRhcHRlcnMnICYmXG4gIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBudWxsIHx8IHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xuZnVuY3Rpb24gX2NhY2hlZCh0YXJnZXQsIHByb3AsIHJlc29sdmUpIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3ApKSB7XG4gICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IHJlc29sdmUoKTtcbiAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICBjb25zdCB7X3Byb3h5LCBfY29udGV4dCwgX3N1YlByb3h5LCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzfSA9IHRhcmdldDtcbiAgbGV0IHZhbHVlID0gX3Byb3h5W3Byb3BdO1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgJiYgZGVzY3JpcHRvcnMuaXNTY3JpcHRhYmxlKHByb3ApKSB7XG4gICAgdmFsdWUgPSBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgdmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICB2YWx1ZSA9IF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgZGVzY3JpcHRvcnMuaXNJbmRleGFibGUpO1xuICB9XG4gIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgIHZhbHVlID0gX2F0dGFjaENvbnRleHQodmFsdWUsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9zdGFja30gPSB0YXJnZXQ7XG4gIGlmIChfc3RhY2suaGFzKHByb3ApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZWN1cnNpb24gZGV0ZWN0ZWQ6ICcgKyBBcnJheS5mcm9tKF9zdGFjaykuam9pbignLT4nKSArICctPicgKyBwcm9wKTtcbiAgfVxuICBfc3RhY2suYWRkKHByb3ApO1xuICB2YWx1ZSA9IHZhbHVlKF9jb250ZXh0LCBfc3ViUHJveHkgfHwgcmVjZWl2ZXIpO1xuICBfc3RhY2suZGVsZXRlKHByb3ApO1xuICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IGNyZWF0ZVN1YlJlc29sdmVyKF9wcm94eS5fc2NvcGVzLCBfcHJveHksIHByb3AsIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZUFycmF5KHByb3AsIHZhbHVlLCB0YXJnZXQsIGlzSW5kZXhhYmxlKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9kZXNjcmlwdG9yczogZGVzY3JpcHRvcnN9ID0gdGFyZ2V0O1xuICBpZiAoZGVmaW5lZChfY29udGV4dC5pbmRleCkgJiYgaXNJbmRleGFibGUocHJvcCkpIHtcbiAgICB2YWx1ZSA9IHZhbHVlW19jb250ZXh0LmluZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZVswXSkpIHtcbiAgICBjb25zdCBhcnIgPSB2YWx1ZTtcbiAgICBjb25zdCBzY29wZXMgPSBfcHJveHkuX3Njb3Blcy5maWx0ZXIocyA9PiBzICE9PSBhcnIpO1xuICAgIHZhbHVlID0gW107XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgICAgY29uc3QgcmVzb2x2ZXIgPSBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIF9wcm94eSwgcHJvcCwgaXRlbSk7XG4gICAgICB2YWx1ZS5wdXNoKF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUZhbGxiYWNrKGZhbGxiYWNrLCBwcm9wLCB2YWx1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjayhwcm9wLCB2YWx1ZSkgOiBmYWxsYmFjaztcbn1cbmNvbnN0IGdldFNjb3BlID0gKGtleSwgcGFyZW50KSA9PiBrZXkgPT09IHRydWUgPyBwYXJlbnRcbiAgOiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyA/IHJlc29sdmVPYmplY3RLZXkocGFyZW50LCBrZXkpIDogdW5kZWZpbmVkO1xuZnVuY3Rpb24gYWRkU2NvcGVzKHNldCwgcGFyZW50U2NvcGVzLCBrZXksIHBhcmVudEZhbGxiYWNrLCB2YWx1ZSkge1xuICBmb3IgKGNvbnN0IHBhcmVudCBvZiBwYXJlbnRTY29wZXMpIHtcbiAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKGtleSwgcGFyZW50KTtcbiAgICBpZiAoc2NvcGUpIHtcbiAgICAgIHNldC5hZGQoc2NvcGUpO1xuICAgICAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2soc2NvcGUuX2ZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0ga2V5ICYmIGZhbGxiYWNrICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzY29wZSA9PT0gZmFsc2UgJiYgZGVmaW5lZChwYXJlbnRGYWxsYmFjaykgJiYga2V5ICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN1YlJlc29sdmVyKHBhcmVudFNjb3BlcywgcmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHJvb3RTY29wZXMgPSByZXNvbHZlci5fcm9vdFNjb3BlcztcbiAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2socmVzb2x2ZXIuX2ZhbGxiYWNrLCBwcm9wLCB2YWx1ZSk7XG4gIGNvbnN0IGFsbFNjb3BlcyA9IFsuLi5wYXJlbnRTY29wZXMsIC4uLnJvb3RTY29wZXNdO1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIHNldC5hZGQodmFsdWUpO1xuICBsZXQga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgcHJvcCwgZmFsbGJhY2sgfHwgcHJvcCwgdmFsdWUpO1xuICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0gcHJvcCkge1xuICAgIGtleSA9IGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfY3JlYXRlUmVzb2x2ZXIoQXJyYXkuZnJvbShzZXQpLCBbJyddLCByb290U2NvcGVzLCBmYWxsYmFjayxcbiAgICAoKSA9PiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSk7XG59XG5mdW5jdGlvbiBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBrZXksIGZhbGxiYWNrLCBpdGVtKSB7XG4gIHdoaWxlIChrZXkpIHtcbiAgICBrZXkgPSBhZGRTY29wZXMoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pO1xuICB9XG4gIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHBhcmVudCA9IHJlc29sdmVyLl9nZXRUYXJnZXQoKTtcbiAgaWYgKCEocHJvcCBpbiBwYXJlbnQpKSB7XG4gICAgcGFyZW50W3Byb3BdID0ge307XG4gIH1cbiAgY29uc3QgdGFyZ2V0ID0gcGFyZW50W3Byb3BdO1xuICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgcHJveHkpIHtcbiAgbGV0IHZhbHVlO1xuICBmb3IgKGNvbnN0IHByZWZpeCBvZiBwcmVmaXhlcykge1xuICAgIHZhbHVlID0gX3Jlc29sdmUocmVhZEtleShwcmVmaXgsIHByb3ApLCBzY29wZXMpO1xuICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpXG4gICAgICAgID8gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBwcm94eSwgcHJvcCwgdmFsdWUpXG4gICAgICAgIDogdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfcmVzb2x2ZShrZXksIHNjb3Blcykge1xuICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcykge1xuICAgIGlmICghc2NvcGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHNjb3BlW2tleV07XG4gICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpIHtcbiAgbGV0IGtleXMgPSB0YXJnZXQuX2tleXM7XG4gIGlmICgha2V5cykge1xuICAgIGtleXMgPSB0YXJnZXQuX2tleXMgPSByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXModGFyZ2V0Ll9zY29wZXMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHNjb3Blcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NvcGUpLmZpbHRlcihrID0+ICFrLnN0YXJ0c1dpdGgoJ18nKSkpIHtcbiAgICAgIHNldC5hZGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cbmZ1bmN0aW9uIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgY29uc3Qge2lTY2FsZX0gPSBtZXRhO1xuICBjb25zdCB7a2V5ID0gJ3InfSA9IHRoaXMuX3BhcnNpbmc7XG4gIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgaXRlbSA9IGRhdGFbaW5kZXhdO1xuICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgIHI6IGlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIGtleSksIGluZGV4KVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHBhcnNlZDtcbn1cblxuY29uc3QgRVBTSUxPTiA9IE51bWJlci5FUFNJTE9OIHx8IDFlLTE0O1xuY29uc3QgZ2V0UG9pbnQgPSAocG9pbnRzLCBpKSA9PiBpIDwgcG9pbnRzLmxlbmd0aCAmJiAhcG9pbnRzW2ldLnNraXAgJiYgcG9pbnRzW2ldO1xuY29uc3QgZ2V0VmFsdWVBeGlzID0gKGluZGV4QXhpcykgPT4gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZShmaXJzdFBvaW50LCBtaWRkbGVQb2ludCwgYWZ0ZXJQb2ludCwgdCkge1xuICBjb25zdCBwcmV2aW91cyA9IGZpcnN0UG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogZmlyc3RQb2ludDtcbiAgY29uc3QgY3VycmVudCA9IG1pZGRsZVBvaW50O1xuICBjb25zdCBuZXh0ID0gYWZ0ZXJQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBhZnRlclBvaW50O1xuICBjb25zdCBkMDEgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMoY3VycmVudCwgcHJldmlvdXMpO1xuICBjb25zdCBkMTIgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMobmV4dCwgY3VycmVudCk7XG4gIGxldCBzMDEgPSBkMDEgLyAoZDAxICsgZDEyKTtcbiAgbGV0IHMxMiA9IGQxMiAvIChkMDEgKyBkMTIpO1xuICBzMDEgPSBpc05hTihzMDEpID8gMCA6IHMwMTtcbiAgczEyID0gaXNOYU4oczEyKSA/IDAgOiBzMTI7XG4gIGNvbnN0IGZhID0gdCAqIHMwMTtcbiAgY29uc3QgZmIgPSB0ICogczEyO1xuICByZXR1cm4ge1xuICAgIHByZXZpb3VzOiB7XG4gICAgICB4OiBjdXJyZW50LnggLSBmYSAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgIHk6IGN1cnJlbnQueSAtIGZhICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgfSxcbiAgICBuZXh0OiB7XG4gICAgICB4OiBjdXJyZW50LnggKyBmYiAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgIHk6IGN1cnJlbnQueSArIGZiICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKSB7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBhbHBoYUssIGJldGFLLCB0YXVLLCBzcXVhcmVkTWFnbml0dWRlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW4gLSAxOyArK2kpIHtcbiAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICBpZiAoIXBvaW50Q3VycmVudCB8fCAhcG9pbnRBZnRlcikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbG1vc3RFcXVhbHMoZGVsdGFLW2ldLCAwLCBFUFNJTE9OKSkge1xuICAgICAgbUtbaV0gPSBtS1tpICsgMV0gPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGFscGhhSyA9IG1LW2ldIC8gZGVsdGFLW2ldO1xuICAgIGJldGFLID0gbUtbaSArIDFdIC8gZGVsdGFLW2ldO1xuICAgIHNxdWFyZWRNYWduaXR1ZGUgPSBNYXRoLnBvdyhhbHBoYUssIDIpICsgTWF0aC5wb3coYmV0YUssIDIpO1xuICAgIGlmIChzcXVhcmVkTWFnbml0dWRlIDw9IDkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0YXVLID0gMyAvIE1hdGguc3FydChzcXVhcmVkTWFnbml0dWRlKTtcbiAgICBtS1tpXSA9IGFscGhhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gICAgbUtbaSArIDFdID0gYmV0YUsgKiB0YXVLICogZGVsdGFLW2ldO1xuICB9XG59XG5mdW5jdGlvbiBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgZGVsdGEsIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSkge1xuICAgIHBvaW50QmVmb3JlID0gcG9pbnRDdXJyZW50O1xuICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgIGlmICghcG9pbnRDdXJyZW50KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgaVBpeGVsID0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgY29uc3QgdlBpeGVsID0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc107XG4gICAgaWYgKHBvaW50QmVmb3JlKSB7XG4gICAgICBkZWx0YSA9IChpUGl4ZWwgLSBwb2ludEJlZm9yZVtpbmRleEF4aXNdKSAvIDM7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMSR7aW5kZXhBeGlzfWBdID0gaVBpeGVsIC0gZGVsdGE7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMSR7dmFsdWVBeGlzfWBdID0gdlBpeGVsIC0gZGVsdGEgKiBtS1tpXTtcbiAgICB9XG4gICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgIGRlbHRhID0gKHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIGlQaXhlbCkgLyAzO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDIke2luZGV4QXhpc31gXSA9IGlQaXhlbCArIGRlbHRhO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDIke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCArIGRlbHRhICogbUtbaV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCBkZWx0YUsgPSBBcnJheShwb2ludHNMZW4pLmZpbGwoMCk7XG4gIGNvbnN0IG1LID0gQXJyYXkocG9pbnRzTGVuKTtcbiAgbGV0IGksIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG4gICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgY29uc3Qgc2xvcGVEZWx0YSA9IHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIHBvaW50Q3VycmVudFtpbmRleEF4aXNdO1xuICAgICAgZGVsdGFLW2ldID0gc2xvcGVEZWx0YSAhPT0gMCA/IChwb2ludEFmdGVyW3ZhbHVlQXhpc10gLSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXSkgLyBzbG9wZURlbHRhIDogMDtcbiAgICB9XG4gICAgbUtbaV0gPSAhcG9pbnRCZWZvcmUgPyBkZWx0YUtbaV1cbiAgICAgIDogIXBvaW50QWZ0ZXIgPyBkZWx0YUtbaSAtIDFdXG4gICAgICA6IChzaWduKGRlbHRhS1tpIC0gMV0pICE9PSBzaWduKGRlbHRhS1tpXSkpID8gMFxuICAgICAgOiAoZGVsdGFLW2kgLSAxXSArIGRlbHRhS1tpXSkgLyAyO1xuICB9XG4gIG1vbm90b25lQWRqdXN0KHBvaW50cywgZGVsdGFLLCBtSyk7XG4gIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMpO1xufVxuZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4ocHQsIG1heCksIG1pbik7XG59XG5mdW5jdGlvbiBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKSB7XG4gIGxldCBpLCBpbGVuLCBwb2ludCwgaW5BcmVhLCBpbkFyZWFQcmV2O1xuICBsZXQgaW5BcmVhTmV4dCA9IF9pc1BvaW50SW5BcmVhKHBvaW50c1swXSwgYXJlYSk7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgaW5BcmVhUHJldiA9IGluQXJlYTtcbiAgICBpbkFyZWEgPSBpbkFyZWFOZXh0O1xuICAgIGluQXJlYU5leHQgPSBpIDwgaWxlbiAtIDEgJiYgX2lzUG9pbnRJbkFyZWEocG9pbnRzW2kgKyAxXSwgYXJlYSk7XG4gICAgaWYgKCFpbkFyZWEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICBpZiAoaW5BcmVhUHJldikge1xuICAgICAgcG9pbnQuY3AxeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgcG9pbnQuY3AxeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgICBpZiAoaW5BcmVhTmV4dCkge1xuICAgICAgcG9pbnQuY3AyeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgcG9pbnQuY3AyeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMocG9pbnRzLCBvcHRpb25zLCBhcmVhLCBsb29wLCBpbmRleEF4aXMpIHtcbiAgbGV0IGksIGlsZW4sIHBvaW50LCBjb250cm9sUG9pbnRzO1xuICBpZiAob3B0aW9ucy5zcGFuR2Fwcykge1xuICAgIHBvaW50cyA9IHBvaW50cy5maWx0ZXIoKHB0KSA9PiAhcHQuc2tpcCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMpO1xuICB9IGVsc2Uge1xuICAgIGxldCBwcmV2ID0gbG9vcCA/IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0gOiBwb2ludHNbMF07XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29udHJvbFBvaW50cyA9IHNwbGluZUN1cnZlKFxuICAgICAgICBwcmV2LFxuICAgICAgICBwb2ludCxcbiAgICAgICAgcG9pbnRzW01hdGgubWluKGkgKyAxLCBpbGVuIC0gKGxvb3AgPyAwIDogMSkpICUgaWxlbl0sXG4gICAgICAgIG9wdGlvbnMudGVuc2lvblxuICAgICAgKTtcbiAgICAgIHBvaW50LmNwMXggPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLng7XG4gICAgICBwb2ludC5jcDF5ID0gY29udHJvbFBvaW50cy5wcmV2aW91cy55O1xuICAgICAgcG9pbnQuY3AyeCA9IGNvbnRyb2xQb2ludHMubmV4dC54O1xuICAgICAgcG9pbnQuY3AyeSA9IGNvbnRyb2xQb2ludHMubmV4dC55O1xuICAgICAgcHJldiA9IHBvaW50O1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5jYXBCZXppZXJQb2ludHMpIHtcbiAgICBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaXNEb21TdXBwb3J0ZWQoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuZnVuY3Rpb24gX2dldFBhcmVudE5vZGUoZG9tTm9kZSkge1xuICBsZXQgcGFyZW50ID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50ICYmIHBhcmVudC50b1N0cmluZygpID09PSAnW29iamVjdCBTaGFkb3dSb290XScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQuaG9zdDtcbiAgfVxuICByZXR1cm4gcGFyZW50O1xufVxuZnVuY3Rpb24gcGFyc2VNYXhTdHlsZShzdHlsZVZhbHVlLCBub2RlLCBwYXJlbnRQcm9wZXJ0eSkge1xuICBsZXQgdmFsdWVJblBpeGVscztcbiAgaWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlSW5QaXhlbHMgPSBwYXJzZUludChzdHlsZVZhbHVlLCAxMCk7XG4gICAgaWYgKHN0eWxlVmFsdWUuaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgdmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZUluUGl4ZWxzID0gc3R5bGVWYWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWVJblBpeGVscztcbn1cbmNvbnN0IGdldENvbXB1dGVkU3R5bGUgPSAoZWxlbWVudCkgPT4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5mdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xufVxuY29uc3QgcG9zaXRpb25zID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcbmZ1bmN0aW9uIGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZXMsIHN0eWxlLCBzdWZmaXgpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHN1ZmZpeCA9IHN1ZmZpeCA/ICctJyArIHN1ZmZpeCA6ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uc1tpXTtcbiAgICByZXN1bHRbcG9zXSA9IHBhcnNlRmxvYXQoc3R5bGVzW3N0eWxlICsgJy0nICsgcG9zICsgc3VmZml4XSkgfHwgMDtcbiAgfVxuICByZXN1bHQud2lkdGggPSByZXN1bHQubGVmdCArIHJlc3VsdC5yaWdodDtcbiAgcmVzdWx0LmhlaWdodCA9IHJlc3VsdC50b3AgKyByZXN1bHQuYm90dG9tO1xuICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgdXNlT2Zmc2V0UG9zID0gKHgsIHksIHRhcmdldCkgPT4gKHggPiAwIHx8IHkgPiAwKSAmJiAoIXRhcmdldCB8fCAhdGFyZ2V0LnNoYWRvd1Jvb3QpO1xuZnVuY3Rpb24gZ2V0Q2FudmFzUG9zaXRpb24oZSwgY2FudmFzKSB7XG4gIGNvbnN0IHRvdWNoZXMgPSBlLnRvdWNoZXM7XG4gIGNvbnN0IHNvdXJjZSA9IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPyB0b3VjaGVzWzBdIDogZTtcbiAgY29uc3Qge29mZnNldFgsIG9mZnNldFl9ID0gc291cmNlO1xuICBsZXQgYm94ID0gZmFsc2U7XG4gIGxldCB4LCB5O1xuICBpZiAodXNlT2Zmc2V0UG9zKG9mZnNldFgsIG9mZnNldFksIGUudGFyZ2V0KSkge1xuICAgIHggPSBvZmZzZXRYO1xuICAgIHkgPSBvZmZzZXRZO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgeCA9IHNvdXJjZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgIHkgPSBzb3VyY2UuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgIGJveCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHt4LCB5LCBib3h9O1xufVxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVQb3NpdGlvbihldnQsIGNoYXJ0KSB7XG4gIGlmICgnbmF0aXZlJyBpbiBldnQpIHtcbiAgICByZXR1cm4gZXZ0O1xuICB9XG4gIGNvbnN0IHtjYW52YXMsIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvfSA9IGNoYXJ0O1xuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgY29uc3QgYm9yZGVyQm94ID0gc3R5bGUuYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCc7XG4gIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gIGNvbnN0IHt4LCB5LCBib3h9ID0gZ2V0Q2FudmFzUG9zaXRpb24oZXZ0LCBjYW52YXMpO1xuICBjb25zdCB4T2Zmc2V0ID0gcGFkZGluZ3MubGVmdCArIChib3ggJiYgYm9yZGVycy5sZWZ0KTtcbiAgY29uc3QgeU9mZnNldCA9IHBhZGRpbmdzLnRvcCArIChib3ggJiYgYm9yZGVycy50b3ApO1xuICBsZXQge3dpZHRoLCBoZWlnaHR9ID0gY2hhcnQ7XG4gIGlmIChib3JkZXJCb3gpIHtcbiAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgaGVpZ2h0IC09IHBhZGRpbmdzLmhlaWdodCArIGJvcmRlcnMuaGVpZ2h0O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogTWF0aC5yb3VuZCgoeCAtIHhPZmZzZXQpIC8gd2lkdGggKiBjYW52YXMud2lkdGggLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyksXG4gICAgeTogTWF0aC5yb3VuZCgoeSAtIHlPZmZzZXQpIC8gaGVpZ2h0ICogY2FudmFzLmhlaWdodCAvIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgbGV0IG1heFdpZHRoLCBtYXhIZWlnaHQ7XG4gIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkIHx8IGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lcik7XG4gICAgICBjb25zdCBjb250YWluZXJCb3JkZXIgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhZGRpbmcgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdwYWRkaW5nJyk7XG4gICAgICB3aWR0aCA9IHJlY3Qud2lkdGggLSBjb250YWluZXJQYWRkaW5nLndpZHRoIC0gY29udGFpbmVyQm9yZGVyLndpZHRoO1xuICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQgLSBjb250YWluZXJQYWRkaW5nLmhlaWdodCAtIGNvbnRhaW5lckJvcmRlci5oZWlnaHQ7XG4gICAgICBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4V2lkdGgsIGNvbnRhaW5lciwgJ2NsaWVudFdpZHRoJyk7XG4gICAgICBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heEhlaWdodCwgY29udGFpbmVyLCAnY2xpZW50SGVpZ2h0Jyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIG1heFdpZHRoOiBtYXhXaWR0aCB8fCBJTkZJTklUWSxcbiAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCB8fCBJTkZJTklUWVxuICB9O1xufVxuY29uc3Qgcm91bmQxID0gdiA9PiBNYXRoLnJvdW5kKHYgKiAxMCkgLyAxMDtcbmZ1bmN0aW9uIGdldE1heGltdW1TaXplKGNhbnZhcywgYmJXaWR0aCwgYmJIZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xuICBjb25zdCBtYXJnaW5zID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnbWFyZ2luJyk7XG4gIGNvbnN0IG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhXaWR0aCwgY2FudmFzLCAnY2xpZW50V2lkdGgnKSB8fCBJTkZJTklUWTtcbiAgY29uc3QgbWF4SGVpZ2h0ID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhIZWlnaHQsIGNhbnZhcywgJ2NsaWVudEhlaWdodCcpIHx8IElORklOSVRZO1xuICBjb25zdCBjb250YWluZXJTaXplID0gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0KTtcbiAgbGV0IHt3aWR0aCwgaGVpZ2h0fSA9IGNvbnRhaW5lclNpemU7XG4gIGlmIChzdHlsZS5ib3hTaXppbmcgPT09ICdjb250ZW50LWJveCcpIHtcbiAgICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgY29uc3QgcGFkZGluZ3MgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdwYWRkaW5nJyk7XG4gICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgfVxuICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoIC0gbWFyZ2lucy53aWR0aCk7XG4gIGhlaWdodCA9IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gTWF0aC5mbG9vcih3aWR0aCAvIGFzcGVjdFJhdGlvKSA6IGhlaWdodCAtIG1hcmdpbnMuaGVpZ2h0KTtcbiAgd2lkdGggPSByb3VuZDEoTWF0aC5taW4od2lkdGgsIG1heFdpZHRoLCBjb250YWluZXJTaXplLm1heFdpZHRoKSk7XG4gIGhlaWdodCA9IHJvdW5kMShNYXRoLm1pbihoZWlnaHQsIG1heEhlaWdodCwgY29udGFpbmVyU2l6ZS5tYXhIZWlnaHQpKTtcbiAgaWYgKHdpZHRoICYmICFoZWlnaHQpIHtcbiAgICBoZWlnaHQgPSByb3VuZDEod2lkdGggLyAyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodFxuICB9O1xufVxuZnVuY3Rpb24gcmV0aW5hU2NhbGUoY2hhcnQsIGZvcmNlUmF0aW8sIGZvcmNlU3R5bGUpIHtcbiAgY29uc3QgcGl4ZWxSYXRpbyA9IGZvcmNlUmF0aW8gfHwgMTtcbiAgY29uc3QgZGV2aWNlSGVpZ2h0ID0gTWF0aC5mbG9vcihjaGFydC5oZWlnaHQgKiBwaXhlbFJhdGlvKTtcbiAgY29uc3QgZGV2aWNlV2lkdGggPSBNYXRoLmZsb29yKGNoYXJ0LndpZHRoICogcGl4ZWxSYXRpbyk7XG4gIGNoYXJ0LmhlaWdodCA9IGRldmljZUhlaWdodCAvIHBpeGVsUmF0aW87XG4gIGNoYXJ0LndpZHRoID0gZGV2aWNlV2lkdGggLyBwaXhlbFJhdGlvO1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGlmIChjYW52YXMuc3R5bGUgJiYgKGZvcmNlU3R5bGUgfHwgKCFjYW52YXMuc3R5bGUuaGVpZ2h0ICYmICFjYW52YXMuc3R5bGUud2lkdGgpKSkge1xuICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtjaGFydC5oZWlnaHR9cHhgO1xuICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke2NoYXJ0LndpZHRofXB4YDtcbiAgfVxuICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IHBpeGVsUmF0aW9cbiAgICAgIHx8IGNhbnZhcy5oZWlnaHQgIT09IGRldmljZUhlaWdodFxuICAgICAgfHwgY2FudmFzLndpZHRoICE9PSBkZXZpY2VXaWR0aCkge1xuICAgIGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcbiAgICBjYW52YXMuaGVpZ2h0ID0gZGV2aWNlSGVpZ2h0O1xuICAgIGNhbnZhcy53aWR0aCA9IGRldmljZVdpZHRoO1xuICAgIGNoYXJ0LmN0eC5zZXRUcmFuc2Zvcm0ocGl4ZWxSYXRpbywgMCwgMCwgcGl4ZWxSYXRpbywgMCwgMCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuY29uc3Qgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA9IChmdW5jdGlvbigpIHtcbiAgbGV0IHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgZ2V0IHBhc3NpdmUoKSB7XG4gICAgICAgIHBhc3NpdmVTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuICByZXR1cm4gcGFzc2l2ZVN1cHBvcnRlZDtcbn0oKSk7XG5mdW5jdGlvbiByZWFkVXNlZFNpemUoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgY29uc3QgdmFsdWUgPSBnZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gIGNvbnN0IG1hdGNoZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCgvXihcXGQrKShcXC5cXGQrKT9weCQvKTtcbiAgcmV0dXJuIG1hdGNoZXMgPyArbWF0Y2hlc1sxXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3BvaW50SW5MaW5lKHAxLCBwMiwgdCwgbW9kZSkge1xuICByZXR1cm4ge1xuICAgIHg6IHAxLnggKyB0ICogKHAyLnggLSBwMS54KSxcbiAgICB5OiBwMS55ICsgdCAqIChwMi55IC0gcDEueSlcbiAgfTtcbn1cbmZ1bmN0aW9uIF9zdGVwcGVkSW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgeTogbW9kZSA9PT0gJ21pZGRsZScgPyB0IDwgMC41ID8gcDEueSA6IHAyLnlcbiAgICA6IG1vZGUgPT09ICdhZnRlcicgPyB0IDwgMSA/IHAxLnkgOiBwMi55XG4gICAgOiB0ID4gMCA/IHAyLnkgOiBwMS55XG4gIH07XG59XG5mdW5jdGlvbiBfYmV6aWVySW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgY29uc3QgY3AxID0ge3g6IHAxLmNwMngsIHk6IHAxLmNwMnl9O1xuICBjb25zdCBjcDIgPSB7eDogcDIuY3AxeCwgeTogcDIuY3AxeX07XG4gIGNvbnN0IGEgPSBfcG9pbnRJbkxpbmUocDEsIGNwMSwgdCk7XG4gIGNvbnN0IGIgPSBfcG9pbnRJbkxpbmUoY3AxLCBjcDIsIHQpO1xuICBjb25zdCBjID0gX3BvaW50SW5MaW5lKGNwMiwgcDIsIHQpO1xuICBjb25zdCBkID0gX3BvaW50SW5MaW5lKGEsIGIsIHQpO1xuICBjb25zdCBlID0gX3BvaW50SW5MaW5lKGIsIGMsIHQpO1xuICByZXR1cm4gX3BvaW50SW5MaW5lKGQsIGUsIHQpO1xufVxuXG5jb25zdCBpbnRsQ2FjaGUgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBjYWNoZUtleSA9IGxvY2FsZSArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICBsZXQgZm9ybWF0dGVyID0gaW50bENhY2hlLmdldChjYWNoZUtleSk7XG4gIGlmICghZm9ybWF0dGVyKSB7XG4gICAgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgaW50bENhY2hlLnNldChjYWNoZUtleSwgZm9ybWF0dGVyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0dGVyO1xufVxuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bSwgbG9jYWxlLCBvcHRpb25zKSB7XG4gIHJldHVybiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKS5mb3JtYXQobnVtKTtcbn1cblxuY29uc3QgZ2V0UmlnaHRUb0xlZnRBZGFwdGVyID0gZnVuY3Rpb24ocmVjdFgsIHdpZHRoKSB7XG4gIHJldHVybiB7XG4gICAgeCh4KSB7XG4gICAgICByZXR1cm4gcmVjdFggKyByZWN0WCArIHdpZHRoIC0geDtcbiAgICB9LFxuICAgIHNldFdpZHRoKHcpIHtcbiAgICAgIHdpZHRoID0gdztcbiAgICB9LFxuICAgIHRleHRBbGlnbihhbGlnbikge1xuICAgICAgaWYgKGFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICByZXR1cm4gYWxpZ247XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxpZ24gPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIH0sXG4gICAgeFBsdXMoeCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB4IC0gdmFsdWU7XG4gICAgfSxcbiAgICBsZWZ0Rm9yTHRyKHgsIGl0ZW1XaWR0aCkge1xuICAgICAgcmV0dXJuIHggLSBpdGVtV2lkdGg7XG4gICAgfSxcbiAgfTtcbn07XG5jb25zdCBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB4KHgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH0sXG4gICAgc2V0V2lkdGgodykge1xuICAgIH0sXG4gICAgdGV4dEFsaWduKGFsaWduKSB7XG4gICAgICByZXR1cm4gYWxpZ247XG4gICAgfSxcbiAgICB4UGx1cyh4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHggKyB2YWx1ZTtcbiAgICB9LFxuICAgIGxlZnRGb3JMdHIoeCwgX2l0ZW1XaWR0aCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSxcbiAgfTtcbn07XG5mdW5jdGlvbiBnZXRSdGxBZGFwdGVyKHJ0bCwgcmVjdFgsIHdpZHRoKSB7XG4gIHJldHVybiBydGwgPyBnZXRSaWdodFRvTGVmdEFkYXB0ZXIocmVjdFgsIHdpZHRoKSA6IGdldExlZnRUb1JpZ2h0QWRhcHRlcigpO1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKGN0eCwgZGlyZWN0aW9uKSB7XG4gIGxldCBzdHlsZSwgb3JpZ2luYWw7XG4gIGlmIChkaXJlY3Rpb24gPT09ICdsdHInIHx8IGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICBzdHlsZSA9IGN0eC5jYW52YXMuc3R5bGU7XG4gICAgb3JpZ2luYWwgPSBbXG4gICAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXJlY3Rpb24nKSxcbiAgICAgIHN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoJ2RpcmVjdGlvbicpLFxuICAgIF07XG4gICAgc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIGRpcmVjdGlvbiwgJ2ltcG9ydGFudCcpO1xuICAgIGN0eC5wcmV2VGV4dERpcmVjdGlvbiA9IG9yaWdpbmFsO1xuICB9XG59XG5mdW5jdGlvbiByZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIG9yaWdpbmFsKSB7XG4gIGlmIChvcmlnaW5hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIGN0eC5wcmV2VGV4dERpcmVjdGlvbjtcbiAgICBjdHguY2FudmFzLnN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBvcmlnaW5hbFswXSwgb3JpZ2luYWxbMV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Rm4ocHJvcGVydHkpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnYW5nbGUnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJldHdlZW46IF9hbmdsZUJldHdlZW4sXG4gICAgICBjb21wYXJlOiBfYW5nbGVEaWZmLFxuICAgICAgbm9ybWFsaXplOiBfbm9ybWFsaXplQW5nbGUsXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGJldHdlZW46IF9pc0JldHdlZW4sXG4gICAgY29tcGFyZTogKGEsIGIpID0+IGEgLSBiLFxuICAgIG5vcm1hbGl6ZTogeCA9PiB4XG4gIH07XG59XG5mdW5jdGlvbiBub3JtYWxpemVTZWdtZW50KHtzdGFydCwgZW5kLCBjb3VudCwgbG9vcCwgc3R5bGV9KSB7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgZW5kOiBlbmQgJSBjb3VudCxcbiAgICBsb29wOiBsb29wICYmIChlbmQgLSBzdGFydCArIDEpICUgY291bnQgPT09IDAsXG4gICAgc3R5bGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgY29uc3Qge3Byb3BlcnR5LCBzdGFydDogc3RhcnRCb3VuZCwgZW5kOiBlbmRCb3VuZH0gPSBib3VuZHM7XG4gIGNvbnN0IHtiZXR3ZWVuLCBub3JtYWxpemV9ID0gcHJvcGVydHlGbihwcm9wZXJ0eSk7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IHtzdGFydCwgZW5kLCBsb29wfSA9IHNlZ21lbnQ7XG4gIGxldCBpLCBpbGVuO1xuICBpZiAobG9vcCkge1xuICAgIHN0YXJ0ICs9IGNvdW50O1xuICAgIGVuZCArPSBjb3VudDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGlmICghYmV0d2Vlbihub3JtYWxpemUocG9pbnRzW3N0YXJ0ICUgY291bnRdW3Byb3BlcnR5XSksIHN0YXJ0Qm91bmQsIGVuZEJvdW5kKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN0YXJ0LS07XG4gICAgICBlbmQtLTtcbiAgICB9XG4gICAgc3RhcnQgJT0gY291bnQ7XG4gICAgZW5kICU9IGNvdW50O1xuICB9XG4gIGlmIChlbmQgPCBzdGFydCkge1xuICAgIGVuZCArPSBjb3VudDtcbiAgfVxuICByZXR1cm4ge3N0YXJ0LCBlbmQsIGxvb3AsIHN0eWxlOiBzZWdtZW50LnN0eWxlfTtcbn1cbmZ1bmN0aW9uIF9ib3VuZFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgaWYgKCFib3VuZHMpIHtcbiAgICByZXR1cm4gW3NlZ21lbnRdO1xuICB9XG4gIGNvbnN0IHtwcm9wZXJ0eSwgc3RhcnQ6IHN0YXJ0Qm91bmQsIGVuZDogZW5kQm91bmR9ID0gYm91bmRzO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHtjb21wYXJlLCBiZXR3ZWVuLCBub3JtYWxpemV9ID0gcHJvcGVydHlGbihwcm9wZXJ0eSk7XG4gIGNvbnN0IHtzdGFydCwgZW5kLCBsb29wLCBzdHlsZX0gPSBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGxldCBpbnNpZGUgPSBmYWxzZTtcbiAgbGV0IHN1YlN0YXJ0ID0gbnVsbDtcbiAgbGV0IHZhbHVlLCBwb2ludCwgcHJldlZhbHVlO1xuICBjb25zdCBzdGFydElzQmVmb3JlID0gKCkgPT4gYmV0d2VlbihzdGFydEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKSAmJiBjb21wYXJlKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSkgIT09IDA7XG4gIGNvbnN0IGVuZElzQmVmb3JlID0gKCkgPT4gY29tcGFyZShlbmRCb3VuZCwgdmFsdWUpID09PSAwIHx8IGJldHdlZW4oZW5kQm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpO1xuICBjb25zdCBzaG91bGRTdGFydCA9ICgpID0+IGluc2lkZSB8fCBzdGFydElzQmVmb3JlKCk7XG4gIGNvbnN0IHNob3VsZFN0b3AgPSAoKSA9PiAhaW5zaWRlIHx8IGVuZElzQmVmb3JlKCk7XG4gIGZvciAobGV0IGkgPSBzdGFydCwgcHJldiA9IHN0YXJ0OyBpIDw9IGVuZDsgKytpKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhbHVlID0gbm9ybWFsaXplKHBvaW50W3Byb3BlcnR5XSk7XG4gICAgaWYgKHZhbHVlID09PSBwcmV2VmFsdWUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpbnNpZGUgPSBiZXR3ZWVuKHZhbHVlLCBzdGFydEJvdW5kLCBlbmRCb3VuZCk7XG4gICAgaWYgKHN1YlN0YXJ0ID09PSBudWxsICYmIHNob3VsZFN0YXJ0KCkpIHtcbiAgICAgIHN1YlN0YXJ0ID0gY29tcGFyZSh2YWx1ZSwgc3RhcnRCb3VuZCkgPT09IDAgPyBpIDogcHJldjtcbiAgICB9XG4gICAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsICYmIHNob3VsZFN0b3AoKSkge1xuICAgICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7c3RhcnQ6IHN1YlN0YXJ0LCBlbmQ6IGksIGxvb3AsIGNvdW50LCBzdHlsZX0pKTtcbiAgICAgIHN1YlN0YXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgcHJldiA9IGk7XG4gICAgcHJldlZhbHVlID0gdmFsdWU7XG4gIH1cbiAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsKSB7XG4gICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7c3RhcnQ6IHN1YlN0YXJ0LCBlbmQsIGxvb3AsIGNvdW50LCBzdHlsZX0pKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2JvdW5kU2VnbWVudHMobGluZSwgYm91bmRzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzdWIgPSBfYm91bmRTZWdtZW50KHNlZ21lbnRzW2ldLCBsaW5lLnBvaW50cywgYm91bmRzKTtcbiAgICBpZiAoc3ViLmxlbmd0aCkge1xuICAgICAgcmVzdWx0LnB1c2goLi4uc3ViKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcykge1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgZW5kID0gY291bnQgLSAxO1xuICBpZiAobG9vcCAmJiAhc3BhbkdhcHMpIHtcbiAgICB3aGlsZSAoc3RhcnQgPCBjb3VudCAmJiAhcG9pbnRzW3N0YXJ0XS5za2lwKSB7XG4gICAgICBzdGFydCsrO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoc3RhcnQgPCBjb3VudCAmJiBwb2ludHNbc3RhcnRdLnNraXApIHtcbiAgICBzdGFydCsrO1xuICB9XG4gIHN0YXJ0ICU9IGNvdW50O1xuICBpZiAobG9vcCkge1xuICAgIGVuZCArPSBzdGFydDtcbiAgfVxuICB3aGlsZSAoZW5kID4gc3RhcnQgJiYgcG9pbnRzW2VuZCAlIGNvdW50XS5za2lwKSB7XG4gICAgZW5kLS07XG4gIH1cbiAgZW5kICU9IGNvdW50O1xuICByZXR1cm4ge3N0YXJ0LCBlbmR9O1xufVxuZnVuY3Rpb24gc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGxvb3ApIHtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IGxhc3QgPSBzdGFydDtcbiAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnRdO1xuICBsZXQgZW5kO1xuICBmb3IgKGVuZCA9IHN0YXJ0ICsgMTsgZW5kIDw9IG1heDsgKytlbmQpIHtcbiAgICBjb25zdCBjdXIgPSBwb2ludHNbZW5kICUgY291bnRdO1xuICAgIGlmIChjdXIuc2tpcCB8fCBjdXIuc3RvcCkge1xuICAgICAgaWYgKCFwcmV2LnNraXApIHtcbiAgICAgICAgbG9vcCA9IGZhbHNlO1xuICAgICAgICByZXN1bHQucHVzaCh7c3RhcnQ6IHN0YXJ0ICUgY291bnQsIGVuZDogKGVuZCAtIDEpICUgY291bnQsIGxvb3B9KTtcbiAgICAgICAgc3RhcnQgPSBsYXN0ID0gY3VyLnN0b3AgPyBlbmQgOiBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gZW5kO1xuICAgICAgaWYgKHByZXYuc2tpcCkge1xuICAgICAgICBzdGFydCA9IGVuZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcHJldiA9IGN1cjtcbiAgfVxuICBpZiAobGFzdCAhPT0gbnVsbCkge1xuICAgIHJlc3VsdC5wdXNoKHtzdGFydDogc3RhcnQgJSBjb3VudCwgZW5kOiBsYXN0ICUgY291bnQsIGxvb3B9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2NvbXB1dGVTZWdtZW50cyhsaW5lLCBzZWdtZW50T3B0aW9ucykge1xuICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3Qgc3BhbkdhcHMgPSBsaW5lLm9wdGlvbnMuc3BhbkdhcHM7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgaWYgKCFjb3VudCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBsb29wID0gISFsaW5lLl9sb29wO1xuICBjb25zdCB7c3RhcnQsIGVuZH0gPSBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpO1xuICBpZiAoc3BhbkdhcHMgPT09IHRydWUpIHtcbiAgICByZXR1cm4gc3BsaXRCeVN0eWxlcyhsaW5lLCBbe3N0YXJ0LCBlbmQsIGxvb3B9XSwgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG4gIH1cbiAgY29uc3QgbWF4ID0gZW5kIDwgc3RhcnQgPyBlbmQgKyBjb3VudCA6IGVuZDtcbiAgY29uc3QgY29tcGxldGVMb29wID0gISFsaW5lLl9mdWxsTG9vcCAmJiBzdGFydCA9PT0gMCAmJiBlbmQgPT09IGNvdW50IC0gMTtcbiAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGNvbXBsZXRlTG9vcCksIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuZnVuY3Rpb24gc3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucykge1xuICBpZiAoIXNlZ21lbnRPcHRpb25zIHx8ICFzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0IHx8ICFwb2ludHMpIHtcbiAgICByZXR1cm4gc2VnbWVudHM7XG4gIH1cbiAgcmV0dXJuIGRvU3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG59XG5mdW5jdGlvbiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgY29uc3QgY2hhcnRDb250ZXh0ID0gbGluZS5fY2hhcnQuZ2V0Q29udGV4dCgpO1xuICBjb25zdCBiYXNlU3R5bGUgPSByZWFkU3R5bGUobGluZS5vcHRpb25zKTtcbiAgY29uc3Qge19kYXRhc2V0SW5kZXg6IGRhdGFzZXRJbmRleCwgb3B0aW9uczoge3NwYW5HYXBzfX0gPSBsaW5lO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgcHJldlN0eWxlID0gYmFzZVN0eWxlO1xuICBsZXQgc3RhcnQgPSBzZWdtZW50c1swXS5zdGFydDtcbiAgbGV0IGkgPSBzdGFydDtcbiAgZnVuY3Rpb24gYWRkU3R5bGUocywgZSwgbCwgc3QpIHtcbiAgICBjb25zdCBkaXIgPSBzcGFuR2FwcyA/IC0xIDogMTtcbiAgICBpZiAocyA9PT0gZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzICs9IGNvdW50O1xuICAgIHdoaWxlIChwb2ludHNbcyAlIGNvdW50XS5za2lwKSB7XG4gICAgICBzIC09IGRpcjtcbiAgICB9XG4gICAgd2hpbGUgKHBvaW50c1tlICUgY291bnRdLnNraXApIHtcbiAgICAgIGUgKz0gZGlyO1xuICAgIH1cbiAgICBpZiAocyAlIGNvdW50ICE9PSBlICUgY291bnQpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHtzdGFydDogcyAlIGNvdW50LCBlbmQ6IGUgJSBjb3VudCwgbG9vcDogbCwgc3R5bGU6IHN0fSk7XG4gICAgICBwcmV2U3R5bGUgPSBzdDtcbiAgICAgIHN0YXJ0ID0gZSAlIGNvdW50O1xuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBzdGFydCA9IHNwYW5HYXBzID8gc3RhcnQgOiBzZWdtZW50LnN0YXJ0O1xuICAgIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0ICUgY291bnRdO1xuICAgIGxldCBzdHlsZTtcbiAgICBmb3IgKGkgPSBzdGFydCArIDE7IGkgPD0gc2VnbWVudC5lbmQ7IGkrKykge1xuICAgICAgY29uc3QgcHQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICAgIHN0eWxlID0gcmVhZFN0eWxlKHNlZ21lbnRPcHRpb25zLnNldENvbnRleHQoY3JlYXRlQ29udGV4dChjaGFydENvbnRleHQsIHtcbiAgICAgICAgdHlwZTogJ3NlZ21lbnQnLFxuICAgICAgICBwMDogcHJldixcbiAgICAgICAgcDE6IHB0LFxuICAgICAgICBwMERhdGFJbmRleDogKGkgLSAxKSAlIGNvdW50LFxuICAgICAgICBwMURhdGFJbmRleDogaSAlIGNvdW50LFxuICAgICAgICBkYXRhc2V0SW5kZXhcbiAgICAgIH0pKSk7XG4gICAgICBpZiAoc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpKSB7XG4gICAgICAgIGFkZFN0eWxlKHN0YXJ0LCBpIC0gMSwgc2VnbWVudC5sb29wLCBwcmV2U3R5bGUpO1xuICAgICAgfVxuICAgICAgcHJldiA9IHB0O1xuICAgICAgcHJldlN0eWxlID0gc3R5bGU7XG4gICAgfVxuICAgIGlmIChzdGFydCA8IGkgLSAxKSB7XG4gICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJlYWRTdHlsZShvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICBib3JkZXJDYXBTdHlsZTogb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSxcbiAgICBib3JkZXJEYXNoOiBvcHRpb25zLmJvcmRlckRhc2gsXG4gICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgIGJvcmRlckpvaW5TdHlsZTogb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUsXG4gICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3JcbiAgfTtcbn1cbmZ1bmN0aW9uIHN0eWxlQ2hhbmdlZChzdHlsZSwgcHJldlN0eWxlKSB7XG4gIHJldHVybiBwcmV2U3R5bGUgJiYgSlNPTi5zdHJpbmdpZnkoc3R5bGUpICE9PSBKU09OLnN0cmluZ2lmeShwcmV2U3R5bGUpO1xufVxuXG5leHBvcnQgeyBfaXNQb2ludEluQXJlYSBhcyAkLCBfZmFjdG9yaXplIGFzIEEsIGZpbml0ZU9yRGVmYXVsdCBhcyBCLCBjYWxsYmFjayBhcyBDLCBfYWRkR3JhY2UgYXMgRCwgX2xpbWl0VmFsdWUgYXMgRSwgdG9EZWdyZWVzIGFzIEYsIF9tZWFzdXJlVGV4dCBhcyBHLCBIQUxGX1BJIGFzIEgsIF9pbnQxNlJhbmdlIGFzIEksIF9hbGlnblBpeGVsIGFzIEosIHRvUGFkZGluZyBhcyBLLCBjbGlwQXJlYSBhcyBMLCByZW5kZXJUZXh0IGFzIE0sIHVuY2xpcEFyZWEgYXMgTiwgdG9Gb250IGFzIE8sIFBJIGFzIFAsIGVhY2ggYXMgUSwgX3RvTGVmdFJpZ2h0Q2VudGVyIGFzIFIsIF9hbGlnblN0YXJ0RW5kIGFzIFMsIFRBVSBhcyBULCBvdmVycmlkZXMgYXMgVSwgbWVyZ2UgYXMgViwgX2NhcGl0YWxpemUgYXMgVywgZ2V0UmVsYXRpdmVQb3NpdGlvbiBhcyBYLCBfcmxvb2t1cEJ5S2V5IGFzIFksIF9sb29rdXBCeUtleSBhcyBaLCBfYXJyYXlVbmlxdWUgYXMgXywgcmVzb2x2ZSBhcyBhLCB0b0xpbmVIZWlnaHQgYXMgYSQsIGdldEFuZ2xlRnJvbVBvaW50IGFzIGEwLCBnZXRNYXhpbXVtU2l6ZSBhcyBhMSwgX2dldFBhcmVudE5vZGUgYXMgYTIsIHJlYWRVc2VkU2l6ZSBhcyBhMywgdGhyb3R0bGVkIGFzIGE0LCBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIGFzIGE1LCBfaXNEb21TdXBwb3J0ZWQgYXMgYTYsIGRlc2NyaXB0b3JzIGFzIGE3LCBpc0Z1bmN0aW9uIGFzIGE4LCBfYXR0YWNoQ29udGV4dCBhcyBhOSwgZ2V0UnRsQWRhcHRlciBhcyBhQSwgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uIGFzIGFCLCBfdGV4dFggYXMgYUMsIHJlc3RvcmVUZXh0RGlyZWN0aW9uIGFzIGFELCBkcmF3UG9pbnRMZWdlbmQgYXMgYUUsIG5vb3AgYXMgYUYsIGRpc3RhbmNlQmV0d2VlblBvaW50cyBhcyBhRywgX3NldE1pbkFuZE1heEJ5S2V5IGFzIGFILCBuaWNlTnVtIGFzIGFJLCBhbG1vc3RXaG9sZSBhcyBhSiwgYWxtb3N0RXF1YWxzIGFzIGFLLCBfZGVjaW1hbFBsYWNlcyBhcyBhTCwgX2xvbmdlc3RUZXh0IGFzIGFNLCBfZmlsdGVyQmV0d2VlbiBhcyBhTiwgX2xvb2t1cCBhcyBhTywgaXNQYXR0ZXJuT3JHcmFkaWVudCBhcyBhUCwgZ2V0SG92ZXJDb2xvciBhcyBhUSwgY2xvbmUkMSBhcyBhUiwgX21lcmdlciBhcyBhUywgX21lcmdlcklmIGFzIGFULCBfZGVwcmVjYXRlZCBhcyBhVSwgX3NwbGl0S2V5IGFzIGFWLCB0b0ZvbnRTdHJpbmcgYXMgYVcsIHNwbGluZUN1cnZlIGFzIGFYLCBzcGxpbmVDdXJ2ZU1vbm90b25lIGFzIGFZLCBnZXRTdHlsZSBhcyBhWiwgZm9udFN0cmluZyBhcyBhXywgX2NyZWF0ZVJlc29sdmVyIGFzIGFhLCBfZGVzY3JpcHRvcnMgYXMgYWIsIG1lcmdlSWYgYXMgYWMsIHVpZCBhcyBhZCwgZGVib3VuY2UgYXMgYWUsIHJldGluYVNjYWxlIGFzIGFmLCBjbGVhckNhbnZhcyBhcyBhZywgc2V0c0VxdWFsIGFzIGFoLCBfZWxlbWVudHNFcXVhbCBhcyBhaSwgX2lzQ2xpY2tFdmVudCBhcyBhaiwgX2lzQmV0d2VlbiBhcyBhaywgX3JlYWRWYWx1ZVRvUHJvcHMgYXMgYWwsIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIGFzIGFtLCBfY29tcHV0ZVNlZ21lbnRzIGFzIGFuLCBfYm91bmRTZWdtZW50cyBhcyBhbywgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIGFzIGFwLCBfYmV6aWVySW50ZXJwb2xhdGlvbiBhcyBhcSwgX3BvaW50SW5MaW5lIGFzIGFyLCBfc3RlcHBlZExpbmVUbyBhcyBhcywgX2JlemllckN1cnZlVG8gYXMgYXQsIGRyYXdQb2ludCBhcyBhdSwgYWRkUm91bmRlZFJlY3RQYXRoIGFzIGF2LCB0b1RSQkwgYXMgYXcsIHRvVFJCTENvcm5lcnMgYXMgYXgsIF9ib3VuZFNlZ21lbnQgYXMgYXksIF9ub3JtYWxpemVBbmdsZSBhcyBheiwgaXNBcnJheSBhcyBiLCBQSVRBVSBhcyBiMCwgSU5GSU5JVFkgYXMgYjEsIFJBRF9QRVJfREVHIGFzIGIyLCBRVUFSVEVSX1BJIGFzIGIzLCBUV09fVEhJUkRTX1BJIGFzIGI0LCBfYW5nbGVEaWZmIGFzIGI1LCBjb2xvciBhcyBjLCBkZWZhdWx0cyBhcyBkLCBlZmZlY3RzIGFzIGUsIHJlc29sdmVPYmplY3RLZXkgYXMgZiwgaXNOdW1iZXJGaW5pdGUgYXMgZywgY3JlYXRlQ29udGV4dCBhcyBoLCBpc09iamVjdCBhcyBpLCBkZWZpbmVkIGFzIGosIGlzTnVsbE9yVW5kZWYgYXMgaywgbGlzdGVuQXJyYXlFdmVudHMgYXMgbCwgdG9QZXJjZW50YWdlIGFzIG0sIHRvRGltZW5zaW9uIGFzIG4sIGZvcm1hdE51bWJlciBhcyBvLCBfYW5nbGVCZXR3ZWVuIGFzIHAsIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzIGFzIHEsIHJlcXVlc3RBbmltRnJhbWUgYXMgciwgc2lnbiBhcyBzLCB0b1JhZGlhbnMgYXMgdCwgdW5saXN0ZW5BcnJheUV2ZW50cyBhcyB1LCB2YWx1ZU9yRGVmYXVsdCBhcyB2LCBfc2NhbGVSYW5nZXNDaGFuZ2VkIGFzIHcsIGlzTnVtYmVyIGFzIHgsIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSBhcyB5LCBsb2cxMCBhcyB6IH07XG4iLCIvKiFcbiAqIENoYXJ0LmpzIHYzLjkuMVxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIyIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHIgYXMgcmVxdWVzdEFuaW1GcmFtZSwgYSBhcyByZXNvbHZlLCBlIGFzIGVmZmVjdHMsIGMgYXMgY29sb3IsIGQgYXMgZGVmYXVsdHMsIGkgYXMgaXNPYmplY3QsIGIgYXMgaXNBcnJheSwgdiBhcyB2YWx1ZU9yRGVmYXVsdCwgdSBhcyB1bmxpc3RlbkFycmF5RXZlbnRzLCBsIGFzIGxpc3RlbkFycmF5RXZlbnRzLCBmIGFzIHJlc29sdmVPYmplY3RLZXksIGcgYXMgaXNOdW1iZXJGaW5pdGUsIGggYXMgY3JlYXRlQ29udGV4dCwgaiBhcyBkZWZpbmVkLCBzIGFzIHNpZ24sIGsgYXMgaXNOdWxsT3JVbmRlZiwgXyBhcyBfYXJyYXlVbmlxdWUsIHQgYXMgdG9SYWRpYW5zLCBtIGFzIHRvUGVyY2VudGFnZSwgbiBhcyB0b0RpbWVuc2lvbiwgVCBhcyBUQVUsIG8gYXMgZm9ybWF0TnVtYmVyLCBwIGFzIF9hbmdsZUJldHdlZW4sIEggYXMgSEFMRl9QSSwgUCBhcyBQSSwgcSBhcyBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cywgdyBhcyBfc2NhbGVSYW5nZXNDaGFuZ2VkLCB4IGFzIGlzTnVtYmVyLCB5IGFzIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSwgeiBhcyBsb2cxMCwgQSBhcyBfZmFjdG9yaXplLCBCIGFzIGZpbml0ZU9yRGVmYXVsdCwgQyBhcyBjYWxsYmFjaywgRCBhcyBfYWRkR3JhY2UsIEUgYXMgX2xpbWl0VmFsdWUsIEYgYXMgdG9EZWdyZWVzLCBHIGFzIF9tZWFzdXJlVGV4dCwgSSBhcyBfaW50MTZSYW5nZSwgSiBhcyBfYWxpZ25QaXhlbCwgSyBhcyB0b1BhZGRpbmcsIEwgYXMgY2xpcEFyZWEsIE0gYXMgcmVuZGVyVGV4dCwgTiBhcyB1bmNsaXBBcmVhLCBPIGFzIHRvRm9udCwgUSBhcyBlYWNoLCBSIGFzIF90b0xlZnRSaWdodENlbnRlciwgUyBhcyBfYWxpZ25TdGFydEVuZCwgVSBhcyBvdmVycmlkZXMsIFYgYXMgbWVyZ2UsIFcgYXMgX2NhcGl0YWxpemUsIFggYXMgZ2V0UmVsYXRpdmVQb3NpdGlvbiwgWSBhcyBfcmxvb2t1cEJ5S2V5LCBaIGFzIF9sb29rdXBCeUtleSwgJCBhcyBfaXNQb2ludEluQXJlYSwgYTAgYXMgZ2V0QW5nbGVGcm9tUG9pbnQsIGExIGFzIGdldE1heGltdW1TaXplLCBhMiBhcyBfZ2V0UGFyZW50Tm9kZSwgYTMgYXMgcmVhZFVzZWRTaXplLCBhNCBhcyB0aHJvdHRsZWQsIGE1IGFzIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMsIGE2IGFzIF9pc0RvbVN1cHBvcnRlZCwgYTcgYXMgZGVzY3JpcHRvcnMsIGE4IGFzIGlzRnVuY3Rpb24sIGE5IGFzIF9hdHRhY2hDb250ZXh0LCBhYSBhcyBfY3JlYXRlUmVzb2x2ZXIsIGFiIGFzIF9kZXNjcmlwdG9ycywgYWMgYXMgbWVyZ2VJZiwgYWQgYXMgdWlkLCBhZSBhcyBkZWJvdW5jZSwgYWYgYXMgcmV0aW5hU2NhbGUsIGFnIGFzIGNsZWFyQ2FudmFzLCBhaCBhcyBzZXRzRXF1YWwsIGFpIGFzIF9lbGVtZW50c0VxdWFsLCBhaiBhcyBfaXNDbGlja0V2ZW50LCBhayBhcyBfaXNCZXR3ZWVuLCBhbCBhcyBfcmVhZFZhbHVlVG9Qcm9wcywgYW0gYXMgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMsIGFuIGFzIF9jb21wdXRlU2VnbWVudHMsIGFvIGFzIF9ib3VuZFNlZ21lbnRzLCBhcCBhcyBfc3RlcHBlZEludGVycG9sYXRpb24sIGFxIGFzIF9iZXppZXJJbnRlcnBvbGF0aW9uLCBhciBhcyBfcG9pbnRJbkxpbmUsIGFzIGFzIF9zdGVwcGVkTGluZVRvLCBhdCBhcyBfYmV6aWVyQ3VydmVUbywgYXUgYXMgZHJhd1BvaW50LCBhdiBhcyBhZGRSb3VuZGVkUmVjdFBhdGgsIGF3IGFzIHRvVFJCTCwgYXggYXMgdG9UUkJMQ29ybmVycywgYXkgYXMgX2JvdW5kU2VnbWVudCwgYXogYXMgX25vcm1hbGl6ZUFuZ2xlLCBhQSBhcyBnZXRSdGxBZGFwdGVyLCBhQiBhcyBvdmVycmlkZVRleHREaXJlY3Rpb24sIGFDIGFzIF90ZXh0WCwgYUQgYXMgcmVzdG9yZVRleHREaXJlY3Rpb24sIGFFIGFzIGRyYXdQb2ludExlZ2VuZCwgYUYgYXMgbm9vcCwgYUcgYXMgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzLCBhSCBhcyBfc2V0TWluQW5kTWF4QnlLZXksIGFJIGFzIG5pY2VOdW0sIGFKIGFzIGFsbW9zdFdob2xlLCBhSyBhcyBhbG1vc3RFcXVhbHMsIGFMIGFzIF9kZWNpbWFsUGxhY2VzLCBhTSBhcyBfbG9uZ2VzdFRleHQsIGFOIGFzIF9maWx0ZXJCZXR3ZWVuLCBhTyBhcyBfbG9va3VwIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50Lm1qcyc7XG5leHBvcnQgeyBkIGFzIGRlZmF1bHRzIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50Lm1qcyc7XG5cbmNsYXNzIEFuaW1hdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgdGhpcy5fY2hhcnRzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9sYXN0RGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICBfbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgdHlwZSkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGFuaW1zLmxpc3RlbmVyc1t0eXBlXTtcbiAgICBjb25zdCBudW1TdGVwcyA9IGFuaW1zLmR1cmF0aW9uO1xuICAgIGNhbGxiYWNrcy5mb3JFYWNoKGZuID0+IGZuKHtcbiAgICAgIGNoYXJ0LFxuICAgICAgaW5pdGlhbDogYW5pbXMuaW5pdGlhbCxcbiAgICAgIG51bVN0ZXBzLFxuICAgICAgY3VycmVudFN0ZXA6IE1hdGgubWluKGRhdGUgLSBhbmltcy5zdGFydCwgbnVtU3RlcHMpXG4gICAgfSkpO1xuICB9XG4gIF9yZWZyZXNoKCkge1xuICAgIGlmICh0aGlzLl9yZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3J1bm5pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0QW5pbUZyYW1lLmNhbGwod2luZG93LCAoKSA9PiB7XG4gICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgaWYgKHRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIF91cGRhdGUoZGF0ZSA9IERhdGUubm93KCkpIHtcbiAgICBsZXQgcmVtYWluaW5nID0gMDtcbiAgICB0aGlzLl9jaGFydHMuZm9yRWFjaCgoYW5pbXMsIGNoYXJ0KSA9PiB7XG4gICAgICBpZiAoIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBpdGVtcyA9IGFuaW1zLml0ZW1zO1xuICAgICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgbGV0IGRyYXcgPSBmYWxzZTtcbiAgICAgIGxldCBpdGVtO1xuICAgICAgZm9yICg7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgaWYgKGl0ZW0uX2FjdGl2ZSkge1xuICAgICAgICAgIGlmIChpdGVtLl90b3RhbCA+IGFuaW1zLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGl0ZW0uX3RvdGFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtLnRpY2soZGF0ZSk7XG4gICAgICAgICAgZHJhdyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbXNbaV0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpdGVtcy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRyYXcpIHtcbiAgICAgICAgY2hhcnQuZHJhdygpO1xuICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCAncHJvZ3Jlc3MnKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIGFuaW1zLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ2NvbXBsZXRlJyk7XG4gICAgICAgIGFuaW1zLmluaXRpYWwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJlbWFpbmluZyArPSBpdGVtcy5sZW5ndGg7XG4gICAgfSk7XG4gICAgdGhpcy5fbGFzdERhdGUgPSBkYXRlO1xuICAgIGlmIChyZW1haW5pbmcgPT09IDApIHtcbiAgICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgX2dldEFuaW1zKGNoYXJ0KSB7XG4gICAgY29uc3QgY2hhcnRzID0gdGhpcy5fY2hhcnRzO1xuICAgIGxldCBhbmltcyA9IGNoYXJ0cy5nZXQoY2hhcnQpO1xuICAgIGlmICghYW5pbXMpIHtcbiAgICAgIGFuaW1zID0ge1xuICAgICAgICBydW5uaW5nOiBmYWxzZSxcbiAgICAgICAgaW5pdGlhbDogdHJ1ZSxcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBsaXN0ZW5lcnM6IHtcbiAgICAgICAgICBjb21wbGV0ZTogW10sXG4gICAgICAgICAgcHJvZ3Jlc3M6IFtdXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaGFydHMuc2V0KGNoYXJ0LCBhbmltcyk7XG4gICAgfVxuICAgIHJldHVybiBhbmltcztcbiAgfVxuICBsaXN0ZW4oY2hhcnQsIGV2ZW50LCBjYikge1xuICAgIHRoaXMuX2dldEFuaW1zKGNoYXJ0KS5saXN0ZW5lcnNbZXZlbnRdLnB1c2goY2IpO1xuICB9XG4gIGFkZChjaGFydCwgaXRlbXMpIHtcbiAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLnB1c2goLi4uaXRlbXMpO1xuICB9XG4gIGhhcyhjaGFydCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRBbmltcyhjaGFydCkuaXRlbXMubGVuZ3RoID4gMDtcbiAgfVxuICBzdGFydChjaGFydCkge1xuICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgaWYgKCFhbmltcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbmltcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICBhbmltcy5zdGFydCA9IERhdGUubm93KCk7XG4gICAgYW5pbXMuZHVyYXRpb24gPSBhbmltcy5pdGVtcy5yZWR1Y2UoKGFjYywgY3VyKSA9PiBNYXRoLm1heChhY2MsIGN1ci5fZHVyYXRpb24pLCAwKTtcbiAgICB0aGlzLl9yZWZyZXNoKCk7XG4gIH1cbiAgcnVubmluZyhjaGFydCkge1xuICAgIGlmICghdGhpcy5fcnVubmluZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhbmltcyA9IHRoaXMuX2NoYXJ0cy5nZXQoY2hhcnQpO1xuICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzdG9wKGNoYXJ0KSB7XG4gICAgY29uc3QgYW5pbXMgPSB0aGlzLl9jaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoIWFuaW1zIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXRlbXMgPSBhbmltcy5pdGVtcztcbiAgICBsZXQgaSA9IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBpdGVtc1tpXS5jYW5jZWwoKTtcbiAgICB9XG4gICAgYW5pbXMuaXRlbXMgPSBbXTtcbiAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBEYXRlLm5vdygpLCAnY29tcGxldGUnKTtcbiAgfVxuICByZW1vdmUoY2hhcnQpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gIH1cbn1cbnZhciBhbmltYXRvciA9IG5ldyBBbmltYXRvcigpO1xuXG5jb25zdCB0cmFuc3BhcmVudCA9ICd0cmFuc3BhcmVudCc7XG5jb25zdCBpbnRlcnBvbGF0b3JzID0ge1xuICBib29sZWFuKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICByZXR1cm4gZmFjdG9yID4gMC41ID8gdG8gOiBmcm9tO1xuICB9LFxuICBjb2xvcihmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgY29uc3QgYzAgPSBjb2xvcihmcm9tIHx8IHRyYW5zcGFyZW50KTtcbiAgICBjb25zdCBjMSA9IGMwLnZhbGlkICYmIGNvbG9yKHRvIHx8IHRyYW5zcGFyZW50KTtcbiAgICByZXR1cm4gYzEgJiYgYzEudmFsaWRcbiAgICAgID8gYzEubWl4KGMwLCBmYWN0b3IpLmhleFN0cmluZygpXG4gICAgICA6IHRvO1xuICB9LFxuICBudW1iZXIoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgIHJldHVybiBmcm9tICsgKHRvIC0gZnJvbSkgKiBmYWN0b3I7XG4gIH1cbn07XG5jbGFzcyBBbmltYXRpb24ge1xuICBjb25zdHJ1Y3RvcihjZmcsIHRhcmdldCwgcHJvcCwgdG8pIHtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcF07XG4gICAgdG8gPSByZXNvbHZlKFtjZmcudG8sIHRvLCBjdXJyZW50VmFsdWUsIGNmZy5mcm9tXSk7XG4gICAgY29uc3QgZnJvbSA9IHJlc29sdmUoW2NmZy5mcm9tLCBjdXJyZW50VmFsdWUsIHRvXSk7XG4gICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLl9mbiA9IGNmZy5mbiB8fCBpbnRlcnBvbGF0b3JzW2NmZy50eXBlIHx8IHR5cGVvZiBmcm9tXTtcbiAgICB0aGlzLl9lYXNpbmcgPSBlZmZlY3RzW2NmZy5lYXNpbmddIHx8IGVmZmVjdHMubGluZWFyO1xuICAgIHRoaXMuX3N0YXJ0ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpICsgKGNmZy5kZWxheSB8fCAwKSk7XG4gICAgdGhpcy5fZHVyYXRpb24gPSB0aGlzLl90b3RhbCA9IE1hdGguZmxvb3IoY2ZnLmR1cmF0aW9uKTtcbiAgICB0aGlzLl9sb29wID0gISFjZmcubG9vcDtcbiAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy5fcHJvcCA9IHByb3A7XG4gICAgdGhpcy5fZnJvbSA9IGZyb207XG4gICAgdGhpcy5fdG8gPSB0bztcbiAgICB0aGlzLl9wcm9taXNlcyA9IHVuZGVmaW5lZDtcbiAgfVxuICBhY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgfVxuICB1cGRhdGUoY2ZnLCB0bywgZGF0ZSkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLl90YXJnZXRbdGhpcy5fcHJvcF07XG4gICAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgY29uc3QgcmVtYWluID0gdGhpcy5fZHVyYXRpb24gLSBlbGFwc2VkO1xuICAgICAgdGhpcy5fc3RhcnQgPSBkYXRlO1xuICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKE1hdGgubWF4KHJlbWFpbiwgY2ZnLmR1cmF0aW9uKSk7XG4gICAgICB0aGlzLl90b3RhbCArPSBlbGFwc2VkO1xuICAgICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgICB0aGlzLl90byA9IHJlc29sdmUoW2NmZy50bywgdG8sIGN1cnJlbnRWYWx1ZSwgY2ZnLmZyb21dKTtcbiAgICAgIHRoaXMuX2Zyb20gPSByZXNvbHZlKFtjZmcuZnJvbSwgY3VycmVudFZhbHVlLCB0b10pO1xuICAgIH1cbiAgfVxuICBjYW5jZWwoKSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgdGhpcy50aWNrKERhdGUubm93KCkpO1xuICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLl9ub3RpZnkoZmFsc2UpO1xuICAgIH1cbiAgfVxuICB0aWNrKGRhdGUpIHtcbiAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb247XG4gICAgY29uc3QgcHJvcCA9IHRoaXMuX3Byb3A7XG4gICAgY29uc3QgZnJvbSA9IHRoaXMuX2Zyb207XG4gICAgY29uc3QgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgY29uc3QgdG8gPSB0aGlzLl90bztcbiAgICBsZXQgZmFjdG9yO1xuICAgIHRoaXMuX2FjdGl2ZSA9IGZyb20gIT09IHRvICYmIChsb29wIHx8IChlbGFwc2VkIDwgZHVyYXRpb24pKTtcbiAgICBpZiAoIXRoaXMuX2FjdGl2ZSkge1xuICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdG87XG4gICAgICB0aGlzLl9ub3RpZnkodHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlbGFwc2VkIDwgMCkge1xuICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gZnJvbTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmFjdG9yID0gKGVsYXBzZWQgLyBkdXJhdGlvbikgJSAyO1xuICAgIGZhY3RvciA9IGxvb3AgJiYgZmFjdG9yID4gMSA/IDIgLSBmYWN0b3IgOiBmYWN0b3I7XG4gICAgZmFjdG9yID0gdGhpcy5fZWFzaW5nKE1hdGgubWluKDEsIE1hdGgubWF4KDAsIGZhY3RvcikpKTtcbiAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSB0aGlzLl9mbihmcm9tLCB0bywgZmFjdG9yKTtcbiAgfVxuICB3YWl0KCkge1xuICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXMgfHwgKHRoaXMuX3Byb21pc2VzID0gW10pO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgIHByb21pc2VzLnB1c2goe3JlcywgcmVqfSk7XG4gICAgfSk7XG4gIH1cbiAgX25vdGlmeShyZXNvbHZlZCkge1xuICAgIGNvbnN0IG1ldGhvZCA9IHJlc29sdmVkID8gJ3JlcycgOiAncmVqJztcbiAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuX3Byb21pc2VzIHx8IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvbWlzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb21pc2VzW2ldW21ldGhvZF0oKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgbnVtYmVycyA9IFsneCcsICd5JywgJ2JvcmRlcldpZHRoJywgJ3JhZGl1cycsICd0ZW5zaW9uJ107XG5jb25zdCBjb2xvcnMgPSBbJ2NvbG9yJywgJ2JvcmRlckNvbG9yJywgJ2JhY2tncm91bmRDb2xvciddO1xuZGVmYXVsdHMuc2V0KCdhbmltYXRpb24nLCB7XG4gIGRlbGF5OiB1bmRlZmluZWQsXG4gIGR1cmF0aW9uOiAxMDAwLFxuICBlYXNpbmc6ICdlYXNlT3V0UXVhcnQnLFxuICBmbjogdW5kZWZpbmVkLFxuICBmcm9tOiB1bmRlZmluZWQsXG4gIGxvb3A6IHVuZGVmaW5lZCxcbiAgdG86IHVuZGVmaW5lZCxcbiAgdHlwZTogdW5kZWZpbmVkLFxufSk7XG5jb25zdCBhbmltYXRpb25PcHRpb25zID0gT2JqZWN0LmtleXMoZGVmYXVsdHMuYW5pbWF0aW9uKTtcbmRlZmF1bHRzLmRlc2NyaWJlKCdhbmltYXRpb24nLCB7XG4gIF9mYWxsYmFjazogZmFsc2UsXG4gIF9pbmRleGFibGU6IGZhbHNlLFxuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdvblByb2dyZXNzJyAmJiBuYW1lICE9PSAnb25Db21wbGV0ZScgJiYgbmFtZSAhPT0gJ2ZuJyxcbn0pO1xuZGVmYXVsdHMuc2V0KCdhbmltYXRpb25zJywge1xuICBjb2xvcnM6IHtcbiAgICB0eXBlOiAnY29sb3InLFxuICAgIHByb3BlcnRpZXM6IGNvbG9yc1xuICB9LFxuICBudW1iZXJzOiB7XG4gICAgdHlwZTogJ251bWJlcicsXG4gICAgcHJvcGVydGllczogbnVtYmVyc1xuICB9LFxufSk7XG5kZWZhdWx0cy5kZXNjcmliZSgnYW5pbWF0aW9ucycsIHtcbiAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJyxcbn0pO1xuZGVmYXVsdHMuc2V0KCd0cmFuc2l0aW9ucycsIHtcbiAgYWN0aXZlOiB7XG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICBkdXJhdGlvbjogNDAwXG4gICAgfVxuICB9LFxuICByZXNpemU6IHtcbiAgICBhbmltYXRpb246IHtcbiAgICAgIGR1cmF0aW9uOiAwXG4gICAgfVxuICB9LFxuICBzaG93OiB7XG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgY29sb3JzOiB7XG4gICAgICAgIGZyb206ICd0cmFuc3BhcmVudCdcbiAgICAgIH0sXG4gICAgICB2aXNpYmxlOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgZHVyYXRpb246IDBcbiAgICAgIH0sXG4gICAgfVxuICB9LFxuICBoaWRlOiB7XG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgY29sb3JzOiB7XG4gICAgICAgIHRvOiAndHJhbnNwYXJlbnQnXG4gICAgICB9LFxuICAgICAgdmlzaWJsZToge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgIGZuOiB2ID0+IHYgfCAwXG4gICAgICB9LFxuICAgIH1cbiAgfVxufSk7XG5jbGFzcyBBbmltYXRpb25zIHtcbiAgY29uc3RydWN0b3IoY2hhcnQsIGNvbmZpZykge1xuICAgIHRoaXMuX2NoYXJ0ID0gY2hhcnQ7XG4gICAgdGhpcy5fcHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmNvbmZpZ3VyZShjb25maWcpO1xuICB9XG4gIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGNvbmZpZykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0ZWRQcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY29uZmlnKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBjZmcgPSBjb25maWdba2V5XTtcbiAgICAgIGlmICghaXNPYmplY3QoY2ZnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCByZXNvbHZlZCA9IHt9O1xuICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgYW5pbWF0aW9uT3B0aW9ucykge1xuICAgICAgICByZXNvbHZlZFtvcHRpb25dID0gY2ZnW29wdGlvbl07XG4gICAgICB9XG4gICAgICAoaXNBcnJheShjZmcucHJvcGVydGllcykgJiYgY2ZnLnByb3BlcnRpZXMgfHwgW2tleV0pLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgICAgaWYgKHByb3AgPT09IGtleSB8fCAhYW5pbWF0ZWRQcm9wcy5oYXMocHJvcCkpIHtcbiAgICAgICAgICBhbmltYXRlZFByb3BzLnNldChwcm9wLCByZXNvbHZlZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIF9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykge1xuICAgIGNvbnN0IG5ld09wdGlvbnMgPSB2YWx1ZXMub3B0aW9ucztcbiAgICBjb25zdCBvcHRpb25zID0gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKTtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnMob3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gICAgaWYgKG5ld09wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgYXdhaXRBbGwodGFyZ2V0Lm9wdGlvbnMuJGFuaW1hdGlvbnMsIG5ld09wdGlvbnMpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gIH1cbiAgX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICBjb25zdCBhbmltYXRlZFByb3BzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgY29uc3QgcnVubmluZyA9IHRhcmdldC4kYW5pbWF0aW9ucyB8fCAodGFyZ2V0LiRhbmltYXRpb25zID0ge30pO1xuICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmtleXModmFsdWVzKTtcbiAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKTtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSBwcm9wcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHByb3AuY2hhckF0KDApID09PSAnJCcpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcCA9PT0gJ29wdGlvbnMnKSB7XG4gICAgICAgIGFuaW1hdGlvbnMucHVzaCguLi50aGlzLl9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW3Byb3BdO1xuICAgICAgbGV0IGFuaW1hdGlvbiA9IHJ1bm5pbmdbcHJvcF07XG4gICAgICBjb25zdCBjZmcgPSBhbmltYXRlZFByb3BzLmdldChwcm9wKTtcbiAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgaWYgKGNmZyAmJiBhbmltYXRpb24uYWN0aXZlKCkpIHtcbiAgICAgICAgICBhbmltYXRpb24udXBkYXRlKGNmZywgdmFsdWUsIGRhdGUpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFuaW1hdGlvbi5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFjZmcgfHwgIWNmZy5kdXJhdGlvbikge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBydW5uaW5nW3Byb3BdID0gYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbihjZmcsIHRhcmdldCwgcHJvcCwgdmFsdWUpO1xuICAgICAgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb25zO1xuICB9XG4gIHVwZGF0ZSh0YXJnZXQsIHZhbHVlcykge1xuICAgIGlmICh0aGlzLl9wcm9wZXJ0aWVzLnNpemUgPT09IDApIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LCB2YWx1ZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5fY3JlYXRlQW5pbWF0aW9ucyh0YXJnZXQsIHZhbHVlcyk7XG4gICAgaWYgKGFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICBhbmltYXRvci5hZGQodGhpcy5fY2hhcnQsIGFuaW1hdGlvbnMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhd2FpdEFsbChhbmltYXRpb25zLCBwcm9wZXJ0aWVzKSB7XG4gIGNvbnN0IHJ1bm5pbmcgPSBbXTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhbmltID0gYW5pbWF0aW9uc1trZXlzW2ldXTtcbiAgICBpZiAoYW5pbSAmJiBhbmltLmFjdGl2ZSgpKSB7XG4gICAgICBydW5uaW5nLnB1c2goYW5pbS53YWl0KCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gUHJvbWlzZS5hbGwocnVubmluZyk7XG59XG5mdW5jdGlvbiByZXNvbHZlVGFyZ2V0T3B0aW9ucyh0YXJnZXQsIG5ld09wdGlvbnMpIHtcbiAgaWYgKCFuZXdPcHRpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBvcHRpb25zID0gdGFyZ2V0Lm9wdGlvbnM7XG4gIGlmICghb3B0aW9ucykge1xuICAgIHRhcmdldC5vcHRpb25zID0gbmV3T3B0aW9ucztcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG9wdGlvbnMuJHNoYXJlZCkge1xuICAgIHRhcmdldC5vcHRpb25zID0gb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHskc2hhcmVkOiBmYWxzZSwgJGFuaW1hdGlvbnM6IHt9fSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHNjYWxlQ2xpcChzY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gIGNvbnN0IG9wdHMgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zIHx8IHt9O1xuICBjb25zdCByZXZlcnNlID0gb3B0cy5yZXZlcnNlO1xuICBjb25zdCBtaW4gPSBvcHRzLm1pbiA9PT0gdW5kZWZpbmVkID8gYWxsb3dlZE92ZXJmbG93IDogMDtcbiAgY29uc3QgbWF4ID0gb3B0cy5tYXggPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHJldmVyc2UgPyBtYXggOiBtaW4sXG4gICAgZW5kOiByZXZlcnNlID8gbWluIDogbWF4XG4gIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xpcCh4U2NhbGUsIHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gIGlmIChhbGxvd2VkT3ZlcmZsb3cgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHggPSBzY2FsZUNsaXAoeFNjYWxlLCBhbGxvd2VkT3ZlcmZsb3cpO1xuICBjb25zdCB5ID0gc2NhbGVDbGlwKHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IHkuZW5kLFxuICAgIHJpZ2h0OiB4LmVuZCxcbiAgICBib3R0b206IHkuc3RhcnQsXG4gICAgbGVmdDogeC5zdGFydFxuICB9O1xufVxuZnVuY3Rpb24gdG9DbGlwKHZhbHVlKSB7XG4gIGxldCB0LCByLCBiLCBsO1xuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdCA9IHZhbHVlLnRvcDtcbiAgICByID0gdmFsdWUucmlnaHQ7XG4gICAgYiA9IHZhbHVlLmJvdHRvbTtcbiAgICBsID0gdmFsdWUubGVmdDtcbiAgfSBlbHNlIHtcbiAgICB0ID0gciA9IGIgPSBsID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0b3A6IHQsXG4gICAgcmlnaHQ6IHIsXG4gICAgYm90dG9tOiBiLFxuICAgIGxlZnQ6IGwsXG4gICAgZGlzYWJsZWQ6IHZhbHVlID09PSBmYWxzZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIGZpbHRlclZpc2libGUpIHtcbiAgY29uc3Qga2V5cyA9IFtdO1xuICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoZmlsdGVyVmlzaWJsZSk7XG4gIGxldCBpLCBpbGVuO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAga2V5cy5wdXNoKG1ldGFzZXRzW2ldLmluZGV4KTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIGFwcGx5U3RhY2soc3RhY2ssIHZhbHVlLCBkc0luZGV4LCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qga2V5cyA9IHN0YWNrLmtleXM7XG4gIGNvbnN0IHNpbmdsZU1vZGUgPSBvcHRpb25zLm1vZGUgPT09ICdzaW5nbGUnO1xuICBsZXQgaSwgaWxlbiwgZGF0YXNldEluZGV4LCBvdGhlclZhbHVlO1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgZGF0YXNldEluZGV4ID0gK2tleXNbaV07XG4gICAgaWYgKGRhdGFzZXRJbmRleCA9PT0gZHNJbmRleCkge1xuICAgICAgaWYgKG9wdGlvbnMuYWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG90aGVyVmFsdWUgPSBzdGFjay52YWx1ZXNbZGF0YXNldEluZGV4XTtcbiAgICBpZiAoaXNOdW1iZXJGaW5pdGUob3RoZXJWYWx1ZSkgJiYgKHNpbmdsZU1vZGUgfHwgKHZhbHVlID09PSAwIHx8IHNpZ24odmFsdWUpID09PSBzaWduKG90aGVyVmFsdWUpKSkpIHtcbiAgICAgIHZhbHVlICs9IG90aGVyVmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgY29uc3QgYWRhdGEgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICBsZXQgaSwgaWxlbiwga2V5O1xuICBmb3IgKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIGFkYXRhW2ldID0ge1xuICAgICAgeDoga2V5LFxuICAgICAgeTogZGF0YVtrZXldXG4gICAgfTtcbiAgfVxuICByZXR1cm4gYWRhdGE7XG59XG5mdW5jdGlvbiBpc1N0YWNrZWQoc2NhbGUsIG1ldGEpIHtcbiAgY29uc3Qgc3RhY2tlZCA9IHNjYWxlICYmIHNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcbiAgcmV0dXJuIHN0YWNrZWQgfHwgKHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gZ2V0U3RhY2tLZXkoaW5kZXhTY2FsZSwgdmFsdWVTY2FsZSwgbWV0YSkge1xuICByZXR1cm4gYCR7aW5kZXhTY2FsZS5pZH0uJHt2YWx1ZVNjYWxlLmlkfS4ke21ldGEuc3RhY2sgfHwgbWV0YS50eXBlfWA7XG59XG5mdW5jdGlvbiBnZXRVc2VyQm91bmRzKHNjYWxlKSB7XG4gIGNvbnN0IHttaW4sIG1heCwgbWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSBzY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gIHJldHVybiB7XG4gICAgbWluOiBtaW5EZWZpbmVkID8gbWluIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLFxuICAgIG1heDogbWF4RGVmaW5lZCA/IG1heCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrS2V5LCBpbmRleFZhbHVlKSB7XG4gIGNvbnN0IHN1YlN0YWNrID0gc3RhY2tzW3N0YWNrS2V5XSB8fCAoc3RhY2tzW3N0YWNrS2V5XSA9IHt9KTtcbiAgcmV0dXJuIHN1YlN0YWNrW2luZGV4VmFsdWVdIHx8IChzdWJTdGFja1tpbmRleFZhbHVlXSA9IHt9KTtcbn1cbmZ1bmN0aW9uIGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgcG9zaXRpdmUsIHR5cGUpIHtcbiAgZm9yIChjb25zdCBtZXRhIG9mIHZTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKS5yZXZlcnNlKCkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHN0YWNrW21ldGEuaW5kZXhdO1xuICAgIGlmICgocG9zaXRpdmUgJiYgdmFsdWUgPiAwKSB8fCAoIXBvc2l0aXZlICYmIHZhbHVlIDwgMCkpIHtcbiAgICAgIHJldHVybiBtZXRhLmluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN0YWNrcyhjb250cm9sbGVyLCBwYXJzZWQpIHtcbiAgY29uc3Qge2NoYXJ0LCBfY2FjaGVkTWV0YTogbWV0YX0gPSBjb250cm9sbGVyO1xuICBjb25zdCBzdGFja3MgPSBjaGFydC5fc3RhY2tzIHx8IChjaGFydC5fc3RhY2tzID0ge30pO1xuICBjb25zdCB7aVNjYWxlLCB2U2NhbGUsIGluZGV4OiBkYXRhc2V0SW5kZXh9ID0gbWV0YTtcbiAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgY29uc3Qga2V5ID0gZ2V0U3RhY2tLZXkoaVNjYWxlLCB2U2NhbGUsIG1ldGEpO1xuICBjb25zdCBpbGVuID0gcGFyc2VkLmxlbmd0aDtcbiAgbGV0IHN0YWNrO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgIGNvbnN0IGl0ZW0gPSBwYXJzZWRbaV07XG4gICAgY29uc3Qge1tpQXhpc106IGluZGV4LCBbdkF4aXNdOiB2YWx1ZX0gPSBpdGVtO1xuICAgIGNvbnN0IGl0ZW1TdGFja3MgPSBpdGVtLl9zdGFja3MgfHwgKGl0ZW0uX3N0YWNrcyA9IHt9KTtcbiAgICBzdGFjayA9IGl0ZW1TdGFja3NbdkF4aXNdID0gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIGtleSwgaW5kZXgpO1xuICAgIHN0YWNrW2RhdGFzZXRJbmRleF0gPSB2YWx1ZTtcbiAgICBzdGFjay5fdG9wID0gZ2V0TGFzdEluZGV4SW5TdGFjayhzdGFjaywgdlNjYWxlLCB0cnVlLCBtZXRhLnR5cGUpO1xuICAgIHN0YWNrLl9ib3R0b20gPSBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIGZhbHNlLCBtZXRhLnR5cGUpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsIGF4aXMpIHtcbiAgY29uc3Qgc2NhbGVzID0gY2hhcnQuc2NhbGVzO1xuICByZXR1cm4gT2JqZWN0LmtleXMoc2NhbGVzKS5maWx0ZXIoa2V5ID0+IHNjYWxlc1trZXldLmF4aXMgPT09IGF4aXMpLnNoaWZ0KCk7XG59XG5mdW5jdGlvbiBjcmVhdGVEYXRhc2V0Q29udGV4dChwYXJlbnQsIGluZGV4KSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCxcbiAgICB7XG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgZGF0YXNldDogdW5kZWZpbmVkLFxuICAgICAgZGF0YXNldEluZGV4OiBpbmRleCxcbiAgICAgIGluZGV4LFxuICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgdHlwZTogJ2RhdGFzZXQnXG4gICAgfVxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlRGF0YUNvbnRleHQocGFyZW50LCBpbmRleCwgZWxlbWVudCkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIGRhdGFJbmRleDogaW5kZXgsXG4gICAgcGFyc2VkOiB1bmRlZmluZWQsXG4gICAgcmF3OiB1bmRlZmluZWQsXG4gICAgZWxlbWVudCxcbiAgICBpbmRleCxcbiAgICBtb2RlOiAnZGVmYXVsdCcsXG4gICAgdHlwZTogJ2RhdGEnXG4gIH0pO1xufVxuZnVuY3Rpb24gY2xlYXJTdGFja3MobWV0YSwgaXRlbXMpIHtcbiAgY29uc3QgZGF0YXNldEluZGV4ID0gbWV0YS5jb250cm9sbGVyLmluZGV4O1xuICBjb25zdCBheGlzID0gbWV0YS52U2NhbGUgJiYgbWV0YS52U2NhbGUuYXhpcztcbiAgaWYgKCFheGlzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGl0ZW1zID0gaXRlbXMgfHwgbWV0YS5fcGFyc2VkO1xuICBmb3IgKGNvbnN0IHBhcnNlZCBvZiBpdGVtcykge1xuICAgIGNvbnN0IHN0YWNrcyA9IHBhcnNlZC5fc3RhY2tzO1xuICAgIGlmICghc3RhY2tzIHx8IHN0YWNrc1theGlzXSA9PT0gdW5kZWZpbmVkIHx8IHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVsZXRlIHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdO1xuICB9XG59XG5jb25zdCBpc0RpcmVjdFVwZGF0ZU1vZGUgPSAobW9kZSkgPT4gbW9kZSA9PT0gJ3Jlc2V0JyB8fCBtb2RlID09PSAnbm9uZSc7XG5jb25zdCBjbG9uZUlmTm90U2hhcmVkID0gKGNhY2hlZCwgc2hhcmVkKSA9PiBzaGFyZWQgPyBjYWNoZWQgOiBPYmplY3QuYXNzaWduKHt9LCBjYWNoZWQpO1xuY29uc3QgY3JlYXRlU3RhY2sgPSAoY2FuU3RhY2ssIG1ldGEsIGNoYXJ0KSA9PiBjYW5TdGFjayAmJiAhbWV0YS5oaWRkZW4gJiYgbWV0YS5fc3RhY2tlZFxuICAmJiB7a2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLCB2YWx1ZXM6IG51bGx9O1xuY2xhc3MgRGF0YXNldENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KSB7XG4gICAgdGhpcy5jaGFydCA9IGNoYXJ0O1xuICAgIHRoaXMuX2N0eCA9IGNoYXJ0LmN0eDtcbiAgICB0aGlzLmluZGV4ID0gZGF0YXNldEluZGV4O1xuICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgdGhpcy5fY2FjaGVkTWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuICAgIHRoaXMuX3R5cGUgPSB0aGlzLl9jYWNoZWRNZXRhLnR5cGU7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3BhcnNpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9kYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX29iamVjdERhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc2hhcmVkT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9kcmF3U3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZHJhd0NvdW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IGZhbHNlO1xuICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gZmFsc2U7XG4gICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG4gIGluaXRpYWxpemUoKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICB0aGlzLmxpbmtTY2FsZXMoKTtcbiAgICBtZXRhLl9zdGFja2VkID0gaXNTdGFja2VkKG1ldGEudlNjYWxlLCBtZXRhKTtcbiAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gIH1cbiAgdXBkYXRlSW5kZXgoZGF0YXNldEluZGV4KSB7XG4gICAgaWYgKHRoaXMuaW5kZXggIT09IGRhdGFzZXRJbmRleCkge1xuICAgICAgY2xlYXJTdGFja3ModGhpcy5fY2FjaGVkTWV0YSk7XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gIH1cbiAgbGlua1NjYWxlcygpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgIGNvbnN0IGNob29zZUlkID0gKGF4aXMsIHgsIHksIHIpID0+IGF4aXMgPT09ICd4JyA/IHggOiBheGlzID09PSAncicgPyByIDogeTtcbiAgICBjb25zdCB4aWQgPSBtZXRhLnhBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnhBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3gnKSk7XG4gICAgY29uc3QgeWlkID0gbWV0YS55QXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC55QXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICd5JykpO1xuICAgIGNvbnN0IHJpZCA9IG1ldGEuckF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuckF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAncicpKTtcbiAgICBjb25zdCBpbmRleEF4aXMgPSBtZXRhLmluZGV4QXhpcztcbiAgICBjb25zdCBpaWQgPSBtZXRhLmlBeGlzSUQgPSBjaG9vc2VJZChpbmRleEF4aXMsIHhpZCwgeWlkLCByaWQpO1xuICAgIGNvbnN0IHZpZCA9IG1ldGEudkF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeWlkLCB4aWQsIHJpZCk7XG4gICAgbWV0YS54U2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQoeGlkKTtcbiAgICBtZXRhLnlTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZCh5aWQpO1xuICAgIG1ldGEuclNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHJpZCk7XG4gICAgbWV0YS5pU2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQoaWlkKTtcbiAgICBtZXRhLnZTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZCh2aWQpO1xuICB9XG4gIGdldERhdGFzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0aGlzLmluZGV4XTtcbiAgfVxuICBnZXRNZXRhKCkge1xuICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRoaXMuaW5kZXgpO1xuICB9XG4gIGdldFNjYWxlRm9ySWQoc2NhbGVJRCkge1xuICAgIHJldHVybiB0aGlzLmNoYXJ0LnNjYWxlc1tzY2FsZUlEXTtcbiAgfVxuICBfZ2V0T3RoZXJTY2FsZShzY2FsZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIHJldHVybiBzY2FsZSA9PT0gbWV0YS5pU2NhbGVcbiAgICAgID8gbWV0YS52U2NhbGVcbiAgICAgIDogbWV0YS5pU2NhbGU7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5fdXBkYXRlKCdyZXNldCcpO1xuICB9XG4gIF9kZXN0cm95KCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGlmICh0aGlzLl9kYXRhKSB7XG4gICAgICB1bmxpc3RlbkFycmF5RXZlbnRzKHRoaXMuX2RhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBpZiAobWV0YS5fc3RhY2tlZCkge1xuICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgfVxuICB9XG4gIF9kYXRhQ2hlY2soKSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgIGNvbnN0IGRhdGEgPSBkYXRhc2V0LmRhdGEgfHwgKGRhdGFzZXQuZGF0YSA9IFtdKTtcbiAgICBjb25zdCBfZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICB0aGlzLl9kYXRhID0gY29udmVydE9iamVjdERhdGFUb0FycmF5KGRhdGEpO1xuICAgIH0gZWxzZSBpZiAoX2RhdGEgIT09IGRhdGEpIHtcbiAgICAgIGlmIChfZGF0YSkge1xuICAgICAgICB1bmxpc3RlbkFycmF5RXZlbnRzKF9kYXRhLCB0aGlzKTtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgICAgICBtZXRhLl9wYXJzZWQgPSBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhICYmIE9iamVjdC5pc0V4dGVuc2libGUoZGF0YSkpIHtcbiAgICAgICAgbGlzdGVuQXJyYXlFdmVudHMoZGF0YSwgdGhpcyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgfVxuICB9XG4gIGFkZEVsZW1lbnRzKCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgIGlmICh0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSkge1xuICAgICAgbWV0YS5kYXRhc2V0ID0gbmV3IHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKCk7XG4gICAgfVxuICB9XG4gIGJ1aWxkT3JVcGRhdGVFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgIGxldCBzdGFja0NoYW5nZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9kYXRhQ2hlY2soKTtcbiAgICBjb25zdCBvbGRTdGFja2VkID0gbWV0YS5fc3RhY2tlZDtcbiAgICBtZXRhLl9zdGFja2VkID0gaXNTdGFja2VkKG1ldGEudlNjYWxlLCBtZXRhKTtcbiAgICBpZiAobWV0YS5zdGFjayAhPT0gZGF0YXNldC5zdGFjaykge1xuICAgICAgc3RhY2tDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgICAgbWV0YS5zdGFjayA9IGRhdGFzZXQuc3RhY2s7XG4gICAgfVxuICAgIHRoaXMuX3Jlc3luY0VsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpO1xuICAgIGlmIChzdGFja0NoYW5nZWQgfHwgb2xkU3RhY2tlZCAhPT0gbWV0YS5fc3RhY2tlZCkge1xuICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIG1ldGEuX3BhcnNlZCk7XG4gICAgfVxuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldFNjb3BlS2V5cyh0aGlzLl90eXBlKTtcbiAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKHRoaXMuZ2V0RGF0YXNldCgpLCBzY29wZUtleXMsIHRydWUpO1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICB0aGlzLl9wYXJzaW5nID0gdGhpcy5vcHRpb25zLnBhcnNpbmc7XG4gICAgdGhpcy5fY2FjaGVkRGF0YU9wdHMgPSB7fTtcbiAgfVxuICBwYXJzZShzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7X2NhY2hlZE1ldGE6IG1ldGEsIF9kYXRhOiBkYXRhfSA9IHRoaXM7XG4gICAgY29uc3Qge2lTY2FsZSwgX3N0YWNrZWR9ID0gbWV0YTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGxldCBzb3J0ZWQgPSBzdGFydCA9PT0gMCAmJiBjb3VudCA9PT0gZGF0YS5sZW5ndGggPyB0cnVlIDogbWV0YS5fc29ydGVkO1xuICAgIGxldCBwcmV2ID0gc3RhcnQgPiAwICYmIG1ldGEuX3BhcnNlZFtzdGFydCAtIDFdO1xuICAgIGxldCBpLCBjdXIsIHBhcnNlZDtcbiAgICBpZiAodGhpcy5fcGFyc2luZyA9PT0gZmFsc2UpIHtcbiAgICAgIG1ldGEuX3BhcnNlZCA9IGRhdGE7XG4gICAgICBtZXRhLl9zb3J0ZWQgPSB0cnVlO1xuICAgICAgcGFyc2VkID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzQXJyYXkoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgIHBhcnNlZCA9IHRoaXMucGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgIHBhcnNlZCA9IHRoaXMucGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYgPSAoKSA9PiBjdXJbaUF4aXNdID09PSBudWxsIHx8IChwcmV2ICYmIGN1cltpQXhpc10gPCBwcmV2W2lBeGlzXSk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuICAgICAgICBtZXRhLl9wYXJzZWRbaSArIHN0YXJ0XSA9IGN1ciA9IHBhcnNlZFtpXTtcbiAgICAgICAgaWYgKHNvcnRlZCkge1xuICAgICAgICAgIGlmIChpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldigpKSB7XG4gICAgICAgICAgICBzb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJldiA9IGN1cjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbWV0YS5fc29ydGVkID0gc29ydGVkO1xuICAgIH1cbiAgICBpZiAoX3N0YWNrZWQpIHtcbiAgICAgIHVwZGF0ZVN0YWNrcyh0aGlzLCBwYXJzZWQpO1xuICAgIH1cbiAgfVxuICBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgbGV0IGksIGlsZW4sIGluZGV4O1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgIFtpQXhpc106IHNpbmdsZVNjYWxlIHx8IGlTY2FsZS5wYXJzZShsYWJlbHNbaW5kZXhdLCBpbmRleCksXG4gICAgICAgIFt2QXhpc106IHZTY2FsZS5wYXJzZShkYXRhW2luZGV4XSwgaW5kZXgpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHt4U2NhbGUsIHlTY2FsZX0gPSBtZXRhO1xuICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgIHg6IHhTY2FsZS5wYXJzZShpdGVtWzBdLCBpbmRleCksXG4gICAgICAgIHk6IHlTY2FsZS5wYXJzZShpdGVtWzFdLCBpbmRleClcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHt4U2NhbGUsIHlTY2FsZX0gPSBtZXRhO1xuICAgIGNvbnN0IHt4QXhpc0tleSA9ICd4JywgeUF4aXNLZXkgPSAneSd9ID0gdGhpcy5fcGFyc2luZztcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgaXRlbSA9IGRhdGFbaW5kZXhdO1xuICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICB4OiB4U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB4QXhpc0tleSksIGluZGV4KSxcbiAgICAgICAgeTogeVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkoaXRlbSwgeUF4aXNLZXkpLCBpbmRleClcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgZ2V0UGFyc2VkKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZFtpbmRleF07XG4gIH1cbiAgZ2V0RGF0YUVsZW1lbnQoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkTWV0YS5kYXRhW2luZGV4XTtcbiAgfVxuICBhcHBseVN0YWNrKHNjYWxlLCBwYXJzZWQsIG1vZGUpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgdmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgY29uc3Qgc3RhY2sgPSB7XG4gICAgICBrZXlzOiBnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyhjaGFydCwgdHJ1ZSksXG4gICAgICB2YWx1ZXM6IHBhcnNlZC5fc3RhY2tzW3NjYWxlLmF4aXNdXG4gICAgfTtcbiAgICByZXR1cm4gYXBwbHlTdGFjayhzdGFjaywgdmFsdWUsIG1ldGEuaW5kZXgsIHttb2RlfSk7XG4gIH1cbiAgdXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjaykge1xuICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gcGFyc2VkW3NjYWxlLmF4aXNdO1xuICAgIGxldCB2YWx1ZSA9IHBhcnNlZFZhbHVlID09PSBudWxsID8gTmFOIDogcGFyc2VkVmFsdWU7XG4gICAgY29uc3QgdmFsdWVzID0gc3RhY2sgJiYgcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc107XG4gICAgaWYgKHN0YWNrICYmIHZhbHVlcykge1xuICAgICAgc3RhY2sudmFsdWVzID0gdmFsdWVzO1xuICAgICAgdmFsdWUgPSBhcHBseVN0YWNrKHN0YWNrLCBwYXJzZWRWYWx1ZSwgdGhpcy5fY2FjaGVkTWV0YS5pbmRleCk7XG4gICAgfVxuICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgdmFsdWUpO1xuICAgIHJhbmdlLm1heCA9IE1hdGgubWF4KHJhbmdlLm1heCwgdmFsdWUpO1xuICB9XG4gIGdldE1pbk1heChzY2FsZSwgY2FuU3RhY2spIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBfcGFyc2VkID0gbWV0YS5fcGFyc2VkO1xuICAgIGNvbnN0IHNvcnRlZCA9IG1ldGEuX3NvcnRlZCAmJiBzY2FsZSA9PT0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgaWxlbiA9IF9wYXJzZWQubGVuZ3RoO1xuICAgIGNvbnN0IG90aGVyU2NhbGUgPSB0aGlzLl9nZXRPdGhlclNjYWxlKHNjYWxlKTtcbiAgICBjb25zdCBzdGFjayA9IGNyZWF0ZVN0YWNrKGNhblN0YWNrLCBtZXRhLCB0aGlzLmNoYXJ0KTtcbiAgICBjb25zdCByYW5nZSA9IHttaW46IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgbWF4OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFl9O1xuICAgIGNvbnN0IHttaW46IG90aGVyTWluLCBtYXg6IG90aGVyTWF4fSA9IGdldFVzZXJCb3VuZHMob3RoZXJTY2FsZSk7XG4gICAgbGV0IGksIHBhcnNlZDtcbiAgICBmdW5jdGlvbiBfc2tpcCgpIHtcbiAgICAgIHBhcnNlZCA9IF9wYXJzZWRbaV07XG4gICAgICBjb25zdCBvdGhlclZhbHVlID0gcGFyc2VkW290aGVyU2NhbGUuYXhpc107XG4gICAgICByZXR1cm4gIWlzTnVtYmVyRmluaXRlKHBhcnNlZFtzY2FsZS5heGlzXSkgfHwgb3RoZXJNaW4gPiBvdGhlclZhbHVlIHx8IG90aGVyTWF4IDwgb3RoZXJWYWx1ZTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgaWYgKHNvcnRlZCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNvcnRlZCkge1xuICAgICAgZm9yIChpID0gaWxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGlmIChfc2tpcCgpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByYW5nZTtcbiAgfVxuICBnZXRBbGxQYXJzZWRWYWx1ZXMoc2NhbGUpIHtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLl9jYWNoZWRNZXRhLl9wYXJzZWQ7XG4gICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBwYXJzZWQubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB2YWx1ZSA9IHBhcnNlZFtpXVtzY2FsZS5heGlzXTtcbiAgICAgIGlmIChpc051bWJlckZpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG4gIGdldE1heE92ZXJmbG93KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogaVNjYWxlID8gJycgKyBpU2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbaVNjYWxlLmF4aXNdKSA6ICcnLFxuICAgICAgdmFsdWU6IHZTY2FsZSA/ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSkgOiAnJ1xuICAgIH07XG4gIH1cbiAgX3VwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgdGhpcy51cGRhdGUobW9kZSB8fCAnZGVmYXVsdCcpO1xuICAgIG1ldGEuX2NsaXAgPSB0b0NsaXAodmFsdWVPckRlZmF1bHQodGhpcy5vcHRpb25zLmNsaXAsIGRlZmF1bHRDbGlwKG1ldGEueFNjYWxlLCBtZXRhLnlTY2FsZSwgdGhpcy5nZXRNYXhPdmVyZmxvdygpKSkpO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7fVxuICBkcmF3KCkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuX2N0eDtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgZWxlbWVudHMgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgY29uc3QgYXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBjb25zdCBhY3RpdmUgPSBbXTtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX2RyYXdTdGFydCB8fCAwO1xuICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fZHJhd0NvdW50IHx8IChlbGVtZW50cy5sZW5ndGggLSBzdGFydCk7XG4gICAgY29uc3QgZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3AgPSB0aGlzLm9wdGlvbnMuZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3A7XG4gICAgbGV0IGk7XG4gICAgaWYgKG1ldGEuZGF0YXNldCkge1xuICAgICAgbWV0YS5kYXRhc2V0LmRyYXcoY3R4LCBhcmVhLCBzdGFydCwgY291bnQpO1xuICAgIH1cbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgaWYgKGVsZW1lbnQuaGlkZGVuKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGVsZW1lbnQuYWN0aXZlICYmIGRyYXdBY3RpdmVFbGVtZW50c09uVG9wKSB7XG4gICAgICAgIGFjdGl2ZS5wdXNoKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5kcmF3KGN0eCwgYXJlYSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBhY3RpdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgIGFjdGl2ZVtpXS5kcmF3KGN0eCwgYXJlYSk7XG4gICAgfVxuICB9XG4gIGdldFN0eWxlKGluZGV4LCBhY3RpdmUpIHtcbiAgICBjb25zdCBtb2RlID0gYWN0aXZlID8gJ2FjdGl2ZScgOiAnZGVmYXVsdCc7XG4gICAgcmV0dXJuIGluZGV4ID09PSB1bmRlZmluZWQgJiYgdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0XG4gICAgICA/IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKVxuICAgICAgOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXggfHwgMCwgbW9kZSk7XG4gIH1cbiAgZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCBtb2RlKSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgIGxldCBjb250ZXh0O1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5fY2FjaGVkTWV0YS5kYXRhLmxlbmd0aCkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YVtpbmRleF07XG4gICAgICBjb250ZXh0ID0gZWxlbWVudC4kY29udGV4dCB8fFxuICAgICAgICAoZWxlbWVudC4kY29udGV4dCA9IGNyZWF0ZURhdGFDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgZWxlbWVudCkpO1xuICAgICAgY29udGV4dC5wYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICBjb250ZXh0LnJhdyA9IGRhdGFzZXQuZGF0YVtpbmRleF07XG4gICAgICBjb250ZXh0LmluZGV4ID0gY29udGV4dC5kYXRhSW5kZXggPSBpbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGV4dCA9IHRoaXMuJGNvbnRleHQgfHxcbiAgICAgICAgKHRoaXMuJGNvbnRleHQgPSBjcmVhdGVEYXRhc2V0Q29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcy5pbmRleCkpO1xuICAgICAgY29udGV4dC5kYXRhc2V0ID0gZGF0YXNldDtcbiAgICAgIGNvbnRleHQuaW5kZXggPSBjb250ZXh0LmRhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgfVxuICAgIGNvbnRleHQuYWN0aXZlID0gISFhY3RpdmU7XG4gICAgY29udGV4dC5tb2RlID0gbW9kZTtcbiAgICByZXR1cm4gY29udGV4dDtcbiAgfVxuICByZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZUVsZW1lbnRPcHRpb25zKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlLmlkLCBtb2RlKTtcbiAgfVxuICByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVFbGVtZW50T3B0aW9ucyh0aGlzLmRhdGFFbGVtZW50VHlwZS5pZCwgbW9kZSwgaW5kZXgpO1xuICB9XG4gIF9yZXNvbHZlRWxlbWVudE9wdGlvbnMoZWxlbWVudFR5cGUsIG1vZGUgPSAnZGVmYXVsdCcsIGluZGV4KSB7XG4gICAgY29uc3QgYWN0aXZlID0gbW9kZSA9PT0gJ2FjdGl2ZSc7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWREYXRhT3B0cztcbiAgICBjb25zdCBjYWNoZUtleSA9IGVsZW1lbnRUeXBlICsgJy0nICsgbW9kZTtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgY29uc3Qgc2hhcmluZyA9IHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyAmJiBkZWZpbmVkKGluZGV4KTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICByZXR1cm4gY2xvbmVJZk5vdFNoYXJlZChjYWNoZWQsIHNoYXJpbmcpO1xuICAgIH1cbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldEVsZW1lbnRTY29wZUtleXModGhpcy5fdHlwZSwgZWxlbWVudFR5cGUpO1xuICAgIGNvbnN0IHByZWZpeGVzID0gYWN0aXZlID8gW2Ake2VsZW1lbnRUeXBlfUhvdmVyYCwgJ2hvdmVyJywgZWxlbWVudFR5cGUsICcnXSA6IFtlbGVtZW50VHlwZSwgJyddO1xuICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXModGhpcy5nZXREYXRhc2V0KCksIHNjb3BlS2V5cyk7XG4gICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0cy5lbGVtZW50c1tlbGVtZW50VHlwZV0pO1xuICAgIGNvbnN0IGNvbnRleHQgPSAoKSA9PiB0aGlzLmdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSk7XG4gICAgY29uc3QgdmFsdWVzID0gY29uZmlnLnJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMpO1xuICAgIGlmICh2YWx1ZXMuJHNoYXJlZCkge1xuICAgICAgdmFsdWVzLiRzaGFyZWQgPSBzaGFyaW5nO1xuICAgICAgY2FjaGVbY2FjaGVLZXldID0gT2JqZWN0LmZyZWV6ZShjbG9uZUlmTm90U2hhcmVkKHZhbHVlcywgc2hhcmluZykpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG4gIF9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgdHJhbnNpdGlvbiwgYWN0aXZlKSB7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgYW5pbWF0aW9uLSR7dHJhbnNpdGlvbn1gO1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlW2NhY2hlS2V5XTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cbiAgICBsZXQgb3B0aW9ucztcbiAgICBpZiAoY2hhcnQub3B0aW9ucy5hbmltYXRpb24gIT09IGZhbHNlKSB7XG4gICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKHRoaXMuX3R5cGUsIHRyYW5zaXRpb24pO1xuICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgIG9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCB0aGlzLmdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgdHJhbnNpdGlvbikpO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb25zID0gbmV3IEFuaW1hdGlvbnMoY2hhcnQsIG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRpb25zKTtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9jYWNoZWFibGUpIHtcbiAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoYW5pbWF0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb25zO1xuICB9XG4gIGdldFNoYXJlZE9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy4kc2hhcmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zaGFyZWRPcHRpb25zIHx8ICh0aGlzLl9zaGFyZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucykpO1xuICB9XG4gIGluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpIHtcbiAgICByZXR1cm4gIXNoYXJlZE9wdGlvbnMgfHwgaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpIHx8IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgfVxuICBfZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSkge1xuICAgIGNvbnN0IGZpcnN0T3B0cyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgY29uc3QgcHJldmlvdXNseVNoYXJlZE9wdGlvbnMgPSB0aGlzLl9zaGFyZWRPcHRpb25zO1xuICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucykgfHwgKHNoYXJlZE9wdGlvbnMgIT09IHByZXZpb3VzbHlTaGFyZWRPcHRpb25zKTtcbiAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICByZXR1cm4ge3NoYXJlZE9wdGlvbnMsIGluY2x1ZGVPcHRpb25zfTtcbiAgfVxuICB1cGRhdGVFbGVtZW50KGVsZW1lbnQsIGluZGV4LCBwcm9wZXJ0aWVzLCBtb2RlKSB7XG4gICAgaWYgKGlzRGlyZWN0VXBkYXRlTW9kZShtb2RlKSkge1xuICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LCBwcm9wZXJ0aWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIG1vZGUpLnVwZGF0ZShlbGVtZW50LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBuZXdPcHRpb25zKSB7XG4gICAgaWYgKHNoYXJlZE9wdGlvbnMgJiYgIWlzRGlyZWN0VXBkYXRlTW9kZShtb2RlKSkge1xuICAgICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnModW5kZWZpbmVkLCBtb2RlKS51cGRhdGUoc2hhcmVkT3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIF9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgbW9kZSwgYWN0aXZlKSB7XG4gICAgZWxlbWVudC5hY3RpdmUgPSBhY3RpdmU7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSk7XG4gICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIG1vZGUsIGFjdGl2ZSkudXBkYXRlKGVsZW1lbnQsIHtcbiAgICAgIG9wdGlvbnM6ICghYWN0aXZlICYmIHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSkgfHwgb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIHJlbW92ZUhvdmVyU3R5bGUoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgIHRoaXMuX3NldFN0eWxlKGVsZW1lbnQsIGluZGV4LCAnYWN0aXZlJywgZmFsc2UpO1xuICB9XG4gIHNldEhvdmVyU3R5bGUoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgIHRoaXMuX3NldFN0eWxlKGVsZW1lbnQsIGluZGV4LCAnYWN0aXZlJywgdHJ1ZSk7XG4gIH1cbiAgX3JlbW92ZURhdGFzZXRIb3ZlclN0eWxlKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQ7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX3NldFN0eWxlKGVsZW1lbnQsIHVuZGVmaW5lZCwgJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgX3NldERhdGFzZXRIb3ZlclN0eWxlKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQ7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX3NldFN0eWxlKGVsZW1lbnQsIHVuZGVmaW5lZCwgJ2FjdGl2ZScsIHRydWUpO1xuICAgIH1cbiAgfVxuICBfcmVzeW5jRWxlbWVudHMocmVzZXROZXdFbGVtZW50cykge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9kYXRhO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgIGZvciAoY29uc3QgW21ldGhvZCwgYXJnMSwgYXJnMl0gb2YgdGhpcy5fc3luY0xpc3QpIHtcbiAgICAgIHRoaXNbbWV0aG9kXShhcmcxLCBhcmcyKTtcbiAgICB9XG4gICAgdGhpcy5fc3luY0xpc3QgPSBbXTtcbiAgICBjb25zdCBudW1NZXRhID0gZWxlbWVudHMubGVuZ3RoO1xuICAgIGNvbnN0IG51bURhdGEgPSBkYXRhLmxlbmd0aDtcbiAgICBjb25zdCBjb3VudCA9IE1hdGgubWluKG51bURhdGEsIG51bU1ldGEpO1xuICAgIGlmIChjb3VudCkge1xuICAgICAgdGhpcy5wYXJzZSgwLCBjb3VudCk7XG4gICAgfVxuICAgIGlmIChudW1EYXRhID4gbnVtTWV0YSkge1xuICAgICAgdGhpcy5faW5zZXJ0RWxlbWVudHMobnVtTWV0YSwgbnVtRGF0YSAtIG51bU1ldGEsIHJlc2V0TmV3RWxlbWVudHMpO1xuICAgIH0gZWxzZSBpZiAobnVtRGF0YSA8IG51bU1ldGEpIHtcbiAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnRzKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICB9XG4gIH1cbiAgX2luc2VydEVsZW1lbnRzKHN0YXJ0LCBjb3VudCwgcmVzZXROZXdFbGVtZW50cyA9IHRydWUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhO1xuICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgY291bnQ7XG4gICAgbGV0IGk7XG4gICAgY29uc3QgbW92ZSA9IChhcnIpID0+IHtcbiAgICAgIGFyci5sZW5ndGggKz0gY291bnQ7XG4gICAgICBmb3IgKGkgPSBhcnIubGVuZ3RoIC0gMTsgaSA+PSBlbmQ7IGktLSkge1xuICAgICAgICBhcnJbaV0gPSBhcnJbaSAtIGNvdW50XTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG1vdmUoZGF0YSk7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgZGF0YVtpXSA9IG5ldyB0aGlzLmRhdGFFbGVtZW50VHlwZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgbW92ZShtZXRhLl9wYXJzZWQpO1xuICAgIH1cbiAgICB0aGlzLnBhcnNlKHN0YXJ0LCBjb3VudCk7XG4gICAgaWYgKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMoZGF0YSwgc3RhcnQsIGNvdW50LCAncmVzZXQnKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMoZWxlbWVudCwgc3RhcnQsIGNvdW50LCBtb2RlKSB7fVxuICBfcmVtb3ZlRWxlbWVudHMoc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcpIHtcbiAgICAgIGNvbnN0IHJlbW92ZWQgPSBtZXRhLl9wYXJzZWQuc3BsaWNlKHN0YXJ0LCBjb3VudCk7XG4gICAgICBpZiAobWV0YS5fc3RhY2tlZCkge1xuICAgICAgICBjbGVhclN0YWNrcyhtZXRhLCByZW1vdmVkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWV0YS5kYXRhLnNwbGljZShzdGFydCwgY291bnQpO1xuICB9XG4gIF9zeW5jKGFyZ3MpIHtcbiAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgdGhpcy5fc3luY0xpc3QucHVzaChhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgW21ldGhvZCwgYXJnMSwgYXJnMl0gPSBhcmdzO1xuICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgIH1cbiAgICB0aGlzLmNoYXJ0Ll9kYXRhQ2hhbmdlcy5wdXNoKFt0aGlzLmluZGV4LCAuLi5hcmdzXSk7XG4gIH1cbiAgX29uRGF0YVB1c2goKSB7XG4gICAgY29uc3QgY291bnQgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHRoaXMuX3N5bmMoWydfaW5zZXJ0RWxlbWVudHMnLCB0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIGNvdW50LCBjb3VudF0pO1xuICB9XG4gIF9vbkRhdGFQb3AoKSB7XG4gICAgdGhpcy5fc3luYyhbJ19yZW1vdmVFbGVtZW50cycsIHRoaXMuX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGggLSAxLCAxXSk7XG4gIH1cbiAgX29uRGF0YVNoaWZ0KCkge1xuICAgIHRoaXMuX3N5bmMoWydfcmVtb3ZlRWxlbWVudHMnLCAwLCAxXSk7XG4gIH1cbiAgX29uRGF0YVNwbGljZShzdGFydCwgY291bnQpIHtcbiAgICBpZiAoY291bnQpIHtcbiAgICAgIHRoaXMuX3N5bmMoWydfcmVtb3ZlRWxlbWVudHMnLCBzdGFydCwgY291bnRdKTtcbiAgICB9XG4gICAgY29uc3QgbmV3Q291bnQgPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgICBpZiAobmV3Q291bnQpIHtcbiAgICAgIHRoaXMuX3N5bmMoWydfaW5zZXJ0RWxlbWVudHMnLCBzdGFydCwgbmV3Q291bnRdKTtcbiAgICB9XG4gIH1cbiAgX29uRGF0YVVuc2hpZnQoKSB7XG4gICAgdGhpcy5fc3luYyhbJ19pbnNlcnRFbGVtZW50cycsIDAsIGFyZ3VtZW50cy5sZW5ndGhdKTtcbiAgfVxufVxuRGF0YXNldENvbnRyb2xsZXIuZGVmYXVsdHMgPSB7fTtcbkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5kYXRhc2V0RWxlbWVudFR5cGUgPSBudWxsO1xuRGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLmRhdGFFbGVtZW50VHlwZSA9IG51bGw7XG5cbmZ1bmN0aW9uIGdldEFsbFNjYWxlVmFsdWVzKHNjYWxlLCB0eXBlKSB7XG4gIGlmICghc2NhbGUuX2NhY2hlLiRiYXIpIHtcbiAgICBjb25zdCB2aXNpYmxlTWV0YXMgPSBzY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKTtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSB2aXNpYmxlTWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KHZpc2libGVNZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyhzY2FsZSkpO1xuICAgIH1cbiAgICBzY2FsZS5fY2FjaGUuJGJhciA9IF9hcnJheVVuaXF1ZSh2YWx1ZXMuc29ydCgoYSwgYikgPT4gYSAtIGIpKTtcbiAgfVxuICByZXR1cm4gc2NhbGUuX2NhY2hlLiRiYXI7XG59XG5mdW5jdGlvbiBjb21wdXRlTWluU2FtcGxlU2l6ZShtZXRhKSB7XG4gIGNvbnN0IHNjYWxlID0gbWV0YS5pU2NhbGU7XG4gIGNvbnN0IHZhbHVlcyA9IGdldEFsbFNjYWxlVmFsdWVzKHNjYWxlLCBtZXRhLnR5cGUpO1xuICBsZXQgbWluID0gc2NhbGUuX2xlbmd0aDtcbiAgbGV0IGksIGlsZW4sIGN1cnIsIHByZXY7XG4gIGNvbnN0IHVwZGF0ZU1pbkFuZFByZXYgPSAoKSA9PiB7XG4gICAgaWYgKGN1cnIgPT09IDMyNzY3IHx8IGN1cnIgPT09IC0zMjc2OCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZGVmaW5lZChwcmV2KSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBNYXRoLmFicyhjdXJyIC0gcHJldikgfHwgbWluKTtcbiAgICB9XG4gICAgcHJldiA9IGN1cnI7XG4gIH07XG4gIGZvciAoaSA9IDAsIGlsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodmFsdWVzW2ldKTtcbiAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gIH1cbiAgcHJldiA9IHVuZGVmaW5lZDtcbiAgZm9yIChpID0gMCwgaWxlbiA9IHNjYWxlLnRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGN1cnIgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2soaSk7XG4gICAgdXBkYXRlTWluQW5kUHJldigpO1xuICB9XG4gIHJldHVybiBtaW47XG59XG5mdW5jdGlvbiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSB7XG4gIGNvbnN0IHRoaWNrbmVzcyA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzO1xuICBsZXQgc2l6ZSwgcmF0aW87XG4gIGlmIChpc051bGxPclVuZGVmKHRoaWNrbmVzcykpIHtcbiAgICBzaXplID0gcnVsZXIubWluICogb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgcmF0aW8gPSBvcHRpb25zLmJhclBlcmNlbnRhZ2U7XG4gIH0gZWxzZSB7XG4gICAgc2l6ZSA9IHRoaWNrbmVzcyAqIHN0YWNrQ291bnQ7XG4gICAgcmF0aW8gPSAxO1xuICB9XG4gIHJldHVybiB7XG4gICAgY2h1bms6IHNpemUgLyBzdGFja0NvdW50LFxuICAgIHJhdGlvLFxuICAgIHN0YXJ0OiBydWxlci5waXhlbHNbaW5kZXhdIC0gKHNpemUgLyAyKVxuICB9O1xufVxuZnVuY3Rpb24gY29tcHV0ZUZsZXhDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgY29uc3QgcGl4ZWxzID0gcnVsZXIucGl4ZWxzO1xuICBjb25zdCBjdXJyID0gcGl4ZWxzW2luZGV4XTtcbiAgbGV0IHByZXYgPSBpbmRleCA+IDAgPyBwaXhlbHNbaW5kZXggLSAxXSA6IG51bGw7XG4gIGxldCBuZXh0ID0gaW5kZXggPCBwaXhlbHMubGVuZ3RoIC0gMSA/IHBpeGVsc1tpbmRleCArIDFdIDogbnVsbDtcbiAgY29uc3QgcGVyY2VudCA9IG9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlO1xuICBpZiAocHJldiA9PT0gbnVsbCkge1xuICAgIHByZXYgPSBjdXJyIC0gKG5leHQgPT09IG51bGwgPyBydWxlci5lbmQgLSBydWxlci5zdGFydCA6IG5leHQgLSBjdXJyKTtcbiAgfVxuICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgIG5leHQgPSBjdXJyICsgY3VyciAtIHByZXY7XG4gIH1cbiAgY29uc3Qgc3RhcnQgPSBjdXJyIC0gKGN1cnIgLSBNYXRoLm1pbihwcmV2LCBuZXh0KSkgLyAyICogcGVyY2VudDtcbiAgY29uc3Qgc2l6ZSA9IE1hdGguYWJzKG5leHQgLSBwcmV2KSAvIDIgKiBwZXJjZW50O1xuICByZXR1cm4ge1xuICAgIGNodW5rOiBzaXplIC8gc3RhY2tDb3VudCxcbiAgICByYXRpbzogb3B0aW9ucy5iYXJQZXJjZW50YWdlLFxuICAgIHN0YXJ0XG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZUZsb2F0QmFyKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgY29uc3Qgc3RhcnRWYWx1ZSA9IHZTY2FsZS5wYXJzZShlbnRyeVswXSwgaSk7XG4gIGNvbnN0IGVuZFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzFdLCBpKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4oc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gIGxldCBiYXJTdGFydCA9IG1pbjtcbiAgbGV0IGJhckVuZCA9IG1heDtcbiAgaWYgKE1hdGguYWJzKG1pbikgPiBNYXRoLmFicyhtYXgpKSB7XG4gICAgYmFyU3RhcnQgPSBtYXg7XG4gICAgYmFyRW5kID0gbWluO1xuICB9XG4gIGl0ZW1bdlNjYWxlLmF4aXNdID0gYmFyRW5kO1xuICBpdGVtLl9jdXN0b20gPSB7XG4gICAgYmFyU3RhcnQsXG4gICAgYmFyRW5kLFxuICAgIHN0YXJ0OiBzdGFydFZhbHVlLFxuICAgIGVuZDogZW5kVmFsdWUsXG4gICAgbWluLFxuICAgIG1heFxuICB9O1xufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKSB7XG4gIGlmIChpc0FycmF5KGVudHJ5KSkge1xuICAgIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSk7XG4gIH0gZWxzZSB7XG4gICAgaXRlbVt2U2NhbGUuYXhpc10gPSB2U2NhbGUucGFyc2UoZW50cnksIGkpO1xuICB9XG4gIHJldHVybiBpdGVtO1xufVxuZnVuY3Rpb24gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgY29uc3Qgc2luZ2xlU2NhbGUgPSBpU2NhbGUgPT09IHZTY2FsZTtcbiAgY29uc3QgcGFyc2VkID0gW107XG4gIGxldCBpLCBpbGVuLCBpdGVtLCBlbnRyeTtcbiAgZm9yIChpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgZW50cnkgPSBkYXRhW2ldO1xuICAgIGl0ZW0gPSB7fTtcbiAgICBpdGVtW2lTY2FsZS5heGlzXSA9IHNpbmdsZVNjYWxlIHx8IGlTY2FsZS5wYXJzZShsYWJlbHNbaV0sIGkpO1xuICAgIHBhcnNlZC5wdXNoKHBhcnNlVmFsdWUoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkpO1xuICB9XG4gIHJldHVybiBwYXJzZWQ7XG59XG5mdW5jdGlvbiBpc0Zsb2F0QmFyKGN1c3RvbSkge1xuICByZXR1cm4gY3VzdG9tICYmIGN1c3RvbS5iYXJTdGFydCAhPT0gdW5kZWZpbmVkICYmIGN1c3RvbS5iYXJFbmQgIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGJhclNpZ24oc2l6ZSwgdlNjYWxlLCBhY3R1YWxCYXNlKSB7XG4gIGlmIChzaXplICE9PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24oc2l6ZSk7XG4gIH1cbiAgcmV0dXJuICh2U2NhbGUuaXNIb3Jpem9udGFsKCkgPyAxIDogLTEpICogKHZTY2FsZS5taW4gPj0gYWN0dWFsQmFzZSA/IDEgOiAtMSk7XG59XG5mdW5jdGlvbiBib3JkZXJQcm9wcyhwcm9wZXJ0aWVzKSB7XG4gIGxldCByZXZlcnNlLCBzdGFydCwgZW5kLCB0b3AsIGJvdHRvbTtcbiAgaWYgKHByb3BlcnRpZXMuaG9yaXpvbnRhbCkge1xuICAgIHJldmVyc2UgPSBwcm9wZXJ0aWVzLmJhc2UgPiBwcm9wZXJ0aWVzLng7XG4gICAgc3RhcnQgPSAnbGVmdCc7XG4gICAgZW5kID0gJ3JpZ2h0JztcbiAgfSBlbHNlIHtcbiAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlIDwgcHJvcGVydGllcy55O1xuICAgIHN0YXJ0ID0gJ2JvdHRvbSc7XG4gICAgZW5kID0gJ3RvcCc7XG4gIH1cbiAgaWYgKHJldmVyc2UpIHtcbiAgICB0b3AgPSAnZW5kJztcbiAgICBib3R0b20gPSAnc3RhcnQnO1xuICB9IGVsc2Uge1xuICAgIHRvcCA9ICdzdGFydCc7XG4gICAgYm90dG9tID0gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHtzdGFydCwgZW5kLCByZXZlcnNlLCB0b3AsIGJvdHRvbX07XG59XG5mdW5jdGlvbiBzZXRCb3JkZXJTa2lwcGVkKHByb3BlcnRpZXMsIG9wdGlvbnMsIHN0YWNrLCBpbmRleCkge1xuICBsZXQgZWRnZSA9IG9wdGlvbnMuYm9yZGVyU2tpcHBlZDtcbiAgY29uc3QgcmVzID0ge307XG4gIGlmICghZWRnZSkge1xuICAgIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHJlcztcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGVkZ2UgPT09IHRydWUpIHtcbiAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSB7dG9wOiB0cnVlLCByaWdodDogdHJ1ZSwgYm90dG9tOiB0cnVlLCBsZWZ0OiB0cnVlfTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qge3N0YXJ0LCBlbmQsIHJldmVyc2UsIHRvcCwgYm90dG9tfSA9IGJvcmRlclByb3BzKHByb3BlcnRpZXMpO1xuICBpZiAoZWRnZSA9PT0gJ21pZGRsZScgJiYgc3RhY2spIHtcbiAgICBwcm9wZXJ0aWVzLmVuYWJsZUJvcmRlclJhZGl1cyA9IHRydWU7XG4gICAgaWYgKChzdGFjay5fdG9wIHx8IDApID09PSBpbmRleCkge1xuICAgICAgZWRnZSA9IHRvcDtcbiAgICB9IGVsc2UgaWYgKChzdGFjay5fYm90dG9tIHx8IDApID09PSBpbmRleCkge1xuICAgICAgZWRnZSA9IGJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW3BhcnNlRWRnZShib3R0b20sIHN0YXJ0LCBlbmQsIHJldmVyc2UpXSA9IHRydWU7XG4gICAgICBlZGdlID0gdG9wO1xuICAgIH1cbiAgfVxuICByZXNbcGFyc2VFZGdlKGVkZ2UsIHN0YXJ0LCBlbmQsIHJldmVyc2UpXSA9IHRydWU7XG4gIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHJlcztcbn1cbmZ1bmN0aW9uIHBhcnNlRWRnZShlZGdlLCBhLCBiLCByZXZlcnNlKSB7XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgZWRnZSA9IHN3YXAoZWRnZSwgYSwgYik7XG4gICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGIsIGEpO1xuICB9IGVsc2Uge1xuICAgIGVkZ2UgPSBzdGFydEVuZChlZGdlLCBhLCBiKTtcbiAgfVxuICByZXR1cm4gZWRnZTtcbn1cbmZ1bmN0aW9uIHN3YXAob3JpZywgdjEsIHYyKSB7XG4gIHJldHVybiBvcmlnID09PSB2MSA/IHYyIDogb3JpZyA9PT0gdjIgPyB2MSA6IG9yaWc7XG59XG5mdW5jdGlvbiBzdGFydEVuZCh2LCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiB2ID09PSAnc3RhcnQnID8gc3RhcnQgOiB2ID09PSAnZW5kJyA/IGVuZCA6IHY7XG59XG5mdW5jdGlvbiBzZXRJbmZsYXRlQW1vdW50KHByb3BlcnRpZXMsIHtpbmZsYXRlQW1vdW50fSwgcmF0aW8pIHtcbiAgcHJvcGVydGllcy5pbmZsYXRlQW1vdW50ID0gaW5mbGF0ZUFtb3VudCA9PT0gJ2F1dG8nXG4gICAgPyByYXRpbyA9PT0gMSA/IDAuMzMgOiAwXG4gICAgOiBpbmZsYXRlQW1vdW50O1xufVxuY2xhc3MgQmFyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgfVxuICBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICByZXR1cm4gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gIH1cbiAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHtpU2NhbGUsIHZTY2FsZX0gPSBtZXRhO1xuICAgIGNvbnN0IHt4QXhpc0tleSA9ICd4JywgeUF4aXNLZXkgPSAneSd9ID0gdGhpcy5fcGFyc2luZztcbiAgICBjb25zdCBpQXhpc0tleSA9IGlTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgIGNvbnN0IHZBeGlzS2V5ID0gdlNjYWxlLmF4aXMgPT09ICd4JyA/IHhBeGlzS2V5IDogeUF4aXNLZXk7XG4gICAgY29uc3QgcGFyc2VkID0gW107XG4gICAgbGV0IGksIGlsZW4sIGl0ZW0sIG9iajtcbiAgICBmb3IgKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIG9iaiA9IGRhdGFbaV07XG4gICAgICBpdGVtID0ge307XG4gICAgICBpdGVtW2lTY2FsZS5heGlzXSA9IGlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgaUF4aXNLZXkpLCBpKTtcbiAgICAgIHBhcnNlZC5wdXNoKHBhcnNlVmFsdWUocmVzb2x2ZU9iamVjdEtleShvYmosIHZBeGlzS2V5KSwgaXRlbSwgdlNjYWxlLCBpKSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgdXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjaykge1xuICAgIHN1cGVyLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgIGlmIChjdXN0b20gJiYgc2NhbGUgPT09IHRoaXMuX2NhY2hlZE1ldGEudlNjYWxlKSB7XG4gICAgICByYW5nZS5taW4gPSBNYXRoLm1pbihyYW5nZS5taW4sIGN1c3RvbS5taW4pO1xuICAgICAgcmFuZ2UubWF4ID0gTWF0aC5tYXgocmFuZ2UubWF4LCBjdXN0b20ubWF4KTtcbiAgICB9XG4gIH1cbiAgZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHtpU2NhbGUsIHZTY2FsZX0gPSBtZXRhO1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICBjb25zdCB2YWx1ZSA9IGlzRmxvYXRCYXIoY3VzdG9tKVxuICAgICAgPyAnWycgKyBjdXN0b20uc3RhcnQgKyAnLCAnICsgY3VzdG9tLmVuZCArICddJ1xuICAgICAgOiAnJyArIHZTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFt2U2NhbGUuYXhpc10pO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogJycgKyBpU2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbaVNjYWxlLmF4aXNdKSxcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfVxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIG1ldGEuc3RhY2sgPSB0aGlzLmdldERhdGFzZXQoKS5zdGFjaztcbiAgfVxuICB1cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHMobWV0YS5kYXRhLCAwLCBtZXRhLmRhdGEubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhiYXJzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3Qge2luZGV4LCBfY2FjaGVkTWV0YToge3ZTY2FsZX19ID0gdGhpcztcbiAgICBjb25zdCBiYXNlID0gdlNjYWxlLmdldEJhc2VQaXhlbCgpO1xuICAgIGNvbnN0IGhvcml6b250YWwgPSB2U2NhbGUuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgcnVsZXIgPSB0aGlzLl9nZXRSdWxlcigpO1xuICAgIGNvbnN0IHtzaGFyZWRPcHRpb25zLCBpbmNsdWRlT3B0aW9uc30gPSB0aGlzLl9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgY29uc3QgdnBpeGVscyA9IHJlc2V0IHx8IGlzTnVsbE9yVW5kZWYocGFyc2VkW3ZTY2FsZS5heGlzXSkgPyB7YmFzZSwgaGVhZDogYmFzZX0gOiB0aGlzLl9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhpKTtcbiAgICAgIGNvbnN0IGlwaXhlbHMgPSB0aGlzLl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyhpLCBydWxlcik7XG4gICAgICBjb25zdCBzdGFjayA9IChwYXJzZWQuX3N0YWNrcyB8fCB7fSlbdlNjYWxlLmF4aXNdO1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgaG9yaXpvbnRhbCxcbiAgICAgICAgYmFzZTogdnBpeGVscy5iYXNlLFxuICAgICAgICBlbmFibGVCb3JkZXJSYWRpdXM6ICFzdGFjayB8fCBpc0Zsb2F0QmFyKHBhcnNlZC5fY3VzdG9tKSB8fCAoaW5kZXggPT09IHN0YWNrLl90b3AgfHwgaW5kZXggPT09IHN0YWNrLl9ib3R0b20pLFxuICAgICAgICB4OiBob3Jpem9udGFsID8gdnBpeGVscy5oZWFkIDogaXBpeGVscy5jZW50ZXIsXG4gICAgICAgIHk6IGhvcml6b250YWwgPyBpcGl4ZWxzLmNlbnRlciA6IHZwaXhlbHMuaGVhZCxcbiAgICAgICAgaGVpZ2h0OiBob3Jpem9udGFsID8gaXBpeGVscy5zaXplIDogTWF0aC5hYnModnBpeGVscy5zaXplKSxcbiAgICAgICAgd2lkdGg6IGhvcml6b250YWwgPyBNYXRoLmFicyh2cGl4ZWxzLnNpemUpIDogaXBpeGVscy5zaXplXG4gICAgICB9O1xuICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGJhcnNbaV0uYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBwcm9wZXJ0aWVzLm9wdGlvbnMgfHwgYmFyc1tpXS5vcHRpb25zO1xuICAgICAgc2V0Qm9yZGVyU2tpcHBlZChwcm9wZXJ0aWVzLCBvcHRpb25zLCBzdGFjaywgaW5kZXgpO1xuICAgICAgc2V0SW5mbGF0ZUFtb3VudChwcm9wZXJ0aWVzLCBvcHRpb25zLCBydWxlci5yYXRpbyk7XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYmFyc1tpXSwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICB9XG4gIF9nZXRTdGFja3MobGFzdCwgZGF0YUluZGV4KSB7XG4gICAgY29uc3Qge2lTY2FsZX0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IG1ldGFzZXRzID0gaVNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHRoaXMuX3R5cGUpXG4gICAgICAuZmlsdGVyKG1ldGEgPT4gbWV0YS5jb250cm9sbGVyLm9wdGlvbnMuZ3JvdXBlZCk7XG4gICAgY29uc3Qgc3RhY2tlZCA9IGlTY2FsZS5vcHRpb25zLnN0YWNrZWQ7XG4gICAgY29uc3Qgc3RhY2tzID0gW107XG4gICAgY29uc3Qgc2tpcE51bGwgPSAobWV0YSkgPT4ge1xuICAgICAgY29uc3QgcGFyc2VkID0gbWV0YS5jb250cm9sbGVyLmdldFBhcnNlZChkYXRhSW5kZXgpO1xuICAgICAgY29uc3QgdmFsID0gcGFyc2VkICYmIHBhcnNlZFttZXRhLnZTY2FsZS5heGlzXTtcbiAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbCkgfHwgaXNOYU4odmFsKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZvciAoY29uc3QgbWV0YSBvZiBtZXRhc2V0cykge1xuICAgICAgaWYgKGRhdGFJbmRleCAhPT0gdW5kZWZpbmVkICYmIHNraXBOdWxsKG1ldGEpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHN0YWNrZWQgPT09IGZhbHNlIHx8IHN0YWNrcy5pbmRleE9mKG1ldGEuc3RhY2spID09PSAtMSB8fFxuXHRcdFx0XHQoc3RhY2tlZCA9PT0gdW5kZWZpbmVkICYmIG1ldGEuc3RhY2sgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc3RhY2tzLnB1c2gobWV0YS5zdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAobWV0YS5pbmRleCA9PT0gbGFzdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFzdGFja3MubGVuZ3RoKSB7XG4gICAgICBzdGFja3MucHVzaCh1bmRlZmluZWQpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhY2tzO1xuICB9XG4gIF9nZXRTdGFja0NvdW50KGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFN0YWNrcyh1bmRlZmluZWQsIGluZGV4KS5sZW5ndGg7XG4gIH1cbiAgX2dldFN0YWNrSW5kZXgoZGF0YXNldEluZGV4LCBuYW1lLCBkYXRhSW5kZXgpIHtcbiAgICBjb25zdCBzdGFja3MgPSB0aGlzLl9nZXRTdGFja3MoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpO1xuICAgIGNvbnN0IGluZGV4ID0gKG5hbWUgIT09IHVuZGVmaW5lZClcbiAgICAgID8gc3RhY2tzLmluZGV4T2YobmFtZSlcbiAgICAgIDogLTE7XG4gICAgcmV0dXJuIChpbmRleCA9PT0gLTEpXG4gICAgICA/IHN0YWNrcy5sZW5ndGggLSAxXG4gICAgICA6IGluZGV4O1xuICB9XG4gIF9nZXRSdWxlcigpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IHBpeGVscyA9IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhLmRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBwaXhlbHMucHVzaChpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpKVtpU2NhbGUuYXhpc10sIGkpKTtcbiAgICB9XG4gICAgY29uc3QgYmFyVGhpY2tuZXNzID0gb3B0cy5iYXJUaGlja25lc3M7XG4gICAgY29uc3QgbWluID0gYmFyVGhpY2tuZXNzIHx8IGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpO1xuICAgIHJldHVybiB7XG4gICAgICBtaW4sXG4gICAgICBwaXhlbHMsXG4gICAgICBzdGFydDogaVNjYWxlLl9zdGFydFBpeGVsLFxuICAgICAgZW5kOiBpU2NhbGUuX2VuZFBpeGVsLFxuICAgICAgc3RhY2tDb3VudDogdGhpcy5fZ2V0U3RhY2tDb3VudCgpLFxuICAgICAgc2NhbGU6IGlTY2FsZSxcbiAgICAgIGdyb3VwZWQ6IG9wdHMuZ3JvdXBlZCxcbiAgICAgIHJhdGlvOiBiYXJUaGlja25lc3MgPyAxIDogb3B0cy5jYXRlZ29yeVBlcmNlbnRhZ2UgKiBvcHRzLmJhclBlcmNlbnRhZ2VcbiAgICB9O1xuICB9XG4gIF9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhpbmRleCkge1xuICAgIGNvbnN0IHtfY2FjaGVkTWV0YToge3ZTY2FsZSwgX3N0YWNrZWR9LCBvcHRpb25zOiB7YmFzZTogYmFzZVZhbHVlLCBtaW5CYXJMZW5ndGh9fSA9IHRoaXM7XG4gICAgY29uc3QgYWN0dWFsQmFzZSA9IGJhc2VWYWx1ZSB8fCAwO1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICBjb25zdCBmbG9hdGluZyA9IGlzRmxvYXRCYXIoY3VzdG9tKTtcbiAgICBsZXQgdmFsdWUgPSBwYXJzZWRbdlNjYWxlLmF4aXNdO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGxlbmd0aCA9IF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiB2YWx1ZTtcbiAgICBsZXQgaGVhZCwgc2l6ZTtcbiAgICBpZiAobGVuZ3RoICE9PSB2YWx1ZSkge1xuICAgICAgc3RhcnQgPSBsZW5ndGggLSB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAoZmxvYXRpbmcpIHtcbiAgICAgIHZhbHVlID0gY3VzdG9tLmJhclN0YXJ0O1xuICAgICAgbGVuZ3RoID0gY3VzdG9tLmJhckVuZCAtIGN1c3RvbS5iYXJTdGFydDtcbiAgICAgIGlmICh2YWx1ZSAhPT0gMCAmJiBzaWduKHZhbHVlKSAhPT0gc2lnbihjdXN0b20uYmFyRW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCArPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnRWYWx1ZSA9ICFpc051bGxPclVuZGVmKGJhc2VWYWx1ZSkgJiYgIWZsb2F0aW5nID8gYmFzZVZhbHVlIDogc3RhcnQ7XG4gICAgbGV0IGJhc2UgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdGFydFZhbHVlKTtcbiAgICBpZiAodGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkpIHtcbiAgICAgIGhlYWQgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdGFydCArIGxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQgPSBiYXNlO1xuICAgIH1cbiAgICBzaXplID0gaGVhZCAtIGJhc2U7XG4gICAgaWYgKE1hdGguYWJzKHNpemUpIDwgbWluQmFyTGVuZ3RoKSB7XG4gICAgICBzaXplID0gYmFyU2lnbihzaXplLCB2U2NhbGUsIGFjdHVhbEJhc2UpICogbWluQmFyTGVuZ3RoO1xuICAgICAgaWYgKHZhbHVlID09PSBhY3R1YWxCYXNlKSB7XG4gICAgICAgIGJhc2UgLT0gc2l6ZSAvIDI7XG4gICAgICB9XG4gICAgICBjb25zdCBzdGFydFBpeGVsID0gdlNjYWxlLmdldFBpeGVsRm9yRGVjaW1hbCgwKTtcbiAgICAgIGNvbnN0IGVuZFBpeGVsID0gdlNjYWxlLmdldFBpeGVsRm9yRGVjaW1hbCgxKTtcbiAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKHN0YXJ0UGl4ZWwsIGVuZFBpeGVsKTtcbiAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KHN0YXJ0UGl4ZWwsIGVuZFBpeGVsKTtcbiAgICAgIGJhc2UgPSBNYXRoLm1heChNYXRoLm1pbihiYXNlLCBtYXgpLCBtaW4pO1xuICAgICAgaGVhZCA9IGJhc2UgKyBzaXplO1xuICAgIH1cbiAgICBpZiAoYmFzZSA9PT0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoYWN0dWFsQmFzZSkpIHtcbiAgICAgIGNvbnN0IGhhbGZHcmlkID0gc2lnbihzaXplKSAqIHZTY2FsZS5nZXRMaW5lV2lkdGhGb3JWYWx1ZShhY3R1YWxCYXNlKSAvIDI7XG4gICAgICBiYXNlICs9IGhhbGZHcmlkO1xuICAgICAgc2l6ZSAtPSBoYWxmR3JpZDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHNpemUsXG4gICAgICBiYXNlLFxuICAgICAgaGVhZCxcbiAgICAgIGNlbnRlcjogaGVhZCArIHNpemUgLyAyXG4gICAgfTtcbiAgfVxuICBfY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMoaW5kZXgsIHJ1bGVyKSB7XG4gICAgY29uc3Qgc2NhbGUgPSBydWxlci5zY2FsZTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHNraXBOdWxsID0gb3B0aW9ucy5za2lwTnVsbDtcbiAgICBjb25zdCBtYXhCYXJUaGlja25lc3MgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLm1heEJhclRoaWNrbmVzcywgSW5maW5pdHkpO1xuICAgIGxldCBjZW50ZXIsIHNpemU7XG4gICAgaWYgKHJ1bGVyLmdyb3VwZWQpIHtcbiAgICAgIGNvbnN0IHN0YWNrQ291bnQgPSBza2lwTnVsbCA/IHRoaXMuX2dldFN0YWNrQ291bnQoaW5kZXgpIDogcnVsZXIuc3RhY2tDb3VudDtcbiAgICAgIGNvbnN0IHJhbmdlID0gb3B0aW9ucy5iYXJUaGlja25lc3MgPT09ICdmbGV4J1xuICAgICAgICA/IGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KVxuICAgICAgICA6IGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpO1xuICAgICAgY29uc3Qgc3RhY2tJbmRleCA9IHRoaXMuX2dldFN0YWNrSW5kZXgodGhpcy5pbmRleCwgdGhpcy5fY2FjaGVkTWV0YS5zdGFjaywgc2tpcE51bGwgPyBpbmRleCA6IHVuZGVmaW5lZCk7XG4gICAgICBjZW50ZXIgPSByYW5nZS5zdGFydCArIChyYW5nZS5jaHVuayAqIHN0YWNrSW5kZXgpICsgKHJhbmdlLmNodW5rIC8gMik7XG4gICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCByYW5nZS5jaHVuayAqIHJhbmdlLnJhdGlvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2VudGVyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpbmRleClbc2NhbGUuYXhpc10sIGluZGV4KTtcbiAgICAgIHNpemUgPSBNYXRoLm1pbihtYXhCYXJUaGlja25lc3MsIHJ1bGVyLm1pbiAqIHJ1bGVyLnJhdGlvKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhc2U6IGNlbnRlciAtIHNpemUgLyAyLFxuICAgICAgaGVhZDogY2VudGVyICsgc2l6ZSAvIDIsXG4gICAgICBjZW50ZXIsXG4gICAgICBzaXplXG4gICAgfTtcbiAgfVxuICBkcmF3KCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgIGNvbnN0IHJlY3RzID0gbWV0YS5kYXRhO1xuICAgIGNvbnN0IGlsZW4gPSByZWN0cy5sZW5ndGg7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpZiAodGhpcy5nZXRQYXJzZWQoaSlbdlNjYWxlLmF4aXNdICE9PSBudWxsKSB7XG4gICAgICAgIHJlY3RzW2ldLmRyYXcodGhpcy5fY3R4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbkJhckNvbnRyb2xsZXIuaWQgPSAnYmFyJztcbkJhckNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gIGRhdGFFbGVtZW50VHlwZTogJ2JhcicsXG4gIGNhdGVnb3J5UGVyY2VudGFnZTogMC44LFxuICBiYXJQZXJjZW50YWdlOiAwLjksXG4gIGdyb3VwZWQ6IHRydWUsXG4gIGFuaW1hdGlvbnM6IHtcbiAgICBudW1iZXJzOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHByb3BlcnRpZXM6IFsneCcsICd5JywgJ2Jhc2UnLCAnd2lkdGgnLCAnaGVpZ2h0J11cbiAgICB9XG4gIH1cbn07XG5CYXJDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgc2NhbGVzOiB7XG4gICAgX2luZGV4Xzoge1xuICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcbiAgICAgIG9mZnNldDogdHJ1ZSxcbiAgICAgIGdyaWQ6IHtcbiAgICAgICAgb2Zmc2V0OiB0cnVlXG4gICAgICB9XG4gICAgfSxcbiAgICBfdmFsdWVfOiB7XG4gICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgIGJlZ2luQXRaZXJvOiB0cnVlLFxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgQnViYmxlQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuICBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhW3N0YXJ0ICsgaV07XG4gICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHZhbHVlT3JEZWZhdWx0KGl0ZW1bMl0sIHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtICYmIGl0ZW0uciAmJiAraXRlbS5yLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIGdldE1heE92ZXJmbG93KCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgbGV0IG1heCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgZGF0YVtpXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKSkgLyAyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1heCA+IDAgJiYgbWF4O1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB7eFNjYWxlLCB5U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgY29uc3QgeCA9IHhTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZC54KTtcbiAgICBjb25zdCB5ID0geVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLnkpO1xuICAgIGNvbnN0IHIgPSBwYXJzZWQuX2N1c3RvbTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IG1ldGEubGFiZWwsXG4gICAgICB2YWx1ZTogJygnICsgeCArICcsICcgKyB5ICsgKHIgPyAnLCAnICsgciA6ICcnKSArICcpJ1xuICAgIH07XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBwb2ludHMgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIDAsIHBvaW50cy5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGNvbnN0IHtpU2NhbGUsIHZTY2FsZX0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHtzaGFyZWRPcHRpb25zLCBpbmNsdWRlT3B0aW9uc30gPSB0aGlzLl9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIGNvbnN0IHBhcnNlZCA9ICFyZXNldCAmJiB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcbiAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gcmVzZXQgPyBpU2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdKTtcbiAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbdkF4aXNdKTtcbiAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKTtcbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMucmFkaXVzID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gIH1cbiAgcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICBsZXQgdmFsdWVzID0gc3VwZXIucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSk7XG4gICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICB2YWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZXMsIHskc2hhcmVkOiBmYWxzZX0pO1xuICAgIH1cbiAgICBjb25zdCByYWRpdXMgPSB2YWx1ZXMucmFkaXVzO1xuICAgIGlmIChtb2RlICE9PSAnYWN0aXZlJykge1xuICAgICAgdmFsdWVzLnJhZGl1cyA9IDA7XG4gICAgfVxuICAgIHZhbHVlcy5yYWRpdXMgKz0gdmFsdWVPckRlZmF1bHQocGFyc2VkICYmIHBhcnNlZC5fY3VzdG9tLCByYWRpdXMpO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbn1cbkJ1YmJsZUNvbnRyb2xsZXIuaWQgPSAnYnViYmxlJztcbkJ1YmJsZUNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgYW5pbWF0aW9uczoge1xuICAgIG51bWJlcnM6IHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgcHJvcGVydGllczogWyd4JywgJ3knLCAnYm9yZGVyV2lkdGgnLCAncmFkaXVzJ11cbiAgICB9XG4gIH1cbn07XG5CdWJibGVDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgc2NhbGVzOiB7XG4gICAgeDoge1xuICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICB9LFxuICAgIHk6IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgfVxuICB9LFxuICBwbHVnaW5zOiB7XG4gICAgdG9vbHRpcDoge1xuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIHRpdGxlKCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0UmF0aW9BbmRPZmZzZXQocm90YXRpb24sIGNpcmN1bWZlcmVuY2UsIGN1dG91dCkge1xuICBsZXQgcmF0aW9YID0gMTtcbiAgbGV0IHJhdGlvWSA9IDE7XG4gIGxldCBvZmZzZXRYID0gMDtcbiAgbGV0IG9mZnNldFkgPSAwO1xuICBpZiAoY2lyY3VtZmVyZW5jZSA8IFRBVSkge1xuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSByb3RhdGlvbjtcbiAgICBjb25zdCBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBjaXJjdW1mZXJlbmNlO1xuICAgIGNvbnN0IHN0YXJ0WCA9IE1hdGguY29zKHN0YXJ0QW5nbGUpO1xuICAgIGNvbnN0IHN0YXJ0WSA9IE1hdGguc2luKHN0YXJ0QW5nbGUpO1xuICAgIGNvbnN0IGVuZFggPSBNYXRoLmNvcyhlbmRBbmdsZSk7XG4gICAgY29uc3QgZW5kWSA9IE1hdGguc2luKGVuZEFuZ2xlKTtcbiAgICBjb25zdCBjYWxjTWF4ID0gKGFuZ2xlLCBhLCBiKSA9PiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgdHJ1ZSkgPyAxIDogTWF0aC5tYXgoYSwgYSAqIGN1dG91dCwgYiwgYiAqIGN1dG91dCk7XG4gICAgY29uc3QgY2FsY01pbiA9IChhbmdsZSwgYSwgYikgPT4gX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gLTEgOiBNYXRoLm1pbihhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICBjb25zdCBtYXhYID0gY2FsY01heCgwLCBzdGFydFgsIGVuZFgpO1xuICAgIGNvbnN0IG1heFkgPSBjYWxjTWF4KEhBTEZfUEksIHN0YXJ0WSwgZW5kWSk7XG4gICAgY29uc3QgbWluWCA9IGNhbGNNaW4oUEksIHN0YXJ0WCwgZW5kWCk7XG4gICAgY29uc3QgbWluWSA9IGNhbGNNaW4oUEkgKyBIQUxGX1BJLCBzdGFydFksIGVuZFkpO1xuICAgIHJhdGlvWCA9IChtYXhYIC0gbWluWCkgLyAyO1xuICAgIHJhdGlvWSA9IChtYXhZIC0gbWluWSkgLyAyO1xuICAgIG9mZnNldFggPSAtKG1heFggKyBtaW5YKSAvIDI7XG4gICAgb2Zmc2V0WSA9IC0obWF4WSArIG1pblkpIC8gMjtcbiAgfVxuICByZXR1cm4ge3JhdGlvWCwgcmF0aW9ZLCBvZmZzZXRYLCBvZmZzZXRZfTtcbn1cbmNsYXNzIERvdWdobnV0Q29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuICAgIHN1cGVyKGNoYXJ0LCBkYXRhc2V0SW5kZXgpO1xuICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm91dGVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub2Zmc2V0WCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9mZnNldFkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgbGlua1NjYWxlcygpIHt9XG4gIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFzZXQoKS5kYXRhO1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGdldHRlciA9IChpKSA9PiArZGF0YVtpXTtcbiAgICAgIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgY29uc3Qge2tleSA9ICd2YWx1ZSd9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgZ2V0dGVyID0gKGkpID0+ICtyZXNvbHZlT2JqZWN0S2V5KGRhdGFbaV0sIGtleSk7XG4gICAgICB9XG4gICAgICBsZXQgaSwgaWxlbjtcbiAgICAgIGZvciAoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgICBtZXRhLl9wYXJzZWRbaV0gPSBnZXR0ZXIoaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIF9nZXRSb3RhdGlvbigpIHtcbiAgICByZXR1cm4gdG9SYWRpYW5zKHRoaXMub3B0aW9ucy5yb3RhdGlvbiAtIDkwKTtcbiAgfVxuICBfZ2V0Q2lyY3VtZmVyZW5jZSgpIHtcbiAgICByZXR1cm4gdG9SYWRpYW5zKHRoaXMub3B0aW9ucy5jaXJjdW1mZXJlbmNlKTtcbiAgfVxuICBfZ2V0Um90YXRpb25FeHRlbnRzKCkge1xuICAgIGxldCBtaW4gPSBUQVU7XG4gICAgbGV0IG1heCA9IC1UQVU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICh0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlcjtcbiAgICAgICAgY29uc3Qgcm90YXRpb24gPSBjb250cm9sbGVyLl9nZXRSb3RhdGlvbigpO1xuICAgICAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gY29udHJvbGxlci5fZ2V0Q2lyY3VtZmVyZW5jZSgpO1xuICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHJvdGF0aW9uKTtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCByb3RhdGlvbiArIGNpcmN1bWZlcmVuY2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcm90YXRpb246IG1pbixcbiAgICAgIGNpcmN1bWZlcmVuY2U6IG1heCAtIG1pbixcbiAgICB9O1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IHtjaGFydEFyZWF9ID0gY2hhcnQ7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgYXJjcyA9IG1ldGEuZGF0YTtcbiAgICBjb25zdCBzcGFjaW5nID0gdGhpcy5nZXRNYXhCb3JkZXJXaWR0aCgpICsgdGhpcy5nZXRNYXhPZmZzZXQoYXJjcykgKyB0aGlzLm9wdGlvbnMuc3BhY2luZztcbiAgICBjb25zdCBtYXhTaXplID0gTWF0aC5tYXgoKE1hdGgubWluKGNoYXJ0QXJlYS53aWR0aCwgY2hhcnRBcmVhLmhlaWdodCkgLSBzcGFjaW5nKSAvIDIsIDApO1xuICAgIGNvbnN0IGN1dG91dCA9IE1hdGgubWluKHRvUGVyY2VudGFnZSh0aGlzLm9wdGlvbnMuY3V0b3V0LCBtYXhTaXplKSwgMSk7XG4gICAgY29uc3QgY2hhcnRXZWlnaHQgPSB0aGlzLl9nZXRSaW5nV2VpZ2h0KHRoaXMuaW5kZXgpO1xuICAgIGNvbnN0IHtjaXJjdW1mZXJlbmNlLCByb3RhdGlvbn0gPSB0aGlzLl9nZXRSb3RhdGlvbkV4dGVudHMoKTtcbiAgICBjb25zdCB7cmF0aW9YLCByYXRpb1ksIG9mZnNldFgsIG9mZnNldFl9ID0gZ2V0UmF0aW9BbmRPZmZzZXQocm90YXRpb24sIGNpcmN1bWZlcmVuY2UsIGN1dG91dCk7XG4gICAgY29uc3QgbWF4V2lkdGggPSAoY2hhcnRBcmVhLndpZHRoIC0gc3BhY2luZykgLyByYXRpb1g7XG4gICAgY29uc3QgbWF4SGVpZ2h0ID0gKGNoYXJ0QXJlYS5oZWlnaHQgLSBzcGFjaW5nKSAvIHJhdGlvWTtcbiAgICBjb25zdCBtYXhSYWRpdXMgPSBNYXRoLm1heChNYXRoLm1pbihtYXhXaWR0aCwgbWF4SGVpZ2h0KSAvIDIsIDApO1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gdG9EaW1lbnNpb24odGhpcy5vcHRpb25zLnJhZGl1cywgbWF4UmFkaXVzKTtcbiAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KG91dGVyUmFkaXVzICogY3V0b3V0LCAwKTtcbiAgICBjb25zdCByYWRpdXNMZW5ndGggPSAob3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cykgLyB0aGlzLl9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsKCk7XG4gICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WCAqIG91dGVyUmFkaXVzO1xuICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFkgKiBvdXRlclJhZGl1cztcbiAgICBtZXRhLnRvdGFsID0gdGhpcy5jYWxjdWxhdGVUb3RhbCgpO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5pbmRleCk7XG4gICAgdGhpcy5pbm5lclJhZGl1cyA9IE1hdGgubWF4KHRoaXMub3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGggKiBjaGFydFdlaWdodCwgMCk7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhhcmNzLCAwLCBhcmNzLmxlbmd0aCwgbW9kZSk7XG4gIH1cbiAgX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgaWYgKChyZXNldCAmJiBvcHRzLmFuaW1hdGlvbi5hbmltYXRlUm90YXRlKSB8fCAhdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSB8fCBtZXRhLl9wYXJzZWRbaV0gPT09IG51bGwgfHwgbWV0YS5kYXRhW2ldLmhpZGRlbikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UobWV0YS5fcGFyc2VkW2ldICogY2lyY3VtZmVyZW5jZSAvIFRBVSk7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMoYXJjcywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgY29uc3QgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuICAgIGNvbnN0IGNlbnRlclggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMjtcbiAgICBjb25zdCBjZW50ZXJZID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDI7XG4gICAgY29uc3QgYW5pbWF0ZVNjYWxlID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGU7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBhbmltYXRlU2NhbGUgPyAwIDogdGhpcy5pbm5lclJhZGl1cztcbiAgICBjb25zdCBvdXRlclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLm91dGVyUmFkaXVzO1xuICAgIGNvbnN0IHtzaGFyZWRPcHRpb25zLCBpbmNsdWRlT3B0aW9uc30gPSB0aGlzLl9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBsZXQgc3RhcnRBbmdsZSA9IHRoaXMuX2dldFJvdGF0aW9uKCk7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHN0YXJ0OyArK2kpIHtcbiAgICAgIHN0YXJ0QW5nbGUgKz0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgfVxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgeDogY2VudGVyWCArIHRoaXMub2Zmc2V0WCxcbiAgICAgICAgeTogY2VudGVyWSArIHRoaXMub2Zmc2V0WSxcbiAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGU6IHN0YXJ0QW5nbGUgKyBjaXJjdW1mZXJlbmNlLFxuICAgICAgICBjaXJjdW1mZXJlbmNlLFxuICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgaW5uZXJSYWRpdXNcbiAgICAgIH07XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYXJjLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICB9XG4gICAgICBzdGFydEFuZ2xlICs9IGNpcmN1bWZlcmVuY2U7XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYXJjLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gIH1cbiAgY2FsY3VsYXRlVG90YWwoKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgbWV0YURhdGEgPSBtZXRhLmRhdGE7XG4gICAgbGV0IHRvdGFsID0gMDtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbWV0YURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbWV0YS5fcGFyc2VkW2ldO1xuICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmICFpc05hTih2YWx1ZSkgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSAmJiAhbWV0YURhdGFbaV0uaGlkZGVuKSB7XG4gICAgICAgIHRvdGFsICs9IE1hdGguYWJzKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvdGFsO1xuICB9XG4gIGNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UodmFsdWUpIHtcbiAgICBjb25zdCB0b3RhbCA9IHRoaXMuX2NhY2hlZE1ldGEudG90YWw7XG4gICAgaWYgKHRvdGFsID4gMCAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICByZXR1cm4gVEFVICogKE1hdGguYWJzKHZhbHVlKSAvIHRvdGFsKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBsYWJlbHMgPSBjaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICBjb25zdCB2YWx1ZSA9IGZvcm1hdE51bWJlcihtZXRhLl9wYXJzZWRbaW5kZXhdLCBjaGFydC5vcHRpb25zLmxvY2FsZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgdmFsdWUsXG4gICAgfTtcbiAgfVxuICBnZXRNYXhCb3JkZXJXaWR0aChhcmNzKSB7XG4gICAgbGV0IG1heCA9IDA7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGxldCBpLCBpbGVuLCBtZXRhLCBjb250cm9sbGVyLCBvcHRpb25zO1xuICAgIGlmICghYXJjcykge1xuICAgICAgZm9yIChpID0gMCwgaWxlbiA9IGNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICAgIGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG4gICAgICAgICAgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgIGFyY3MgPSBtZXRhLmRhdGE7XG4gICAgICAgICAgY29udHJvbGxlciA9IG1ldGEuY29udHJvbGxlcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFyY3MpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIG9wdGlvbnMgPSBjb250cm9sbGVyLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSk7XG4gICAgICBpZiAob3B0aW9ucy5ib3JkZXJBbGlnbiAhPT0gJ2lubmVyJykge1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIG9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMCwgb3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoIHx8IDApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIGdldE1heE9mZnNldChhcmNzKSB7XG4gICAgbGV0IG1heCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5vZmZzZXQgfHwgMCwgb3B0aW9ucy5ob3Zlck9mZnNldCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIG1heDtcbiAgfVxuICBfZ2V0UmluZ1dlaWdodE9mZnNldChkYXRhc2V0SW5kZXgpIHtcbiAgICBsZXQgcmluZ1dlaWdodE9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhc2V0SW5kZXg7ICsraSkge1xuICAgICAgaWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICByaW5nV2VpZ2h0T2Zmc2V0ICs9IHRoaXMuX2dldFJpbmdXZWlnaHQoaSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByaW5nV2VpZ2h0T2Zmc2V0O1xuICB9XG4gIF9nZXRSaW5nV2VpZ2h0KGRhdGFzZXRJbmRleCkge1xuICAgIHJldHVybiBNYXRoLm1heCh2YWx1ZU9yRGVmYXVsdCh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS53ZWlnaHQsIDEpLCAwKTtcbiAgfVxuICBfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0UmluZ1dlaWdodE9mZnNldCh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoKSB8fCAxO1xuICB9XG59XG5Eb3VnaG51dENvbnRyb2xsZXIuaWQgPSAnZG91Z2hudXQnO1xuRG91Z2hudXRDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICBkYXRhRWxlbWVudFR5cGU6ICdhcmMnLFxuICBhbmltYXRpb246IHtcbiAgICBhbmltYXRlUm90YXRlOiB0cnVlLFxuICAgIGFuaW1hdGVTY2FsZTogZmFsc2VcbiAgfSxcbiAgYW5pbWF0aW9uczoge1xuICAgIG51bWJlcnM6IHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgcHJvcGVydGllczogWydjaXJjdW1mZXJlbmNlJywgJ2VuZEFuZ2xlJywgJ2lubmVyUmFkaXVzJywgJ291dGVyUmFkaXVzJywgJ3N0YXJ0QW5nbGUnLCAneCcsICd5JywgJ29mZnNldCcsICdib3JkZXJXaWR0aCcsICdzcGFjaW5nJ11cbiAgICB9LFxuICB9LFxuICBjdXRvdXQ6ICc1MCUnLFxuICByb3RhdGlvbjogMCxcbiAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICByYWRpdXM6ICcxMDAlJyxcbiAgc3BhY2luZzogMCxcbiAgaW5kZXhBeGlzOiAncicsXG59O1xuRG91Z2hudXRDb250cm9sbGVyLmRlc2NyaXB0b3JzID0ge1xuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdzcGFjaW5nJyxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdzcGFjaW5nJyxcbn07XG5Eb3VnaG51dENvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBhc3BlY3RSYXRpbzogMSxcbiAgcGx1Z2luczoge1xuICAgIGxlZ2VuZDoge1xuICAgICAgbGFiZWxzOiB7XG4gICAgICAgIGdlbmVyYXRlTGFiZWxzKGNoYXJ0KSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmRhdGE7XG4gICAgICAgICAgaWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qge2xhYmVsczoge3BvaW50U3R5bGV9fSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzLm1hcCgobGFiZWwsIGkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgIGhpZGRlbjogIWNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25DbGljayhlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgbGVnZW5kLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGxlZ2VuZEl0ZW0uaW5kZXgpO1xuICAgICAgICBsZWdlbmQuY2hhcnQudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgdGl0bGUoKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9LFxuICAgICAgICBsYWJlbCh0b29sdGlwSXRlbSkge1xuICAgICAgICAgIGxldCBkYXRhTGFiZWwgPSB0b29sdGlwSXRlbS5sYWJlbDtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9ICc6ICcgKyB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcnJheShkYXRhTGFiZWwpKSB7XG4gICAgICAgICAgICBkYXRhTGFiZWwgPSBkYXRhTGFiZWwuc2xpY2UoKTtcbiAgICAgICAgICAgIGRhdGFMYWJlbFswXSArPSB2YWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YUxhYmVsICs9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGF0YUxhYmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5jbGFzcyBMaW5lQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gdHJ1ZTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB7ZGF0YXNldDogbGluZSwgZGF0YTogcG9pbnRzID0gW10sIF9kYXRhc2V0fSA9IG1ldGE7XG4gICAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgIGxldCB7c3RhcnQsIGNvdW50fSA9IF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKTtcbiAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLl9kcmF3Q291bnQgPSBjb3VudDtcbiAgICBpZiAoX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSkge1xuICAgICAgc3RhcnQgPSAwO1xuICAgICAgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIH1cbiAgICBsaW5lLl9jaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgbGluZS5fZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICBsaW5lLl9kZWNpbWF0ZWQgPSAhIV9kYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgbGluZS5wb2ludHMgPSBwb2ludHM7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgb3B0aW9ucy5ib3JkZXJXaWR0aCA9IDA7XG4gICAgfVxuICAgIG9wdGlvbnMuc2VnbWVudCA9IHRoaXMub3B0aW9ucy5zZWdtZW50O1xuICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHtcbiAgICAgIGFuaW1hdGVkOiAhYW5pbWF0aW9uc0Rpc2FibGVkLFxuICAgICAgb3B0aW9uc1xuICAgIH0sIG1vZGUpO1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGNvbnN0IHtpU2NhbGUsIHZTY2FsZSwgX3N0YWNrZWQsIF9kYXRhc2V0fSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge3NoYXJlZE9wdGlvbnMsIGluY2x1ZGVPcHRpb25zfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBjb25zdCB7c3BhbkdhcHMsIHNlZ21lbnR9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IG1heEdhcExlbmd0aCA9IGlzTnVtYmVyKHNwYW5HYXBzKSA/IHNwYW5HYXBzIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGNvbnN0IGRpcmVjdFVwZGF0ZSA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZCB8fCByZXNldCB8fCBtb2RlID09PSAnbm9uZSc7XG4gICAgbGV0IHByZXZQYXJzZWQgPSBzdGFydCA+IDAgJiYgdGhpcy5nZXRQYXJzZWQoc3RhcnQgLSAxKTtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gZGlyZWN0VXBkYXRlID8gcG9pbnQgOiB7fTtcbiAgICAgIGNvbnN0IG51bGxEYXRhID0gaXNOdWxsT3JVbmRlZihwYXJzZWRbdkF4aXNdKTtcbiAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSwgaSk7XG4gICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0IHx8IG51bGxEYXRhID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHBhcnNlZFt2QXhpc10sIGkpO1xuICAgICAgcHJvcGVydGllcy5za2lwID0gaXNOYU4oaVBpeGVsKSB8fCBpc05hTih2UGl4ZWwpIHx8IG51bGxEYXRhO1xuICAgICAgcHJvcGVydGllcy5zdG9wID0gaSA+IDAgJiYgKE1hdGguYWJzKHBhcnNlZFtpQXhpc10gLSBwcmV2UGFyc2VkW2lBeGlzXSkpID4gbWF4R2FwTGVuZ3RoO1xuICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgcHJvcGVydGllcy5wYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgIHByb3BlcnRpZXMucmF3ID0gX2RhdGFzZXQuZGF0YVtpXTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKCFkaXJlY3RVcGRhdGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgIH1cbiAgICAgIHByZXZQYXJzZWQgPSBwYXJzZWQ7XG4gICAgfVxuICB9XG4gIGdldE1heE92ZXJmbG93KCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGFzZXQgPSBtZXRhLmRhdGFzZXQ7XG4gICAgY29uc3QgYm9yZGVyID0gZGF0YXNldC5vcHRpb25zICYmIGRhdGFzZXQub3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgaWYgKCFkYXRhLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJvcmRlcjtcbiAgICB9XG4gICAgY29uc3QgZmlyc3RQb2ludCA9IGRhdGFbMF0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoMCkpO1xuICAgIGNvbnN0IGxhc3RQb2ludCA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhkYXRhLmxlbmd0aCAtIDEpKTtcbiAgICByZXR1cm4gTWF0aC5tYXgoYm9yZGVyLCBmaXJzdFBvaW50LCBsYXN0UG9pbnQpIC8gMjtcbiAgfVxuICBkcmF3KCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIG1ldGEuZGF0YXNldC51cGRhdGVDb250cm9sUG9pbnRzKHRoaXMuY2hhcnQuY2hhcnRBcmVhLCBtZXRhLmlTY2FsZS5heGlzKTtcbiAgICBzdXBlci5kcmF3KCk7XG4gIH1cbn1cbkxpbmVDb250cm9sbGVyLmlkID0gJ2xpbmUnO1xuTGluZUNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogJ2xpbmUnLFxuICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gIHNob3dMaW5lOiB0cnVlLFxuICBzcGFuR2FwczogZmFsc2UsXG59O1xuTGluZUNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBzY2FsZXM6IHtcbiAgICBfaW5kZXhfOiB7XG4gICAgICB0eXBlOiAnY2F0ZWdvcnknLFxuICAgIH0sXG4gICAgX3ZhbHVlXzoge1xuICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgfSxcbiAgfVxufTtcblxuY2xhc3MgUG9sYXJBcmVhQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuICAgIHN1cGVyKGNoYXJ0LCBkYXRhc2V0SW5kZXgpO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGxhYmVscyA9IGNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdO1xuICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0uciwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgIHZhbHVlLFxuICAgIH07XG4gIH1cbiAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIHJldHVybiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUuYmluZCh0aGlzKShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgYXJjcyA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICB0aGlzLl91cGRhdGVSYWRpdXMoKTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICBnZXRNaW5NYXgoKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgcmFuZ2UgPSB7bWluOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksIG1heDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZfTtcbiAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KS5yO1xuICAgICAgaWYgKCFpc05hTihwYXJzZWQpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgIGlmIChwYXJzZWQgPCByYW5nZS5taW4pIHtcbiAgICAgICAgICByYW5nZS5taW4gPSBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZCA+IHJhbmdlLm1heCkge1xuICAgICAgICAgIHJhbmdlLm1heCA9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByYW5nZTtcbiAgfVxuICBfdXBkYXRlUmFkaXVzKCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0LCBjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCk7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChtaW5TaXplIC8gMiwgMCk7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvcHRzLmN1dG91dFBlcmNlbnRhZ2UgPyAob3V0ZXJSYWRpdXMgLyAxMDApICogKG9wdHMuY3V0b3V0UGVyY2VudGFnZSkgOiAxLCAwKTtcbiAgICBjb25zdCByYWRpdXNMZW5ndGggPSAob3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cykgLyBjaGFydC5nZXRWaXNpYmxlRGF0YXNldENvdW50KCk7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gKHJhZGl1c0xlbmd0aCAqIHRoaXMuaW5kZXgpO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgY29uc3QgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS5yU2NhbGU7XG4gICAgY29uc3QgY2VudGVyWCA9IHNjYWxlLnhDZW50ZXI7XG4gICAgY29uc3QgY2VudGVyWSA9IHNjYWxlLnlDZW50ZXI7XG4gICAgY29uc3QgZGF0YXNldFN0YXJ0QW5nbGUgPSBzY2FsZS5nZXRJbmRleEFuZ2xlKDApIC0gMC41ICogUEk7XG4gICAgbGV0IGFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgbGV0IGk7XG4gICAgY29uc3QgZGVmYXVsdEFuZ2xlID0gMzYwIC8gdGhpcy5jb3VudFZpc2libGVFbGVtZW50cygpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzdGFydDsgKytpKSB7XG4gICAgICBhbmdsZSArPSB0aGlzLl9jb21wdXRlQW5nbGUoaSwgbW9kZSwgZGVmYXVsdEFuZ2xlKTtcbiAgICB9XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICBsZXQgc3RhcnRBbmdsZSA9IGFuZ2xlO1xuICAgICAgbGV0IGVuZEFuZ2xlID0gYW5nbGUgKyB0aGlzLl9jb21wdXRlQW5nbGUoaSwgbW9kZSwgZGVmYXVsdEFuZ2xlKTtcbiAgICAgIGxldCBvdXRlclJhZGl1cyA9IGNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpID8gc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaSkucikgOiAwO1xuICAgICAgYW5nbGUgPSBlbmRBbmdsZTtcbiAgICAgIGlmIChyZXNldCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUpIHtcbiAgICAgICAgICBvdXRlclJhZGl1cyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSkge1xuICAgICAgICAgIHN0YXJ0QW5nbGUgPSBlbmRBbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICB4OiBjZW50ZXJYLFxuICAgICAgICB5OiBjZW50ZXJZLFxuICAgICAgICBpbm5lclJhZGl1czogMCxcbiAgICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgIGVuZEFuZ2xlLFxuICAgICAgICBvcHRpb25zOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYXJjLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSlcbiAgICAgIH07XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYXJjLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gIH1cbiAgY291bnRWaXNpYmxlRWxlbWVudHMoKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGlmICghaXNOYU4odGhpcy5nZXRQYXJzZWQoaW5kZXgpLnIpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG4gIF9jb21wdXRlQW5nbGUoaW5kZXgsIG1vZGUsIGRlZmF1bHRBbmdsZSkge1xuICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KVxuICAgICAgPyB0b1JhZGlhbnModGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKS5hbmdsZSB8fCBkZWZhdWx0QW5nbGUpXG4gICAgICA6IDA7XG4gIH1cbn1cblBvbGFyQXJlYUNvbnRyb2xsZXIuaWQgPSAncG9sYXJBcmVhJztcblBvbGFyQXJlYUNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gIGFuaW1hdGlvbjoge1xuICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG4gICAgYW5pbWF0ZVNjYWxlOiB0cnVlXG4gIH0sXG4gIGFuaW1hdGlvbnM6IHtcbiAgICBudW1iZXJzOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHByb3BlcnRpZXM6IFsneCcsICd5JywgJ3N0YXJ0QW5nbGUnLCAnZW5kQW5nbGUnLCAnaW5uZXJSYWRpdXMnLCAnb3V0ZXJSYWRpdXMnXVxuICAgIH0sXG4gIH0sXG4gIGluZGV4QXhpczogJ3InLFxuICBzdGFydEFuZ2xlOiAwLFxufTtcblBvbGFyQXJlYUNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBhc3BlY3RSYXRpbzogMSxcbiAgcGx1Z2luczoge1xuICAgIGxlZ2VuZDoge1xuICAgICAgbGFiZWxzOiB7XG4gICAgICAgIGdlbmVyYXRlTGFiZWxzKGNoYXJ0KSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmRhdGE7XG4gICAgICAgICAgaWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qge2xhYmVsczoge3BvaW50U3R5bGV9fSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzLm1hcCgobGFiZWwsIGkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgIGhpZGRlbjogIWNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25DbGljayhlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgbGVnZW5kLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGxlZ2VuZEl0ZW0uaW5kZXgpO1xuICAgICAgICBsZWdlbmQuY2hhcnQudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgdGl0bGUoKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9LFxuICAgICAgICBsYWJlbChjb250ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuY2hhcnQuZGF0YS5sYWJlbHNbY29udGV4dC5kYXRhSW5kZXhdICsgJzogJyArIGNvbnRleHQuZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNjYWxlczoge1xuICAgIHI6IHtcbiAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInLFxuICAgICAgYW5nbGVMaW5lczoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGJlZ2luQXRaZXJvOiB0cnVlLFxuICAgICAgZ3JpZDoge1xuICAgICAgICBjaXJjdWxhcjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHBvaW50TGFiZWxzOiB7XG4gICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc3RhcnRBbmdsZTogMFxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgUGllQ29udHJvbGxlciBleHRlbmRzIERvdWdobnV0Q29udHJvbGxlciB7XG59XG5QaWVDb250cm9sbGVyLmlkID0gJ3BpZSc7XG5QaWVDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBjdXRvdXQ6IDAsXG4gIHJvdGF0aW9uOiAwLFxuICBjaXJjdW1mZXJlbmNlOiAzNjAsXG4gIHJhZGl1czogJzEwMCUnXG59O1xuXG5jbGFzcyBSYWRhckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCB2U2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnZTY2FsZTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiB2U2NhbGUuZ2V0TGFiZWxzKClbaW5kZXhdLFxuICAgICAgdmFsdWU6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSlcbiAgICB9O1xuICB9XG4gIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICByZXR1cm4gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLmJpbmQodGhpcykobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgfVxuICB1cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGxpbmUgPSBtZXRhLmRhdGFzZXQ7XG4gICAgY29uc3QgcG9pbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgIGNvbnN0IGxhYmVscyA9IG1ldGEuaVNjYWxlLmdldExhYmVscygpO1xuICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgIGlmIChtb2RlICE9PSAncmVzaXplJykge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgX2xvb3A6IHRydWUsXG4gICAgICAgIF9mdWxsTG9vcDogbGFiZWxzLmxlbmd0aCA9PT0gcG9pbnRzLmxlbmd0aCxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgfTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgMCwgcG9pbnRzLmxlbmd0aCwgbW9kZSk7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCB0aGlzLmdldFBhcnNlZChpKS5yKTtcbiAgICAgIGNvbnN0IHggPSByZXNldCA/IHNjYWxlLnhDZW50ZXIgOiBwb2ludFBvc2l0aW9uLng7XG4gICAgICBjb25zdCB5ID0gcmVzZXQgPyBzY2FsZS55Q2VudGVyIDogcG9pbnRQb3NpdGlvbi55O1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgYW5nbGU6IHBvaW50UG9zaXRpb24uYW5nbGUsXG4gICAgICAgIHNraXA6IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuICAgICAgICBvcHRpb25zXG4gICAgICB9O1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gIH1cbn1cblJhZGFyQ29udHJvbGxlci5pZCA9ICdyYWRhcic7XG5SYWRhckNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogJ2xpbmUnLFxuICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gIGluZGV4QXhpczogJ3InLFxuICBzaG93TGluZTogdHJ1ZSxcbiAgZWxlbWVudHM6IHtcbiAgICBsaW5lOiB7XG4gICAgICBmaWxsOiAnc3RhcnQnXG4gICAgfVxuICB9LFxufTtcblJhZGFyQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIGFzcGVjdFJhdGlvOiAxLFxuICBzY2FsZXM6IHtcbiAgICByOiB7XG4gICAgICB0eXBlOiAncmFkaWFsTGluZWFyJyxcbiAgICB9XG4gIH1cbn07XG5cbmNsYXNzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy55ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJGFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgdG9vbHRpcFBvc2l0aW9uKHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeX0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiB7eCwgeX07XG4gIH1cbiAgaGFzVmFsdWUoKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyKHRoaXMueCkgJiYgaXNOdW1iZXIodGhpcy55KTtcbiAgfVxuICBnZXRQcm9wcyhwcm9wcywgZmluYWwpIHtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgaWYgKCFmaW5hbCB8fCAhYW5pbXMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBwcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgcmV0W3Byb3BdID0gYW5pbXNbcHJvcF0gJiYgYW5pbXNbcHJvcF0uYWN0aXZlKCkgPyBhbmltc1twcm9wXS5fdG8gOiB0aGlzW3Byb3BdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cbkVsZW1lbnQuZGVmYXVsdHMgPSB7fTtcbkVsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHVuZGVmaW5lZDtcblxuY29uc3QgZm9ybWF0dGVycyA9IHtcbiAgdmFsdWVzKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiAnJyArIHZhbHVlO1xuICB9LFxuICBudW1lcmljKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgaWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuICcwJztcbiAgICB9XG4gICAgY29uc3QgbG9jYWxlID0gdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZTtcbiAgICBsZXQgbm90YXRpb247XG4gICAgbGV0IGRlbHRhID0gdGlja1ZhbHVlO1xuICAgIGlmICh0aWNrcy5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBtYXhUaWNrID0gTWF0aC5tYXgoTWF0aC5hYnModGlja3NbMF0udmFsdWUpLCBNYXRoLmFicyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSkpO1xuICAgICAgaWYgKG1heFRpY2sgPCAxZS00IHx8IG1heFRpY2sgPiAxZSsxNSkge1xuICAgICAgICBub3RhdGlvbiA9ICdzY2llbnRpZmljJztcbiAgICAgIH1cbiAgICAgIGRlbHRhID0gY2FsY3VsYXRlRGVsdGEodGlja1ZhbHVlLCB0aWNrcyk7XG4gICAgfVxuICAgIGNvbnN0IGxvZ0RlbHRhID0gbG9nMTAoTWF0aC5hYnMoZGVsdGEpKTtcbiAgICBjb25zdCBudW1EZWNpbWFsID0gTWF0aC5tYXgoTWF0aC5taW4oLTEgKiBNYXRoLmZsb29yKGxvZ0RlbHRhKSwgMjApLCAwKTtcbiAgICBjb25zdCBvcHRpb25zID0ge25vdGF0aW9uLCBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IG51bURlY2ltYWwsIG1heGltdW1GcmFjdGlvbkRpZ2l0czogbnVtRGVjaW1hbH07XG4gICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKHRpY2tWYWx1ZSwgbG9jYWxlLCBvcHRpb25zKTtcbiAgfSxcbiAgbG9nYXJpdGhtaWModGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcbiAgICBpZiAodGlja1ZhbHVlID09PSAwKSB7XG4gICAgICByZXR1cm4gJzAnO1xuICAgIH1cbiAgICBjb25zdCByZW1haW4gPSB0aWNrVmFsdWUgLyAoTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodGlja1ZhbHVlKSkpKTtcbiAgICBpZiAocmVtYWluID09PSAxIHx8IHJlbWFpbiA9PT0gMiB8fCByZW1haW4gPT09IDUpIHtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXJzLm51bWVyaWMuY2FsbCh0aGlzLCB0aWNrVmFsdWUsIGluZGV4LCB0aWNrcyk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpIHtcbiAgbGV0IGRlbHRhID0gdGlja3MubGVuZ3RoID4gMyA/IHRpY2tzWzJdLnZhbHVlIC0gdGlja3NbMV0udmFsdWUgOiB0aWNrc1sxXS52YWx1ZSAtIHRpY2tzWzBdLnZhbHVlO1xuICBpZiAoTWF0aC5hYnMoZGVsdGEpID49IDEgJiYgdGlja1ZhbHVlICE9PSBNYXRoLmZsb29yKHRpY2tWYWx1ZSkpIHtcbiAgICBkZWx0YSA9IHRpY2tWYWx1ZSAtIE1hdGguZmxvb3IodGlja1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG52YXIgVGlja3MgPSB7Zm9ybWF0dGVyc307XG5cbmRlZmF1bHRzLnNldCgnc2NhbGUnLCB7XG4gIGRpc3BsYXk6IHRydWUsXG4gIG9mZnNldDogZmFsc2UsXG4gIHJldmVyc2U6IGZhbHNlLFxuICBiZWdpbkF0WmVybzogZmFsc2UsXG4gIGJvdW5kczogJ3RpY2tzJyxcbiAgZ3JhY2U6IDAsXG4gIGdyaWQ6IHtcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIGxpbmVXaWR0aDogMSxcbiAgICBkcmF3Qm9yZGVyOiB0cnVlLFxuICAgIGRyYXdPbkNoYXJ0QXJlYTogdHJ1ZSxcbiAgICBkcmF3VGlja3M6IHRydWUsXG4gICAgdGlja0xlbmd0aDogOCxcbiAgICB0aWNrV2lkdGg6IChfY3R4LCBvcHRpb25zKSA9PiBvcHRpb25zLmxpbmVXaWR0aCxcbiAgICB0aWNrQ29sb3I6IChfY3R4LCBvcHRpb25zKSA9PiBvcHRpb25zLmNvbG9yLFxuICAgIG9mZnNldDogZmFsc2UsXG4gICAgYm9yZGVyRGFzaDogW10sXG4gICAgYm9yZGVyRGFzaE9mZnNldDogMC4wLFxuICAgIGJvcmRlcldpZHRoOiAxXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgdGV4dDogJycsXG4gICAgcGFkZGluZzoge1xuICAgICAgdG9wOiA0LFxuICAgICAgYm90dG9tOiA0XG4gICAgfVxuICB9LFxuICB0aWNrczoge1xuICAgIG1pblJvdGF0aW9uOiAwLFxuICAgIG1heFJvdGF0aW9uOiA1MCxcbiAgICBtaXJyb3I6IGZhbHNlLFxuICAgIHRleHRTdHJva2VXaWR0aDogMCxcbiAgICB0ZXh0U3Ryb2tlQ29sb3I6ICcnLFxuICAgIHBhZGRpbmc6IDMsXG4gICAgZGlzcGxheTogdHJ1ZSxcbiAgICBhdXRvU2tpcDogdHJ1ZSxcbiAgICBhdXRvU2tpcFBhZGRpbmc6IDMsXG4gICAgbGFiZWxPZmZzZXQ6IDAsXG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMudmFsdWVzLFxuICAgIG1pbm9yOiB7fSxcbiAgICBtYWpvcjoge30sXG4gICAgYWxpZ246ICdjZW50ZXInLFxuICAgIGNyb3NzQWxpZ246ICduZWFyJyxcbiAgICBzaG93TGFiZWxCYWNrZHJvcDogZmFsc2UsXG4gICAgYmFja2Ryb3BDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSknLFxuICAgIGJhY2tkcm9wUGFkZGluZzogMixcbiAgfVxufSk7XG5kZWZhdWx0cy5yb3V0ZSgnc2NhbGUudGlja3MnLCAnY29sb3InLCAnJywgJ2NvbG9yJyk7XG5kZWZhdWx0cy5yb3V0ZSgnc2NhbGUuZ3JpZCcsICdjb2xvcicsICcnLCAnYm9yZGVyQ29sb3InKTtcbmRlZmF1bHRzLnJvdXRlKCdzY2FsZS5ncmlkJywgJ2JvcmRlckNvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuZGVmYXVsdHMucm91dGUoJ3NjYWxlLnRpdGxlJywgJ2NvbG9yJywgJycsICdjb2xvcicpO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ3NjYWxlJywge1xuICBfZmFsbGJhY2s6IGZhbHNlLFxuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ2JlZm9yZScpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2FmdGVyJykgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyAmJiBuYW1lICE9PSAncGFyc2VyJyxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAndGlja0JvcmRlckRhc2gnLFxufSk7XG5kZWZhdWx0cy5kZXNjcmliZSgnc2NhbGVzJywge1xuICBfZmFsbGJhY2s6ICdzY2FsZScsXG59KTtcbmRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZS50aWNrcycsIHtcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnYmFja2Ryb3BQYWRkaW5nJyAmJiBuYW1lICE9PSAnY2FsbGJhY2snLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZycsXG59KTtcblxuZnVuY3Rpb24gYXV0b1NraXAoc2NhbGUsIHRpY2tzKSB7XG4gIGNvbnN0IHRpY2tPcHRzID0gc2NhbGUub3B0aW9ucy50aWNrcztcbiAgY29uc3QgdGlja3NMaW1pdCA9IHRpY2tPcHRzLm1heFRpY2tzTGltaXQgfHwgZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpO1xuICBjb25zdCBtYWpvckluZGljZXMgPSB0aWNrT3B0cy5tYWpvci5lbmFibGVkID8gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSA6IFtdO1xuICBjb25zdCBudW1NYWpvckluZGljZXMgPSBtYWpvckluZGljZXMubGVuZ3RoO1xuICBjb25zdCBmaXJzdCA9IG1ham9ySW5kaWNlc1swXTtcbiAgY29uc3QgbGFzdCA9IG1ham9ySW5kaWNlc1tudW1NYWpvckluZGljZXMgLSAxXTtcbiAgY29uc3QgbmV3VGlja3MgPSBbXTtcbiAgaWYgKG51bU1ham9ySW5kaWNlcyA+IHRpY2tzTGltaXQpIHtcbiAgICBza2lwTWFqb3JzKHRpY2tzLCBuZXdUaWNrcywgbWFqb3JJbmRpY2VzLCBudW1NYWpvckluZGljZXMgLyB0aWNrc0xpbWl0KTtcbiAgICByZXR1cm4gbmV3VGlja3M7XG4gIH1cbiAgY29uc3Qgc3BhY2luZyA9IGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgdGlja3NMaW1pdCk7XG4gIGlmIChudW1NYWpvckluZGljZXMgPiAwKSB7XG4gICAgbGV0IGksIGlsZW47XG4gICAgY29uc3QgYXZnTWFqb3JTcGFjaW5nID0gbnVtTWFqb3JJbmRpY2VzID4gMSA/IE1hdGgucm91bmQoKGxhc3QgLSBmaXJzdCkgLyAobnVtTWFqb3JJbmRpY2VzIC0gMSkpIDogbnVsbDtcbiAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gMCA6IGZpcnN0IC0gYXZnTWFqb3JTcGFjaW5nLCBmaXJzdCk7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IG51bU1ham9ySW5kaWNlcyAtIDE7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBtYWpvckluZGljZXNbaV0sIG1ham9ySW5kaWNlc1tpICsgMV0pO1xuICAgIH1cbiAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbGFzdCwgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gdGlja3MubGVuZ3RoIDogbGFzdCArIGF2Z01ham9yU3BhY2luZyk7XG4gICAgcmV0dXJuIG5ld1RpY2tzO1xuICB9XG4gIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nKTtcbiAgcmV0dXJuIG5ld1RpY2tzO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpIHtcbiAgY29uc3Qgb2Zmc2V0ID0gc2NhbGUub3B0aW9ucy5vZmZzZXQ7XG4gIGNvbnN0IHRpY2tMZW5ndGggPSBzY2FsZS5fdGlja1NpemUoKTtcbiAgY29uc3QgbWF4U2NhbGUgPSBzY2FsZS5fbGVuZ3RoIC8gdGlja0xlbmd0aCArIChvZmZzZXQgPyAwIDogMSk7XG4gIGNvbnN0IG1heENoYXJ0ID0gc2NhbGUuX21heExlbmd0aCAvIHRpY2tMZW5ndGg7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgubWluKG1heFNjYWxlLCBtYXhDaGFydCkpO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KSB7XG4gIGNvbnN0IGV2ZW5NYWpvclNwYWNpbmcgPSBnZXRFdmVuU3BhY2luZyhtYWpvckluZGljZXMpO1xuICBjb25zdCBzcGFjaW5nID0gdGlja3MubGVuZ3RoIC8gdGlja3NMaW1pdDtcbiAgaWYgKCFldmVuTWFqb3JTcGFjaW5nKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xuICB9XG4gIGNvbnN0IGZhY3RvcnMgPSBfZmFjdG9yaXplKGV2ZW5NYWpvclNwYWNpbmcpO1xuICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IGZhY3RvcnMubGVuZ3RoIC0gMTsgaSA8IGlsZW47IGkrKykge1xuICAgIGNvbnN0IGZhY3RvciA9IGZhY3RvcnNbaV07XG4gICAgaWYgKGZhY3RvciA+IHNwYWNpbmcpIHtcbiAgICAgIHJldHVybiBmYWN0b3I7XG4gICAgfVxuICB9XG4gIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbn1cbmZ1bmN0aW9uIGdldE1ham9ySW5kaWNlcyh0aWNrcykge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IGksIGlsZW47XG4gIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICBpZiAodGlja3NbaV0ubWFqb3IpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgc3BhY2luZykge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgbmV4dCA9IG1ham9ySW5kaWNlc1swXTtcbiAgbGV0IGk7XG4gIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aWNrcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpID09PSBuZXh0KSB7XG4gICAgICBuZXdUaWNrcy5wdXNoKHRpY2tzW2ldKTtcbiAgICAgIGNvdW50Kys7XG4gICAgICBuZXh0ID0gbWFqb3JJbmRpY2VzW2NvdW50ICogc3BhY2luZ107XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbWFqb3JTdGFydCwgbWFqb3JFbmQpIHtcbiAgY29uc3Qgc3RhcnQgPSB2YWx1ZU9yRGVmYXVsdChtYWpvclN0YXJ0LCAwKTtcbiAgY29uc3QgZW5kID0gTWF0aC5taW4odmFsdWVPckRlZmF1bHQobWFqb3JFbmQsIHRpY2tzLmxlbmd0aCksIHRpY2tzLmxlbmd0aCk7XG4gIGxldCBjb3VudCA9IDA7XG4gIGxldCBsZW5ndGgsIGksIG5leHQ7XG4gIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gIGlmIChtYWpvckVuZCkge1xuICAgIGxlbmd0aCA9IG1ham9yRW5kIC0gbWFqb3JTdGFydDtcbiAgICBzcGFjaW5nID0gbGVuZ3RoIC8gTWF0aC5mbG9vcihsZW5ndGggLyBzcGFjaW5nKTtcbiAgfVxuICBuZXh0ID0gc3RhcnQ7XG4gIHdoaWxlIChuZXh0IDwgMCkge1xuICAgIGNvdW50Kys7XG4gICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICB9XG4gIGZvciAoaSA9IE1hdGgubWF4KHN0YXJ0LCAwKTsgaSA8IGVuZDsgaSsrKSB7XG4gICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgY291bnQrKztcbiAgICAgIG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEV2ZW5TcGFjaW5nKGFycikge1xuICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICBsZXQgaSwgZGlmZjtcbiAgaWYgKGxlbiA8IDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChkaWZmID0gYXJyWzBdLCBpID0gMTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFycltpXSAtIGFycltpIC0gMV0gIT09IGRpZmYpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpZmY7XG59XG5cbmNvbnN0IHJldmVyc2VBbGlnbiA9IChhbGlnbikgPT4gYWxpZ24gPT09ICdsZWZ0JyA/ICdyaWdodCcgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6IGFsaWduO1xuY29uc3Qgb2Zmc2V0RnJvbUVkZ2UgPSAoc2NhbGUsIGVkZ2UsIG9mZnNldCkgPT4gZWRnZSA9PT0gJ3RvcCcgfHwgZWRnZSA9PT0gJ2xlZnQnID8gc2NhbGVbZWRnZV0gKyBvZmZzZXQgOiBzY2FsZVtlZGdlXSAtIG9mZnNldDtcbmZ1bmN0aW9uIHNhbXBsZShhcnIsIG51bUl0ZW1zKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBpbmNyZW1lbnQgPSBhcnIubGVuZ3RoIC8gbnVtSXRlbXM7XG4gIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gIGxldCBpID0gMDtcbiAgZm9yICg7IGkgPCBsZW47IGkgKz0gaW5jcmVtZW50KSB7XG4gICAgcmVzdWx0LnB1c2goYXJyW01hdGguZmxvb3IoaSldKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0UGl4ZWxGb3JHcmlkTGluZShzY2FsZSwgaW5kZXgsIG9mZnNldEdyaWRMaW5lcykge1xuICBjb25zdCBsZW5ndGggPSBzY2FsZS50aWNrcy5sZW5ndGg7XG4gIGNvbnN0IHZhbGlkSW5kZXggPSBNYXRoLm1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHN0YXJ0ID0gc2NhbGUuX3N0YXJ0UGl4ZWw7XG4gIGNvbnN0IGVuZCA9IHNjYWxlLl9lbmRQaXhlbDtcbiAgY29uc3QgZXBzaWxvbiA9IDFlLTY7XG4gIGxldCBsaW5lVmFsdWUgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCk7XG4gIGxldCBvZmZzZXQ7XG4gIGlmIChvZmZzZXRHcmlkTGluZXMpIHtcbiAgICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgICBvZmZzZXQgPSBNYXRoLm1heChsaW5lVmFsdWUgLSBzdGFydCwgZW5kIC0gbGluZVZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICBvZmZzZXQgPSAoc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKDEpIC0gbGluZVZhbHVlKSAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCA9IChsaW5lVmFsdWUgLSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCAtIDEpKSAvIDI7XG4gICAgfVxuICAgIGxpbmVWYWx1ZSArPSB2YWxpZEluZGV4IDwgaW5kZXggPyBvZmZzZXQgOiAtb2Zmc2V0O1xuICAgIGlmIChsaW5lVmFsdWUgPCBzdGFydCAtIGVwc2lsb24gfHwgbGluZVZhbHVlID4gZW5kICsgZXBzaWxvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGluZVZhbHVlO1xufVxuZnVuY3Rpb24gZ2FyYmFnZUNvbGxlY3QoY2FjaGVzLCBsZW5ndGgpIHtcbiAgZWFjaChjYWNoZXMsIChjYWNoZSkgPT4ge1xuICAgIGNvbnN0IGdjID0gY2FjaGUuZ2M7XG4gICAgY29uc3QgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuICAgIGxldCBpO1xuICAgIGlmIChnY0xlbiA+IGxlbmd0aCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGdjTGVuOyArK2kpIHtcbiAgICAgICAgZGVsZXRlIGNhY2hlLmRhdGFbZ2NbaV1dO1xuICAgICAgfVxuICAgICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5kcmF3VGlja3MgPyBvcHRpb25zLnRpY2tMZW5ndGggOiAwO1xufVxuZnVuY3Rpb24gZ2V0VGl0bGVIZWlnaHQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBmb250ID0gdG9Gb250KG9wdGlvbnMuZm9udCwgZmFsbGJhY2spO1xuICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gIGNvbnN0IGxpbmVzID0gaXNBcnJheShvcHRpb25zLnRleHQpID8gb3B0aW9ucy50ZXh0Lmxlbmd0aCA6IDE7XG4gIHJldHVybiAobGluZXMgKiBmb250LmxpbmVIZWlnaHQpICsgcGFkZGluZy5oZWlnaHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVTY2FsZUNvbnRleHQocGFyZW50LCBzY2FsZSkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICBzY2FsZSxcbiAgICB0eXBlOiAnc2NhbGUnXG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVGlja0NvbnRleHQocGFyZW50LCBpbmRleCwgdGljaykge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICB0aWNrLFxuICAgIGluZGV4LFxuICAgIHR5cGU6ICd0aWNrJ1xuICB9KTtcbn1cbmZ1bmN0aW9uIHRpdGxlQWxpZ24oYWxpZ24sIHBvc2l0aW9uLCByZXZlcnNlKSB7XG4gIGxldCByZXQgPSBfdG9MZWZ0UmlnaHRDZW50ZXIoYWxpZ24pO1xuICBpZiAoKHJldmVyc2UgJiYgcG9zaXRpb24gIT09ICdyaWdodCcpIHx8ICghcmV2ZXJzZSAmJiBwb3NpdGlvbiA9PT0gJ3JpZ2h0JykpIHtcbiAgICByZXQgPSByZXZlcnNlQWxpZ24ocmV0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gdGl0bGVBcmdzKHNjYWxlLCBvZmZzZXQsIHBvc2l0aW9uLCBhbGlnbikge1xuICBjb25zdCB7dG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBjaGFydH0gPSBzY2FsZTtcbiAgY29uc3Qge2NoYXJ0QXJlYSwgc2NhbGVzfSA9IGNoYXJ0O1xuICBsZXQgcm90YXRpb24gPSAwO1xuICBsZXQgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICBpZiAoc2NhbGUuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICB0aXRsZVkgPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICB0aXRsZVkgPSAoY2hhcnRBcmVhLmJvdHRvbSArIGNoYXJ0QXJlYS50b3ApIC8gMiArIGhlaWdodCAtIG9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGVZID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgIH1cbiAgICBtYXhXaWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgdGl0bGVYID0gc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSAtIHdpZHRoICsgb2Zmc2V0O1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICB0aXRsZVggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMiAtIHdpZHRoICsgb2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZVggPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgfVxuICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBib3R0b20sIHRvcCk7XG4gICAgcm90YXRpb24gPSBwb3NpdGlvbiA9PT0gJ2xlZnQnID8gLUhBTEZfUEkgOiBIQUxGX1BJO1xuICB9XG4gIHJldHVybiB7dGl0bGVYLCB0aXRsZVksIG1heFdpZHRoLCByb3RhdGlvbn07XG59XG5jbGFzcyBTY2FsZSBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaWQgPSBjZmcuaWQ7XG4gICAgdGhpcy50eXBlID0gY2ZnLnR5cGU7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY3R4ID0gY2ZnLmN0eDtcbiAgICB0aGlzLmNoYXJ0ID0gY2ZnLmNoYXJ0O1xuICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMFxuICAgIH07XG4gICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhZGRpbmdUb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWRkaW5nQm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFkZGluZ0xlZnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWRkaW5nUmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5heGlzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRpY2tzID0gW107XG4gICAgdGhpcy5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl9tYXhMZW5ndGggPSAwO1xuICAgIHRoaXMuX2xvbmdlc3RUZXh0Q2FjaGUgPSB7fTtcbiAgICB0aGlzLl9zdGFydFBpeGVsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2VuZFBpeGVsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSBmYWxzZTtcbiAgICB0aGlzLl91c2VyTWF4ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3VzZXJNaW4gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N1Z2dlc3RlZE1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl90aWNrc0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fYm9yZGVyVmFsdWUgPSAwO1xuICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaW5pdChvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICB0aGlzLmF4aXMgPSBvcHRpb25zLmF4aXM7XG4gICAgdGhpcy5fdXNlck1pbiA9IHRoaXMucGFyc2Uob3B0aW9ucy5taW4pO1xuICAgIHRoaXMuX3VzZXJNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMubWF4KTtcbiAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWluKTtcbiAgICB0aGlzLl9zdWdnZXN0ZWRNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWF4KTtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgcmV0dXJuIHJhdztcbiAgfVxuICBnZXRVc2VyQm91bmRzKCkge1xuICAgIGxldCB7X3VzZXJNaW4sIF91c2VyTWF4LCBfc3VnZ2VzdGVkTWluLCBfc3VnZ2VzdGVkTWF4fSA9IHRoaXM7XG4gICAgX3VzZXJNaW4gPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgX3VzZXJNYXggPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNYXgsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgX3N1Z2dlc3RlZE1pbiA9IGZpbml0ZU9yRGVmYXVsdChfc3VnZ2VzdGVkTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIF9zdWdnZXN0ZWRNYXggPSBmaW5pdGVPckRlZmF1bHQoX3N1Z2dlc3RlZE1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICByZXR1cm4ge1xuICAgICAgbWluOiBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIF9zdWdnZXN0ZWRNaW4pLFxuICAgICAgbWF4OiBmaW5pdGVPckRlZmF1bHQoX3VzZXJNYXgsIF9zdWdnZXN0ZWRNYXgpLFxuICAgICAgbWluRGVmaW5lZDogaXNOdW1iZXJGaW5pdGUoX3VzZXJNaW4pLFxuICAgICAgbWF4RGVmaW5lZDogaXNOdW1iZXJGaW5pdGUoX3VzZXJNYXgpXG4gICAgfTtcbiAgfVxuICBnZXRNaW5NYXgoY2FuU3RhY2spIHtcbiAgICBsZXQge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCByYW5nZTtcbiAgICBpZiAobWluRGVmaW5lZCAmJiBtYXhEZWZpbmVkKSB7XG4gICAgICByZXR1cm4ge21pbiwgbWF4fTtcbiAgICB9XG4gICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHJhbmdlID0gbWV0YXNbaV0uY29udHJvbGxlci5nZXRNaW5NYXgodGhpcywgY2FuU3RhY2spO1xuICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcmFuZ2UubWluKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJhbmdlLm1heCk7XG4gICAgICB9XG4gICAgfVxuICAgIG1pbiA9IG1heERlZmluZWQgJiYgbWluID4gbWF4ID8gbWF4IDogbWluO1xuICAgIG1heCA9IG1pbkRlZmluZWQgJiYgbWluID4gbWF4ID8gbWluIDogbWF4O1xuICAgIHJldHVybiB7XG4gICAgICBtaW46IGZpbml0ZU9yRGVmYXVsdChtaW4sIGZpbml0ZU9yRGVmYXVsdChtYXgsIG1pbikpLFxuICAgICAgbWF4OiBmaW5pdGVPckRlZmF1bHQobWF4LCBmaW5pdGVPckRlZmF1bHQobWluLCBtYXgpKVxuICAgIH07XG4gIH1cbiAgZ2V0UGFkZGluZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogdGhpcy5wYWRkaW5nTGVmdCB8fCAwLFxuICAgICAgdG9wOiB0aGlzLnBhZGRpbmdUb3AgfHwgMCxcbiAgICAgIHJpZ2h0OiB0aGlzLnBhZGRpbmdSaWdodCB8fCAwLFxuICAgICAgYm90dG9tOiB0aGlzLnBhZGRpbmdCb3R0b20gfHwgMFxuICAgIH07XG4gIH1cbiAgZ2V0VGlja3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudGlja3M7XG4gIH1cbiAgZ2V0TGFiZWxzKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sYWJlbHMgfHwgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyBkYXRhLnhMYWJlbHMgOiBkYXRhLnlMYWJlbHMpIHx8IGRhdGEubGFiZWxzIHx8IFtdO1xuICB9XG4gIGJlZm9yZUxheW91dCgpIHtcbiAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSBmYWxzZTtcbiAgfVxuICBiZWZvcmVVcGRhdGUoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW3RoaXNdKTtcbiAgfVxuICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgIGNvbnN0IHtiZWdpbkF0WmVybywgZ3JhY2UsIHRpY2tzOiB0aWNrT3B0c30gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgc2FtcGxlU2l6ZSA9IHRpY2tPcHRzLnNhbXBsZVNpemU7XG4gICAgdGhpcy5iZWZvcmVVcGRhdGUoKTtcbiAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgdGhpcy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMFxuICAgIH0sIG1hcmdpbnMpO1xuICAgIHRoaXMudGlja3MgPSBudWxsO1xuICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuX2xhYmVsSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgIHRoaXMuYWZ0ZXJTZXREaW1lbnNpb25zKCk7XG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gdGhpcy5pc0hvcml6b250YWwoKVxuICAgICAgPyB0aGlzLndpZHRoICsgbWFyZ2lucy5sZWZ0ICsgbWFyZ2lucy5yaWdodFxuICAgICAgOiB0aGlzLmhlaWdodCArIG1hcmdpbnMudG9wICsgbWFyZ2lucy5ib3R0b207XG4gICAgaWYgKCF0aGlzLl9kYXRhTGltaXRzQ2FjaGVkKSB7XG4gICAgICB0aGlzLmJlZm9yZURhdGFMaW1pdHMoKTtcbiAgICAgIHRoaXMuZGV0ZXJtaW5lRGF0YUxpbWl0cygpO1xuICAgICAgdGhpcy5hZnRlckRhdGFMaW1pdHMoKTtcbiAgICAgIHRoaXMuX3JhbmdlID0gX2FkZEdyYWNlKHRoaXMsIGdyYWNlLCBiZWdpbkF0WmVybyk7XG4gICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5iZWZvcmVCdWlsZFRpY2tzKCk7XG4gICAgdGhpcy50aWNrcyA9IHRoaXMuYnVpbGRUaWNrcygpIHx8IFtdO1xuICAgIHRoaXMuYWZ0ZXJCdWlsZFRpY2tzKCk7XG4gICAgY29uc3Qgc2FtcGxpbmdFbmFibGVkID0gc2FtcGxlU2l6ZSA8IHRoaXMudGlja3MubGVuZ3RoO1xuICAgIHRoaXMuX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHNhbXBsaW5nRW5hYmxlZCA/IHNhbXBsZSh0aGlzLnRpY2tzLCBzYW1wbGVTaXplKSA6IHRoaXMudGlja3MpO1xuICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgdGhpcy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgdGhpcy5jYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgdGhpcy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiAodGlja09wdHMuYXV0b1NraXAgfHwgdGlja09wdHMuc291cmNlID09PSAnYXV0bycpKSB7XG4gICAgICB0aGlzLnRpY2tzID0gYXV0b1NraXAodGhpcywgdGhpcy50aWNrcyk7XG4gICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICAgIHRoaXMuYWZ0ZXJBdXRvU2tpcCgpO1xuICAgIH1cbiAgICBpZiAoc2FtcGxpbmdFbmFibGVkKSB7XG4gICAgICB0aGlzLl9jb252ZXJ0VGlja3NUb0xhYmVscyh0aGlzLnRpY2tzKTtcbiAgICB9XG4gICAgdGhpcy5iZWZvcmVGaXQoKTtcbiAgICB0aGlzLmZpdCgpO1xuICAgIHRoaXMuYWZ0ZXJGaXQoKTtcbiAgICB0aGlzLmFmdGVyVXBkYXRlKCk7XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIGxldCByZXZlcnNlUGl4ZWxzID0gdGhpcy5vcHRpb25zLnJldmVyc2U7XG4gICAgbGV0IHN0YXJ0UGl4ZWwsIGVuZFBpeGVsO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBzdGFydFBpeGVsID0gdGhpcy5sZWZ0O1xuICAgICAgZW5kUGl4ZWwgPSB0aGlzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydFBpeGVsID0gdGhpcy50b3A7XG4gICAgICBlbmRQaXhlbCA9IHRoaXMuYm90dG9tO1xuICAgICAgcmV2ZXJzZVBpeGVscyA9ICFyZXZlcnNlUGl4ZWxzO1xuICAgIH1cbiAgICB0aGlzLl9zdGFydFBpeGVsID0gc3RhcnRQaXhlbDtcbiAgICB0aGlzLl9lbmRQaXhlbCA9IGVuZFBpeGVsO1xuICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSByZXZlcnNlUGl4ZWxzO1xuICAgIHRoaXMuX2xlbmd0aCA9IGVuZFBpeGVsIC0gc3RhcnRQaXhlbDtcbiAgICB0aGlzLl9hbGlnblRvUGl4ZWxzID0gdGhpcy5vcHRpb25zLmFsaWduVG9QaXhlbHM7XG4gIH1cbiAgYWZ0ZXJVcGRhdGUoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVXBkYXRlLCBbdGhpc10pO1xuICB9XG4gIGJlZm9yZVNldERpbWVuc2lvbnMoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVNldERpbWVuc2lvbnMsIFt0aGlzXSk7XG4gIH1cbiAgc2V0RGltZW5zaW9ucygpIHtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICB0aGlzLmxlZnQgPSAwO1xuICAgICAgdGhpcy5yaWdodCA9IHRoaXMud2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICB0aGlzLnRvcCA9IDA7XG4gICAgICB0aGlzLmJvdHRvbSA9IHRoaXMuaGVpZ2h0O1xuICAgIH1cbiAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gMDtcbiAgICB0aGlzLnBhZGRpbmdUb3AgPSAwO1xuICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gMDtcbiAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSAwO1xuICB9XG4gIGFmdGVyU2V0RGltZW5zaW9ucygpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuICB9XG4gIF9jYWxsSG9va3MobmFtZSkge1xuICAgIHRoaXMuY2hhcnQubm90aWZ5UGx1Z2lucyhuYW1lLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zW25hbWVdLCBbdGhpc10pO1xuICB9XG4gIGJlZm9yZURhdGFMaW1pdHMoKSB7XG4gICAgdGhpcy5fY2FsbEhvb2tzKCdiZWZvcmVEYXRhTGltaXRzJyk7XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHt9XG4gIGFmdGVyRGF0YUxpbWl0cygpIHtcbiAgICB0aGlzLl9jYWxsSG9va3MoJ2FmdGVyRGF0YUxpbWl0cycpO1xuICB9XG4gIGJlZm9yZUJ1aWxkVGlja3MoKSB7XG4gICAgdGhpcy5fY2FsbEhvb2tzKCdiZWZvcmVCdWlsZFRpY2tzJyk7XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgYWZ0ZXJCdWlsZFRpY2tzKCkge1xuICAgIHRoaXMuX2NhbGxIb29rcygnYWZ0ZXJCdWlsZFRpY2tzJyk7XG4gIH1cbiAgYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24sIFt0aGlzXSk7XG4gIH1cbiAgZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgY29uc3QgdGlja09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgdGljay5sYWJlbCA9IGNhbGxiYWNrKHRpY2tPcHRzLmNhbGxiYWNrLCBbdGljay52YWx1ZSwgaSwgdGlja3NdLCB0aGlzKTtcbiAgICB9XG4gIH1cbiAgYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbdGhpc10pO1xuICB9XG4gIGJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFt0aGlzXSk7XG4gIH1cbiAgY2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICBjb25zdCBudW1UaWNrcyA9IHRoaXMudGlja3MubGVuZ3RoO1xuICAgIGNvbnN0IG1pblJvdGF0aW9uID0gdGlja09wdHMubWluUm90YXRpb24gfHwgMDtcbiAgICBjb25zdCBtYXhSb3RhdGlvbiA9IHRpY2tPcHRzLm1heFJvdGF0aW9uO1xuICAgIGxldCBsYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG4gICAgbGV0IHRpY2tXaWR0aCwgbWF4SGVpZ2h0LCBtYXhMYWJlbERpYWdvbmFsO1xuICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkgfHwgIXRpY2tPcHRzLmRpc3BsYXkgfHwgbWluUm90YXRpb24gPj0gbWF4Um90YXRpb24gfHwgbnVtVGlja3MgPD0gMSB8fCAhdGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgY29uc3QgbWF4TGFiZWxXaWR0aCA9IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoO1xuICAgIGNvbnN0IG1heExhYmVsSGVpZ2h0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodDtcbiAgICBjb25zdCBtYXhXaWR0aCA9IF9saW1pdFZhbHVlKHRoaXMuY2hhcnQud2lkdGggLSBtYXhMYWJlbFdpZHRoLCAwLCB0aGlzLm1heFdpZHRoKTtcbiAgICB0aWNrV2lkdGggPSBvcHRpb25zLm9mZnNldCA/IHRoaXMubWF4V2lkdGggLyBudW1UaWNrcyA6IG1heFdpZHRoIC8gKG51bVRpY2tzIC0gMSk7XG4gICAgaWYgKG1heExhYmVsV2lkdGggKyA2ID4gdGlja1dpZHRoKSB7XG4gICAgICB0aWNrV2lkdGggPSBtYXhXaWR0aCAvIChudW1UaWNrcyAtIChvcHRpb25zLm9mZnNldCA/IDAuNSA6IDEpKTtcbiAgICAgIG1heEhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKVxuXHRcdFx0XHQtIHRpY2tPcHRzLnBhZGRpbmcgLSBnZXRUaXRsZUhlaWdodChvcHRpb25zLnRpdGxlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICBtYXhMYWJlbERpYWdvbmFsID0gTWF0aC5zcXJ0KG1heExhYmVsV2lkdGggKiBtYXhMYWJlbFdpZHRoICsgbWF4TGFiZWxIZWlnaHQgKiBtYXhMYWJlbEhlaWdodCk7XG4gICAgICBsYWJlbFJvdGF0aW9uID0gdG9EZWdyZWVzKE1hdGgubWluKFxuICAgICAgICBNYXRoLmFzaW4oX2xpbWl0VmFsdWUoKGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyA2KSAvIHRpY2tXaWR0aCwgLTEsIDEpKSxcbiAgICAgICAgTWF0aC5hc2luKF9saW1pdFZhbHVlKG1heEhlaWdodCAvIG1heExhYmVsRGlhZ29uYWwsIC0xLCAxKSkgLSBNYXRoLmFzaW4oX2xpbWl0VmFsdWUobWF4TGFiZWxIZWlnaHQgLyBtYXhMYWJlbERpYWdvbmFsLCAtMSwgMSkpXG4gICAgICApKTtcbiAgICAgIGxhYmVsUm90YXRpb24gPSBNYXRoLm1heChtaW5Sb3RhdGlvbiwgTWF0aC5taW4obWF4Um90YXRpb24sIGxhYmVsUm90YXRpb24pKTtcbiAgICB9XG4gICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gbGFiZWxSb3RhdGlvbjtcbiAgfVxuICBhZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiwgW3RoaXNdKTtcbiAgfVxuICBhZnRlckF1dG9Ta2lwKCkge31cbiAgYmVmb3JlRml0KCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVGaXQsIFt0aGlzXSk7XG4gIH1cbiAgZml0KCkge1xuICAgIGNvbnN0IG1pblNpemUgPSB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgY29uc3Qge2NoYXJ0LCBvcHRpb25zOiB7dGlja3M6IHRpY2tPcHRzLCB0aXRsZTogdGl0bGVPcHRzLCBncmlkOiBncmlkT3B0c319ID0gdGhpcztcbiAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5faXNWaXNpYmxlKCk7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoZGlzcGxheSkge1xuICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSBnZXRUaXRsZUhlaWdodCh0aXRsZU9wdHMsIGNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIG1pblNpemUud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICBtaW5TaXplLmhlaWdodCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgbWluU2l6ZS53aWR0aCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgfVxuICAgICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgdGhpcy50aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qge2ZpcnN0LCBsYXN0LCB3aWRlc3QsIGhpZ2hlc3R9ID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCB0aWNrUGFkZGluZyA9IHRpY2tPcHRzLnBhZGRpbmcgKiAyO1xuICAgICAgICBjb25zdCBhbmdsZVJhZGlhbnMgPSB0b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgY29uc3Qgc2luID0gTWF0aC5zaW4oYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gdGlja09wdHMubWlycm9yID8gMCA6IHNpbiAqIHdpZGVzdC53aWR0aCArIGNvcyAqIGhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICAgIG1pblNpemUuaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5tYXhIZWlnaHQsIG1pblNpemUuaGVpZ2h0ICsgbGFiZWxIZWlnaHQgKyB0aWNrUGFkZGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbGFiZWxXaWR0aCA9IHRpY2tPcHRzLm1pcnJvciA/IDAgOiBjb3MgKiB3aWRlc3Qud2lkdGggKyBzaW4gKiBoaWdoZXN0LmhlaWdodDtcbiAgICAgICAgICBtaW5TaXplLndpZHRoID0gTWF0aC5taW4odGhpcy5tYXhXaWR0aCwgbWluU2l6ZS53aWR0aCArIGxhYmVsV2lkdGggKyB0aWNrUGFkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9oYW5kbGVNYXJnaW5zKCk7XG4gICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuX2xlbmd0aCA9IGNoYXJ0LndpZHRoIC0gdGhpcy5fbWFyZ2lucy5sZWZ0IC0gdGhpcy5fbWFyZ2lucy5yaWdodDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2lkdGggPSBtaW5TaXplLndpZHRoO1xuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLl9sZW5ndGggPSBjaGFydC5oZWlnaHQgLSB0aGlzLl9tYXJnaW5zLnRvcCAtIHRoaXMuX21hcmdpbnMuYm90dG9tO1xuICAgIH1cbiAgfVxuICBfY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpIHtcbiAgICBjb25zdCB7dGlja3M6IHthbGlnbiwgcGFkZGluZ30sIHBvc2l0aW9ufSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBpc1JvdGF0ZWQgPSB0aGlzLmxhYmVsUm90YXRpb24gIT09IDA7XG4gICAgY29uc3QgbGFiZWxzQmVsb3dUaWNrcyA9IHBvc2l0aW9uICE9PSAndG9wJyAmJiB0aGlzLmF4aXMgPT09ICd4JztcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgY29uc3Qgb2Zmc2V0TGVmdCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKDApIC0gdGhpcy5sZWZ0O1xuICAgICAgY29uc3Qgb2Zmc2V0UmlnaHQgPSB0aGlzLnJpZ2h0IC0gdGhpcy5nZXRQaXhlbEZvclRpY2sodGhpcy50aWNrcy5sZW5ndGggLSAxKTtcbiAgICAgIGxldCBwYWRkaW5nTGVmdCA9IDA7XG4gICAgICBsZXQgcGFkZGluZ1JpZ2h0ID0gMDtcbiAgICAgIGlmIChpc1JvdGF0ZWQpIHtcbiAgICAgICAgaWYgKGxhYmVsc0JlbG93VGlja3MpIHtcbiAgICAgICAgICBwYWRkaW5nTGVmdCA9IGNvcyAqIGZpcnN0LndpZHRoO1xuICAgICAgICAgIHBhZGRpbmdSaWdodCA9IHNpbiAqIGxhc3QuaGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gc2luICogZmlyc3QuaGVpZ2h0O1xuICAgICAgICAgIHBhZGRpbmdSaWdodCA9IGNvcyAqIGxhc3Qud2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aDtcbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgIHBhZGRpbmdMZWZ0ID0gZmlyc3Qud2lkdGg7XG4gICAgICB9IGVsc2UgaWYgKGFsaWduICE9PSAnaW5uZXInKSB7XG4gICAgICAgIHBhZGRpbmdMZWZ0ID0gZmlyc3Qud2lkdGggLyAyO1xuICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoIC8gMjtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSBNYXRoLm1heCgocGFkZGluZ0xlZnQgLSBvZmZzZXRMZWZ0ICsgcGFkZGluZykgKiB0aGlzLndpZHRoIC8gKHRoaXMud2lkdGggLSBvZmZzZXRMZWZ0KSwgMCk7XG4gICAgICB0aGlzLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KChwYWRkaW5nUmlnaHQgLSBvZmZzZXRSaWdodCArIHBhZGRpbmcpICogdGhpcy53aWR0aCAvICh0aGlzLndpZHRoIC0gb2Zmc2V0UmlnaHQpLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhZGRpbmdUb3AgPSBsYXN0LmhlaWdodCAvIDI7XG4gICAgICBsZXQgcGFkZGluZ0JvdHRvbSA9IGZpcnN0LmhlaWdodCAvIDI7XG4gICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgcGFkZGluZ1RvcCA9IDA7XG4gICAgICAgIHBhZGRpbmdCb3R0b20gPSBmaXJzdC5oZWlnaHQ7XG4gICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQ7XG4gICAgICAgIHBhZGRpbmdCb3R0b20gPSAwO1xuICAgICAgfVxuICAgICAgdGhpcy5wYWRkaW5nVG9wID0gcGFkZGluZ1RvcCArIHBhZGRpbmc7XG4gICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSBwYWRkaW5nQm90dG9tICsgcGFkZGluZztcbiAgICB9XG4gIH1cbiAgX2hhbmRsZU1hcmdpbnMoKSB7XG4gICAgaWYgKHRoaXMuX21hcmdpbnMpIHtcbiAgICAgIHRoaXMuX21hcmdpbnMubGVmdCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ0xlZnQsIHRoaXMuX21hcmdpbnMubGVmdCk7XG4gICAgICB0aGlzLl9tYXJnaW5zLnRvcCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1RvcCwgdGhpcy5fbWFyZ2lucy50b3ApO1xuICAgICAgdGhpcy5fbWFyZ2lucy5yaWdodCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1JpZ2h0LCB0aGlzLl9tYXJnaW5zLnJpZ2h0KTtcbiAgICAgIHRoaXMuX21hcmdpbnMuYm90dG9tID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nQm90dG9tLCB0aGlzLl9tYXJnaW5zLmJvdHRvbSk7XG4gICAgfVxuICB9XG4gIGFmdGVyRml0KCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckZpdCwgW3RoaXNdKTtcbiAgfVxuICBpc0hvcml6b250YWwoKSB7XG4gICAgY29uc3Qge2F4aXMsIHBvc2l0aW9ufSA9IHRoaXMub3B0aW9ucztcbiAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBheGlzID09PSAneCc7XG4gIH1cbiAgaXNGdWxsU2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmZ1bGxTaXplO1xuICB9XG4gIF9jb252ZXJ0VGlja3NUb0xhYmVscyh0aWNrcykge1xuICAgIHRoaXMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG4gICAgdGhpcy5nZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIGlmIChpc051bGxPclVuZGVmKHRpY2tzW2ldLmxhYmVsKSkge1xuICAgICAgICB0aWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGlsZW4tLTtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG4gIH1cbiAgX2dldExhYmVsU2l6ZXMoKSB7XG4gICAgbGV0IGxhYmVsU2l6ZXMgPSB0aGlzLl9sYWJlbFNpemVzO1xuICAgIGlmICghbGFiZWxTaXplcykge1xuICAgICAgY29uc3Qgc2FtcGxlU2l6ZSA9IHRoaXMub3B0aW9ucy50aWNrcy5zYW1wbGVTaXplO1xuICAgICAgbGV0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgIGlmIChzYW1wbGVTaXplIDwgdGlja3MubGVuZ3RoKSB7XG4gICAgICAgIHRpY2tzID0gc2FtcGxlKHRpY2tzLCBzYW1wbGVTaXplKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBsYWJlbFNpemVzID0gdGhpcy5fY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIHRpY2tzLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbFNpemVzO1xuICB9XG4gIF9jb21wdXRlTGFiZWxTaXplcyh0aWNrcywgbGVuZ3RoKSB7XG4gICAgY29uc3Qge2N0eCwgX2xvbmdlc3RUZXh0Q2FjaGU6IGNhY2hlc30gPSB0aGlzO1xuICAgIGNvbnN0IHdpZHRocyA9IFtdO1xuICAgIGNvbnN0IGhlaWdodHMgPSBbXTtcbiAgICBsZXQgd2lkZXN0TGFiZWxTaXplID0gMDtcbiAgICBsZXQgaGlnaGVzdExhYmVsU2l6ZSA9IDA7XG4gICAgbGV0IGksIGosIGpsZW4sIGxhYmVsLCB0aWNrRm9udCwgZm9udFN0cmluZywgY2FjaGUsIGxpbmVIZWlnaHQsIHdpZHRoLCBoZWlnaHQsIG5lc3RlZExhYmVsO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgbGFiZWwgPSB0aWNrc1tpXS5sYWJlbDtcbiAgICAgIHRpY2tGb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpKTtcbiAgICAgIGN0eC5mb250ID0gZm9udFN0cmluZyA9IHRpY2tGb250LnN0cmluZztcbiAgICAgIGNhY2hlID0gY2FjaGVzW2ZvbnRTdHJpbmddID0gY2FjaGVzW2ZvbnRTdHJpbmddIHx8IHtkYXRhOiB7fSwgZ2M6IFtdfTtcbiAgICAgIGxpbmVIZWlnaHQgPSB0aWNrRm9udC5saW5lSGVpZ2h0O1xuICAgICAgd2lkdGggPSBoZWlnaHQgPSAwO1xuICAgICAgaWYgKCFpc051bGxPclVuZGVmKGxhYmVsKSAmJiAhaXNBcnJheShsYWJlbCkpIHtcbiAgICAgICAgd2lkdGggPSBfbWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIGxhYmVsKTtcbiAgICAgICAgaGVpZ2h0ID0gbGluZUhlaWdodDtcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShsYWJlbCkpIHtcbiAgICAgICAgZm9yIChqID0gMCwgamxlbiA9IGxhYmVsLmxlbmd0aDsgaiA8IGpsZW47ICsraikge1xuICAgICAgICAgIG5lc3RlZExhYmVsID0gbGFiZWxbal07XG4gICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKG5lc3RlZExhYmVsKSAmJiAhaXNBcnJheShuZXN0ZWRMYWJlbCkpIHtcbiAgICAgICAgICAgIHdpZHRoID0gX21lYXN1cmVUZXh0KGN0eCwgY2FjaGUuZGF0YSwgY2FjaGUuZ2MsIHdpZHRoLCBuZXN0ZWRMYWJlbCk7XG4gICAgICAgICAgICBoZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdpZHRocy5wdXNoKHdpZHRoKTtcbiAgICAgIGhlaWdodHMucHVzaChoZWlnaHQpO1xuICAgICAgd2lkZXN0TGFiZWxTaXplID0gTWF0aC5tYXgod2lkdGgsIHdpZGVzdExhYmVsU2l6ZSk7XG4gICAgICBoaWdoZXN0TGFiZWxTaXplID0gTWF0aC5tYXgoaGVpZ2h0LCBoaWdoZXN0TGFiZWxTaXplKTtcbiAgICB9XG4gICAgZ2FyYmFnZUNvbGxlY3QoY2FjaGVzLCBsZW5ndGgpO1xuICAgIGNvbnN0IHdpZGVzdCA9IHdpZHRocy5pbmRleE9mKHdpZGVzdExhYmVsU2l6ZSk7XG4gICAgY29uc3QgaGlnaGVzdCA9IGhlaWdodHMuaW5kZXhPZihoaWdoZXN0TGFiZWxTaXplKTtcbiAgICBjb25zdCB2YWx1ZUF0ID0gKGlkeCkgPT4gKHt3aWR0aDogd2lkdGhzW2lkeF0gfHwgMCwgaGVpZ2h0OiBoZWlnaHRzW2lkeF0gfHwgMH0pO1xuICAgIHJldHVybiB7XG4gICAgICBmaXJzdDogdmFsdWVBdCgwKSxcbiAgICAgIGxhc3Q6IHZhbHVlQXQobGVuZ3RoIC0gMSksXG4gICAgICB3aWRlc3Q6IHZhbHVlQXQod2lkZXN0KSxcbiAgICAgIGhpZ2hlc3Q6IHZhbHVlQXQoaGlnaGVzdCksXG4gICAgICB3aWR0aHMsXG4gICAgICBoZWlnaHRzLFxuICAgIH07XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlLCBpbmRleCkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge31cbiAgZ2V0UGl4ZWxGb3JUaWNrKGluZGV4KSB7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICB9XG4gIGdldFBpeGVsRm9yRGVjaW1hbChkZWNpbWFsKSB7XG4gICAgaWYgKHRoaXMuX3JldmVyc2VQaXhlbHMpIHtcbiAgICAgIGRlY2ltYWwgPSAxIC0gZGVjaW1hbDtcbiAgICB9XG4gICAgY29uc3QgcGl4ZWwgPSB0aGlzLl9zdGFydFBpeGVsICsgZGVjaW1hbCAqIHRoaXMuX2xlbmd0aDtcbiAgICByZXR1cm4gX2ludDE2UmFuZ2UodGhpcy5fYWxpZ25Ub1BpeGVscyA/IF9hbGlnblBpeGVsKHRoaXMuY2hhcnQsIHBpeGVsLCAwKSA6IHBpeGVsKTtcbiAgfVxuICBnZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICBjb25zdCBkZWNpbWFsID0gKHBpeGVsIC0gdGhpcy5fc3RhcnRQaXhlbCkgLyB0aGlzLl9sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXMuX3JldmVyc2VQaXhlbHMgPyAxIC0gZGVjaW1hbCA6IGRlY2ltYWw7XG4gIH1cbiAgZ2V0QmFzZVBpeGVsKCkge1xuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRCYXNlVmFsdWUoKSk7XG4gIH1cbiAgZ2V0QmFzZVZhbHVlKCkge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzO1xuICAgIHJldHVybiBtaW4gPCAwICYmIG1heCA8IDAgPyBtYXggOlxuICAgICAgbWluID4gMCAmJiBtYXggPiAwID8gbWluIDpcbiAgICAgIDA7XG4gIH1cbiAgZ2V0Q29udGV4dChpbmRleCkge1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcyB8fCBbXTtcbiAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgY29uc3QgdGljayA9IHRpY2tzW2luZGV4XTtcbiAgICAgIHJldHVybiB0aWNrLiRjb250ZXh0IHx8XG5cdFx0XHRcdCh0aWNrLiRjb250ZXh0ID0gY3JlYXRlVGlja0NvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCB0aWNrKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8XG5cdFx0XHQodGhpcy4kY29udGV4dCA9IGNyZWF0ZVNjYWxlQ29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcykpO1xuICB9XG4gIF90aWNrU2l6ZSgpIHtcbiAgICBjb25zdCBvcHRpb25UaWNrcyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICBjb25zdCByb3QgPSB0b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhyb3QpKTtcbiAgICBjb25zdCBzaW4gPSBNYXRoLmFicyhNYXRoLnNpbihyb3QpKTtcbiAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBvcHRpb25UaWNrcy5hdXRvU2tpcFBhZGRpbmcgfHwgMDtcbiAgICBjb25zdCB3ID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoICsgcGFkZGluZyA6IDA7XG4gICAgY29uc3QgaCA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgcGFkZGluZyA6IDA7XG4gICAgcmV0dXJuIHRoaXMuaXNIb3Jpem9udGFsKClcbiAgICAgID8gaCAqIGNvcyA+IHcgKiBzaW4gPyB3IC8gY29zIDogaCAvIHNpblxuICAgICAgOiBoICogc2luIDwgdyAqIGNvcyA/IGggLyBjb3MgOiB3IC8gc2luO1xuICB9XG4gIF9pc1Zpc2libGUoKSB7XG4gICAgY29uc3QgZGlzcGxheSA9IHRoaXMub3B0aW9ucy5kaXNwbGF5O1xuICAgIGlmIChkaXNwbGF5ICE9PSAnYXV0bycpIHtcbiAgICAgIHJldHVybiAhIWRpc3BsYXk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCkubGVuZ3RoID4gMDtcbiAgfVxuICBfY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7Z3JpZCwgcG9zaXRpb259ID0gb3B0aW9ucztcbiAgICBjb25zdCBvZmZzZXQgPSBncmlkLm9mZnNldDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBjb25zdCB0aWNrc0xlbmd0aCA9IHRpY2tzLmxlbmd0aCArIChvZmZzZXQgPyAxIDogMCk7XG4gICAgY29uc3QgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkKTtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IGJvcmRlck9wdHMgPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IGF4aXNXaWR0aCA9IGJvcmRlck9wdHMuZHJhd0JvcmRlciA/IGJvcmRlck9wdHMuYm9yZGVyV2lkdGggOiAwO1xuICAgIGNvbnN0IGF4aXNIYWxmV2lkdGggPSBheGlzV2lkdGggLyAyO1xuICAgIGNvbnN0IGFsaWduQm9yZGVyVmFsdWUgPSBmdW5jdGlvbihwaXhlbCkge1xuICAgICAgcmV0dXJuIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgYXhpc1dpZHRoKTtcbiAgICB9O1xuICAgIGxldCBib3JkZXJWYWx1ZSwgaSwgbGluZVZhbHVlLCBhbGlnbmVkTGluZVZhbHVlO1xuICAgIGxldCB0eDEsIHR5MSwgdHgyLCB0eTIsIHgxLCB5MSwgeDIsIHkyO1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmJvdHRvbSk7XG4gICAgICB0eTEgPSB0aGlzLmJvdHRvbSAtIHRsO1xuICAgICAgdHkyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgeTEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS50b3ApICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMudG9wKTtcbiAgICAgIHkxID0gY2hhcnRBcmVhLnRvcDtcbiAgICAgIHkyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEuYm90dG9tKSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eTIgPSB0aGlzLnRvcCArIHRsO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMucmlnaHQpO1xuICAgICAgdHgxID0gdGhpcy5yaWdodCAtIHRsO1xuICAgICAgdHgyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgeDEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5sZWZ0KSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB4MiA9IGNoYXJ0QXJlYS5yaWdodDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5sZWZ0KTtcbiAgICAgIHgxID0gY2hhcnRBcmVhLmxlZnQ7XG4gICAgICB4MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnJpZ2h0KSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eDEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eDIgPSB0aGlzLmxlZnQgKyB0bDtcbiAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIgKyAwLjUpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHkxID0gY2hhcnRBcmVhLnRvcDtcbiAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICAgIHR5MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgIHR5MiA9IHR5MSArIHRsO1xuICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSgoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMik7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgdHgxID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgdHgyID0gdHgxIC0gdGw7XG4gICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgfVxuICAgIGNvbnN0IGxpbWl0ID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy50aWNrcy5tYXhUaWNrc0xpbWl0LCB0aWNrc0xlbmd0aCk7XG4gICAgY29uc3Qgc3RlcCA9IE1hdGgubWF4KDEsIE1hdGguY2VpbCh0aWNrc0xlbmd0aCAvIGxpbWl0KSk7XG4gICAgZm9yIChpID0gMDsgaSA8IHRpY2tzTGVuZ3RoOyBpICs9IHN0ZXApIHtcbiAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpKSk7XG4gICAgICBjb25zdCBsaW5lV2lkdGggPSBvcHRzQXRJbmRleC5saW5lV2lkdGg7XG4gICAgICBjb25zdCBsaW5lQ29sb3IgPSBvcHRzQXRJbmRleC5jb2xvcjtcbiAgICAgIGNvbnN0IGJvcmRlckRhc2ggPSBvcHRzQXRJbmRleC5ib3JkZXJEYXNoIHx8IFtdO1xuICAgICAgY29uc3QgYm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICBjb25zdCB0aWNrV2lkdGggPSBvcHRzQXRJbmRleC50aWNrV2lkdGg7XG4gICAgICBjb25zdCB0aWNrQ29sb3IgPSBvcHRzQXRJbmRleC50aWNrQ29sb3I7XG4gICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoIHx8IFtdO1xuICAgICAgY29uc3QgdGlja0JvcmRlckRhc2hPZmZzZXQgPSBvcHRzQXRJbmRleC50aWNrQm9yZGVyRGFzaE9mZnNldDtcbiAgICAgIGxpbmVWYWx1ZSA9IGdldFBpeGVsRm9yR3JpZExpbmUodGhpcywgaSwgb2Zmc2V0KTtcbiAgICAgIGlmIChsaW5lVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGFsaWduZWRMaW5lVmFsdWUgPSBfYWxpZ25QaXhlbChjaGFydCwgbGluZVZhbHVlLCBsaW5lV2lkdGgpO1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICB0eDEgPSB0eDIgPSB4MSA9IHgyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5MSA9IHR5MiA9IHkxID0geTIgPSBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgfVxuICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgIHR4MSxcbiAgICAgICAgdHkxLFxuICAgICAgICB0eDIsXG4gICAgICAgIHR5MixcbiAgICAgICAgeDEsXG4gICAgICAgIHkxLFxuICAgICAgICB4MixcbiAgICAgICAgeTIsXG4gICAgICAgIHdpZHRoOiBsaW5lV2lkdGgsXG4gICAgICAgIGNvbG9yOiBsaW5lQ29sb3IsXG4gICAgICAgIGJvcmRlckRhc2gsXG4gICAgICAgIGJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgIHRpY2tXaWR0aCxcbiAgICAgICAgdGlja0NvbG9yLFxuICAgICAgICB0aWNrQm9yZGVyRGFzaCxcbiAgICAgICAgdGlja0JvcmRlckRhc2hPZmZzZXQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fdGlja3NMZW5ndGggPSB0aWNrc0xlbmd0aDtcbiAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IGJvcmRlclZhbHVlO1xuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICBfY29tcHV0ZUxhYmVsSXRlbXMoY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHtwb3NpdGlvbiwgdGlja3M6IG9wdGlvblRpY2tzfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgY29uc3Qge2FsaWduLCBjcm9zc0FsaWduLCBwYWRkaW5nLCBtaXJyb3J9ID0gb3B0aW9uVGlja3M7XG4gICAgY29uc3QgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWQpO1xuICAgIGNvbnN0IHRpY2tBbmRQYWRkaW5nID0gdGwgKyBwYWRkaW5nO1xuICAgIGNvbnN0IGhUaWNrQW5kUGFkZGluZyA9IG1pcnJvciA/IC1wYWRkaW5nIDogdGlja0FuZFBhZGRpbmc7XG4gICAgY29uc3Qgcm90YXRpb24gPSAtdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgdGljaywgbGFiZWwsIHgsIHksIHRleHRBbGlnbiwgcGl4ZWwsIGZvbnQsIGxpbmVIZWlnaHQsIGxpbmVDb3VudCwgdGV4dE9mZnNldDtcbiAgICBsZXQgdGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgeSA9IHRoaXMuYm90dG9tIC0gaFRpY2tBbmRQYWRkaW5nO1xuICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICB5ID0gdGhpcy50b3AgKyBoVGlja0FuZFBhZGRpbmc7XG4gICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICB4ID0gcmV0Lng7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgY29uc3QgcmV0ID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICB0ZXh0QWxpZ24gPSByZXQudGV4dEFsaWduO1xuICAgICAgeCA9IHJldC54O1xuICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHkgPSAoKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIpICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgIHkgPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgIH1cbiAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICB4ID0gKChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyKSAtIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICB4ID0gdGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkudGV4dEFsaWduO1xuICAgIH1cbiAgICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgdGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICB0ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICBsYWJlbCA9IHRpY2subGFiZWw7XG4gICAgICBjb25zdCBvcHRzQXRJbmRleCA9IG9wdGlvblRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGkpKTtcbiAgICAgIHBpeGVsID0gdGhpcy5nZXRQaXhlbEZvclRpY2soaSkgKyBvcHRpb25UaWNrcy5sYWJlbE9mZnNldDtcbiAgICAgIGZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGkpO1xuICAgICAgbGluZUhlaWdodCA9IGZvbnQubGluZUhlaWdodDtcbiAgICAgIGxpbmVDb3VudCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwubGVuZ3RoIDogMTtcbiAgICAgIGNvbnN0IGhhbGZDb3VudCA9IGxpbmVDb3VudCAvIDI7XG4gICAgICBjb25zdCBjb2xvciA9IG9wdHNBdEluZGV4LmNvbG9yO1xuICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlQ29sb3I7XG4gICAgICBjb25zdCBzdHJva2VXaWR0aCA9IG9wdHNBdEluZGV4LnRleHRTdHJva2VXaWR0aDtcbiAgICAgIGxldCB0aWNrVGV4dEFsaWduID0gdGV4dEFsaWduO1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICB4ID0gcGl4ZWw7XG4gICAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdpbm5lcicpIHtcbiAgICAgICAgICBpZiAoaSA9PT0gaWxlbiAtIDEpIHtcbiAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAhdGhpcy5vcHRpb25zLnJldmVyc2UgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgdGlja1RleHRBbGlnbiA9ICF0aGlzLm9wdGlvbnMucmV2ZXJzZSA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicgfHwgcm90YXRpb24gIT09IDApIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGluZUNvdW50ICogbGluZUhlaWdodCArIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAvIDIgLSBoYWxmQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1sYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicgfHwgcm90YXRpb24gIT09IDApIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAvIDIgLSBoYWxmQ291bnQgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAtIGxpbmVDb3VudCAqIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgICB0ZXh0T2Zmc2V0ICo9IC0xO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5ID0gcGl4ZWw7XG4gICAgICAgIHRleHRPZmZzZXQgPSAoMSAtIGxpbmVDb3VudCkgKiBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgIH1cbiAgICAgIGxldCBiYWNrZHJvcDtcbiAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICBjb25zdCBsYWJlbFBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gbGFiZWxTaXplcy5oZWlnaHRzW2ldO1xuICAgICAgICBjb25zdCB3aWR0aCA9IGxhYmVsU2l6ZXMud2lkdGhzW2ldO1xuICAgICAgICBsZXQgdG9wID0geSArIHRleHRPZmZzZXQgLSBsYWJlbFBhZGRpbmcudG9wO1xuICAgICAgICBsZXQgbGVmdCA9IHggLSBsYWJlbFBhZGRpbmcubGVmdDtcbiAgICAgICAgc3dpdGNoICh0ZXh0QmFzZWxpbmUpIHtcbiAgICAgICAgY2FzZSAnbWlkZGxlJzpcbiAgICAgICAgICB0b3AgLT0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGV4dEFsaWduKSB7XG4gICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgbGVmdCAtPSB3aWR0aCAvIDI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJhY2tkcm9wID0ge1xuICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgdG9wLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCArIGxhYmVsUGFkZGluZy53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArIGxhYmVsUGFkZGluZy5oZWlnaHQsXG4gICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmJhY2tkcm9wQ29sb3IsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgcm90YXRpb24sXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBmb250LFxuICAgICAgICBjb2xvcixcbiAgICAgICAgc3Ryb2tlQ29sb3IsXG4gICAgICAgIHN0cm9rZVdpZHRoLFxuICAgICAgICB0ZXh0T2Zmc2V0LFxuICAgICAgICB0ZXh0QWxpZ246IHRpY2tUZXh0QWxpZ24sXG4gICAgICAgIHRleHRCYXNlbGluZSxcbiAgICAgICAgdHJhbnNsYXRpb246IFt4LCB5XSxcbiAgICAgICAgYmFja2Ryb3AsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIF9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCkge1xuICAgIGNvbnN0IHtwb3NpdGlvbiwgdGlja3N9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHJvdGF0aW9uID0gLXRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgIGlmIChyb3RhdGlvbikge1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgfVxuICAgIGxldCBhbGlnbiA9ICdjZW50ZXInO1xuICAgIGlmICh0aWNrcy5hbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgYWxpZ24gPSAnbGVmdCc7XG4gICAgfSBlbHNlIGlmICh0aWNrcy5hbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgIGFsaWduID0gJ3JpZ2h0JztcbiAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnaW5uZXInKSB7XG4gICAgICBhbGlnbiA9ICdpbm5lcic7XG4gICAgfVxuICAgIHJldHVybiBhbGlnbjtcbiAgfVxuICBfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkge1xuICAgIGNvbnN0IHtwb3NpdGlvbiwgdGlja3M6IHtjcm9zc0FsaWduLCBtaXJyb3IsIHBhZGRpbmd9fSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgIGNvbnN0IHRpY2tBbmRQYWRkaW5nID0gdGwgKyBwYWRkaW5nO1xuICAgIGNvbnN0IHdpZGVzdCA9IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoO1xuICAgIGxldCB0ZXh0QWxpZ247XG4gICAgbGV0IHg7XG4gICAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgeCA9IHRoaXMucmlnaHQgKyBwYWRkaW5nO1xuICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCArPSAod2lkZXN0IC8gMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICB4ICs9IHdpZGVzdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IHRoaXMucmlnaHQgLSB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICB4IC09ICh3aWRlc3QgLyAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgeCA9IHRoaXMubGVmdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgeCA9IHRoaXMubGVmdCArIHBhZGRpbmc7XG4gICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCAtPSAod2lkZXN0IC8gMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgIHggLT0gd2lkZXN0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4ID0gdGhpcy5sZWZ0ICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICB4ICs9IHdpZGVzdCAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICB4ID0gdGhpcy5yaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgIH1cbiAgICByZXR1cm4ge3RleHRBbGlnbiwgeH07XG4gIH1cbiAgX2NvbXB1dGVMYWJlbEFyZWEoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50aWNrcy5taXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICByZXR1cm4ge3RvcDogMCwgbGVmdDogdGhpcy5sZWZ0LCBib3R0b206IGNoYXJ0LmhlaWdodCwgcmlnaHQ6IHRoaXMucmlnaHR9O1xuICAgIH0gaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHJldHVybiB7dG9wOiB0aGlzLnRvcCwgbGVmdDogMCwgYm90dG9tOiB0aGlzLmJvdHRvbSwgcmlnaHQ6IGNoYXJ0LndpZHRofTtcbiAgICB9XG4gIH1cbiAgZHJhd0JhY2tncm91bmQoKSB7XG4gICAgY29uc3Qge2N0eCwgb3B0aW9uczoge2JhY2tncm91bmRDb2xvcn0sIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodH0gPSB0aGlzO1xuICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgY3R4LmZpbGxSZWN0KGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuICBnZXRMaW5lV2lkdGhGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICFncmlkLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgY29uc3QgaW5kZXggPSB0aWNrcy5maW5kSW5kZXgodCA9PiB0LnZhbHVlID09PSB2YWx1ZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGNvbnN0IG9wdHMgPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgICByZXR1cm4gb3B0cy5saW5lV2lkdGg7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG4gIGRyYXdHcmlkKGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2dyaWRMaW5lSXRlbXMgfHwgKHRoaXMuX2dyaWRMaW5lSXRlbXMgPSB0aGlzLl9jb21wdXRlR3JpZExpbmVJdGVtcyhjaGFydEFyZWEpKTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBjb25zdCBkcmF3TGluZSA9IChwMSwgcDIsIHN0eWxlKSA9PiB7XG4gICAgICBpZiAoIXN0eWxlLndpZHRoIHx8ICFzdHlsZS5jb2xvcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IHN0eWxlLndpZHRoO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGUuY29sb3I7XG4gICAgICBjdHguc2V0TGluZURhc2goc3R5bGUuYm9yZGVyRGFzaCB8fCBbXSk7XG4gICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcbiAgICAgIGN0eC5saW5lVG8ocDIueCwgcDIueSk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH07XG4gICAgaWYgKGdyaWQuZGlzcGxheSkge1xuICAgICAgZm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgIGlmIChncmlkLmRyYXdPbkNoYXJ0QXJlYSkge1xuICAgICAgICAgIGRyYXdMaW5lKFxuICAgICAgICAgICAge3g6IGl0ZW0ueDEsIHk6IGl0ZW0ueTF9LFxuICAgICAgICAgICAge3g6IGl0ZW0ueDIsIHk6IGl0ZW0ueTJ9LFxuICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdyaWQuZHJhd1RpY2tzKSB7XG4gICAgICAgICAgZHJhd0xpbmUoXG4gICAgICAgICAgICB7eDogaXRlbS50eDEsIHk6IGl0ZW0udHkxfSxcbiAgICAgICAgICAgIHt4OiBpdGVtLnR4MiwgeTogaXRlbS50eTJ9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjb2xvcjogaXRlbS50aWNrQ29sb3IsXG4gICAgICAgICAgICAgIHdpZHRoOiBpdGVtLnRpY2tXaWR0aCxcbiAgICAgICAgICAgICAgYm9yZGVyRGFzaDogaXRlbS50aWNrQm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogaXRlbS50aWNrQm9yZGVyRGFzaE9mZnNldFxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZHJhd0JvcmRlcigpIHtcbiAgICBjb25zdCB7Y2hhcnQsIGN0eCwgb3B0aW9uczoge2dyaWR9fSA9IHRoaXM7XG4gICAgY29uc3QgYm9yZGVyT3B0cyA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3QgYXhpc1dpZHRoID0gZ3JpZC5kcmF3Qm9yZGVyID8gYm9yZGVyT3B0cy5ib3JkZXJXaWR0aCA6IDA7XG4gICAgaWYgKCFheGlzV2lkdGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGFzdExpbmVXaWR0aCA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoMCkpLmxpbmVXaWR0aDtcbiAgICBjb25zdCBib3JkZXJWYWx1ZSA9IHRoaXMuX2JvcmRlclZhbHVlO1xuICAgIGxldCB4MSwgeDIsIHkxLCB5MjtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgeDEgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5sZWZ0LCBheGlzV2lkdGgpIC0gYXhpc1dpZHRoIC8gMjtcbiAgICAgIHgyID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMucmlnaHQsIGxhc3RMaW5lV2lkdGgpICsgbGFzdExpbmVXaWR0aCAvIDI7XG4gICAgICB5MSA9IHkyID0gYm9yZGVyVmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMudG9wLCBheGlzV2lkdGgpIC0gYXhpc1dpZHRoIC8gMjtcbiAgICAgIHkyID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMuYm90dG9tLCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgeDEgPSB4MiA9IGJvcmRlclZhbHVlO1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJPcHRzLmJvcmRlcldpZHRoO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IGJvcmRlck9wdHMuYm9yZGVyQ29sb3I7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5tb3ZlVG8oeDEsIHkxKTtcbiAgICBjdHgubGluZVRvKHgyLCB5Mik7XG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgZHJhd0xhYmVscyhjaGFydEFyZWEpIHtcbiAgICBjb25zdCBvcHRpb25UaWNrcyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICBpZiAoIW9wdGlvblRpY2tzLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgYXJlYSA9IHRoaXMuX2NvbXB1dGVMYWJlbEFyZWEoKTtcbiAgICBpZiAoYXJlYSkge1xuICAgICAgY2xpcEFyZWEoY3R4LCBhcmVhKTtcbiAgICB9XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLl9sYWJlbEl0ZW1zIHx8ICh0aGlzLl9sYWJlbEl0ZW1zID0gdGhpcy5fY29tcHV0ZUxhYmVsSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgY29uc3QgdGlja0ZvbnQgPSBpdGVtLmZvbnQ7XG4gICAgICBjb25zdCBsYWJlbCA9IGl0ZW0ubGFiZWw7XG4gICAgICBpZiAoaXRlbS5iYWNrZHJvcCkge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gaXRlbS5iYWNrZHJvcC5jb2xvcjtcbiAgICAgICAgY3R4LmZpbGxSZWN0KGl0ZW0uYmFja2Ryb3AubGVmdCwgaXRlbS5iYWNrZHJvcC50b3AsIGl0ZW0uYmFja2Ryb3Aud2lkdGgsIGl0ZW0uYmFja2Ryb3AuaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGxldCB5ID0gaXRlbS50ZXh0T2Zmc2V0O1xuICAgICAgcmVuZGVyVGV4dChjdHgsIGxhYmVsLCAwLCB5LCB0aWNrRm9udCwgaXRlbSk7XG4gICAgfVxuICAgIGlmIChhcmVhKSB7XG4gICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgfVxuICB9XG4gIGRyYXdUaXRsZSgpIHtcbiAgICBjb25zdCB7Y3R4LCBvcHRpb25zOiB7cG9zaXRpb24sIHRpdGxlLCByZXZlcnNlfX0gPSB0aGlzO1xuICAgIGlmICghdGl0bGUuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmb250ID0gdG9Gb250KHRpdGxlLmZvbnQpO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGUucGFkZGluZyk7XG4gICAgY29uc3QgYWxpZ24gPSB0aXRsZS5hbGlnbjtcbiAgICBsZXQgb2Zmc2V0ID0gZm9udC5saW5lSGVpZ2h0IC8gMjtcbiAgICBpZiAocG9zaXRpb24gPT09ICdib3R0b20nIHx8IHBvc2l0aW9uID09PSAnY2VudGVyJyB8fCBpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgIG9mZnNldCArPSBwYWRkaW5nLmJvdHRvbTtcbiAgICAgIGlmIChpc0FycmF5KHRpdGxlLnRleHQpKSB7XG4gICAgICAgIG9mZnNldCArPSBmb250LmxpbmVIZWlnaHQgKiAodGl0bGUudGV4dC5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0ICs9IHBhZGRpbmcudG9wO1xuICAgIH1cbiAgICBjb25zdCB7dGl0bGVYLCB0aXRsZVksIG1heFdpZHRoLCByb3RhdGlvbn0gPSB0aXRsZUFyZ3ModGhpcywgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pO1xuICAgIHJlbmRlclRleHQoY3R4LCB0aXRsZS50ZXh0LCAwLCAwLCBmb250LCB7XG4gICAgICBjb2xvcjogdGl0bGUuY29sb3IsXG4gICAgICBtYXhXaWR0aCxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgdGV4dEFsaWduOiB0aXRsZUFsaWduKGFsaWduLCBwb3NpdGlvbiwgcmV2ZXJzZSksXG4gICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgdHJhbnNsYXRpb246IFt0aXRsZVgsIHRpdGxlWV0sXG4gICAgfSk7XG4gIH1cbiAgZHJhdyhjaGFydEFyZWEpIHtcbiAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICB0aGlzLmRyYXdHcmlkKGNoYXJ0QXJlYSk7XG4gICAgdGhpcy5kcmF3Qm9yZGVyKCk7XG4gICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgfVxuICBfbGF5ZXJzKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdHogPSBvcHRzLnRpY2tzICYmIG9wdHMudGlja3MueiB8fCAwO1xuICAgIGNvbnN0IGd6ID0gdmFsdWVPckRlZmF1bHQob3B0cy5ncmlkICYmIG9wdHMuZ3JpZC56LCAtMSk7XG4gICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCB0aGlzLmRyYXcgIT09IFNjYWxlLnByb3RvdHlwZS5kcmF3KSB7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgejogdHosXG4gICAgICAgIGRyYXc6IChjaGFydEFyZWEpID0+IHtcbiAgICAgICAgICB0aGlzLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgfVxuICAgIHJldHVybiBbe1xuICAgICAgejogZ3osXG4gICAgICBkcmF3OiAoY2hhcnRBcmVhKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICAgICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgICAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHo6IGd6ICsgMSxcbiAgICAgIGRyYXc6ICgpID0+IHtcbiAgICAgICAgdGhpcy5kcmF3Qm9yZGVyKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgejogdHosXG4gICAgICBkcmF3OiAoY2hhcnRBcmVhKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd0xhYmVscyhjaGFydEFyZWEpO1xuICAgICAgfVxuICAgIH1dO1xuICB9XG4gIGdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpIHtcbiAgICBjb25zdCBtZXRhcyA9IHRoaXMuY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGNvbnN0IGF4aXNJRCA9IHRoaXMuYXhpcyArICdBeGlzSUQnO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICAgIGlmIChtZXRhW2F4aXNJRF0gPT09IHRoaXMuaWQgJiYgKCF0eXBlIHx8IG1ldGEudHlwZSA9PT0gdHlwZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobWV0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaW5kZXgpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgcmV0dXJuIHRvRm9udChvcHRzLmZvbnQpO1xuICB9XG4gIF9tYXhEaWdpdHMoKSB7XG4gICAgY29uc3QgZm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLmxpbmVIZWlnaHQ7XG4gICAgcmV0dXJuICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0KSAvIGZvbnRTaXplO1xuICB9XG59XG5cbmNsYXNzIFR5cGVkUmVnaXN0cnkge1xuICBjb25zdHJ1Y3Rvcih0eXBlLCBzY29wZSwgb3ZlcnJpZGUpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICB0aGlzLm92ZXJyaWRlID0gb3ZlcnJpZGU7XG4gICAgdGhpcy5pdGVtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgaXNGb3JUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mLmNhbGwodGhpcy50eXBlLnByb3RvdHlwZSwgdHlwZS5wcm90b3R5cGUpO1xuICB9XG4gIHJlZ2lzdGVyKGl0ZW0pIHtcbiAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihpdGVtKTtcbiAgICBsZXQgcGFyZW50U2NvcGU7XG4gICAgaWYgKGlzSUNoYXJ0Q29tcG9uZW50KHByb3RvKSkge1xuICAgICAgcGFyZW50U2NvcGUgPSB0aGlzLnJlZ2lzdGVyKHByb3RvKTtcbiAgICB9XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGUgKyAnLicgKyBpZDtcbiAgICBpZiAoIWlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsYXNzIGRvZXMgbm90IGhhdmUgaWQ6ICcgKyBpdGVtKTtcbiAgICB9XG4gICAgaWYgKGlkIGluIGl0ZW1zKSB7XG4gICAgICByZXR1cm4gc2NvcGU7XG4gICAgfVxuICAgIGl0ZW1zW2lkXSA9IGl0ZW07XG4gICAgcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpO1xuICAgIGlmICh0aGlzLm92ZXJyaWRlKSB7XG4gICAgICBkZWZhdWx0cy5vdmVycmlkZShpdGVtLmlkLCBpdGVtLm92ZXJyaWRlcyk7XG4gICAgfVxuICAgIHJldHVybiBzY29wZTtcbiAgfVxuICBnZXQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtc1tpZF07XG4gIH1cbiAgdW5yZWdpc3RlcihpdGVtKSB7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGU7XG4gICAgaWYgKGlkIGluIGl0ZW1zKSB7XG4gICAgICBkZWxldGUgaXRlbXNbaWRdO1xuICAgIH1cbiAgICBpZiAoc2NvcGUgJiYgaWQgaW4gZGVmYXVsdHNbc2NvcGVdKSB7XG4gICAgICBkZWxldGUgZGVmYXVsdHNbc2NvcGVdW2lkXTtcbiAgICAgIGlmICh0aGlzLm92ZXJyaWRlKSB7XG4gICAgICAgIGRlbGV0ZSBvdmVycmlkZXNbaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpIHtcbiAgY29uc3QgaXRlbURlZmF1bHRzID0gbWVyZ2UoT2JqZWN0LmNyZWF0ZShudWxsKSwgW1xuICAgIHBhcmVudFNjb3BlID8gZGVmYXVsdHMuZ2V0KHBhcmVudFNjb3BlKSA6IHt9LFxuICAgIGRlZmF1bHRzLmdldChzY29wZSksXG4gICAgaXRlbS5kZWZhdWx0c1xuICBdKTtcbiAgZGVmYXVsdHMuc2V0KHNjb3BlLCBpdGVtRGVmYXVsdHMpO1xuICBpZiAoaXRlbS5kZWZhdWx0Um91dGVzKSB7XG4gICAgcm91dGVEZWZhdWx0cyhzY29wZSwgaXRlbS5kZWZhdWx0Um91dGVzKTtcbiAgfVxuICBpZiAoaXRlbS5kZXNjcmlwdG9ycykge1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKHNjb3BlLCBpdGVtLmRlc2NyaXB0b3JzKTtcbiAgfVxufVxuZnVuY3Rpb24gcm91dGVEZWZhdWx0cyhzY29wZSwgcm91dGVzKSB7XG4gIE9iamVjdC5rZXlzKHJvdXRlcykuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgY29uc3QgcHJvcGVydHlQYXJ0cyA9IHByb3BlcnR5LnNwbGl0KCcuJyk7XG4gICAgY29uc3Qgc291cmNlTmFtZSA9IHByb3BlcnR5UGFydHMucG9wKCk7XG4gICAgY29uc3Qgc291cmNlU2NvcGUgPSBbc2NvcGVdLmNvbmNhdChwcm9wZXJ0eVBhcnRzKS5qb2luKCcuJyk7XG4gICAgY29uc3QgcGFydHMgPSByb3V0ZXNbcHJvcGVydHldLnNwbGl0KCcuJyk7XG4gICAgY29uc3QgdGFyZ2V0TmFtZSA9IHBhcnRzLnBvcCgpO1xuICAgIGNvbnN0IHRhcmdldFNjb3BlID0gcGFydHMuam9pbignLicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKHNvdXJjZVNjb3BlLCBzb3VyY2VOYW1lLCB0YXJnZXRTY29wZSwgdGFyZ2V0TmFtZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNJQ2hhcnRDb21wb25lbnQocHJvdG8pIHtcbiAgcmV0dXJuICdpZCcgaW4gcHJvdG8gJiYgJ2RlZmF1bHRzJyBpbiBwcm90bztcbn1cblxuY2xhc3MgUmVnaXN0cnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXJzID0gbmV3IFR5cGVkUmVnaXN0cnkoRGF0YXNldENvbnRyb2xsZXIsICdkYXRhc2V0cycsIHRydWUpO1xuICAgIHRoaXMuZWxlbWVudHMgPSBuZXcgVHlwZWRSZWdpc3RyeShFbGVtZW50LCAnZWxlbWVudHMnKTtcbiAgICB0aGlzLnBsdWdpbnMgPSBuZXcgVHlwZWRSZWdpc3RyeShPYmplY3QsICdwbHVnaW5zJyk7XG4gICAgdGhpcy5zY2FsZXMgPSBuZXcgVHlwZWRSZWdpc3RyeShTY2FsZSwgJ3NjYWxlcycpO1xuICAgIHRoaXMuX3R5cGVkUmVnaXN0cmllcyA9IFt0aGlzLmNvbnRyb2xsZXJzLCB0aGlzLnNjYWxlcywgdGhpcy5lbGVtZW50c107XG4gIH1cbiAgYWRkKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MpO1xuICB9XG4gIHJlbW92ZSguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MpO1xuICB9XG4gIGFkZENvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICB9XG4gIGFkZEVsZW1lbnRzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuZWxlbWVudHMpO1xuICB9XG4gIGFkZFBsdWdpbnMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5wbHVnaW5zKTtcbiAgfVxuICBhZGRTY2FsZXMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICB9XG4gIGdldENvbnRyb2xsZXIoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLmNvbnRyb2xsZXJzLCAnY29udHJvbGxlcicpO1xuICB9XG4gIGdldEVsZW1lbnQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLmVsZW1lbnRzLCAnZWxlbWVudCcpO1xuICB9XG4gIGdldFBsdWdpbihpZCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMucGx1Z2lucywgJ3BsdWdpbicpO1xuICB9XG4gIGdldFNjYWxlKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5zY2FsZXMsICdzY2FsZScpO1xuICB9XG4gIHJlbW92ZUNvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5jb250cm9sbGVycyk7XG4gIH1cbiAgcmVtb3ZlRWxlbWVudHMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLmVsZW1lbnRzKTtcbiAgfVxuICByZW1vdmVQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5wbHVnaW5zKTtcbiAgfVxuICByZW1vdmVTY2FsZXMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLnNjYWxlcyk7XG4gIH1cbiAgX2VhY2gobWV0aG9kLCBhcmdzLCB0eXBlZFJlZ2lzdHJ5KSB7XG4gICAgWy4uLmFyZ3NdLmZvckVhY2goYXJnID0+IHtcbiAgICAgIGNvbnN0IHJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGFyZyk7XG4gICAgICBpZiAodHlwZWRSZWdpc3RyeSB8fCByZWcuaXNGb3JUeXBlKGFyZykgfHwgKHJlZyA9PT0gdGhpcy5wbHVnaW5zICYmIGFyZy5pZCkpIHtcbiAgICAgICAgdGhpcy5fZXhlYyhtZXRob2QsIHJlZywgYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhY2goYXJnLCBpdGVtID0+IHtcbiAgICAgICAgICBjb25zdCBpdGVtUmVnID0gdHlwZWRSZWdpc3RyeSB8fCB0aGlzLl9nZXRSZWdpc3RyeUZvclR5cGUoaXRlbSk7XG4gICAgICAgICAgdGhpcy5fZXhlYyhtZXRob2QsIGl0ZW1SZWcsIGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBfZXhlYyhtZXRob2QsIHJlZ2lzdHJ5LCBjb21wb25lbnQpIHtcbiAgICBjb25zdCBjYW1lbE1ldGhvZCA9IF9jYXBpdGFsaXplKG1ldGhvZCk7XG4gICAgY2FsbGJhY2soY29tcG9uZW50WydiZWZvcmUnICsgY2FtZWxNZXRob2RdLCBbXSwgY29tcG9uZW50KTtcbiAgICByZWdpc3RyeVttZXRob2RdKGNvbXBvbmVudCk7XG4gICAgY2FsbGJhY2soY29tcG9uZW50WydhZnRlcicgKyBjYW1lbE1ldGhvZF0sIFtdLCBjb21wb25lbnQpO1xuICB9XG4gIF9nZXRSZWdpc3RyeUZvclR5cGUodHlwZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdHlwZWRSZWdpc3RyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCByZWcgPSB0aGlzLl90eXBlZFJlZ2lzdHJpZXNbaV07XG4gICAgICBpZiAocmVnLmlzRm9yVHlwZSh0eXBlKSkge1xuICAgICAgICByZXR1cm4gcmVnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wbHVnaW5zO1xuICB9XG4gIF9nZXQoaWQsIHR5cGVkUmVnaXN0cnksIHR5cGUpIHtcbiAgICBjb25zdCBpdGVtID0gdHlwZWRSZWdpc3RyeS5nZXQoaWQpO1xuICAgIGlmIChpdGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgaWQgKyAnXCIgaXMgbm90IGEgcmVnaXN0ZXJlZCAnICsgdHlwZSArICcuJyk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xuICB9XG59XG52YXIgcmVnaXN0cnkgPSBuZXcgUmVnaXN0cnkoKTtcblxuY2xhc3MgU2NhdHRlckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge2RhdGE6IHBvaW50cyA9IFtdfSA9IG1ldGE7XG4gICAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgIGxldCB7c3RhcnQsIGNvdW50fSA9IF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKTtcbiAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLl9kcmF3Q291bnQgPSBjb3VudDtcbiAgICBpZiAoX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSkge1xuICAgICAgc3RhcnQgPSAwO1xuICAgICAgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICBjb25zdCB7ZGF0YXNldDogbGluZSwgX2RhdGFzZXR9ID0gbWV0YTtcbiAgICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgIGxpbmUuX2RhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICBsaW5lLl9kZWNpbWF0ZWQgPSAhIV9kYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICBvcHRpb25zLnNlZ21lbnQgPSB0aGlzLm9wdGlvbnMuc2VnbWVudDtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHtcbiAgICAgICAgYW5pbWF0ZWQ6ICFhbmltYXRpb25zRGlzYWJsZWQsXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH0sIG1vZGUpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKTtcbiAgfVxuICBhZGRFbGVtZW50cygpIHtcbiAgICBjb25zdCB7c2hvd0xpbmV9ID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICghdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUgJiYgc2hvd0xpbmUpIHtcbiAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gcmVnaXN0cnkuZ2V0RWxlbWVudCgnbGluZScpO1xuICAgIH1cbiAgICBzdXBlci5hZGRFbGVtZW50cygpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGNvbnN0IHtpU2NhbGUsIHZTY2FsZSwgX3N0YWNrZWQsIF9kYXRhc2V0fSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBjb25zdCBzaGFyZWRPcHRpb25zID0gdGhpcy5nZXRTaGFyZWRPcHRpb25zKGZpcnN0T3B0cyk7XG4gICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBjb25zdCB7c3BhbkdhcHMsIHNlZ21lbnR9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IG1heEdhcExlbmd0aCA9IGlzTnVtYmVyKHNwYW5HYXBzKSA/IHNwYW5HYXBzIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGNvbnN0IGRpcmVjdFVwZGF0ZSA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZCB8fCByZXNldCB8fCBtb2RlID09PSAnbm9uZSc7XG4gICAgbGV0IHByZXZQYXJzZWQgPSBzdGFydCA+IDAgJiYgdGhpcy5nZXRQYXJzZWQoc3RhcnQgLSAxKTtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gZGlyZWN0VXBkYXRlID8gcG9pbnQgOiB7fTtcbiAgICAgIGNvbnN0IG51bGxEYXRhID0gaXNOdWxsT3JVbmRlZihwYXJzZWRbdkF4aXNdKTtcbiAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSwgaSk7XG4gICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0IHx8IG51bGxEYXRhID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHBhcnNlZFt2QXhpc10sIGkpO1xuICAgICAgcHJvcGVydGllcy5za2lwID0gaXNOYU4oaVBpeGVsKSB8fCBpc05hTih2UGl4ZWwpIHx8IG51bGxEYXRhO1xuICAgICAgcHJvcGVydGllcy5zdG9wID0gaSA+IDAgJiYgKE1hdGguYWJzKHBhcnNlZFtpQXhpc10gLSBwcmV2UGFyc2VkW2lBeGlzXSkpID4gbWF4R2FwTGVuZ3RoO1xuICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgcHJvcGVydGllcy5wYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgIHByb3BlcnRpZXMucmF3ID0gX2RhdGFzZXQuZGF0YVtpXTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKCFkaXJlY3RVcGRhdGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgIH1cbiAgICAgIHByZXZQYXJzZWQgPSBwYXJzZWQ7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICB9XG4gIGdldE1heE92ZXJmbG93KCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgIGxldCBtYXggPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBkYXRhW2ldLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpKSAvIDIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1heCA+IDAgJiYgbWF4O1xuICAgIH1cbiAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgIGNvbnN0IGJvcmRlciA9IGRhdGFzZXQub3B0aW9ucyAmJiBkYXRhc2V0Lm9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYm9yZGVyO1xuICAgIH1cbiAgICBjb25zdCBmaXJzdFBvaW50ID0gZGF0YVswXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucygwKSk7XG4gICAgY29uc3QgbGFzdFBvaW50ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGRhdGEubGVuZ3RoIC0gMSkpO1xuICAgIHJldHVybiBNYXRoLm1heChib3JkZXIsIGZpcnN0UG9pbnQsIGxhc3RQb2ludCkgLyAyO1xuICB9XG59XG5TY2F0dGVyQ29udHJvbGxlci5pZCA9ICdzY2F0dGVyJztcblNjYXR0ZXJDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gIHNob3dMaW5lOiBmYWxzZSxcbiAgZmlsbDogZmFsc2Vcbn07XG5TY2F0dGVyQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIGludGVyYWN0aW9uOiB7XG4gICAgbW9kZTogJ3BvaW50J1xuICB9LFxuICBwbHVnaW5zOiB7XG4gICAgdG9vbHRpcDoge1xuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIHRpdGxlKCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWwoaXRlbSkge1xuICAgICAgICAgIHJldHVybiAnKCcgKyBpdGVtLmxhYmVsICsgJywgJyArIGl0ZW0uZm9ybWF0dGVkVmFsdWUgKyAnKSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNjYWxlczoge1xuICAgIHg6IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgfSxcbiAgICB5OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH1cbiAgfVxufTtcblxudmFyIGNvbnRyb2xsZXJzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQmFyQ29udHJvbGxlcjogQmFyQ29udHJvbGxlcixcbkJ1YmJsZUNvbnRyb2xsZXI6IEJ1YmJsZUNvbnRyb2xsZXIsXG5Eb3VnaG51dENvbnRyb2xsZXI6IERvdWdobnV0Q29udHJvbGxlcixcbkxpbmVDb250cm9sbGVyOiBMaW5lQ29udHJvbGxlcixcblBvbGFyQXJlYUNvbnRyb2xsZXI6IFBvbGFyQXJlYUNvbnRyb2xsZXIsXG5QaWVDb250cm9sbGVyOiBQaWVDb250cm9sbGVyLFxuUmFkYXJDb250cm9sbGVyOiBSYWRhckNvbnRyb2xsZXIsXG5TY2F0dGVyQ29udHJvbGxlcjogU2NhdHRlckNvbnRyb2xsZXJcbn0pO1xuXG5mdW5jdGlvbiBhYnN0cmFjdCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQ6IENoZWNrIHRoYXQgYSBjb21wbGV0ZSBkYXRlIGFkYXB0ZXIgaXMgcHJvdmlkZWQuJyk7XG59XG5jbGFzcyBEYXRlQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB9XG4gIGluaXQoY2hhcnRPcHRpb25zKSB7fVxuICBmb3JtYXRzKCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIHBhcnNlKHZhbHVlLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBmb3JtYXQodGltZXN0YW1wLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBhZGQodGltZXN0YW1wLCBhbW91bnQsIHVuaXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBkaWZmKGEsIGIsIHVuaXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBzdGFydE9mKHRpbWVzdGFtcCwgdW5pdCwgd2Vla2RheSkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIGVuZE9mKHRpbWVzdGFtcCwgdW5pdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG59XG5EYXRlQWRhcHRlci5vdmVycmlkZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcbiAgT2JqZWN0LmFzc2lnbihEYXRlQWRhcHRlci5wcm90b3R5cGUsIG1lbWJlcnMpO1xufTtcbnZhciBhZGFwdGVycyA9IHtcbiAgX2RhdGU6IERhdGVBZGFwdGVyXG59O1xuXG5mdW5jdGlvbiBiaW5hcnlTZWFyY2gobWV0YXNldCwgYXhpcywgdmFsdWUsIGludGVyc2VjdCkge1xuICBjb25zdCB7Y29udHJvbGxlciwgZGF0YSwgX3NvcnRlZH0gPSBtZXRhc2V0O1xuICBjb25zdCBpU2NhbGUgPSBjb250cm9sbGVyLl9jYWNoZWRNZXRhLmlTY2FsZTtcbiAgaWYgKGlTY2FsZSAmJiBheGlzID09PSBpU2NhbGUuYXhpcyAmJiBheGlzICE9PSAncicgJiYgX3NvcnRlZCAmJiBkYXRhLmxlbmd0aCkge1xuICAgIGNvbnN0IGxvb2t1cE1ldGhvZCA9IGlTY2FsZS5fcmV2ZXJzZVBpeGVscyA/IF9ybG9va3VwQnlLZXkgOiBfbG9va3VwQnlLZXk7XG4gICAgaWYgKCFpbnRlcnNlY3QpIHtcbiAgICAgIHJldHVybiBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoY29udHJvbGxlci5fc2hhcmVkT3B0aW9ucykge1xuICAgICAgY29uc3QgZWwgPSBkYXRhWzBdO1xuICAgICAgY29uc3QgcmFuZ2UgPSB0eXBlb2YgZWwuZ2V0UmFuZ2UgPT09ICdmdW5jdGlvbicgJiYgZWwuZ2V0UmFuZ2UoYXhpcyk7XG4gICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUgLSByYW5nZSk7XG4gICAgICAgIGNvbnN0IGVuZCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSArIHJhbmdlKTtcbiAgICAgICAgcmV0dXJuIHtsbzogc3RhcnQubG8sIGhpOiBlbmQuaGl9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4ge2xvOiAwLCBoaTogZGF0YS5sZW5ndGggLSAxfTtcbn1cbmZ1bmN0aW9uIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGhhbmRsZXIsIGludGVyc2VjdCkge1xuICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltheGlzXTtcbiAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjb25zdCB7aW5kZXgsIGRhdGF9ID0gbWV0YXNldHNbaV07XG4gICAgY29uc3Qge2xvLCBoaX0gPSBiaW5hcnlTZWFyY2gobWV0YXNldHNbaV0sIGF4aXMsIHZhbHVlLCBpbnRlcnNlY3QpO1xuICAgIGZvciAobGV0IGogPSBsbzsgaiA8PSBoaTsgKytqKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZGF0YVtqXTtcbiAgICAgIGlmICghZWxlbWVudC5za2lwKSB7XG4gICAgICAgIGhhbmRsZXIoZWxlbWVudCwgaW5kZXgsIGopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpIHtcbiAgY29uc3QgdXNlWCA9IGF4aXMuaW5kZXhPZigneCcpICE9PSAtMTtcbiAgY29uc3QgdXNlWSA9IGF4aXMuaW5kZXhPZigneScpICE9PSAtMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHB0MSwgcHQyKSB7XG4gICAgY29uc3QgZGVsdGFYID0gdXNlWCA/IE1hdGguYWJzKHB0MS54IC0gcHQyLngpIDogMDtcbiAgICBjb25zdCBkZWx0YVkgPSB1c2VZID8gTWF0aC5hYnMocHQxLnkgLSBwdDIueSkgOiAwO1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZGVsdGFYLCAyKSArIE1hdGgucG93KGRlbHRhWSwgMikpO1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSB7XG4gIGNvbnN0IGl0ZW1zID0gW107XG4gIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhY2hhcnQuaXNQb2ludEluQXJlYShwb3NpdGlvbikpIHtcbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cbiAgY29uc3QgZXZhbHVhdGlvbkZ1bmMgPSBmdW5jdGlvbihlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFfaXNQb2ludEluQXJlYShlbGVtZW50LCBjaGFydC5jaGFydEFyZWEsIDApKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbikpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gIH07XG4gIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jLCB0cnVlKTtcbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICBsZXQgaXRlbXMgPSBbXTtcbiAgZnVuY3Rpb24gZXZhbHVhdGlvbkZ1bmMoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgIGNvbnN0IHtzdGFydEFuZ2xlLCBlbmRBbmdsZX0gPSBlbGVtZW50LmdldFByb3BzKFsnc3RhcnRBbmdsZScsICdlbmRBbmdsZSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCB7YW5nbGV9ID0gZ2V0QW5nbGVGcm9tUG9pbnQoZWxlbWVudCwge3g6IHBvc2l0aW9uLngsIHk6IHBvc2l0aW9uLnl9KTtcbiAgICBpZiAoX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpKSB7XG4gICAgICBpdGVtcy5wdXNoKHtlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fSk7XG4gICAgfVxuICB9XG4gIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSB7XG4gIGxldCBpdGVtcyA9IFtdO1xuICBjb25zdCBkaXN0YW5jZU1ldHJpYyA9IGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKTtcbiAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgY29uc3QgaW5SYW5nZSA9IGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBpZiAoaW50ZXJzZWN0ICYmICFpblJhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNlbnRlciA9IGVsZW1lbnQuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3QgcG9pbnRJbkFyZWEgPSAhIWluY2x1ZGVJbnZpc2libGUgfHwgY2hhcnQuaXNQb2ludEluQXJlYShjZW50ZXIpO1xuICAgIGlmICghcG9pbnRJbkFyZWEgJiYgIWluUmFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGlzdGFuY2UgPSBkaXN0YW5jZU1ldHJpYyhwb3NpdGlvbiwgY2VudGVyKTtcbiAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgaXRlbXMgPSBbe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9XTtcbiAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgfSBlbHNlIGlmIChkaXN0YW5jZSA9PT0gbWluRGlzdGFuY2UpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gIH1cbiAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMpO1xuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFjaGFydC5pc1BvaW50SW5BcmVhKHBvc2l0aW9uKSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gYXhpcyA9PT0gJ3InICYmICFpbnRlcnNlY3RcbiAgICA/IGdldE5lYXJlc3RSYWRpYWxJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pXG4gICAgOiBnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0l0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGNvbnN0IGl0ZW1zID0gW107XG4gIGNvbnN0IHJhbmdlTWV0aG9kID0gYXhpcyA9PT0gJ3gnID8gJ2luWFJhbmdlJyA6ICdpbllSYW5nZSc7XG4gIGxldCBpbnRlcnNlY3RzSXRlbSA9IGZhbHNlO1xuICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCAoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkgPT4ge1xuICAgIGlmIChlbGVtZW50W3JhbmdlTWV0aG9kXShwb3NpdGlvbltheGlzXSwgdXNlRmluYWxQb3NpdGlvbikpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICAgIGludGVyc2VjdHNJdGVtID0gaW50ZXJzZWN0c0l0ZW0gfHwgZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgfSk7XG4gIGlmIChpbnRlcnNlY3QgJiYgIWludGVyc2VjdHNJdGVtKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBpdGVtcztcbn1cbnZhciBJbnRlcmFjdGlvbiA9IHtcbiAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zLFxuICBtb2Rlczoge1xuICAgIGluZGV4KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneCc7XG4gICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgY29uc3QgaXRlbXMgPSBvcHRpb25zLmludGVyc2VjdFxuICAgICAgICA/IGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSlcbiAgICAgICAgOiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBmYWxzZSwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmZvckVhY2goKG1ldGEpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBpdGVtc1swXS5pbmRleDtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IG1ldGEuZGF0YVtpbmRleF07XG4gICAgICAgIGlmIChlbGVtZW50ICYmICFlbGVtZW50LnNraXApIHtcbiAgICAgICAgICBlbGVtZW50cy5wdXNoKHtlbGVtZW50LCBkYXRhc2V0SW5kZXg6IG1ldGEuaW5kZXgsIGluZGV4fSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgIH0sXG4gICAgZGF0YXNldChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICBsZXQgaXRlbXMgPSBvcHRpb25zLmludGVyc2VjdFxuICAgICAgICA/IGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkgOlxuICAgICAgICBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBmYWxzZSwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0SW5kZXggPSBpdGVtc1swXS5kYXRhc2V0SW5kZXg7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmRhdGE7XG4gICAgICAgIGl0ZW1zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQ6IGRhdGFbaV0sIGRhdGFzZXRJbmRleCwgaW5kZXg6IGl9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH0sXG4gICAgcG9pbnQoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgcmV0dXJuIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgfSxcbiAgICBuZWFyZXN0KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgIHJldHVybiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBvcHRpb25zLmludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgfSxcbiAgICB4KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sICd4Jywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH0sXG4gICAgeShjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCAneScsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IFNUQVRJQ19QT1NJVElPTlMgPSBbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddO1xuZnVuY3Rpb24gZmlsdGVyQnlQb3NpdGlvbihhcnJheSwgcG9zaXRpb24pIHtcbiAgcmV0dXJuIGFycmF5LmZpbHRlcih2ID0+IHYucG9zID09PSBwb3NpdGlvbik7XG59XG5mdW5jdGlvbiBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMoYXJyYXksIGF4aXMpIHtcbiAgcmV0dXJuIGFycmF5LmZpbHRlcih2ID0+IFNUQVRJQ19QT1NJVElPTlMuaW5kZXhPZih2LnBvcykgPT09IC0xICYmIHYuYm94LmF4aXMgPT09IGF4aXMpO1xufVxuZnVuY3Rpb24gc29ydEJ5V2VpZ2h0KGFycmF5LCByZXZlcnNlKSB7XG4gIHJldHVybiBhcnJheS5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgdjAgPSByZXZlcnNlID8gYiA6IGE7XG4gICAgY29uc3QgdjEgPSByZXZlcnNlID8gYSA6IGI7XG4gICAgcmV0dXJuIHYwLndlaWdodCA9PT0gdjEud2VpZ2h0ID9cbiAgICAgIHYwLmluZGV4IC0gdjEuaW5kZXggOlxuICAgICAgdjAud2VpZ2h0IC0gdjEud2VpZ2h0O1xuICB9KTtcbn1cbmZ1bmN0aW9uIHdyYXBCb3hlcyhib3hlcykge1xuICBjb25zdCBsYXlvdXRCb3hlcyA9IFtdO1xuICBsZXQgaSwgaWxlbiwgYm94LCBwb3MsIHN0YWNrLCBzdGFja1dlaWdodDtcbiAgZm9yIChpID0gMCwgaWxlbiA9IChib3hlcyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgYm94ID0gYm94ZXNbaV07XG4gICAgKHtwb3NpdGlvbjogcG9zLCBvcHRpb25zOiB7c3RhY2ssIHN0YWNrV2VpZ2h0ID0gMX19ID0gYm94KTtcbiAgICBsYXlvdXRCb3hlcy5wdXNoKHtcbiAgICAgIGluZGV4OiBpLFxuICAgICAgYm94LFxuICAgICAgcG9zLFxuICAgICAgaG9yaXpvbnRhbDogYm94LmlzSG9yaXpvbnRhbCgpLFxuICAgICAgd2VpZ2h0OiBib3gud2VpZ2h0LFxuICAgICAgc3RhY2s6IHN0YWNrICYmIChwb3MgKyBzdGFjayksXG4gICAgICBzdGFja1dlaWdodFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBsYXlvdXRCb3hlcztcbn1cbmZ1bmN0aW9uIGJ1aWxkU3RhY2tzKGxheW91dHMpIHtcbiAgY29uc3Qgc3RhY2tzID0ge307XG4gIGZvciAoY29uc3Qgd3JhcCBvZiBsYXlvdXRzKSB7XG4gICAgY29uc3Qge3N0YWNrLCBwb3MsIHN0YWNrV2VpZ2h0fSA9IHdyYXA7XG4gICAgaWYgKCFzdGFjayB8fCAhU1RBVElDX1BPU0lUSU9OUy5pbmNsdWRlcyhwb3MpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgX3N0YWNrID0gc3RhY2tzW3N0YWNrXSB8fCAoc3RhY2tzW3N0YWNrXSA9IHtjb3VudDogMCwgcGxhY2VkOiAwLCB3ZWlnaHQ6IDAsIHNpemU6IDB9KTtcbiAgICBfc3RhY2suY291bnQrKztcbiAgICBfc3RhY2sud2VpZ2h0ICs9IHN0YWNrV2VpZ2h0O1xuICB9XG4gIHJldHVybiBzdGFja3M7XG59XG5mdW5jdGlvbiBzZXRMYXlvdXREaW1zKGxheW91dHMsIHBhcmFtcykge1xuICBjb25zdCBzdGFja3MgPSBidWlsZFN0YWNrcyhsYXlvdXRzKTtcbiAgY29uc3Qge3ZCb3hNYXhXaWR0aCwgaEJveE1heEhlaWdodH0gPSBwYXJhbXM7XG4gIGxldCBpLCBpbGVuLCBsYXlvdXQ7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBsYXlvdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGxheW91dCA9IGxheW91dHNbaV07XG4gICAgY29uc3Qge2Z1bGxTaXplfSA9IGxheW91dC5ib3g7XG4gICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXTtcbiAgICBjb25zdCBmYWN0b3IgPSBzdGFjayAmJiBsYXlvdXQuc3RhY2tXZWlnaHQgLyBzdGFjay53ZWlnaHQ7XG4gICAgaWYgKGxheW91dC5ob3Jpem9udGFsKSB7XG4gICAgICBsYXlvdXQud2lkdGggPSBmYWN0b3IgPyBmYWN0b3IgKiB2Qm94TWF4V2lkdGggOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlV2lkdGg7XG4gICAgICBsYXlvdXQuaGVpZ2h0ID0gaEJveE1heEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGF5b3V0LndpZHRoID0gdkJveE1heFdpZHRoO1xuICAgICAgbGF5b3V0LmhlaWdodCA9IGZhY3RvciA/IGZhY3RvciAqIGhCb3hNYXhIZWlnaHQgOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlSGVpZ2h0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhY2tzO1xufVxuZnVuY3Rpb24gYnVpbGRMYXlvdXRCb3hlcyhib3hlcykge1xuICBjb25zdCBsYXlvdXRCb3hlcyA9IHdyYXBCb3hlcyhib3hlcyk7XG4gIGNvbnN0IGZ1bGxTaXplID0gc29ydEJ5V2VpZ2h0KGxheW91dEJveGVzLmZpbHRlcih3cmFwID0+IHdyYXAuYm94LmZ1bGxTaXplKSwgdHJ1ZSk7XG4gIGNvbnN0IGxlZnQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2xlZnQnKSwgdHJ1ZSk7XG4gIGNvbnN0IHJpZ2h0ID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdyaWdodCcpKTtcbiAgY29uc3QgdG9wID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICd0b3AnKSwgdHJ1ZSk7XG4gIGNvbnN0IGJvdHRvbSA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnYm90dG9tJykpO1xuICBjb25zdCBjZW50ZXJIb3Jpem9udGFsID0gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGxheW91dEJveGVzLCAneCcpO1xuICBjb25zdCBjZW50ZXJWZXJ0aWNhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3knKTtcbiAgcmV0dXJuIHtcbiAgICBmdWxsU2l6ZSxcbiAgICBsZWZ0QW5kVG9wOiBsZWZ0LmNvbmNhdCh0b3ApLFxuICAgIHJpZ2h0QW5kQm90dG9tOiByaWdodC5jb25jYXQoY2VudGVyVmVydGljYWwpLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKSxcbiAgICBjaGFydEFyZWE6IGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdjaGFydEFyZWEnKSxcbiAgICB2ZXJ0aWNhbDogbGVmdC5jb25jYXQocmlnaHQpLmNvbmNhdChjZW50ZXJWZXJ0aWNhbCksXG4gICAgaG9yaXpvbnRhbDogdG9wLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCBhLCBiKSB7XG4gIHJldHVybiBNYXRoLm1heChtYXhQYWRkaW5nW2FdLCBjaGFydEFyZWFbYV0pICsgTWF0aC5tYXgobWF4UGFkZGluZ1tiXSwgY2hhcnRBcmVhW2JdKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94UGFkZGluZykge1xuICBtYXhQYWRkaW5nLnRvcCA9IE1hdGgubWF4KG1heFBhZGRpbmcudG9wLCBib3hQYWRkaW5nLnRvcCk7XG4gIG1heFBhZGRpbmcubGVmdCA9IE1hdGgubWF4KG1heFBhZGRpbmcubGVmdCwgYm94UGFkZGluZy5sZWZ0KTtcbiAgbWF4UGFkZGluZy5ib3R0b20gPSBNYXRoLm1heChtYXhQYWRkaW5nLmJvdHRvbSwgYm94UGFkZGluZy5ib3R0b20pO1xuICBtYXhQYWRkaW5nLnJpZ2h0ID0gTWF0aC5tYXgobWF4UGFkZGluZy5yaWdodCwgYm94UGFkZGluZy5yaWdodCk7XG59XG5mdW5jdGlvbiB1cGRhdGVEaW1zKGNoYXJ0QXJlYSwgcGFyYW1zLCBsYXlvdXQsIHN0YWNrcykge1xuICBjb25zdCB7cG9zLCBib3h9ID0gbGF5b3V0O1xuICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gIGlmICghaXNPYmplY3QocG9zKSkge1xuICAgIGlmIChsYXlvdXQuc2l6ZSkge1xuICAgICAgY2hhcnRBcmVhW3Bvc10gLT0gbGF5b3V0LnNpemU7XG4gICAgfVxuICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge3NpemU6IDAsIGNvdW50OiAxfTtcbiAgICBzdGFjay5zaXplID0gTWF0aC5tYXgoc3RhY2suc2l6ZSwgbGF5b3V0Lmhvcml6b250YWwgPyBib3guaGVpZ2h0IDogYm94LndpZHRoKTtcbiAgICBsYXlvdXQuc2l6ZSA9IHN0YWNrLnNpemUgLyBzdGFjay5jb3VudDtcbiAgICBjaGFydEFyZWFbcG9zXSArPSBsYXlvdXQuc2l6ZTtcbiAgfVxuICBpZiAoYm94LmdldFBhZGRpbmcpIHtcbiAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIGJveC5nZXRQYWRkaW5nKCkpO1xuICB9XG4gIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoMCwgcGFyYW1zLm91dGVyV2lkdGggLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICdsZWZ0JywgJ3JpZ2h0JykpO1xuICBjb25zdCBuZXdIZWlnaHQgPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICd0b3AnLCAnYm90dG9tJykpO1xuICBjb25zdCB3aWR0aENoYW5nZWQgPSBuZXdXaWR0aCAhPT0gY2hhcnRBcmVhLnc7XG4gIGNvbnN0IGhlaWdodENoYW5nZWQgPSBuZXdIZWlnaHQgIT09IGNoYXJ0QXJlYS5oO1xuICBjaGFydEFyZWEudyA9IG5ld1dpZHRoO1xuICBjaGFydEFyZWEuaCA9IG5ld0hlaWdodDtcbiAgcmV0dXJuIGxheW91dC5ob3Jpem9udGFsXG4gICAgPyB7c2FtZTogd2lkdGhDaGFuZ2VkLCBvdGhlcjogaGVpZ2h0Q2hhbmdlZH1cbiAgICA6IHtzYW1lOiBoZWlnaHRDaGFuZ2VkLCBvdGhlcjogd2lkdGhDaGFuZ2VkfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU1heFBhZGRpbmcoY2hhcnRBcmVhKSB7XG4gIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgZnVuY3Rpb24gdXBkYXRlUG9zKHBvcykge1xuICAgIGNvbnN0IGNoYW5nZSA9IE1hdGgubWF4KG1heFBhZGRpbmdbcG9zXSAtIGNoYXJ0QXJlYVtwb3NdLCAwKTtcbiAgICBjaGFydEFyZWFbcG9zXSArPSBjaGFuZ2U7XG4gICAgcmV0dXJuIGNoYW5nZTtcbiAgfVxuICBjaGFydEFyZWEueSArPSB1cGRhdGVQb3MoJ3RvcCcpO1xuICBjaGFydEFyZWEueCArPSB1cGRhdGVQb3MoJ2xlZnQnKTtcbiAgdXBkYXRlUG9zKCdyaWdodCcpO1xuICB1cGRhdGVQb3MoJ2JvdHRvbScpO1xufVxuZnVuY3Rpb24gZ2V0TWFyZ2lucyhob3Jpem9udGFsLCBjaGFydEFyZWEpIHtcbiAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICBmdW5jdGlvbiBtYXJnaW5Gb3JQb3NpdGlvbnMocG9zaXRpb25zKSB7XG4gICAgY29uc3QgbWFyZ2luID0ge2xlZnQ6IDAsIHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMH07XG4gICAgcG9zaXRpb25zLmZvckVhY2goKHBvcykgPT4ge1xuICAgICAgbWFyZ2luW3Bvc10gPSBNYXRoLm1heChjaGFydEFyZWFbcG9zXSwgbWF4UGFkZGluZ1twb3NdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWFyZ2luO1xuICB9XG4gIHJldHVybiBob3Jpem9udGFsXG4gICAgPyBtYXJnaW5Gb3JQb3NpdGlvbnMoWydsZWZ0JywgJ3JpZ2h0J10pXG4gICAgOiBtYXJnaW5Gb3JQb3NpdGlvbnMoWyd0b3AnLCAnYm90dG9tJ10pO1xufVxuZnVuY3Rpb24gZml0Qm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgY29uc3QgcmVmaXRCb3hlcyA9IFtdO1xuICBsZXQgaSwgaWxlbiwgbGF5b3V0LCBib3gsIHJlZml0LCBjaGFuZ2VkO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gYm94ZXMubGVuZ3RoLCByZWZpdCA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBsYXlvdXQgPSBib3hlc1tpXTtcbiAgICBib3ggPSBsYXlvdXQuYm94O1xuICAgIGJveC51cGRhdGUoXG4gICAgICBsYXlvdXQud2lkdGggfHwgY2hhcnRBcmVhLncsXG4gICAgICBsYXlvdXQuaGVpZ2h0IHx8IGNoYXJ0QXJlYS5oLFxuICAgICAgZ2V0TWFyZ2lucyhsYXlvdXQuaG9yaXpvbnRhbCwgY2hhcnRBcmVhKVxuICAgICk7XG4gICAgY29uc3Qge3NhbWUsIG90aGVyfSA9IHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKTtcbiAgICByZWZpdCB8PSBzYW1lICYmIHJlZml0Qm94ZXMubGVuZ3RoO1xuICAgIGNoYW5nZWQgPSBjaGFuZ2VkIHx8IG90aGVyO1xuICAgIGlmICghYm94LmZ1bGxTaXplKSB7XG4gICAgICByZWZpdEJveGVzLnB1c2gobGF5b3V0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlZml0ICYmIGZpdEJveGVzKHJlZml0Qm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHx8IGNoYW5nZWQ7XG59XG5mdW5jdGlvbiBzZXRCb3hEaW1zKGJveCwgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGJveC50b3AgPSB0b3A7XG4gIGJveC5sZWZ0ID0gbGVmdDtcbiAgYm94LnJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICBib3guYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICBib3gud2lkdGggPSB3aWR0aDtcbiAgYm94LmhlaWdodCA9IGhlaWdodDtcbn1cbmZ1bmN0aW9uIHBsYWNlQm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgY29uc3QgdXNlclBhZGRpbmcgPSBwYXJhbXMucGFkZGluZztcbiAgbGV0IHt4LCB5fSA9IGNoYXJ0QXJlYTtcbiAgZm9yIChjb25zdCBsYXlvdXQgb2YgYm94ZXMpIHtcbiAgICBjb25zdCBib3ggPSBsYXlvdXQuYm94O1xuICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge2NvdW50OiAxLCBwbGFjZWQ6IDAsIHdlaWdodDogMX07XG4gICAgY29uc3Qgd2VpZ2h0ID0gKGxheW91dC5zdGFja1dlaWdodCAvIHN0YWNrLndlaWdodCkgfHwgMTtcbiAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgIGNvbnN0IHdpZHRoID0gY2hhcnRBcmVhLncgKiB3ZWlnaHQ7XG4gICAgICBjb25zdCBoZWlnaHQgPSBzdGFjay5zaXplIHx8IGJveC5oZWlnaHQ7XG4gICAgICBpZiAoZGVmaW5lZChzdGFjay5zdGFydCkpIHtcbiAgICAgICAgeSA9IHN0YWNrLnN0YXJ0O1xuICAgICAgfVxuICAgICAgaWYgKGJveC5mdWxsU2l6ZSkge1xuICAgICAgICBzZXRCb3hEaW1zKGJveCwgdXNlclBhZGRpbmcubGVmdCwgeSwgcGFyYW1zLm91dGVyV2lkdGggLSB1c2VyUGFkZGluZy5yaWdodCAtIHVzZXJQYWRkaW5nLmxlZnQsIGhlaWdodCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRCb3hEaW1zKGJveCwgY2hhcnRBcmVhLmxlZnQgKyBzdGFjay5wbGFjZWQsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgICAgc3RhY2suc3RhcnQgPSB5O1xuICAgICAgc3RhY2sucGxhY2VkICs9IHdpZHRoO1xuICAgICAgeSA9IGJveC5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGNoYXJ0QXJlYS5oICogd2VpZ2h0O1xuICAgICAgY29uc3Qgd2lkdGggPSBzdGFjay5zaXplIHx8IGJveC53aWR0aDtcbiAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICB4ID0gc3RhY2suc3RhcnQ7XG4gICAgICB9XG4gICAgICBpZiAoYm94LmZ1bGxTaXplKSB7XG4gICAgICAgIHNldEJveERpbXMoYm94LCB4LCB1c2VyUGFkZGluZy50b3AsIHdpZHRoLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSB1c2VyUGFkZGluZy5ib3R0b20gLSB1c2VyUGFkZGluZy50b3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0Qm94RGltcyhib3gsIHgsIGNoYXJ0QXJlYS50b3AgKyBzdGFjay5wbGFjZWQsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgICAgc3RhY2suc3RhcnQgPSB4O1xuICAgICAgc3RhY2sucGxhY2VkICs9IGhlaWdodDtcbiAgICAgIHggPSBib3gucmlnaHQ7XG4gICAgfVxuICB9XG4gIGNoYXJ0QXJlYS54ID0geDtcbiAgY2hhcnRBcmVhLnkgPSB5O1xufVxuZGVmYXVsdHMuc2V0KCdsYXlvdXQnLCB7XG4gIGF1dG9QYWRkaW5nOiB0cnVlLFxuICBwYWRkaW5nOiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH1cbn0pO1xudmFyIGxheW91dHMgPSB7XG4gIGFkZEJveChjaGFydCwgaXRlbSkge1xuICAgIGlmICghY2hhcnQuYm94ZXMpIHtcbiAgICAgIGNoYXJ0LmJveGVzID0gW107XG4gICAgfVxuICAgIGl0ZW0uZnVsbFNpemUgPSBpdGVtLmZ1bGxTaXplIHx8IGZhbHNlO1xuICAgIGl0ZW0ucG9zaXRpb24gPSBpdGVtLnBvc2l0aW9uIHx8ICd0b3AnO1xuICAgIGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcbiAgICBpdGVtLl9sYXllcnMgPSBpdGVtLl9sYXllcnMgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgejogMCxcbiAgICAgICAgZHJhdyhjaGFydEFyZWEpIHtcbiAgICAgICAgICBpdGVtLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgfTtcbiAgICBjaGFydC5ib3hlcy5wdXNoKGl0ZW0pO1xuICB9LFxuICByZW1vdmVCb3goY2hhcnQsIGxheW91dEl0ZW0pIHtcbiAgICBjb25zdCBpbmRleCA9IGNoYXJ0LmJveGVzID8gY2hhcnQuYm94ZXMuaW5kZXhPZihsYXlvdXRJdGVtKSA6IC0xO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGNoYXJ0LmJveGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9LFxuICBjb25maWd1cmUoY2hhcnQsIGl0ZW0sIG9wdGlvbnMpIHtcbiAgICBpdGVtLmZ1bGxTaXplID0gb3B0aW9ucy5mdWxsU2l6ZTtcbiAgICBpdGVtLnBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcbiAgICBpdGVtLndlaWdodCA9IG9wdGlvbnMud2VpZ2h0O1xuICB9LFxuICB1cGRhdGUoY2hhcnQsIHdpZHRoLCBoZWlnaHQsIG1pblBhZGRpbmcpIHtcbiAgICBpZiAoIWNoYXJ0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcoY2hhcnQub3B0aW9ucy5sYXlvdXQucGFkZGluZyk7XG4gICAgY29uc3QgYXZhaWxhYmxlV2lkdGggPSBNYXRoLm1heCh3aWR0aCAtIHBhZGRpbmcud2lkdGgsIDApO1xuICAgIGNvbnN0IGF2YWlsYWJsZUhlaWdodCA9IE1hdGgubWF4KGhlaWdodCAtIHBhZGRpbmcuaGVpZ2h0LCAwKTtcbiAgICBjb25zdCBib3hlcyA9IGJ1aWxkTGF5b3V0Qm94ZXMoY2hhcnQuYm94ZXMpO1xuICAgIGNvbnN0IHZlcnRpY2FsQm94ZXMgPSBib3hlcy52ZXJ0aWNhbDtcbiAgICBjb25zdCBob3Jpem9udGFsQm94ZXMgPSBib3hlcy5ob3Jpem9udGFsO1xuICAgIGVhY2goY2hhcnQuYm94ZXMsIGJveCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGJveC5iZWZvcmVMYXlvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYm94LmJlZm9yZUxheW91dCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHZpc2libGVWZXJ0aWNhbEJveENvdW50ID0gdmVydGljYWxCb3hlcy5yZWR1Y2UoKHRvdGFsLCB3cmFwKSA9PlxuICAgICAgd3JhcC5ib3gub3B0aW9ucyAmJiB3cmFwLmJveC5vcHRpb25zLmRpc3BsYXkgPT09IGZhbHNlID8gdG90YWwgOiB0b3RhbCArIDEsIDApIHx8IDE7XG4gICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICBvdXRlcldpZHRoOiB3aWR0aCxcbiAgICAgIG91dGVySGVpZ2h0OiBoZWlnaHQsXG4gICAgICBwYWRkaW5nLFxuICAgICAgYXZhaWxhYmxlV2lkdGgsXG4gICAgICBhdmFpbGFibGVIZWlnaHQsXG4gICAgICB2Qm94TWF4V2lkdGg6IGF2YWlsYWJsZVdpZHRoIC8gMiAvIHZpc2libGVWZXJ0aWNhbEJveENvdW50LFxuICAgICAgaEJveE1heEhlaWdodDogYXZhaWxhYmxlSGVpZ2h0IC8gMlxuICAgIH0pO1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBPYmplY3QuYXNzaWduKHt9LCBwYWRkaW5nKTtcbiAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIHRvUGFkZGluZyhtaW5QYWRkaW5nKSk7XG4gICAgY29uc3QgY2hhcnRBcmVhID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBtYXhQYWRkaW5nLFxuICAgICAgdzogYXZhaWxhYmxlV2lkdGgsXG4gICAgICBoOiBhdmFpbGFibGVIZWlnaHQsXG4gICAgICB4OiBwYWRkaW5nLmxlZnQsXG4gICAgICB5OiBwYWRkaW5nLnRvcFxuICAgIH0sIHBhZGRpbmcpO1xuICAgIGNvbnN0IHN0YWNrcyA9IHNldExheW91dERpbXModmVydGljYWxCb3hlcy5jb25jYXQoaG9yaXpvbnRhbEJveGVzKSwgcGFyYW1zKTtcbiAgICBmaXRCb3hlcyhib3hlcy5mdWxsU2l6ZSwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgaWYgKGZpdEJveGVzKGhvcml6b250YWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykpIHtcbiAgICAgIGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgIH1cbiAgICBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSk7XG4gICAgcGxhY2VCb3hlcyhib3hlcy5sZWZ0QW5kVG9wLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBjaGFydEFyZWEueCArPSBjaGFydEFyZWEudztcbiAgICBjaGFydEFyZWEueSArPSBjaGFydEFyZWEuaDtcbiAgICBwbGFjZUJveGVzKGJveGVzLnJpZ2h0QW5kQm90dG9tLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBjaGFydC5jaGFydEFyZWEgPSB7XG4gICAgICBsZWZ0OiBjaGFydEFyZWEubGVmdCxcbiAgICAgIHRvcDogY2hhcnRBcmVhLnRvcCxcbiAgICAgIHJpZ2h0OiBjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS53LFxuICAgICAgYm90dG9tOiBjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmgsXG4gICAgICBoZWlnaHQ6IGNoYXJ0QXJlYS5oLFxuICAgICAgd2lkdGg6IGNoYXJ0QXJlYS53LFxuICAgIH07XG4gICAgZWFjaChib3hlcy5jaGFydEFyZWEsIChsYXlvdXQpID0+IHtcbiAgICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgICBPYmplY3QuYXNzaWduKGJveCwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgIGJveC51cGRhdGUoY2hhcnRBcmVhLncsIGNoYXJ0QXJlYS5oLCB7bGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwfSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmNsYXNzIEJhc2VQbGF0Zm9ybSB7XG4gIGFjcXVpcmVDb250ZXh0KGNhbnZhcywgYXNwZWN0UmF0aW8pIHt9XG4gIHJlbGVhc2VDb250ZXh0KGNvbnRleHQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYWRkRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHt9XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuICBnZXREZXZpY2VQaXhlbFJhdGlvKCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGdldE1heGltdW1TaXplKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCB8fCBlbGVtZW50LndpZHRoKTtcbiAgICBoZWlnaHQgPSBoZWlnaHQgfHwgZWxlbWVudC5oZWlnaHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0OiBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IE1hdGguZmxvb3Iod2lkdGggLyBhc3BlY3RSYXRpbykgOiBoZWlnaHQpXG4gICAgfTtcbiAgfVxuICBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgfVxufVxuXG5jbGFzcyBCYXNpY1BsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiAgYWNxdWlyZUNvbnRleHQoaXRlbSkge1xuICAgIHJldHVybiBpdGVtICYmIGl0ZW0uZ2V0Q29udGV4dCAmJiBpdGVtLmdldENvbnRleHQoJzJkJykgfHwgbnVsbDtcbiAgfVxuICB1cGRhdGVDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnLm9wdGlvbnMuYW5pbWF0aW9uID0gZmFsc2U7XG4gIH1cbn1cblxuY29uc3QgRVhQQU5ET19LRVkgPSAnJGNoYXJ0anMnO1xuY29uc3QgRVZFTlRfVFlQRVMgPSB7XG4gIHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3VjaGVuZDogJ21vdXNldXAnLFxuICBwb2ludGVyZW50ZXI6ICdtb3VzZWVudGVyJyxcbiAgcG9pbnRlcmRvd246ICdtb3VzZWRvd24nLFxuICBwb2ludGVybW92ZTogJ21vdXNlbW92ZScsXG4gIHBvaW50ZXJ1cDogJ21vdXNldXAnLFxuICBwb2ludGVybGVhdmU6ICdtb3VzZW91dCcsXG4gIHBvaW50ZXJvdXQ6ICdtb3VzZW91dCdcbn07XG5jb25zdCBpc051bGxPckVtcHR5ID0gdmFsdWUgPT4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnO1xuZnVuY3Rpb24gaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gIGNvbnN0IHN0eWxlID0gY2FudmFzLnN0eWxlO1xuICBjb25zdCByZW5kZXJIZWlnaHQgPSBjYW52YXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcbiAgY29uc3QgcmVuZGVyV2lkdGggPSBjYW52YXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xuICBjYW52YXNbRVhQQU5ET19LRVldID0ge1xuICAgIGluaXRpYWw6IHtcbiAgICAgIGhlaWdodDogcmVuZGVySGVpZ2h0LFxuICAgICAgd2lkdGg6IHJlbmRlcldpZHRoLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgZGlzcGxheTogc3R5bGUuZGlzcGxheSxcbiAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQsXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aFxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3R5bGUuZGlzcGxheSA9IHN0eWxlLmRpc3BsYXkgfHwgJ2Jsb2NrJztcbiAgc3R5bGUuYm94U2l6aW5nID0gc3R5bGUuYm94U2l6aW5nIHx8ICdib3JkZXItYm94JztcbiAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVyV2lkdGgpKSB7XG4gICAgY29uc3QgZGlzcGxheVdpZHRoID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ3dpZHRoJyk7XG4gICAgaWYgKGRpc3BsYXlXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYW52YXMud2lkdGggPSBkaXNwbGF5V2lkdGg7XG4gICAgfVxuICB9XG4gIGlmIChpc051bGxPckVtcHR5KHJlbmRlckhlaWdodCkpIHtcbiAgICBpZiAoY2FudmFzLnN0eWxlLmhlaWdodCA9PT0gJycpIHtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggLyAoYXNwZWN0UmF0aW8gfHwgMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpc3BsYXlIZWlnaHQgPSByZWFkVXNlZFNpemUoY2FudmFzLCAnaGVpZ2h0Jyk7XG4gICAgICBpZiAoZGlzcGxheUhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2FudmFzO1xufVxuY29uc3QgZXZlbnRMaXN0ZW5lck9wdGlvbnMgPSBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID8ge3Bhc3NpdmU6IHRydWV9IDogZmFsc2U7XG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihub2RlLCB0eXBlLCBsaXN0ZW5lcikge1xuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjaGFydC5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkge1xuICBjb25zdCB0eXBlID0gRVZFTlRfVFlQRVNbZXZlbnQudHlwZV0gfHwgZXZlbnQudHlwZTtcbiAgY29uc3Qge3gsIHl9ID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihldmVudCwgY2hhcnQpO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgY2hhcnQsXG4gICAgbmF0aXZlOiBldmVudCxcbiAgICB4OiB4ICE9PSB1bmRlZmluZWQgPyB4IDogbnVsbCxcbiAgICB5OiB5ICE9PSB1bmRlZmluZWQgPyB5IDogbnVsbCxcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vZGVMaXN0Q29udGFpbnMobm9kZUxpc3QsIGNhbnZhcykge1xuICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZUxpc3QpIHtcbiAgICBpZiAobm9kZSA9PT0gY2FudmFzIHx8IG5vZGUuY29udGFpbnMoY2FudmFzKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVBdHRhY2hPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgIGxldCB0cmlnZ2VyID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICB0cmlnZ2VyID0gdHJpZ2dlciB8fCBub2RlTGlzdENvbnRhaW5zKGVudHJ5LmFkZGVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICB0cmlnZ2VyID0gdHJpZ2dlciAmJiAhbm9kZUxpc3RDb250YWlucyhlbnRyeS5yZW1vdmVkTm9kZXMsIGNhbnZhcyk7XG4gICAgfVxuICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cbiAgfSk7XG4gIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KTtcbiAgcmV0dXJuIG9ic2VydmVyO1xufVxuZnVuY3Rpb24gY3JlYXRlRGV0YWNoT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICBsZXQgdHJpZ2dlciA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgfHwgbm9kZUxpc3RDb250YWlucyhlbnRyeS5yZW1vdmVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICB0cmlnZ2VyID0gdHJpZ2dlciAmJiAhbm9kZUxpc3RDb250YWlucyhlbnRyeS5hZGRlZE5vZGVzLCBjYW52YXMpO1xuICAgIH1cbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG4gIH0pO1xuICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlfSk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cbmNvbnN0IGRycExpc3RlbmluZ0NoYXJ0cyA9IG5ldyBNYXAoKTtcbmxldCBvbGREZXZpY2VQaXhlbFJhdGlvID0gMDtcbmZ1bmN0aW9uIG9uV2luZG93UmVzaXplKCkge1xuICBjb25zdCBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgaWYgKGRwciA9PT0gb2xkRGV2aWNlUGl4ZWxSYXRpbykge1xuICAgIHJldHVybjtcbiAgfVxuICBvbGREZXZpY2VQaXhlbFJhdGlvID0gZHByO1xuICBkcnBMaXN0ZW5pbmdDaGFydHMuZm9yRWFjaCgocmVzaXplLCBjaGFydCkgPT4ge1xuICAgIGlmIChjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAhPT0gZHByKSB7XG4gICAgICByZXNpemUoKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gbGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQsIHJlc2l6ZSkge1xuICBpZiAoIWRycExpc3RlbmluZ0NoYXJ0cy5zaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgfVxuICBkcnBMaXN0ZW5pbmdDaGFydHMuc2V0KGNoYXJ0LCByZXNpemUpO1xufVxuZnVuY3Rpb24gdW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCkge1xuICBkcnBMaXN0ZW5pbmdDaGFydHMuZGVsZXRlKGNoYXJ0KTtcbiAgaWYgKCFkcnBMaXN0ZW5pbmdDaGFydHMuc2l6ZSkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlc2l6ZU9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGNhbnZhcyAmJiBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCByZXNpemUgPSB0aHJvdHRsZWQoKHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICBjb25zdCB3ID0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuICAgIGxpc3RlbmVyKHdpZHRoLCBoZWlnaHQpO1xuICAgIGlmICh3IDwgY29udGFpbmVyLmNsaWVudFdpZHRoKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cbiAgfSwgd2luZG93KTtcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgY29uc3QgZW50cnkgPSBlbnRyaWVzWzBdO1xuICAgIGNvbnN0IHdpZHRoID0gZW50cnkuY29udGVudFJlY3Qud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gZW50cnkuY29udGVudFJlY3QuaGVpZ2h0O1xuICAgIGlmICh3aWR0aCA9PT0gMCAmJiBoZWlnaHQgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICB9KTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShjb250YWluZXIpO1xuICBsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCwgcmVzaXplKTtcbiAgcmV0dXJuIG9ic2VydmVyO1xufVxuZnVuY3Rpb24gcmVsZWFzZU9ic2VydmVyKGNoYXJ0LCB0eXBlLCBvYnNlcnZlcikge1xuICBpZiAob2JzZXJ2ZXIpIHtcbiAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gIH1cbiAgaWYgKHR5cGUgPT09ICdyZXNpemUnKSB7XG4gICAgdW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVByb3h5QW5kTGlzdGVuKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGNvbnN0IHByb3h5ID0gdGhyb3R0bGVkKChldmVudCkgPT4ge1xuICAgIGlmIChjaGFydC5jdHggIT09IG51bGwpIHtcbiAgICAgIGxpc3RlbmVyKGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpKTtcbiAgICB9XG4gIH0sIGNoYXJ0LCAoYXJncykgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0gYXJnc1swXTtcbiAgICByZXR1cm4gW2V2ZW50LCBldmVudC5vZmZzZXRYLCBldmVudC5vZmZzZXRZXTtcbiAgfSk7XG4gIGFkZExpc3RlbmVyKGNhbnZhcywgdHlwZSwgcHJveHkpO1xuICByZXR1cm4gcHJveHk7XG59XG5jbGFzcyBEb21QbGF0Zm9ybSBleHRlbmRzIEJhc2VQbGF0Zm9ybSB7XG4gIGFjcXVpcmVDb250ZXh0KGNhbnZhcywgYXNwZWN0UmF0aW8pIHtcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzICYmIGNhbnZhcy5nZXRDb250ZXh0ICYmIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzID09PSBjYW52YXMpIHtcbiAgICAgIGluaXRDYW52YXMoY2FudmFzLCBhc3BlY3RSYXRpbyk7XG4gICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmVsZWFzZUNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNvbnRleHQuY2FudmFzO1xuICAgIGlmICghY2FudmFzW0VYUEFORE9fS0VZXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBpbml0aWFsID0gY2FudmFzW0VYUEFORE9fS0VZXS5pbml0aWFsO1xuICAgIFsnaGVpZ2h0JywgJ3dpZHRoJ10uZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBpbml0aWFsW3Byb3BdO1xuICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKHByb3AsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBzdHlsZSA9IGluaXRpYWwuc3R5bGUgfHwge307XG4gICAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY2FudmFzLnN0eWxlW2tleV0gPSBzdHlsZVtrZXldO1xuICAgIH0pO1xuICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICBkZWxldGUgY2FudmFzW0VYUEFORE9fS0VZXTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhZGRFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSk7XG4gICAgY29uc3QgcHJveGllcyA9IGNoYXJ0LiRwcm94aWVzIHx8IChjaGFydC4kcHJveGllcyA9IHt9KTtcbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgIGF0dGFjaDogY3JlYXRlQXR0YWNoT2JzZXJ2ZXIsXG4gICAgICBkZXRhY2g6IGNyZWF0ZURldGFjaE9ic2VydmVyLFxuICAgICAgcmVzaXplOiBjcmVhdGVSZXNpemVPYnNlcnZlclxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3R5cGVdIHx8IGNyZWF0ZVByb3h5QW5kTGlzdGVuO1xuICAgIHByb3hpZXNbdHlwZV0gPSBoYW5kbGVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSkge1xuICAgIGNvbnN0IHByb3hpZXMgPSBjaGFydC4kcHJveGllcyB8fCAoY2hhcnQuJHByb3hpZXMgPSB7fSk7XG4gICAgY29uc3QgcHJveHkgPSBwcm94aWVzW3R5cGVdO1xuICAgIGlmICghcHJveHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICBhdHRhY2g6IHJlbGVhc2VPYnNlcnZlcixcbiAgICAgIGRldGFjaDogcmVsZWFzZU9ic2VydmVyLFxuICAgICAgcmVzaXplOiByZWxlYXNlT2JzZXJ2ZXJcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1t0eXBlXSB8fCByZW1vdmVMaXN0ZW5lcjtcbiAgICBoYW5kbGVyKGNoYXJ0LCB0eXBlLCBwcm94eSk7XG4gICAgcHJveGllc1t0eXBlXSA9IHVuZGVmaW5lZDtcbiAgfVxuICBnZXREZXZpY2VQaXhlbFJhdGlvKCkge1xuICAgIHJldHVybiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgfVxuICBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgcmV0dXJuIGdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pO1xuICB9XG4gIGlzQXR0YWNoZWQoY2FudmFzKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICByZXR1cm4gISEoY29udGFpbmVyICYmIGNvbnRhaW5lci5pc0Nvbm5lY3RlZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RldGVjdFBsYXRmb3JtKGNhbnZhcykge1xuICBpZiAoIV9pc0RvbVN1cHBvcnRlZCgpIHx8ICh0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAndW5kZWZpbmVkJyAmJiBjYW52YXMgaW5zdGFuY2VvZiBPZmZzY3JlZW5DYW52YXMpKSB7XG4gICAgcmV0dXJuIEJhc2ljUGxhdGZvcm07XG4gIH1cbiAgcmV0dXJuIERvbVBsYXRmb3JtO1xufVxuXG5jbGFzcyBQbHVnaW5TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5faW5pdCA9IFtdO1xuICB9XG4gIG5vdGlmeShjaGFydCwgaG9vaywgYXJncywgZmlsdGVyKSB7XG4gICAgaWYgKGhvb2sgPT09ICdiZWZvcmVJbml0Jykge1xuICAgICAgdGhpcy5faW5pdCA9IHRoaXMuX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCB0cnVlKTtcbiAgICAgIHRoaXMuX25vdGlmeSh0aGlzLl9pbml0LCBjaGFydCwgJ2luc3RhbGwnKTtcbiAgICB9XG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSBmaWx0ZXIgPyB0aGlzLl9kZXNjcmlwdG9ycyhjaGFydCkuZmlsdGVyKGZpbHRlcikgOiB0aGlzLl9kZXNjcmlwdG9ycyhjaGFydCk7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgaG9vaywgYXJncyk7XG4gICAgaWYgKGhvb2sgPT09ICdhZnRlckRlc3Ryb3knKSB7XG4gICAgICB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCAnc3RvcCcpO1xuICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAndW5pbnN0YWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsIGhvb2ssIGFyZ3MpIHtcbiAgICBhcmdzID0gYXJncyB8fCB7fTtcbiAgICBmb3IgKGNvbnN0IGRlc2NyaXB0b3Igb2YgZGVzY3JpcHRvcnMpIHtcbiAgICAgIGNvbnN0IHBsdWdpbiA9IGRlc2NyaXB0b3IucGx1Z2luO1xuICAgICAgY29uc3QgbWV0aG9kID0gcGx1Z2luW2hvb2tdO1xuICAgICAgY29uc3QgcGFyYW1zID0gW2NoYXJ0LCBhcmdzLCBkZXNjcmlwdG9yLm9wdGlvbnNdO1xuICAgICAgaWYgKGNhbGxiYWNrKG1ldGhvZCwgcGFyYW1zLCBwbHVnaW4pID09PSBmYWxzZSAmJiBhcmdzLmNhbmNlbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbnZhbGlkYXRlKCkge1xuICAgIGlmICghaXNOdWxsT3JVbmRlZih0aGlzLl9jYWNoZSkpIHtcbiAgICAgIHRoaXMuX29sZENhY2hlID0gdGhpcy5fY2FjaGU7XG4gICAgICB0aGlzLl9jYWNoZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgX2Rlc2NyaXB0b3JzKGNoYXJ0KSB7XG4gICAgaWYgKHRoaXMuX2NhY2hlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGU7XG4gICAgfVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gdGhpcy5fY2FjaGUgPSB0aGlzLl9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCk7XG4gICAgdGhpcy5fbm90aWZ5U3RhdGVDaGFuZ2VzKGNoYXJ0KTtcbiAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gIH1cbiAgX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBhbGwpIHtcbiAgICBjb25zdCBjb25maWcgPSBjaGFydCAmJiBjaGFydC5jb25maWc7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHZhbHVlT3JEZWZhdWx0KGNvbmZpZy5vcHRpb25zICYmIGNvbmZpZy5vcHRpb25zLnBsdWdpbnMsIHt9KTtcbiAgICBjb25zdCBwbHVnaW5zID0gYWxsUGx1Z2lucyhjb25maWcpO1xuICAgIHJldHVybiBvcHRpb25zID09PSBmYWxzZSAmJiAhYWxsID8gW10gOiBjcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgcGx1Z2lucywgb3B0aW9ucywgYWxsKTtcbiAgfVxuICBfbm90aWZ5U3RhdGVDaGFuZ2VzKGNoYXJ0KSB7XG4gICAgY29uc3QgcHJldmlvdXNEZXNjcmlwdG9ycyA9IHRoaXMuX29sZENhY2hlIHx8IFtdO1xuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gdGhpcy5fY2FjaGU7XG4gICAgY29uc3QgZGlmZiA9IChhLCBiKSA9PiBhLmZpbHRlcih4ID0+ICFiLnNvbWUoeSA9PiB4LnBsdWdpbi5pZCA9PT0geS5wbHVnaW4uaWQpKTtcbiAgICB0aGlzLl9ub3RpZnkoZGlmZihwcmV2aW91c0Rlc2NyaXB0b3JzLCBkZXNjcmlwdG9ycyksIGNoYXJ0LCAnc3RvcCcpO1xuICAgIHRoaXMuX25vdGlmeShkaWZmKGRlc2NyaXB0b3JzLCBwcmV2aW91c0Rlc2NyaXB0b3JzKSwgY2hhcnQsICdzdGFydCcpO1xuICB9XG59XG5mdW5jdGlvbiBhbGxQbHVnaW5zKGNvbmZpZykge1xuICBjb25zdCBsb2NhbElkcyA9IHt9O1xuICBjb25zdCBwbHVnaW5zID0gW107XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhyZWdpc3RyeS5wbHVnaW5zLml0ZW1zKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgcGx1Z2lucy5wdXNoKHJlZ2lzdHJ5LmdldFBsdWdpbihrZXlzW2ldKSk7XG4gIH1cbiAgY29uc3QgbG9jYWwgPSBjb25maWcucGx1Z2lucyB8fCBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhbC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBsdWdpbiA9IGxvY2FsW2ldO1xuICAgIGlmIChwbHVnaW5zLmluZGV4T2YocGx1Z2luKSA9PT0gLTEpIHtcbiAgICAgIHBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgICAgbG9jYWxJZHNbcGx1Z2luLmlkXSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB7cGx1Z2lucywgbG9jYWxJZHN9O1xufVxuZnVuY3Rpb24gZ2V0T3B0cyhvcHRpb25zLCBhbGwpIHtcbiAgaWYgKCFhbGwgJiYgb3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCB7cGx1Z2lucywgbG9jYWxJZHN9LCBvcHRpb25zLCBhbGwpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IGNvbnRleHQgPSBjaGFydC5nZXRDb250ZXh0KCk7XG4gIGZvciAoY29uc3QgcGx1Z2luIG9mIHBsdWdpbnMpIHtcbiAgICBjb25zdCBpZCA9IHBsdWdpbi5pZDtcbiAgICBjb25zdCBvcHRzID0gZ2V0T3B0cyhvcHRpb25zW2lkXSwgYWxsKTtcbiAgICBpZiAob3B0cyA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgIHBsdWdpbixcbiAgICAgIG9wdGlvbnM6IHBsdWdpbk9wdHMoY2hhcnQuY29uZmlnLCB7cGx1Z2luLCBsb2NhbDogbG9jYWxJZHNbaWRdfSwgb3B0cywgY29udGV4dClcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGx1Z2luT3B0cyhjb25maWcsIHtwbHVnaW4sIGxvY2FsfSwgb3B0cywgY29udGV4dCkge1xuICBjb25zdCBrZXlzID0gY29uZmlnLnBsdWdpblNjb3BlS2V5cyhwbHVnaW4pO1xuICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKG9wdHMsIGtleXMpO1xuICBpZiAobG9jYWwgJiYgcGx1Z2luLmRlZmF1bHRzKSB7XG4gICAgc2NvcGVzLnB1c2gocGx1Z2luLmRlZmF1bHRzKTtcbiAgfVxuICByZXR1cm4gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgWycnXSwge1xuICAgIHNjcmlwdGFibGU6IGZhbHNlLFxuICAgIGluZGV4YWJsZTogZmFsc2UsXG4gICAgYWxsS2V5czogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgZGF0YXNldERlZmF1bHRzID0gZGVmYXVsdHMuZGF0YXNldHNbdHlwZV0gfHwge307XG4gIGNvbnN0IGRhdGFzZXRPcHRpb25zID0gKG9wdGlvbnMuZGF0YXNldHMgfHwge30pW3R5cGVdIHx8IHt9O1xuICByZXR1cm4gZGF0YXNldE9wdGlvbnMuaW5kZXhBeGlzIHx8IG9wdGlvbnMuaW5kZXhBeGlzIHx8IGRhdGFzZXREZWZhdWx0cy5pbmRleEF4aXMgfHwgJ3gnO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChpZCwgaW5kZXhBeGlzKSB7XG4gIGxldCBheGlzID0gaWQ7XG4gIGlmIChpZCA9PT0gJ19pbmRleF8nKSB7XG4gICAgYXhpcyA9IGluZGV4QXhpcztcbiAgfSBlbHNlIGlmIChpZCA9PT0gJ192YWx1ZV8nKSB7XG4gICAgYXhpcyA9IGluZGV4QXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xuICB9XG4gIHJldHVybiBheGlzO1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBpbmRleEF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09IGluZGV4QXhpcyA/ICdfaW5kZXhfJyA6ICdfdmFsdWVfJztcbn1cbmZ1bmN0aW9uIGF4aXNGcm9tUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICByZXR1cm4gJ3gnO1xuICB9XG4gIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgcmV0dXJuICd5JztcbiAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKSB7XG4gIGlmIChpZCA9PT0gJ3gnIHx8IGlkID09PSAneScpIHtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbiAgcmV0dXJuIHNjYWxlT3B0aW9ucy5heGlzIHx8IGF4aXNGcm9tUG9zaXRpb24oc2NhbGVPcHRpb25zLnBvc2l0aW9uKSB8fCBpZC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIG1lcmdlU2NhbGVDb25maWcoY29uZmlnLCBvcHRpb25zKSB7XG4gIGNvbnN0IGNoYXJ0RGVmYXVsdHMgPSBvdmVycmlkZXNbY29uZmlnLnR5cGVdIHx8IHtzY2FsZXM6IHt9fTtcbiAgY29uc3QgY29uZmlnU2NhbGVzID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG4gIGNvbnN0IGNoYXJ0SW5kZXhBeGlzID0gZ2V0SW5kZXhBeGlzKGNvbmZpZy50eXBlLCBvcHRpb25zKTtcbiAgY29uc3QgZmlyc3RJRHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBzY2FsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBPYmplY3Qua2V5cyhjb25maWdTY2FsZXMpLmZvckVhY2goaWQgPT4ge1xuICAgIGNvbnN0IHNjYWxlQ29uZiA9IGNvbmZpZ1NjYWxlc1tpZF07XG4gICAgaWYgKCFpc09iamVjdChzY2FsZUNvbmYpKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcihgSW52YWxpZCBzY2FsZSBjb25maWd1cmF0aW9uIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICB9XG4gICAgaWYgKHNjYWxlQ29uZi5fcHJveHkpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLndhcm4oYElnbm9yaW5nIHJlc29sdmVyIHBhc3NlZCBhcyBvcHRpb25zIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICB9XG4gICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlQ29uZik7XG4gICAgY29uc3QgZGVmYXVsdElkID0gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBjaGFydEluZGV4QXhpcyk7XG4gICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGNoYXJ0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgIGZpcnN0SURzW2F4aXNdID0gZmlyc3RJRHNbYXhpc10gfHwgaWQ7XG4gICAgc2NhbGVzW2lkXSA9IG1lcmdlSWYoT2JqZWN0LmNyZWF0ZShudWxsKSwgW3theGlzfSwgc2NhbGVDb25mLCBkZWZhdWx0U2NhbGVPcHRpb25zW2F4aXNdLCBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJZF1dKTtcbiAgfSk7XG4gIGNvbmZpZy5kYXRhLmRhdGFzZXRzLmZvckVhY2goZGF0YXNldCA9PiB7XG4gICAgY29uc3QgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCBjb25maWcudHlwZTtcbiAgICBjb25zdCBpbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucyk7XG4gICAgY29uc3QgZGF0YXNldERlZmF1bHRzID0gb3ZlcnJpZGVzW3R5cGVdIHx8IHt9O1xuICAgIGNvbnN0IGRlZmF1bHRTY2FsZU9wdGlvbnMgPSBkYXRhc2V0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTY2FsZU9wdGlvbnMpLmZvckVhY2goZGVmYXVsdElEID0+IHtcbiAgICAgIGNvbnN0IGF4aXMgPSBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGRlZmF1bHRJRCwgaW5kZXhBeGlzKTtcbiAgICAgIGNvbnN0IGlkID0gZGF0YXNldFtheGlzICsgJ0F4aXNJRCddIHx8IGZpcnN0SURzW2F4aXNdIHx8IGF4aXM7XG4gICAgICBzY2FsZXNbaWRdID0gc2NhbGVzW2lkXSB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgbWVyZ2VJZihzY2FsZXNbaWRdLCBbe2F4aXN9LCBjb25maWdTY2FsZXNbaWRdLCBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJRF1dKTtcbiAgICB9KTtcbiAgfSk7XG4gIE9iamVjdC5rZXlzKHNjYWxlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IHNjYWxlID0gc2NhbGVzW2tleV07XG4gICAgbWVyZ2VJZihzY2FsZSwgW2RlZmF1bHRzLnNjYWxlc1tzY2FsZS50eXBlXSwgZGVmYXVsdHMuc2NhbGVdKTtcbiAgfSk7XG4gIHJldHVybiBzY2FsZXM7XG59XG5mdW5jdGlvbiBpbml0T3B0aW9ucyhjb25maWcpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zIHx8IChjb25maWcub3B0aW9ucyA9IHt9KTtcbiAgb3B0aW9ucy5wbHVnaW5zID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5wbHVnaW5zLCB7fSk7XG4gIG9wdGlvbnMuc2NhbGVzID0gbWVyZ2VTY2FsZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW5pdERhdGEoZGF0YSkge1xuICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgZGF0YS5kYXRhc2V0cyA9IGRhdGEuZGF0YXNldHMgfHwgW107XG4gIGRhdGEubGFiZWxzID0gZGF0YS5sYWJlbHMgfHwgW107XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gaW5pdENvbmZpZyhjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25maWcuZGF0YSA9IGluaXREYXRhKGNvbmZpZy5kYXRhKTtcbiAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgcmV0dXJuIGNvbmZpZztcbn1cbmNvbnN0IGtleUNhY2hlID0gbmV3IE1hcCgpO1xuY29uc3Qga2V5c0NhY2hlZCA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGNhY2hlZEtleXMoY2FjaGVLZXksIGdlbmVyYXRlKSB7XG4gIGxldCBrZXlzID0ga2V5Q2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKCFrZXlzKSB7XG4gICAga2V5cyA9IGdlbmVyYXRlKCk7XG4gICAga2V5Q2FjaGUuc2V0KGNhY2hlS2V5LCBrZXlzKTtcbiAgICBrZXlzQ2FjaGVkLmFkZChrZXlzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmNvbnN0IGFkZElmRm91bmQgPSAoc2V0LCBvYmosIGtleSkgPT4ge1xuICBjb25zdCBvcHRzID0gcmVzb2x2ZU9iamVjdEtleShvYmosIGtleSk7XG4gIGlmIChvcHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICBzZXQuYWRkKG9wdHMpO1xuICB9XG59O1xuY2xhc3MgQ29uZmlnIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnID0gaW5pdENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX3Njb3BlQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fcmVzb2x2ZXJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuICBnZXQgcGxhdGZvcm0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbGF0Zm9ybTtcbiAgfVxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnR5cGU7XG4gIH1cbiAgc2V0IHR5cGUodHlwZSkge1xuICAgIHRoaXMuX2NvbmZpZy50eXBlID0gdHlwZTtcbiAgfVxuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmRhdGE7XG4gIH1cbiAgc2V0IGRhdGEoZGF0YSkge1xuICAgIHRoaXMuX2NvbmZpZy5kYXRhID0gaW5pdERhdGEoZGF0YSk7XG4gIH1cbiAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5vcHRpb25zO1xuICB9XG4gIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgZ2V0IHBsdWdpbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbHVnaW5zO1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLl9jb25maWc7XG4gICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgfVxuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuX3Njb3BlQ2FjaGUuY2xlYXIoKTtcbiAgICB0aGlzLl9yZXNvbHZlckNhY2hlLmNsZWFyKCk7XG4gIH1cbiAgZGF0YXNldFNjb3BlS2V5cyhkYXRhc2V0VHlwZSkge1xuICAgIHJldHVybiBjYWNoZWRLZXlzKGRhdGFzZXRUeXBlLFxuICAgICAgKCkgPT4gW1tcbiAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgJydcbiAgICAgIF1dKTtcbiAgfVxuICBkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKGRhdGFzZXRUeXBlLCB0cmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7ZGF0YXNldFR5cGV9LnRyYW5zaXRpb24uJHt0cmFuc2l0aW9ufWAsXG4gICAgICAoKSA9PiBbXG4gICAgICAgIFtcbiAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX0udHJhbnNpdGlvbnMuJHt0cmFuc2l0aW9ufWAsXG4gICAgICAgICAgYHRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gLFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAnJ1xuICAgICAgICBdXG4gICAgICBdKTtcbiAgfVxuICBkYXRhc2V0RWxlbWVudFNjb3BlS2V5cyhkYXRhc2V0VHlwZSwgZWxlbWVudFR5cGUpIHtcbiAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0tJHtlbGVtZW50VHlwZX1gLFxuICAgICAgKCkgPT4gW1tcbiAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LmVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgYGVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgJydcbiAgICAgIF1dKTtcbiAgfVxuICBwbHVnaW5TY29wZUtleXMocGx1Z2luKSB7XG4gICAgY29uc3QgaWQgPSBwbHVnaW4uaWQ7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMudHlwZTtcbiAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHt0eXBlfS1wbHVnaW4tJHtpZH1gLFxuICAgICAgKCkgPT4gW1tcbiAgICAgICAgYHBsdWdpbnMuJHtpZH1gLFxuICAgICAgICAuLi5wbHVnaW4uYWRkaXRpb25hbE9wdGlvblNjb3BlcyB8fCBbXSxcbiAgICAgIF1dKTtcbiAgfVxuICBfY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSkge1xuICAgIGNvbnN0IF9zY29wZUNhY2hlID0gdGhpcy5fc2NvcGVDYWNoZTtcbiAgICBsZXQgY2FjaGUgPSBfc2NvcGVDYWNoZS5nZXQobWFpblNjb3BlKTtcbiAgICBpZiAoIWNhY2hlIHx8IHJlc2V0Q2FjaGUpIHtcbiAgICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgX3Njb3BlQ2FjaGUuc2V0KG1haW5TY29wZSwgY2FjaGUpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cbiAgZ2V0T3B0aW9uU2NvcGVzKG1haW5TY29wZSwga2V5TGlzdHMsIHJlc2V0Q2FjaGUpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgdHlwZX0gPSB0aGlzO1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSk7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleUxpc3RzKTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cbiAgICBjb25zdCBzY29wZXMgPSBuZXcgU2V0KCk7XG4gICAga2V5TGlzdHMuZm9yRWFjaChrZXlzID0+IHtcbiAgICAgIGlmIChtYWluU2NvcGUpIHtcbiAgICAgICAgc2NvcGVzLmFkZChtYWluU2NvcGUpO1xuICAgICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBtYWluU2NvcGUsIGtleSkpO1xuICAgICAgfVxuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3Blcywgb3B0aW9ucywga2V5KSk7XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBvdmVycmlkZXNbdHlwZV0gfHwge30sIGtleSkpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3BlcywgZGVmYXVsdHMsIGtleSkpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3BlcywgZGVzY3JpcHRvcnMsIGtleSkpO1xuICAgIH0pO1xuICAgIGNvbnN0IGFycmF5ID0gQXJyYXkuZnJvbShzY29wZXMpO1xuICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIGFycmF5LnB1c2goT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgfVxuICAgIGlmIChrZXlzQ2FjaGVkLmhhcyhrZXlMaXN0cykpIHtcbiAgICAgIGNhY2hlLnNldChrZXlMaXN0cywgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbiAgY2hhcnRPcHRpb25TY29wZXMoKSB7XG4gICAgY29uc3Qge29wdGlvbnMsIHR5cGV9ID0gdGhpcztcbiAgICByZXR1cm4gW1xuICAgICAgb3B0aW9ucyxcbiAgICAgIG92ZXJyaWRlc1t0eXBlXSB8fCB7fSxcbiAgICAgIGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdIHx8IHt9LFxuICAgICAge3R5cGV9LFxuICAgICAgZGVmYXVsdHMsXG4gICAgICBkZXNjcmlwdG9yc1xuICAgIF07XG4gIH1cbiAgcmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFsnJ10pIHtcbiAgICBjb25zdCByZXN1bHQgPSB7JHNoYXJlZDogdHJ1ZX07XG4gICAgY29uc3Qge3Jlc29sdmVyLCBzdWJQcmVmaXhlc30gPSBnZXRSZXNvbHZlcih0aGlzLl9yZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKTtcbiAgICBsZXQgb3B0aW9ucyA9IHJlc29sdmVyO1xuICAgIGlmIChuZWVkQ29udGV4dChyZXNvbHZlciwgbmFtZXMpKSB7XG4gICAgICByZXN1bHQuJHNoYXJlZCA9IGZhbHNlO1xuICAgICAgY29udGV4dCA9IGlzRnVuY3Rpb24oY29udGV4dCkgPyBjb250ZXh0KCkgOiBjb250ZXh0O1xuICAgICAgY29uc3Qgc3ViUmVzb2x2ZXIgPSB0aGlzLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgc3ViUHJlZml4ZXMpO1xuICAgICAgb3B0aW9ucyA9IF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBjb250ZXh0LCBzdWJSZXNvbHZlcik7XG4gICAgfVxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBuYW1lcykge1xuICAgICAgcmVzdWx0W3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBjcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIHByZWZpeGVzID0gWycnXSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gICAgY29uc3Qge3Jlc29sdmVyfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgIHJldHVybiBpc09iamVjdChjb250ZXh0KVxuICAgICAgPyBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgdW5kZWZpbmVkLCBkZXNjcmlwdG9yRGVmYXVsdHMpXG4gICAgICA6IHJlc29sdmVyO1xuICB9XG59XG5mdW5jdGlvbiBnZXRSZXNvbHZlcihyZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKSB7XG4gIGxldCBjYWNoZSA9IHJlc29sdmVyQ2FjaGUuZ2V0KHNjb3Blcyk7XG4gIGlmICghY2FjaGUpIHtcbiAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICByZXNvbHZlckNhY2hlLnNldChzY29wZXMsIGNhY2hlKTtcbiAgfVxuICBjb25zdCBjYWNoZUtleSA9IHByZWZpeGVzLmpvaW4oKTtcbiAgbGV0IGNhY2hlZCA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gIGlmICghY2FjaGVkKSB7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBfY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgY2FjaGVkID0ge1xuICAgICAgcmVzb2x2ZXIsXG4gICAgICBzdWJQcmVmaXhlczogcHJlZml4ZXMuZmlsdGVyKHAgPT4gIXAudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaG92ZXInKSlcbiAgICB9O1xuICAgIGNhY2hlLnNldChjYWNoZUtleSwgY2FjaGVkKTtcbiAgfVxuICByZXR1cm4gY2FjaGVkO1xufVxuY29uc3QgaGFzRnVuY3Rpb24gPSB2YWx1ZSA9PiBpc09iamVjdCh2YWx1ZSlcbiAgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpLnJlZHVjZSgoYWNjLCBrZXkpID0+IGFjYyB8fCBpc0Z1bmN0aW9uKHZhbHVlW2tleV0pLCBmYWxzZSk7XG5mdW5jdGlvbiBuZWVkQ29udGV4dChwcm94eSwgbmFtZXMpIHtcbiAgY29uc3Qge2lzU2NyaXB0YWJsZSwgaXNJbmRleGFibGV9ID0gX2Rlc2NyaXB0b3JzKHByb3h5KTtcbiAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKSB7XG4gICAgY29uc3Qgc2NyaXB0YWJsZSA9IGlzU2NyaXB0YWJsZShwcm9wKTtcbiAgICBjb25zdCBpbmRleGFibGUgPSBpc0luZGV4YWJsZShwcm9wKTtcbiAgICBjb25zdCB2YWx1ZSA9IChpbmRleGFibGUgfHwgc2NyaXB0YWJsZSkgJiYgcHJveHlbcHJvcF07XG4gICAgaWYgKChzY3JpcHRhYmxlICYmIChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBoYXNGdW5jdGlvbih2YWx1ZSkpKVxuICAgICAgfHwgKGluZGV4YWJsZSAmJiBpc0FycmF5KHZhbHVlKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIzLjkuMVwiO1xuXG5jb25zdCBLTk9XTl9QT1NJVElPTlMgPSBbJ3RvcCcsICdib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICdjaGFydEFyZWEnXTtcbmZ1bmN0aW9uIHBvc2l0aW9uSXNIb3Jpem9udGFsKHBvc2l0aW9uLCBheGlzKSB7XG4gIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nIHx8IChLTk9XTl9QT1NJVElPTlMuaW5kZXhPZihwb3NpdGlvbikgPT09IC0xICYmIGF4aXMgPT09ICd4Jyk7XG59XG5mdW5jdGlvbiBjb21wYXJlMkxldmVsKGwxLCBsMikge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhW2wxXSA9PT0gYltsMV1cbiAgICAgID8gYVtsMl0gLSBiW2wyXVxuICAgICAgOiBhW2wxXSAtIGJbbDFdO1xuICB9O1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25zQ29tcGxldGUoY29udGV4dCkge1xuICBjb25zdCBjaGFydCA9IGNvbnRleHQuY2hhcnQ7XG4gIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmFuaW1hdGlvbjtcbiAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJSZW5kZXInKTtcbiAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uQ29tcGxldGUsIFtjb250ZXh0XSwgY2hhcnQpO1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25Qcm9ncmVzcyhjb250ZXh0KSB7XG4gIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uO1xuICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Qcm9ncmVzcywgW2NvbnRleHRdLCBjaGFydCk7XG59XG5mdW5jdGlvbiBnZXRDYW52YXMoaXRlbSkge1xuICBpZiAoX2lzRG9tU3VwcG9ydGVkKCkgJiYgdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgaXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0pO1xuICB9IGVsc2UgaWYgKGl0ZW0gJiYgaXRlbS5sZW5ndGgpIHtcbiAgICBpdGVtID0gaXRlbVswXTtcbiAgfVxuICBpZiAoaXRlbSAmJiBpdGVtLmNhbnZhcykge1xuICAgIGl0ZW0gPSBpdGVtLmNhbnZhcztcbiAgfVxuICByZXR1cm4gaXRlbTtcbn1cbmNvbnN0IGluc3RhbmNlcyA9IHt9O1xuY29uc3QgZ2V0Q2hhcnQgPSAoa2V5KSA9PiB7XG4gIGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcyhrZXkpO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhpbnN0YW5jZXMpLmZpbHRlcigoYykgPT4gYy5jYW52YXMgPT09IGNhbnZhcykucG9wKCk7XG59O1xuZnVuY3Rpb24gbW92ZU51bWVyaWNLZXlzKG9iaiwgc3RhcnQsIG1vdmUpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBjb25zdCBpbnRLZXkgPSAra2V5O1xuICAgIGlmIChpbnRLZXkgPj0gc3RhcnQpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XG4gICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgICBpZiAobW92ZSA+IDAgfHwgaW50S2V5ID4gc3RhcnQpIHtcbiAgICAgICAgb2JqW2ludEtleSArIG1vdmVdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVMYXN0RXZlbnQoZSwgbGFzdEV2ZW50LCBpbkNoYXJ0QXJlYSwgaXNDbGljaykge1xuICBpZiAoIWluQ2hhcnRBcmVhIHx8IGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChpc0NsaWNrKSB7XG4gICAgcmV0dXJuIGxhc3RFdmVudDtcbiAgfVxuICByZXR1cm4gZTtcbn1cbmNsYXNzIENoYXJ0IHtcbiAgY29uc3RydWN0b3IoaXRlbSwgdXNlckNvbmZpZykge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnID0gbmV3IENvbmZpZyh1c2VyQ29uZmlnKTtcbiAgICBjb25zdCBpbml0aWFsQ2FudmFzID0gZ2V0Q2FudmFzKGl0ZW0pO1xuICAgIGNvbnN0IGV4aXN0aW5nQ2hhcnQgPSBnZXRDaGFydChpbml0aWFsQ2FudmFzKTtcbiAgICBpZiAoZXhpc3RpbmdDaGFydCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2FudmFzIGlzIGFscmVhZHkgaW4gdXNlLiBDaGFydCB3aXRoIElEIFxcJycgKyBleGlzdGluZ0NoYXJ0LmlkICsgJ1xcJycgK1xuXHRcdFx0XHQnIG11c3QgYmUgZGVzdHJveWVkIGJlZm9yZSB0aGUgY2FudmFzIHdpdGggSUQgXFwnJyArIGV4aXN0aW5nQ2hhcnQuY2FudmFzLmlkICsgJ1xcJyBjYW4gYmUgcmV1c2VkLidcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoY29uZmlnLmNoYXJ0T3B0aW9uU2NvcGVzKCksIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICB0aGlzLnBsYXRmb3JtID0gbmV3IChjb25maWcucGxhdGZvcm0gfHwgX2RldGVjdFBsYXRmb3JtKGluaXRpYWxDYW52YXMpKSgpO1xuICAgIHRoaXMucGxhdGZvcm0udXBkYXRlQ29uZmlnKGNvbmZpZyk7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMucGxhdGZvcm0uYWNxdWlyZUNvbnRleHQoaW5pdGlhbENhbnZhcywgb3B0aW9ucy5hc3BlY3RSYXRpbyk7XG4gICAgY29uc3QgY2FudmFzID0gY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcztcbiAgICBjb25zdCBoZWlnaHQgPSBjYW52YXMgJiYgY2FudmFzLmhlaWdodDtcbiAgICBjb25zdCB3aWR0aCA9IGNhbnZhcyAmJiBjYW52YXMud2lkdGg7XG4gICAgdGhpcy5pZCA9IHVpZCgpO1xuICAgIHRoaXMuY3R4ID0gY29udGV4dDtcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgIHRoaXMuX2xheWVycyA9IFtdO1xuICAgIHRoaXMuX21ldGFzZXRzID0gW107XG4gICAgdGhpcy5fc3RhY2tzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm94ZXMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2hhcnRBcmVhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2FjdGl2ZSA9IFtdO1xuICAgIHRoaXMuX2xhc3RFdmVudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gW107XG4gICAgdGhpcy5zY2FsZXMgPSB7fTtcbiAgICB0aGlzLl9wbHVnaW5zID0gbmV3IFBsdWdpblNlcnZpY2UoKTtcbiAgICB0aGlzLiRwcm94aWVzID0ge307XG4gICAgdGhpcy5faGlkZGVuSW5kaWNlcyA9IHt9O1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9kb1Jlc2l6ZSA9IGRlYm91bmNlKG1vZGUgPT4gdGhpcy51cGRhdGUobW9kZSksIG9wdGlvbnMucmVzaXplRGVsYXkgfHwgMCk7XG4gICAgdGhpcy5fZGF0YUNoYW5nZXMgPSBbXTtcbiAgICBpbnN0YW5jZXNbdGhpcy5pZF0gPSB0aGlzO1xuICAgIGlmICghY29udGV4dCB8fCAhY2FudmFzKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBjaGFydDogY2FuJ3QgYWNxdWlyZSBjb250ZXh0IGZyb20gdGhlIGdpdmVuIGl0ZW1cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFuaW1hdG9yLmxpc3Rlbih0aGlzLCAnY29tcGxldGUnLCBvbkFuaW1hdGlvbnNDb21wbGV0ZSk7XG4gICAgYW5pbWF0b3IubGlzdGVuKHRoaXMsICdwcm9ncmVzcycsIG9uQW5pbWF0aW9uUHJvZ3Jlc3MpO1xuICAgIHRoaXMuX2luaXRpYWxpemUoKTtcbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGFzcGVjdFJhdGlvKCkge1xuICAgIGNvbnN0IHtvcHRpb25zOiB7YXNwZWN0UmF0aW8sIG1haW50YWluQXNwZWN0UmF0aW99LCB3aWR0aCwgaGVpZ2h0LCBfYXNwZWN0UmF0aW99ID0gdGhpcztcbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYoYXNwZWN0UmF0aW8pKSB7XG4gICAgICByZXR1cm4gYXNwZWN0UmF0aW87XG4gICAgfVxuICAgIGlmIChtYWludGFpbkFzcGVjdFJhdGlvICYmIF9hc3BlY3RSYXRpbykge1xuICAgICAgcmV0dXJuIF9hc3BlY3RSYXRpbztcbiAgICB9XG4gICAgcmV0dXJuIGhlaWdodCA/IHdpZHRoIC8gaGVpZ2h0IDogbnVsbDtcbiAgfVxuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuZGF0YTtcbiAgfVxuICBzZXQgZGF0YShkYXRhKSB7XG4gICAgdGhpcy5jb25maWcuZGF0YSA9IGRhdGE7XG4gIH1cbiAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cbiAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMuY29uZmlnLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIF9pbml0aWFsaXplKCkge1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlSW5pdCcpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0aW5hU2NhbGUodGhpcywgdGhpcy5vcHRpb25zLmRldmljZVBpeGVsUmF0aW8pO1xuICAgIH1cbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVySW5pdCcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNsZWFyKCkge1xuICAgIGNsZWFyQ2FudmFzKHRoaXMuY2FudmFzLCB0aGlzLmN0eCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgc3RvcCgpIHtcbiAgICBhbmltYXRvci5zdG9wKHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJlc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgaWYgKCFhbmltYXRvci5ydW5uaW5nKHRoaXMpKSB7XG4gICAgICB0aGlzLl9yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcgPSB7d2lkdGgsIGhlaWdodH07XG4gICAgfVxuICB9XG4gIF9yZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXM7XG4gICAgY29uc3QgYXNwZWN0UmF0aW8gPSBvcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgdGhpcy5hc3BlY3RSYXRpbztcbiAgICBjb25zdCBuZXdTaXplID0gdGhpcy5wbGF0Zm9ybS5nZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKTtcbiAgICBjb25zdCBuZXdSYXRpbyA9IG9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyB8fCB0aGlzLnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICBjb25zdCBtb2RlID0gdGhpcy53aWR0aCA/ICdyZXNpemUnIDogJ2F0dGFjaCc7XG4gICAgdGhpcy53aWR0aCA9IG5ld1NpemUud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBuZXdTaXplLmhlaWdodDtcbiAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgaWYgKCFyZXRpbmFTY2FsZSh0aGlzLCBuZXdSYXRpbywgdHJ1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNpemUnLCB7c2l6ZTogbmV3U2l6ZX0pO1xuICAgIGNhbGxiYWNrKG9wdGlvbnMub25SZXNpemUsIFt0aGlzLCBuZXdTaXplXSwgdGhpcyk7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIGlmICh0aGlzLl9kb1Jlc2l6ZShtb2RlKSkge1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbnN1cmVTY2FsZXNIYXZlSURzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgc2NhbGVzT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuICAgIGVhY2goc2NhbGVzT3B0aW9ucywgKGF4aXNPcHRpb25zLCBheGlzSUQpID0+IHtcbiAgICAgIGF4aXNPcHRpb25zLmlkID0gYXhpc0lEO1xuICAgIH0pO1xuICB9XG4gIGJ1aWxkT3JVcGRhdGVTY2FsZXMoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBzY2FsZU9wdHMgPSBvcHRpb25zLnNjYWxlcztcbiAgICBjb25zdCBzY2FsZXMgPSB0aGlzLnNjYWxlcztcbiAgICBjb25zdCB1cGRhdGVkID0gT2JqZWN0LmtleXMoc2NhbGVzKS5yZWR1Y2UoKG9iaiwgaWQpID0+IHtcbiAgICAgIG9ialtpZF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSwge30pO1xuICAgIGxldCBpdGVtcyA9IFtdO1xuICAgIGlmIChzY2FsZU9wdHMpIHtcbiAgICAgIGl0ZW1zID0gaXRlbXMuY29uY2F0KFxuICAgICAgICBPYmplY3Qua2V5cyhzY2FsZU9wdHMpLm1hcCgoaWQpID0+IHtcbiAgICAgICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBzY2FsZU9wdHNbaWRdO1xuICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgICAgIGNvbnN0IGlzUmFkaWFsID0gYXhpcyA9PT0gJ3InO1xuICAgICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGF4aXMgPT09ICd4JztcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3B0aW9uczogc2NhbGVPcHRpb25zLFxuICAgICAgICAgICAgZHBvc2l0aW9uOiBpc1JhZGlhbCA/ICdjaGFydEFyZWEnIDogaXNIb3Jpem9udGFsID8gJ2JvdHRvbScgOiAnbGVmdCcsXG4gICAgICAgICAgICBkdHlwZTogaXNSYWRpYWwgPyAncmFkaWFsTGluZWFyJyA6IGlzSG9yaXpvbnRhbCA/ICdjYXRlZ29yeScgOiAnbGluZWFyJ1xuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICBlYWNoKGl0ZW1zLCAoaXRlbSkgPT4ge1xuICAgICAgY29uc3Qgc2NhbGVPcHRpb25zID0gaXRlbS5vcHRpb25zO1xuICAgICAgY29uc3QgaWQgPSBzY2FsZU9wdGlvbnMuaWQ7XG4gICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKTtcbiAgICAgIGNvbnN0IHNjYWxlVHlwZSA9IHZhbHVlT3JEZWZhdWx0KHNjYWxlT3B0aW9ucy50eXBlLCBpdGVtLmR0eXBlKTtcbiAgICAgIGlmIChzY2FsZU9wdGlvbnMucG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbklzSG9yaXpvbnRhbChzY2FsZU9wdGlvbnMucG9zaXRpb24sIGF4aXMpICE9PSBwb3NpdGlvbklzSG9yaXpvbnRhbChpdGVtLmRwb3NpdGlvbikpIHtcbiAgICAgICAgc2NhbGVPcHRpb25zLnBvc2l0aW9uID0gaXRlbS5kcG9zaXRpb247XG4gICAgICB9XG4gICAgICB1cGRhdGVkW2lkXSA9IHRydWU7XG4gICAgICBsZXQgc2NhbGUgPSBudWxsO1xuICAgICAgaWYgKGlkIGluIHNjYWxlcyAmJiBzY2FsZXNbaWRdLnR5cGUgPT09IHNjYWxlVHlwZSkge1xuICAgICAgICBzY2FsZSA9IHNjYWxlc1tpZF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzY2FsZUNsYXNzID0gcmVnaXN0cnkuZ2V0U2NhbGUoc2NhbGVUeXBlKTtcbiAgICAgICAgc2NhbGUgPSBuZXcgc2NhbGVDbGFzcyh7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgdHlwZTogc2NhbGVUeXBlLFxuICAgICAgICAgIGN0eDogdGhpcy5jdHgsXG4gICAgICAgICAgY2hhcnQ6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgICAgIHNjYWxlc1tzY2FsZS5pZF0gPSBzY2FsZTtcbiAgICAgIH1cbiAgICAgIHNjYWxlLmluaXQoc2NhbGVPcHRpb25zLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgICBlYWNoKHVwZGF0ZWQsIChoYXNVcGRhdGVkLCBpZCkgPT4ge1xuICAgICAgaWYgKCFoYXNVcGRhdGVkKSB7XG4gICAgICAgIGRlbGV0ZSBzY2FsZXNbaWRdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGVhY2goc2NhbGVzLCAoc2NhbGUpID0+IHtcbiAgICAgIGxheW91dHMuY29uZmlndXJlKHRoaXMsIHNjYWxlLCBzY2FsZS5vcHRpb25zKTtcbiAgICAgIGxheW91dHMuYWRkQm94KHRoaXMsIHNjYWxlKTtcbiAgICB9KTtcbiAgfVxuICBfdXBkYXRlTWV0YXNldHMoKSB7XG4gICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9tZXRhc2V0cztcbiAgICBjb25zdCBudW1EYXRhID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDtcbiAgICBjb25zdCBudW1NZXRhID0gbWV0YXNldHMubGVuZ3RoO1xuICAgIG1ldGFzZXRzLnNvcnQoKGEsIGIpID0+IGEuaW5kZXggLSBiLmluZGV4KTtcbiAgICBpZiAobnVtTWV0YSA+IG51bURhdGEpIHtcbiAgICAgIGZvciAobGV0IGkgPSBudW1EYXRhOyBpIDwgbnVtTWV0YTsgKytpKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgIH1cbiAgICAgIG1ldGFzZXRzLnNwbGljZShudW1EYXRhLCBudW1NZXRhIC0gbnVtRGF0YSk7XG4gICAgfVxuICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gbWV0YXNldHMuc2xpY2UoMCkuc29ydChjb21wYXJlMkxldmVsKCdvcmRlcicsICdpbmRleCcpKTtcbiAgfVxuICBfcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMoKSB7XG4gICAgY29uc3Qge19tZXRhc2V0czogbWV0YXNldHMsIGRhdGE6IHtkYXRhc2V0c319ID0gdGhpcztcbiAgICBpZiAobWV0YXNldHMubGVuZ3RoID4gZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICBkZWxldGUgdGhpcy5fc3RhY2tzO1xuICAgIH1cbiAgICBtZXRhc2V0cy5mb3JFYWNoKChtZXRhLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGRhdGFzZXRzLmZpbHRlcih4ID0+IHggPT09IG1ldGEuX2RhdGFzZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpIHtcbiAgICBjb25zdCBuZXdDb250cm9sbGVycyA9IFtdO1xuICAgIGNvbnN0IGRhdGFzZXRzID0gdGhpcy5kYXRhLmRhdGFzZXRzO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIHRoaXMuX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCk7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgY29uc3QgZGF0YXNldCA9IGRhdGFzZXRzW2ldO1xuICAgICAgbGV0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgY29uc3QgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCB0aGlzLmNvbmZpZy50eXBlO1xuICAgICAgaWYgKG1ldGEudHlwZSAmJiBtZXRhLnR5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgICAgICBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgIH1cbiAgICAgIG1ldGEudHlwZSA9IHR5cGU7XG4gICAgICBtZXRhLmluZGV4QXhpcyA9IGRhdGFzZXQuaW5kZXhBeGlzIHx8IGdldEluZGV4QXhpcyh0eXBlLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgbWV0YS5vcmRlciA9IGRhdGFzZXQub3JkZXIgfHwgMDtcbiAgICAgIG1ldGEuaW5kZXggPSBpO1xuICAgICAgbWV0YS5sYWJlbCA9ICcnICsgZGF0YXNldC5sYWJlbDtcbiAgICAgIG1ldGEudmlzaWJsZSA9IHRoaXMuaXNEYXRhc2V0VmlzaWJsZShpKTtcbiAgICAgIGlmIChtZXRhLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgbWV0YS5jb250cm9sbGVyLnVwZGF0ZUluZGV4KGkpO1xuICAgICAgICBtZXRhLmNvbnRyb2xsZXIubGlua1NjYWxlcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgQ29udHJvbGxlckNsYXNzID0gcmVnaXN0cnkuZ2V0Q29udHJvbGxlcih0eXBlKTtcbiAgICAgICAgY29uc3Qge2RhdGFzZXRFbGVtZW50VHlwZSwgZGF0YUVsZW1lbnRUeXBlfSA9IGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdO1xuICAgICAgICBPYmplY3QuYXNzaWduKENvbnRyb2xsZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgICAgICBkYXRhRWxlbWVudFR5cGU6IHJlZ2lzdHJ5LmdldEVsZW1lbnQoZGF0YUVsZW1lbnRUeXBlKSxcbiAgICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGRhdGFzZXRFbGVtZW50VHlwZSAmJiByZWdpc3RyeS5nZXRFbGVtZW50KGRhdGFzZXRFbGVtZW50VHlwZSlcbiAgICAgICAgfSk7XG4gICAgICAgIG1ldGEuY29udHJvbGxlciA9IG5ldyBDb250cm9sbGVyQ2xhc3ModGhpcywgaSk7XG4gICAgICAgIG5ld0NvbnRyb2xsZXJzLnB1c2gobWV0YS5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fdXBkYXRlTWV0YXNldHMoKTtcbiAgICByZXR1cm4gbmV3Q29udHJvbGxlcnM7XG4gIH1cbiAgX3Jlc2V0RWxlbWVudHMoKSB7XG4gICAgZWFjaCh0aGlzLmRhdGEuZGF0YXNldHMsIChkYXRhc2V0LCBkYXRhc2V0SW5kZXgpID0+IHtcbiAgICAgIHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyLnJlc2V0KCk7XG4gICAgfSwgdGhpcyk7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5fcmVzZXRFbGVtZW50cygpO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygncmVzZXQnKTtcbiAgfVxuICB1cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgIGNvbmZpZy51cGRhdGUoKTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IGFuaW1zRGlzYWJsZWQgPSB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSAhb3B0aW9ucy5hbmltYXRpb247XG4gICAgdGhpcy5fdXBkYXRlU2NhbGVzKCk7XG4gICAgdGhpcy5fY2hlY2tFdmVudEJpbmRpbmdzKCk7XG4gICAgdGhpcy5fdXBkYXRlSGlkZGVuSW5kaWNlcygpO1xuICAgIHRoaXMuX3BsdWdpbnMuaW52YWxpZGF0ZSgpO1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVVwZGF0ZScsIHttb2RlLCBjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5ld0NvbnRyb2xsZXJzID0gdGhpcy5idWlsZE9yVXBkYXRlQ29udHJvbGxlcnMoKTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUVsZW1lbnRzVXBkYXRlJyk7XG4gICAgbGV0IG1pblBhZGRpbmcgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgY29uc3Qge2NvbnRyb2xsZXJ9ID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgIGNvbnN0IHJlc2V0ID0gIWFuaW1zRGlzYWJsZWQgJiYgbmV3Q29udHJvbGxlcnMuaW5kZXhPZihjb250cm9sbGVyKSA9PT0gLTE7XG4gICAgICBjb250cm9sbGVyLmJ1aWxkT3JVcGRhdGVFbGVtZW50cyhyZXNldCk7XG4gICAgICBtaW5QYWRkaW5nID0gTWF0aC5tYXgoK2NvbnRyb2xsZXIuZ2V0TWF4T3ZlcmZsb3coKSwgbWluUGFkZGluZyk7XG4gICAgfVxuICAgIG1pblBhZGRpbmcgPSB0aGlzLl9taW5QYWRkaW5nID0gb3B0aW9ucy5sYXlvdXQuYXV0b1BhZGRpbmcgPyBtaW5QYWRkaW5nIDogMDtcbiAgICB0aGlzLl91cGRhdGVMYXlvdXQobWluUGFkZGluZyk7XG4gICAgaWYgKCFhbmltc0Rpc2FibGVkKSB7XG4gICAgICBlYWNoKG5ld0NvbnRyb2xsZXJzLCAoY29udHJvbGxlcikgPT4ge1xuICAgICAgICBjb250cm9sbGVyLnJlc2V0KCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fdXBkYXRlRGF0YXNldHMobW9kZSk7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlclVwZGF0ZScsIHttb2RlfSk7XG4gICAgdGhpcy5fbGF5ZXJzLnNvcnQoY29tcGFyZTJMZXZlbCgneicsICdfaWR4JykpO1xuICAgIGNvbnN0IHtfYWN0aXZlLCBfbGFzdEV2ZW50fSA9IHRoaXM7XG4gICAgaWYgKF9sYXN0RXZlbnQpIHtcbiAgICAgIHRoaXMuX2V2ZW50SGFuZGxlcihfbGFzdEV2ZW50LCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKF9hY3RpdmUubGVuZ3RoKSB7XG4gICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhfYWN0aXZlLCBfYWN0aXZlLCB0cnVlKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICBfdXBkYXRlU2NhbGVzKCkge1xuICAgIGVhY2godGhpcy5zY2FsZXMsIChzY2FsZSkgPT4ge1xuICAgICAgbGF5b3V0cy5yZW1vdmVCb3godGhpcywgc2NhbGUpO1xuICAgIH0pO1xuICAgIHRoaXMuZW5zdXJlU2NhbGVzSGF2ZUlEcygpO1xuICAgIHRoaXMuYnVpbGRPclVwZGF0ZVNjYWxlcygpO1xuICB9XG4gIF9jaGVja0V2ZW50QmluZGluZ3MoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBleGlzdGluZ0V2ZW50cyA9IG5ldyBTZXQoT2JqZWN0LmtleXModGhpcy5fbGlzdGVuZXJzKSk7XG4gICAgY29uc3QgbmV3RXZlbnRzID0gbmV3IFNldChvcHRpb25zLmV2ZW50cyk7XG4gICAgaWYgKCFzZXRzRXF1YWwoZXhpc3RpbmdFdmVudHMsIG5ld0V2ZW50cykgfHwgISF0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzICE9PSBvcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gICAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICB9XG4gIH1cbiAgX3VwZGF0ZUhpZGRlbkluZGljZXMoKSB7XG4gICAgY29uc3Qge19oaWRkZW5JbmRpY2VzfSA9IHRoaXM7XG4gICAgY29uc3QgY2hhbmdlcyA9IHRoaXMuX2dldFVuaWZvcm1EYXRhQ2hhbmdlcygpIHx8IFtdO1xuICAgIGZvciAoY29uc3Qge21ldGhvZCwgc3RhcnQsIGNvdW50fSBvZiBjaGFuZ2VzKSB7XG4gICAgICBjb25zdCBtb3ZlID0gbWV0aG9kID09PSAnX3JlbW92ZUVsZW1lbnRzJyA/IC1jb3VudCA6IGNvdW50O1xuICAgICAgbW92ZU51bWVyaWNLZXlzKF9oaWRkZW5JbmRpY2VzLCBzdGFydCwgbW92ZSk7XG4gICAgfVxuICB9XG4gIF9nZXRVbmlmb3JtRGF0YUNoYW5nZXMoKSB7XG4gICAgY29uc3QgX2RhdGFDaGFuZ2VzID0gdGhpcy5fZGF0YUNoYW5nZXM7XG4gICAgaWYgKCFfZGF0YUNoYW5nZXMgfHwgIV9kYXRhQ2hhbmdlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZGF0YUNoYW5nZXMgPSBbXTtcbiAgICBjb25zdCBkYXRhc2V0Q291bnQgPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoO1xuICAgIGNvbnN0IG1ha2VTZXQgPSAoaWR4KSA9PiBuZXcgU2V0KFxuICAgICAgX2RhdGFDaGFuZ2VzXG4gICAgICAgIC5maWx0ZXIoYyA9PiBjWzBdID09PSBpZHgpXG4gICAgICAgIC5tYXAoKGMsIGkpID0+IGkgKyAnLCcgKyBjLnNwbGljZSgxKS5qb2luKCcsJykpXG4gICAgKTtcbiAgICBjb25zdCBjaGFuZ2VTZXQgPSBtYWtlU2V0KDApO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF0YXNldENvdW50OyBpKyspIHtcbiAgICAgIGlmICghc2V0c0VxdWFsKGNoYW5nZVNldCwgbWFrZVNldChpKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbShjaGFuZ2VTZXQpXG4gICAgICAubWFwKGMgPT4gYy5zcGxpdCgnLCcpKVxuICAgICAgLm1hcChhID0+ICh7bWV0aG9kOiBhWzFdLCBzdGFydDogK2FbMl0sIGNvdW50OiArYVszXX0pKTtcbiAgfVxuICBfdXBkYXRlTGF5b3V0KG1pblBhZGRpbmcpIHtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVMYXlvdXQnLCB7Y2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsYXlvdXRzLnVwZGF0ZSh0aGlzLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgbWluUGFkZGluZyk7XG4gICAgY29uc3QgYXJlYSA9IHRoaXMuY2hhcnRBcmVhO1xuICAgIGNvbnN0IG5vQXJlYSA9IGFyZWEud2lkdGggPD0gMCB8fCBhcmVhLmhlaWdodCA8PSAwO1xuICAgIHRoaXMuX2xheWVycyA9IFtdO1xuICAgIGVhY2godGhpcy5ib3hlcywgKGJveCkgPT4ge1xuICAgICAgaWYgKG5vQXJlYSAmJiBib3gucG9zaXRpb24gPT09ICdjaGFydEFyZWEnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChib3guY29uZmlndXJlKSB7XG4gICAgICAgIGJveC5jb25maWd1cmUoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2xheWVycy5wdXNoKC4uLmJveC5fbGF5ZXJzKCkpO1xuICAgIH0sIHRoaXMpO1xuICAgIHRoaXMuX2xheWVycy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgaXRlbS5faWR4ID0gaW5kZXg7XG4gICAgfSk7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckxheW91dCcpO1xuICB9XG4gIF91cGRhdGVEYXRhc2V0cyhtb2RlKSB7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldHNVcGRhdGUnLCB7bW9kZSwgY2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRoaXMuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlci5jb25maWd1cmUoKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aGlzLl91cGRhdGVEYXRhc2V0KGksIGlzRnVuY3Rpb24obW9kZSkgPyBtb2RlKHtkYXRhc2V0SW5kZXg6IGl9KSA6IG1vZGUpO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldHNVcGRhdGUnLCB7bW9kZX0pO1xuICB9XG4gIF91cGRhdGVEYXRhc2V0KGluZGV4LCBtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgIGNvbnN0IGFyZ3MgPSB7bWV0YSwgaW5kZXgsIG1vZGUsIGNhbmNlbGFibGU6IHRydWV9O1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRVcGRhdGUnLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWV0YS5jb250cm9sbGVyLl91cGRhdGUobW9kZSk7XG4gICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXRVcGRhdGUnLCBhcmdzKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlUmVuZGVyJywge2NhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGFuaW1hdG9yLmhhcyh0aGlzKSkge1xuICAgICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgICAgYW5pbWF0b3Iuc3RhcnQodGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgb25BbmltYXRpb25zQ29tcGxldGUoe2NoYXJ0OiB0aGlzfSk7XG4gICAgfVxuICB9XG4gIGRyYXcoKSB7XG4gICAgbGV0IGk7XG4gICAgaWYgKHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcpIHtcbiAgICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXc7XG4gICAgICB0aGlzLl9yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICB0aGlzLl9yZXNpemVCZWZvcmVEcmF3ID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIGlmICh0aGlzLndpZHRoIDw9IDAgfHwgdGhpcy5oZWlnaHQgPD0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEcmF3Jywge2NhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGF5ZXJzID0gdGhpcy5fbGF5ZXJzO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoICYmIGxheWVyc1tpXS56IDw9IDA7ICsraSkge1xuICAgICAgbGF5ZXJzW2ldLmRyYXcodGhpcy5jaGFydEFyZWEpO1xuICAgIH1cbiAgICB0aGlzLl9kcmF3RGF0YXNldHMoKTtcbiAgICBmb3IgKDsgaSA8IGxheWVycy5sZW5ndGg7ICsraSkge1xuICAgICAgbGF5ZXJzW2ldLmRyYXcodGhpcy5jaGFydEFyZWEpO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRHJhdycpO1xuICB9XG4gIF9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoZmlsdGVyVmlzaWJsZSkge1xuICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fc29ydGVkTWV0YXNldHM7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY29uc3QgbWV0YSA9IG1ldGFzZXRzW2ldO1xuICAgICAgaWYgKCFmaWx0ZXJWaXNpYmxlIHx8IG1ldGEudmlzaWJsZSkge1xuICAgICAgICByZXN1bHQucHVzaChtZXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRTb3J0ZWREYXRhc2V0TWV0YXModHJ1ZSk7XG4gIH1cbiAgX2RyYXdEYXRhc2V0cygpIHtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0c0RyYXcnLCB7Y2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGZvciAobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGhpcy5fZHJhd0RhdGFzZXQobWV0YXNldHNbaV0pO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldHNEcmF3Jyk7XG4gIH1cbiAgX2RyYXdEYXRhc2V0KG1ldGEpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBjbGlwID0gbWV0YS5fY2xpcDtcbiAgICBjb25zdCB1c2VDbGlwID0gIWNsaXAuZGlzYWJsZWQ7XG4gICAgY29uc3QgYXJlYSA9IHRoaXMuY2hhcnRBcmVhO1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBtZXRhLFxuICAgICAgaW5kZXg6IG1ldGEuaW5kZXgsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgfTtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0RHJhdycsIGFyZ3MpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodXNlQ2xpcCkge1xuICAgICAgY2xpcEFyZWEoY3R4LCB7XG4gICAgICAgIGxlZnQ6IGNsaXAubGVmdCA9PT0gZmFsc2UgPyAwIDogYXJlYS5sZWZ0IC0gY2xpcC5sZWZ0LFxuICAgICAgICByaWdodDogY2xpcC5yaWdodCA9PT0gZmFsc2UgPyB0aGlzLndpZHRoIDogYXJlYS5yaWdodCArIGNsaXAucmlnaHQsXG4gICAgICAgIHRvcDogY2xpcC50b3AgPT09IGZhbHNlID8gMCA6IGFyZWEudG9wIC0gY2xpcC50b3AsXG4gICAgICAgIGJvdHRvbTogY2xpcC5ib3R0b20gPT09IGZhbHNlID8gdGhpcy5oZWlnaHQgOiBhcmVhLmJvdHRvbSArIGNsaXAuYm90dG9tXG4gICAgICB9KTtcbiAgICB9XG4gICAgbWV0YS5jb250cm9sbGVyLmRyYXcoKTtcbiAgICBpZiAodXNlQ2xpcCkge1xuICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgIH1cbiAgICBhcmdzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldERyYXcnLCBhcmdzKTtcbiAgfVxuICBpc1BvaW50SW5BcmVhKHBvaW50KSB7XG4gICAgcmV0dXJuIF9pc1BvaW50SW5BcmVhKHBvaW50LCB0aGlzLmNoYXJ0QXJlYSwgdGhpcy5fbWluUGFkZGluZyk7XG4gIH1cbiAgZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBtb2RlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3QgbWV0aG9kID0gSW50ZXJhY3Rpb24ubW9kZXNbbW9kZV07XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBtZXRob2QodGhpcywgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuICBnZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9tZXRhc2V0cztcbiAgICBsZXQgbWV0YSA9IG1ldGFzZXRzLmZpbHRlcih4ID0+IHggJiYgeC5fZGF0YXNldCA9PT0gZGF0YXNldCkucG9wKCk7XG4gICAgaWYgKCFtZXRhKSB7XG4gICAgICBtZXRhID0ge1xuICAgICAgICB0eXBlOiBudWxsLFxuICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgZGF0YXNldDogbnVsbCxcbiAgICAgICAgY29udHJvbGxlcjogbnVsbCxcbiAgICAgICAgaGlkZGVuOiBudWxsLFxuICAgICAgICB4QXhpc0lEOiBudWxsLFxuICAgICAgICB5QXhpc0lEOiBudWxsLFxuICAgICAgICBvcmRlcjogZGF0YXNldCAmJiBkYXRhc2V0Lm9yZGVyIHx8IDAsXG4gICAgICAgIGluZGV4OiBkYXRhc2V0SW5kZXgsXG4gICAgICAgIF9kYXRhc2V0OiBkYXRhc2V0LFxuICAgICAgICBfcGFyc2VkOiBbXSxcbiAgICAgICAgX3NvcnRlZDogZmFsc2VcbiAgICAgIH07XG4gICAgICBtZXRhc2V0cy5wdXNoKG1ldGEpO1xuICAgIH1cbiAgICByZXR1cm4gbWV0YTtcbiAgfVxuICBnZXRDb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8ICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsLCB7Y2hhcnQ6IHRoaXMsIHR5cGU6ICdjaGFydCd9KSk7XG4gIH1cbiAgZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkubGVuZ3RoO1xuICB9XG4gIGlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgIGlmICghZGF0YXNldCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgIHJldHVybiB0eXBlb2YgbWV0YS5oaWRkZW4gPT09ICdib29sZWFuJyA/ICFtZXRhLmhpZGRlbiA6ICFkYXRhc2V0LmhpZGRlbjtcbiAgfVxuICBzZXREYXRhc2V0VmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIHZpc2libGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgIG1ldGEuaGlkZGVuID0gIXZpc2libGU7XG4gIH1cbiAgdG9nZ2xlRGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICB0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XSA9ICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgfVxuICBnZXREYXRhVmlzaWJpbGl0eShpbmRleCkge1xuICAgIHJldHVybiAhdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF07XG4gIH1cbiAgX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHZpc2libGUpIHtcbiAgICBjb25zdCBtb2RlID0gdmlzaWJsZSA/ICdzaG93JyA6ICdoaWRlJztcbiAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgIGNvbnN0IGFuaW1zID0gbWV0YS5jb250cm9sbGVyLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpO1xuICAgIGlmIChkZWZpbmVkKGRhdGFJbmRleCkpIHtcbiAgICAgIG1ldGEuZGF0YVtkYXRhSW5kZXhdLmhpZGRlbiA9ICF2aXNpYmxlO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXREYXRhc2V0VmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIHZpc2libGUpO1xuICAgICAgYW5pbXMudXBkYXRlKG1ldGEsIHt2aXNpYmxlfSk7XG4gICAgICB0aGlzLnVwZGF0ZSgoY3R4KSA9PiBjdHguZGF0YXNldEluZGV4ID09PSBkYXRhc2V0SW5kZXggPyBtb2RlIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gIH1cbiAgaGlkZShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCkge1xuICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIGZhbHNlKTtcbiAgfVxuICBzaG93KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KSB7XG4gICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgdHJ1ZSk7XG4gIH1cbiAgX2Rlc3Ryb3lEYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICBpZiAobWV0YSAmJiBtZXRhLmNvbnRyb2xsZXIpIHtcbiAgICAgIG1ldGEuY29udHJvbGxlci5fZGVzdHJveSgpO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgfVxuICBfc3RvcCgpIHtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICB0aGlzLnN0b3AoKTtcbiAgICBhbmltYXRvci5yZW1vdmUodGhpcyk7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURlc3Ryb3knKTtcbiAgICBjb25zdCB7Y2FudmFzLCBjdHh9ID0gdGhpcztcbiAgICB0aGlzLl9zdG9wKCk7XG4gICAgdGhpcy5jb25maWcuY2xlYXJDYWNoZSgpO1xuICAgIGlmIChjYW52YXMpIHtcbiAgICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gICAgICBjbGVhckNhbnZhcyhjYW52YXMsIGN0eCk7XG4gICAgICB0aGlzLnBsYXRmb3JtLnJlbGVhc2VDb250ZXh0KGN0eCk7XG4gICAgICB0aGlzLmNhbnZhcyA9IG51bGw7XG4gICAgICB0aGlzLmN0eCA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnZGVzdHJveScpO1xuICAgIGRlbGV0ZSBpbnN0YW5jZXNbdGhpcy5pZF07XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRlc3Ryb3knKTtcbiAgfVxuICB0b0Jhc2U2NEltYWdlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jYW52YXMudG9EYXRhVVJMKC4uLmFyZ3MpO1xuICB9XG4gIGJpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5iaW5kVXNlckV2ZW50cygpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgdGhpcy5iaW5kUmVzcG9uc2l2ZUV2ZW50cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgYmluZFVzZXJFdmVudHMoKSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICBjb25zdCBfYWRkID0gKHR5cGUsIGxpc3RlbmVyKSA9PiB7XG4gICAgICBwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgIH07XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoZSwgeCwgeSkgPT4ge1xuICAgICAgZS5vZmZzZXRYID0geDtcbiAgICAgIGUub2Zmc2V0WSA9IHk7XG4gICAgICB0aGlzLl9ldmVudEhhbmRsZXIoZSk7XG4gICAgfTtcbiAgICBlYWNoKHRoaXMub3B0aW9ucy5ldmVudHMsICh0eXBlKSA9PiBfYWRkKHR5cGUsIGxpc3RlbmVyKSk7XG4gIH1cbiAgYmluZFJlc3BvbnNpdmVFdmVudHMoKSB7XG4gICAgaWYgKCF0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0ge307XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnM7XG4gICAgY29uc3QgcGxhdGZvcm0gPSB0aGlzLnBsYXRmb3JtO1xuICAgIGNvbnN0IF9hZGQgPSAodHlwZSwgbGlzdGVuZXIpID0+IHtcbiAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgfTtcbiAgICBjb25zdCBfcmVtb3ZlID0gKHR5cGUsIGxpc3RlbmVyKSA9PiB7XG4gICAgICBpZiAobGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgIHBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICBkZWxldGUgbGlzdGVuZXJzW3R5cGVdO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbGlzdGVuZXIgPSAod2lkdGgsIGhlaWdodCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgIHRoaXMucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgIH07XG4gICAgbGV0IGRldGFjaGVkO1xuICAgIGNvbnN0IGF0dGFjaGVkID0gKCkgPT4ge1xuICAgICAgX3JlbW92ZSgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgX2FkZCgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgX2FkZCgnZGV0YWNoJywgZGV0YWNoZWQpO1xuICAgIH07XG4gICAgZGV0YWNoZWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgICBfcmVtb3ZlKCdyZXNpemUnLCBsaXN0ZW5lcik7XG4gICAgICB0aGlzLl9zdG9wKCk7XG4gICAgICB0aGlzLl9yZXNpemUoMCwgMCk7XG4gICAgICBfYWRkKCdhdHRhY2gnLCBhdHRhY2hlZCk7XG4gICAgfTtcbiAgICBpZiAocGxhdGZvcm0uaXNBdHRhY2hlZCh0aGlzLmNhbnZhcykpIHtcbiAgICAgIGF0dGFjaGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRldGFjaGVkKCk7XG4gICAgfVxuICB9XG4gIHVuYmluZEV2ZW50cygpIHtcbiAgICBlYWNoKHRoaXMuX2xpc3RlbmVycywgKGxpc3RlbmVyLCB0eXBlKSA9PiB7XG4gICAgICB0aGlzLnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgIH0pO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIGVhY2godGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycywgKGxpc3RlbmVyLCB0eXBlKSA9PiB7XG4gICAgICB0aGlzLnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgIH0pO1xuICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgdXBkYXRlSG92ZXJTdHlsZShpdGVtcywgbW9kZSwgZW5hYmxlZCkge1xuICAgIGNvbnN0IHByZWZpeCA9IGVuYWJsZWQgPyAnc2V0JyA6ICdyZW1vdmUnO1xuICAgIGxldCBtZXRhLCBpdGVtLCBpLCBpbGVuO1xuICAgIGlmIChtb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGl0ZW1zWzBdLmRhdGFzZXRJbmRleCk7XG4gICAgICBtZXRhLmNvbnRyb2xsZXJbJ18nICsgcHJlZml4ICsgJ0RhdGFzZXRIb3ZlclN0eWxlJ10oKTtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgY29uc3QgY29udHJvbGxlciA9IGl0ZW0gJiYgdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtLmRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICAgIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnRyb2xsZXJbcHJlZml4ICsgJ0hvdmVyU3R5bGUnXShpdGVtLmVsZW1lbnQsIGl0ZW0uZGF0YXNldEluZGV4LCBpdGVtLmluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0QWN0aXZlRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgfVxuICBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cykge1xuICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7ZGF0YXNldEluZGV4LCBpbmRleH0pID0+IHtcbiAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRhc2V0IGZvdW5kIGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICBlbGVtZW50OiBtZXRhLmRhdGFbaW5kZXhdLFxuICAgICAgICBpbmRleCxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICB0aGlzLl9sYXN0RXZlbnQgPSBudWxsO1xuICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICB9XG4gIH1cbiAgbm90aWZ5UGx1Z2lucyhob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcGx1Z2lucy5ub3RpZnkodGhpcywgaG9vaywgYXJncywgZmlsdGVyKTtcbiAgfVxuICBfdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlLCByZXBsYXkpIHtcbiAgICBjb25zdCBob3Zlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuaG92ZXI7XG4gICAgY29uc3QgZGlmZiA9IChhLCBiKSA9PiBhLmZpbHRlcih4ID0+ICFiLnNvbWUoeSA9PiB4LmRhdGFzZXRJbmRleCA9PT0geS5kYXRhc2V0SW5kZXggJiYgeC5pbmRleCA9PT0geS5pbmRleCkpO1xuICAgIGNvbnN0IGRlYWN0aXZhdGVkID0gZGlmZihsYXN0QWN0aXZlLCBhY3RpdmUpO1xuICAgIGNvbnN0IGFjdGl2YXRlZCA9IHJlcGxheSA/IGFjdGl2ZSA6IGRpZmYoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICBpZiAoZGVhY3RpdmF0ZWQubGVuZ3RoKSB7XG4gICAgICB0aGlzLnVwZGF0ZUhvdmVyU3R5bGUoZGVhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCBmYWxzZSk7XG4gICAgfVxuICAgIGlmIChhY3RpdmF0ZWQubGVuZ3RoICYmIGhvdmVyT3B0aW9ucy5tb2RlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUhvdmVyU3R5bGUoYWN0aXZhdGVkLCBob3Zlck9wdGlvbnMubW9kZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIF9ldmVudEhhbmRsZXIoZSwgcmVwbGF5KSB7XG4gICAgY29uc3QgYXJncyA9IHtcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgcmVwbGF5LFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgIGluQ2hhcnRBcmVhOiB0aGlzLmlzUG9pbnRJbkFyZWEoZSlcbiAgICB9O1xuICAgIGNvbnN0IGV2ZW50RmlsdGVyID0gKHBsdWdpbikgPT4gKHBsdWdpbi5vcHRpb25zLmV2ZW50cyB8fCB0aGlzLm9wdGlvbnMuZXZlbnRzKS5pbmNsdWRlcyhlLm5hdGl2ZS50eXBlKTtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2hhbmdlZCA9IHRoaXMuX2hhbmRsZUV2ZW50KGUsIHJlcGxheSwgYXJncy5pbkNoYXJ0QXJlYSk7XG4gICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckV2ZW50JywgYXJncywgZXZlbnRGaWx0ZXIpO1xuICAgIGlmIChjaGFuZ2VkIHx8IGFyZ3MuY2hhbmdlZCkge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgX2hhbmRsZUV2ZW50KGUsIHJlcGxheSwgaW5DaGFydEFyZWEpIHtcbiAgICBjb25zdCB7X2FjdGl2ZTogbGFzdEFjdGl2ZSA9IFtdLCBvcHRpb25zfSA9IHRoaXM7XG4gICAgY29uc3QgdXNlRmluYWxQb3NpdGlvbiA9IHJlcGxheTtcbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3QgaXNDbGljayA9IF9pc0NsaWNrRXZlbnQoZSk7XG4gICAgY29uc3QgbGFzdEV2ZW50ID0gZGV0ZXJtaW5lTGFzdEV2ZW50KGUsIHRoaXMuX2xhc3RFdmVudCwgaW5DaGFydEFyZWEsIGlzQ2xpY2spO1xuICAgIGlmIChpbkNoYXJ0QXJlYSkge1xuICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25Ib3ZlciwgW2UsIGFjdGl2ZSwgdGhpc10sIHRoaXMpO1xuICAgICAgaWYgKGlzQ2xpY2spIHtcbiAgICAgICAgY2FsbGJhY2sob3B0aW9ucy5vbkNsaWNrLCBbZSwgYWN0aXZlLCB0aGlzXSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICBpZiAoY2hhbmdlZCB8fCByZXBsYXkpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KTtcbiAgICB9XG4gICAgdGhpcy5fbGFzdEV2ZW50ID0gbGFzdEV2ZW50O1xuICAgIHJldHVybiBjaGFuZ2VkO1xuICB9XG4gIF9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgfVxuICAgIGNvbnN0IGhvdmVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucy5ob3ZlcjtcbiAgICByZXR1cm4gdGhpcy5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIGhvdmVyT3B0aW9ucy5tb2RlLCBob3Zlck9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG59XG5jb25zdCBpbnZhbGlkYXRlUGx1Z2lucyA9ICgpID0+IGVhY2goQ2hhcnQuaW5zdGFuY2VzLCAoY2hhcnQpID0+IGNoYXJ0Ll9wbHVnaW5zLmludmFsaWRhdGUoKSk7XG5jb25zdCBlbnVtZXJhYmxlID0gdHJ1ZTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENoYXJ0LCB7XG4gIGRlZmF1bHRzOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogZGVmYXVsdHNcbiAgfSxcbiAgaW5zdGFuY2VzOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogaW5zdGFuY2VzXG4gIH0sXG4gIG92ZXJyaWRlczoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IG92ZXJyaWRlc1xuICB9LFxuICByZWdpc3RyeToge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IHJlZ2lzdHJ5XG4gIH0sXG4gIHZlcnNpb246IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiB2ZXJzaW9uXG4gIH0sXG4gIGdldENoYXJ0OiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogZ2V0Q2hhcnRcbiAgfSxcbiAgcmVnaXN0ZXI6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiAoLi4uaXRlbXMpID0+IHtcbiAgICAgIHJlZ2lzdHJ5LmFkZCguLi5pdGVtcyk7XG4gICAgICBpbnZhbGlkYXRlUGx1Z2lucygpO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3Rlcjoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6ICguLi5pdGVtcykgPT4ge1xuICAgICAgcmVnaXN0cnkucmVtb3ZlKC4uLml0ZW1zKTtcbiAgICAgIGludmFsaWRhdGVQbHVnaW5zKCk7XG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gY2xpcEFyYyhjdHgsIGVsZW1lbnQsIGVuZEFuZ2xlKSB7XG4gIGNvbnN0IHtzdGFydEFuZ2xlLCBwaXhlbE1hcmdpbiwgeCwgeSwgb3V0ZXJSYWRpdXMsIGlubmVyUmFkaXVzfSA9IGVsZW1lbnQ7XG4gIGxldCBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gb3V0ZXJSYWRpdXM7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luKTtcbiAgaWYgKGlubmVyUmFkaXVzID4gcGl4ZWxNYXJnaW4pIHtcbiAgICBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gaW5uZXJSYWRpdXM7XG4gICAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgZW5kQW5nbGUgKyBhbmdsZU1hcmdpbiwgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBjdHguYXJjKHgsIHksIHBpeGVsTWFyZ2luLCBlbmRBbmdsZSArIEhBTEZfUEksIHN0YXJ0QW5nbGUgLSBIQUxGX1BJKTtcbiAgfVxuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiB0b1JhZGl1c0Nvcm5lcnModmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbJ291dGVyU3RhcnQnLCAnb3V0ZXJFbmQnLCAnaW5uZXJTdGFydCcsICdpbm5lckVuZCddKTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzJDEoYXJjLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGFuZ2xlRGVsdGEpIHtcbiAgY29uc3QgbyA9IHRvUmFkaXVzQ29ybmVycyhhcmMub3B0aW9ucy5ib3JkZXJSYWRpdXMpO1xuICBjb25zdCBoYWxmVGhpY2tuZXNzID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gMjtcbiAgY29uc3QgaW5uZXJMaW1pdCA9IE1hdGgubWluKGhhbGZUaGlja25lc3MsIGFuZ2xlRGVsdGEgKiBpbm5lclJhZGl1cyAvIDIpO1xuICBjb25zdCBjb21wdXRlT3V0ZXJMaW1pdCA9ICh2YWwpID0+IHtcbiAgICBjb25zdCBvdXRlckFyY0xpbWl0ID0gKG91dGVyUmFkaXVzIC0gTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgdmFsKSkgKiBhbmdsZURlbHRhIC8gMjtcbiAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsLCAwLCBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBvdXRlckFyY0xpbWl0KSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgb3V0ZXJTdGFydDogY29tcHV0ZU91dGVyTGltaXQoby5vdXRlclN0YXJ0KSxcbiAgICBvdXRlckVuZDogY29tcHV0ZU91dGVyTGltaXQoby5vdXRlckVuZCksXG4gICAgaW5uZXJTdGFydDogX2xpbWl0VmFsdWUoby5pbm5lclN0YXJ0LCAwLCBpbm5lckxpbWl0KSxcbiAgICBpbm5lckVuZDogX2xpbWl0VmFsdWUoby5pbm5lckVuZCwgMCwgaW5uZXJMaW1pdCksXG4gIH07XG59XG5mdW5jdGlvbiByVGhldGFUb1hZKHIsIHRoZXRhLCB4LCB5KSB7XG4gIHJldHVybiB7XG4gICAgeDogeCArIHIgKiBNYXRoLmNvcyh0aGV0YSksXG4gICAgeTogeSArIHIgKiBNYXRoLnNpbih0aGV0YSksXG4gIH07XG59XG5mdW5jdGlvbiBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmQsIGNpcmN1bGFyKSB7XG4gIGNvbnN0IHt4LCB5LCBzdGFydEFuZ2xlOiBzdGFydCwgcGl4ZWxNYXJnaW4sIGlubmVyUmFkaXVzOiBpbm5lclJ9ID0gZWxlbWVudDtcbiAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChlbGVtZW50Lm91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCAtIHBpeGVsTWFyZ2luLCAwKTtcbiAgY29uc3QgaW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSICsgc3BhY2luZyArIG9mZnNldCArIHBpeGVsTWFyZ2luIDogMDtcbiAgbGV0IHNwYWNpbmdPZmZzZXQgPSAwO1xuICBjb25zdCBhbHBoYSA9IGVuZCAtIHN0YXJ0O1xuICBpZiAoc3BhY2luZykge1xuICAgIGNvbnN0IG5vU3BhY2luZ0lubmVyUmFkaXVzID0gaW5uZXJSID4gMCA/IGlubmVyUiAtIHNwYWNpbmcgOiAwO1xuICAgIGNvbnN0IG5vU3BhY2luZ091dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgPiAwID8gb3V0ZXJSYWRpdXMgLSBzcGFjaW5nIDogMDtcbiAgICBjb25zdCBhdk5vZ1NwYWNpbmdSYWRpdXMgPSAobm9TcGFjaW5nSW5uZXJSYWRpdXMgKyBub1NwYWNpbmdPdXRlclJhZGl1cykgLyAyO1xuICAgIGNvbnN0IGFkanVzdGVkQW5nbGUgPSBhdk5vZ1NwYWNpbmdSYWRpdXMgIT09IDAgPyAoYWxwaGEgKiBhdk5vZ1NwYWNpbmdSYWRpdXMpIC8gKGF2Tm9nU3BhY2luZ1JhZGl1cyArIHNwYWNpbmcpIDogYWxwaGE7XG4gICAgc3BhY2luZ09mZnNldCA9IChhbHBoYSAtIGFkanVzdGVkQW5nbGUpIC8gMjtcbiAgfVxuICBjb25zdCBiZXRhID0gTWF0aC5tYXgoMC4wMDEsIGFscGhhICogb3V0ZXJSYWRpdXMgLSBvZmZzZXQgLyBQSSkgLyBvdXRlclJhZGl1cztcbiAgY29uc3QgYW5nbGVPZmZzZXQgPSAoYWxwaGEgLSBiZXRhKSAvIDI7XG4gIGNvbnN0IHN0YXJ0QW5nbGUgPSBzdGFydCArIGFuZ2xlT2Zmc2V0ICsgc3BhY2luZ09mZnNldDtcbiAgY29uc3QgZW5kQW5nbGUgPSBlbmQgLSBhbmdsZU9mZnNldCAtIHNwYWNpbmdPZmZzZXQ7XG4gIGNvbnN0IHtvdXRlclN0YXJ0LCBvdXRlckVuZCwgaW5uZXJTdGFydCwgaW5uZXJFbmR9ID0gcGFyc2VCb3JkZXJSYWRpdXMkMShlbGVtZW50LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJTdGFydDtcbiAgY29uc3Qgb3V0ZXJFbmRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJFbmQ7XG4gIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlID0gc3RhcnRBbmdsZSArIG91dGVyU3RhcnQgLyBvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXM7XG4gIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gb3V0ZXJFbmQgLyBvdXRlckVuZEFkanVzdGVkUmFkaXVzO1xuICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMgPSBpbm5lclJhZGl1cyArIGlubmVyU3RhcnQ7XG4gIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMgPSBpbm5lclJhZGl1cyArIGlubmVyRW5kO1xuICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICBjb25zdCBpbm5lckVuZEFkanVzdGVkQW5nbGUgPSBlbmRBbmdsZSAtIGlubmVyRW5kIC8gaW5uZXJFbmRBZGp1c3RlZFJhZGl1cztcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBpZiAoY2lyY3VsYXIpIHtcbiAgICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKTtcbiAgICBpZiAob3V0ZXJFbmQgPiAwKSB7XG4gICAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShvdXRlckVuZEFkanVzdGVkUmFkaXVzLCBvdXRlckVuZEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJFbmQsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSwgZW5kQW5nbGUgKyBIQUxGX1BJKTtcbiAgICB9XG4gICAgY29uc3QgcDQgPSByVGhldGFUb1hZKGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMsIGVuZEFuZ2xlLCB4LCB5KTtcbiAgICBjdHgubGluZVRvKHA0LngsIHA0LnkpO1xuICAgIGlmIChpbm5lckVuZCA+IDApIHtcbiAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMsIGlubmVyRW5kQWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lckVuZCwgZW5kQW5nbGUgKyBIQUxGX1BJLCBpbm5lckVuZEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJKTtcbiAgICB9XG4gICAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgZW5kQW5nbGUgLSAoaW5uZXJFbmQgLyBpbm5lclJhZGl1cyksIHN0YXJ0QW5nbGUgKyAoaW5uZXJTdGFydCAvIGlubmVyUmFkaXVzKSwgdHJ1ZSk7XG4gICAgaWYgKGlubmVyU3RhcnQgPiAwKSB7XG4gICAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMsIGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIGlubmVyU3RhcnQsIGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlICsgTWF0aC5QSSwgc3RhcnRBbmdsZSAtIEhBTEZfUEkpO1xuICAgIH1cbiAgICBjb25zdCBwOCA9IHJUaGV0YVRvWFkob3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzLCBzdGFydEFuZ2xlLCB4LCB5KTtcbiAgICBjdHgubGluZVRvKHA4LngsIHA4LnkpO1xuICAgIGlmIChvdXRlclN0YXJ0ID4gMCkge1xuICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBvdXRlclN0YXJ0LCBzdGFydEFuZ2xlIC0gSEFMRl9QSSwgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgIGNvbnN0IG91dGVyU3RhcnRYID0gTWF0aC5jb3Mob3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgIGNvbnN0IG91dGVyU3RhcnRZID0gTWF0aC5zaW4ob3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB5O1xuICAgIGN0eC5saW5lVG8ob3V0ZXJTdGFydFgsIG91dGVyU3RhcnRZKTtcbiAgICBjb25zdCBvdXRlckVuZFggPSBNYXRoLmNvcyhvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgIGNvbnN0IG91dGVyRW5kWSA9IE1hdGguc2luKG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHk7XG4gICAgY3R4LmxpbmVUbyhvdXRlckVuZFgsIG91dGVyRW5kWSk7XG4gIH1cbiAgY3R4LmNsb3NlUGF0aCgpO1xufVxuZnVuY3Rpb24gZHJhd0FyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpIHtcbiAgY29uc3Qge2Z1bGxDaXJjbGVzLCBzdGFydEFuZ2xlLCBjaXJjdW1mZXJlbmNlfSA9IGVsZW1lbnQ7XG4gIGxldCBlbmRBbmdsZSA9IGVsZW1lbnQuZW5kQW5nbGU7XG4gIGlmIChmdWxsQ2lyY2xlcykge1xuICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIHN0YXJ0QW5nbGUgKyBUQVUsIGNpcmN1bGFyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZ1bGxDaXJjbGVzOyArK2kpIHtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgfVxuICAgIGlmICghaXNOYU4oY2lyY3VtZmVyZW5jZSkpIHtcbiAgICAgIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2UgJSBUQVU7XG4gICAgICBpZiAoY2lyY3VtZmVyZW5jZSAlIFRBVSA9PT0gMCkge1xuICAgICAgICBlbmRBbmdsZSArPSBUQVU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gIGN0eC5maWxsKCk7XG4gIHJldHVybiBlbmRBbmdsZTtcbn1cbmZ1bmN0aW9uIGRyYXdGdWxsQ2lyY2xlQm9yZGVycyhjdHgsIGVsZW1lbnQsIGlubmVyKSB7XG4gIGNvbnN0IHt4LCB5LCBzdGFydEFuZ2xlLCBwaXhlbE1hcmdpbiwgZnVsbENpcmNsZXN9ID0gZWxlbWVudDtcbiAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChlbGVtZW50Lm91dGVyUmFkaXVzIC0gcGl4ZWxNYXJnaW4sIDApO1xuICBjb25zdCBpbm5lclJhZGl1cyA9IGVsZW1lbnQuaW5uZXJSYWRpdXMgKyBwaXhlbE1hcmdpbjtcbiAgbGV0IGk7XG4gIGlmIChpbm5lcikge1xuICAgIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBzdGFydEFuZ2xlICsgVEFVKTtcbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIHN0YXJ0QW5nbGUgKyBUQVUsIHN0YXJ0QW5nbGUsIHRydWUpO1xuICBmb3IgKGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSkge1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUsIHN0YXJ0QW5nbGUgKyBUQVUpO1xuICBmb3IgKGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSkge1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxufVxuZnVuY3Rpb24gZHJhd0JvcmRlcihjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKSB7XG4gIGNvbnN0IHtvcHRpb25zfSA9IGVsZW1lbnQ7XG4gIGNvbnN0IHtib3JkZXJXaWR0aCwgYm9yZGVySm9pblN0eWxlfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGlubmVyID0gb3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJztcbiAgaWYgKCFib3JkZXJXaWR0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaW5uZXIpIHtcbiAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyV2lkdGggKiAyO1xuICAgIGN0eC5saW5lSm9pbiA9IGJvcmRlckpvaW5TdHlsZSB8fCAncm91bmQnO1xuICB9IGVsc2Uge1xuICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aDtcbiAgICBjdHgubGluZUpvaW4gPSBib3JkZXJKb2luU3R5bGUgfHwgJ2JldmVsJztcbiAgfVxuICBpZiAoZWxlbWVudC5mdWxsQ2lyY2xlcykge1xuICAgIGRyYXdGdWxsQ2lyY2xlQm9yZGVycyhjdHgsIGVsZW1lbnQsIGlubmVyKTtcbiAgfVxuICBpZiAoaW5uZXIpIHtcbiAgICBjbGlwQXJjKGN0eCwgZWxlbWVudCwgZW5kQW5nbGUpO1xuICB9XG4gIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gIGN0eC5zdHJva2UoKTtcbn1cbmNsYXNzIEFyY0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jaXJjdW1mZXJlbmNlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3RhcnRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuZEFuZ2xlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBpeGVsTWFyZ2luID0gMDtcbiAgICB0aGlzLmZ1bGxDaXJjbGVzID0gMDtcbiAgICBpZiAoY2ZnKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgfVxuICB9XG4gIGluUmFuZ2UoY2hhcnRYLCBjaGFydFksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBwb2ludCA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3Qge2FuZ2xlLCBkaXN0YW5jZX0gPSBnZXRBbmdsZUZyb21Qb2ludChwb2ludCwge3g6IGNoYXJ0WCwgeTogY2hhcnRZfSk7XG4gICAgY29uc3Qge3N0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGNpcmN1bWZlcmVuY2V9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAnZW5kQW5nbGUnLFxuICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICdvdXRlclJhZGl1cycsXG4gICAgICAnY2lyY3VtZmVyZW5jZSdcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCByQWRqdXN0ID0gdGhpcy5vcHRpb25zLnNwYWNpbmcgLyAyO1xuICAgIGNvbnN0IF9jaXJjdW1mZXJlbmNlID0gdmFsdWVPckRlZmF1bHQoY2lyY3VtZmVyZW5jZSwgZW5kQW5nbGUgLSBzdGFydEFuZ2xlKTtcbiAgICBjb25zdCBiZXR3ZWVuQW5nbGVzID0gX2NpcmN1bWZlcmVuY2UgPj0gVEFVIHx8IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKTtcbiAgICBjb25zdCB3aXRoaW5SYWRpdXMgPSBfaXNCZXR3ZWVuKGRpc3RhbmNlLCBpbm5lclJhZGl1cyArIHJBZGp1c3QsIG91dGVyUmFkaXVzICsgckFkanVzdCk7XG4gICAgcmV0dXJuIChiZXR3ZWVuQW5nbGVzICYmIHdpdGhpblJhZGl1cyk7XG4gIH1cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5LCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgJ3gnLFxuICAgICAgJ3knLFxuICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgJ2NpcmN1bWZlcmVuY2UnLFxuICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHtvZmZzZXQsIHNwYWNpbmd9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGhhbGZBbmdsZSA9IChzdGFydEFuZ2xlICsgZW5kQW5nbGUpIC8gMjtcbiAgICBjb25zdCBoYWxmUmFkaXVzID0gKGlubmVyUmFkaXVzICsgb3V0ZXJSYWRpdXMgKyBzcGFjaW5nICsgb2Zmc2V0KSAvIDI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHggKyBNYXRoLmNvcyhoYWxmQW5nbGUpICogaGFsZlJhZGl1cyxcbiAgICAgIHk6IHkgKyBNYXRoLnNpbihoYWxmQW5nbGUpICogaGFsZlJhZGl1c1xuICAgIH07XG4gIH1cbiAgdG9vbHRpcFBvc2l0aW9uKHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IHtvcHRpb25zLCBjaXJjdW1mZXJlbmNlfSA9IHRoaXM7XG4gICAgY29uc3Qgb2Zmc2V0ID0gKG9wdGlvbnMub2Zmc2V0IHx8IDApIC8gMjtcbiAgICBjb25zdCBzcGFjaW5nID0gKG9wdGlvbnMuc3BhY2luZyB8fCAwKSAvIDI7XG4gICAgY29uc3QgY2lyY3VsYXIgPSBvcHRpb25zLmNpcmN1bGFyO1xuICAgIHRoaXMucGl4ZWxNYXJnaW4gPSAob3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJykgPyAwLjMzIDogMDtcbiAgICB0aGlzLmZ1bGxDaXJjbGVzID0gY2lyY3VtZmVyZW5jZSA+IFRBVSA/IE1hdGguZmxvb3IoY2lyY3VtZmVyZW5jZSAvIFRBVSkgOiAwO1xuICAgIGlmIChjaXJjdW1mZXJlbmNlID09PSAwIHx8IHRoaXMuaW5uZXJSYWRpdXMgPCAwIHx8IHRoaXMub3V0ZXJSYWRpdXMgPCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgbGV0IHJhZGl1c09mZnNldCA9IDA7XG4gICAgaWYgKG9mZnNldCkge1xuICAgICAgcmFkaXVzT2Zmc2V0ID0gb2Zmc2V0IC8gMjtcbiAgICAgIGNvbnN0IGhhbGZBbmdsZSA9ICh0aGlzLnN0YXJ0QW5nbGUgKyB0aGlzLmVuZEFuZ2xlKSAvIDI7XG4gICAgICBjdHgudHJhbnNsYXRlKE1hdGguY29zKGhhbGZBbmdsZSkgKiByYWRpdXNPZmZzZXQsIE1hdGguc2luKGhhbGZBbmdsZSkgKiByYWRpdXNPZmZzZXQpO1xuICAgICAgaWYgKHRoaXMuY2lyY3VtZmVyZW5jZSA+PSBQSSkge1xuICAgICAgICByYWRpdXNPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgIGNvbnN0IGVuZEFuZ2xlID0gZHJhd0FyYyhjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpO1xuICAgIGRyYXdCb3JkZXIoY3R4LCB0aGlzLCByYWRpdXNPZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxufVxuQXJjRWxlbWVudC5pZCA9ICdhcmMnO1xuQXJjRWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYm9yZGVyQWxpZ246ICdjZW50ZXInLFxuICBib3JkZXJDb2xvcjogJyNmZmYnLFxuICBib3JkZXJKb2luU3R5bGU6IHVuZGVmaW5lZCxcbiAgYm9yZGVyUmFkaXVzOiAwLFxuICBib3JkZXJXaWR0aDogMixcbiAgb2Zmc2V0OiAwLFxuICBzcGFjaW5nOiAwLFxuICBhbmdsZTogdW5kZWZpbmVkLFxuICBjaXJjdWxhcjogdHJ1ZSxcbn07XG5BcmNFbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcidcbn07XG5cbmZ1bmN0aW9uIHNldFN0eWxlKGN0eCwgb3B0aW9ucywgc3R5bGUgPSBvcHRpb25zKSB7XG4gIGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyQ2FwU3R5bGUsIG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUpO1xuICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaCwgb3B0aW9ucy5ib3JkZXJEYXNoKSk7XG4gIGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsIG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCk7XG4gIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckpvaW5TdHlsZSwgb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUpO1xuICBjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDb2xvciwgb3B0aW9ucy5ib3JkZXJDb2xvcik7XG59XG5mdW5jdGlvbiBsaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0KSB7XG4gIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIGdldExpbmVNZXRob2Qob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5zdGVwcGVkKSB7XG4gICAgcmV0dXJuIF9zdGVwcGVkTGluZVRvO1xuICB9XG4gIGlmIChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgcmV0dXJuIF9iZXppZXJDdXJ2ZVRvO1xuICB9XG4gIHJldHVybiBsaW5lVG87XG59XG5mdW5jdGlvbiBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyA9IHt9KSB7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3Qge3N0YXJ0OiBwYXJhbXNTdGFydCA9IDAsIGVuZDogcGFyYW1zRW5kID0gY291bnQgLSAxfSA9IHBhcmFtcztcbiAgY29uc3Qge3N0YXJ0OiBzZWdtZW50U3RhcnQsIGVuZDogc2VnbWVudEVuZH0gPSBzZWdtZW50O1xuICBjb25zdCBzdGFydCA9IE1hdGgubWF4KHBhcmFtc1N0YXJ0LCBzZWdtZW50U3RhcnQpO1xuICBjb25zdCBlbmQgPSBNYXRoLm1pbihwYXJhbXNFbmQsIHNlZ21lbnRFbmQpO1xuICBjb25zdCBvdXRzaWRlID0gcGFyYW1zU3RhcnQgPCBzZWdtZW50U3RhcnQgJiYgcGFyYW1zRW5kIDwgc2VnbWVudFN0YXJ0IHx8IHBhcmFtc1N0YXJ0ID4gc2VnbWVudEVuZCAmJiBwYXJhbXNFbmQgPiBzZWdtZW50RW5kO1xuICByZXR1cm4ge1xuICAgIGNvdW50LFxuICAgIHN0YXJ0LFxuICAgIGxvb3A6IHNlZ21lbnQubG9vcCxcbiAgICBpbGVuOiBlbmQgPCBzdGFydCAmJiAhb3V0c2lkZSA/IGNvdW50ICsgZW5kIC0gc3RhcnQgOiBlbmQgLSBzdGFydFxuICB9O1xufVxuZnVuY3Rpb24gcGF0aFNlZ21lbnQoY3R4LCBsaW5lLCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgY29uc3Qge3BvaW50cywgb3B0aW9uc30gPSBsaW5lO1xuICBjb25zdCB7Y291bnQsIHN0YXJ0LCBsb29wLCBpbGVufSA9IHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zKTtcbiAgY29uc3QgbGluZU1ldGhvZCA9IGdldExpbmVNZXRob2Qob3B0aW9ucyk7XG4gIGxldCB7bW92ZSA9IHRydWUsIHJldmVyc2V9ID0gcGFyYW1zIHx8IHt9O1xuICBsZXQgaSwgcG9pbnQsIHByZXY7XG4gIGZvciAoaSA9IDA7IGkgPD0gaWxlbjsgKytpKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIC0gaSA6IGkpKSAlIGNvdW50XTtcbiAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChtb3ZlKSB7XG4gICAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgbW92ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgfVxuICAgIHByZXYgPSBwb2ludDtcbiAgfVxuICBpZiAobG9vcCkge1xuICAgIHBvaW50ID0gcG9pbnRzWyhzdGFydCArIChyZXZlcnNlID8gaWxlbiA6IDApKSAlIGNvdW50XTtcbiAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gIH1cbiAgcmV0dXJuICEhbG9vcDtcbn1cbmZ1bmN0aW9uIGZhc3RQYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3Qge2NvdW50LCBzdGFydCwgaWxlbn0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gIGNvbnN0IHttb3ZlID0gdHJ1ZSwgcmV2ZXJzZX0gPSBwYXJhbXMgfHwge307XG4gIGxldCBhdmdYID0gMDtcbiAgbGV0IGNvdW50WCA9IDA7XG4gIGxldCBpLCBwb2ludCwgcHJldlgsIG1pblksIG1heFksIGxhc3RZO1xuICBjb25zdCBwb2ludEluZGV4ID0gKGluZGV4KSA9PiAoc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpbmRleCA6IGluZGV4KSkgJSBjb3VudDtcbiAgY29uc3QgZHJhd1ggPSAoKSA9PiB7XG4gICAgaWYgKG1pblkgIT09IG1heFkpIHtcbiAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWF4WSk7XG4gICAgICBjdHgubGluZVRvKGF2Z1gsIG1pblkpO1xuICAgICAgY3R4LmxpbmVUbyhhdmdYLCBsYXN0WSk7XG4gICAgfVxuICB9O1xuICBpZiAobW92ZSkge1xuICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoMCldO1xuICAgIGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8PSBpbGVuOyArK2kpIHtcbiAgICBwb2ludCA9IHBvaW50c1twb2ludEluZGV4KGkpXTtcbiAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHggPSBwb2ludC54O1xuICAgIGNvbnN0IHkgPSBwb2ludC55O1xuICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgbWluWSA9IHk7XG4gICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgIG1heFkgPSB5O1xuICAgICAgfVxuICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgeCkgLyArK2NvdW50WDtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhd1goKTtcbiAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgIGNvdW50WCA9IDA7XG4gICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgfVxuICAgIGxhc3RZID0geTtcbiAgfVxuICBkcmF3WCgpO1xufVxuZnVuY3Rpb24gX2dldFNlZ21lbnRNZXRob2QobGluZSkge1xuICBjb25zdCBvcHRzID0gbGluZS5vcHRpb25zO1xuICBjb25zdCBib3JkZXJEYXNoID0gb3B0cy5ib3JkZXJEYXNoICYmIG9wdHMuYm9yZGVyRGFzaC5sZW5ndGg7XG4gIGNvbnN0IHVzZUZhc3RQYXRoID0gIWxpbmUuX2RlY2ltYXRlZCAmJiAhbGluZS5fbG9vcCAmJiAhb3B0cy50ZW5zaW9uICYmIG9wdHMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSAhPT0gJ21vbm90b25lJyAmJiAhb3B0cy5zdGVwcGVkICYmICFib3JkZXJEYXNoO1xuICByZXR1cm4gdXNlRmFzdFBhdGggPyBmYXN0UGF0aFNlZ21lbnQgOiBwYXRoU2VnbWVudDtcbn1cbmZ1bmN0aW9uIF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuc3RlcHBlZCkge1xuICAgIHJldHVybiBfc3RlcHBlZEludGVycG9sYXRpb247XG4gIH1cbiAgaWYgKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICByZXR1cm4gX2JlemllckludGVycG9sYXRpb247XG4gIH1cbiAgcmV0dXJuIF9wb2ludEluTGluZTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhXaXRoQ2FjaGUoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgbGV0IHBhdGggPSBsaW5lLl9wYXRoO1xuICBpZiAoIXBhdGgpIHtcbiAgICBwYXRoID0gbGluZS5fcGF0aCA9IG5ldyBQYXRoMkQoKTtcbiAgICBpZiAobGluZS5wYXRoKHBhdGgsIHN0YXJ0LCBjb3VudCkpIHtcbiAgICAgIHBhdGguY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XG4gIHNldFN0eWxlKGN0eCwgbGluZS5vcHRpb25zKTtcbiAgY3R4LnN0cm9rZShwYXRoKTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhEaXJlY3QoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgY29uc3Qge3NlZ21lbnRzLCBvcHRpb25zfSA9IGxpbmU7XG4gIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZChsaW5lKTtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzZWdtZW50LnN0eWxlKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgaWYgKHNlZ21lbnRNZXRob2QoY3R4LCBsaW5lLCBzZWdtZW50LCB7c3RhcnQsIGVuZDogc3RhcnQgKyBjb3VudCAtIDF9KSkge1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmNvbnN0IHVzZVBhdGgyRCA9IHR5cGVvZiBQYXRoMkQgPT09ICdmdW5jdGlvbic7XG5mdW5jdGlvbiBkcmF3KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gIGlmICh1c2VQYXRoMkQgJiYgIWxpbmUub3B0aW9ucy5zZWdtZW50KSB7XG4gICAgc3Ryb2tlUGF0aFdpdGhDYWNoZShjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gIH1cbn1cbmNsYXNzIExpbmVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2NoYXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2xvb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZnVsbExvb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcGF0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wb2ludHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc2VnbWVudHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZGVjaW1hdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2RhdGFzZXRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY2ZnKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZUNvbnRyb2xQb2ludHMoY2hhcnRBcmVhLCBpbmRleEF4aXMpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICgob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykgJiYgIW9wdGlvbnMuc3RlcHBlZCAmJiAhdGhpcy5fcG9pbnRzVXBkYXRlZCkge1xuICAgICAgY29uc3QgbG9vcCA9IG9wdGlvbnMuc3BhbkdhcHMgPyB0aGlzLl9sb29wIDogdGhpcy5fZnVsbExvb3A7XG4gICAgICBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyh0aGlzLl9wb2ludHMsIG9wdGlvbnMsIGNoYXJ0QXJlYSwgbG9vcCwgaW5kZXhBeGlzKTtcbiAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBzZXQgcG9pbnRzKHBvaW50cykge1xuICAgIHRoaXMuX3BvaW50cyA9IHBvaW50cztcbiAgICBkZWxldGUgdGhpcy5fc2VnbWVudHM7XG4gICAgZGVsZXRlIHRoaXMuX3BhdGg7XG4gICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICB9XG4gIGdldCBwb2ludHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgfVxuICBnZXQgc2VnbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlZ21lbnRzIHx8ICh0aGlzLl9zZWdtZW50cyA9IF9jb21wdXRlU2VnbWVudHModGhpcywgdGhpcy5vcHRpb25zLnNlZ21lbnQpKTtcbiAgfVxuICBmaXJzdCgpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCAmJiBwb2ludHNbc2VnbWVudHNbMF0uc3RhcnRdO1xuICB9XG4gIGxhc3QoKSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgIGNvbnN0IGNvdW50ID0gc2VnbWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBjb3VudCAmJiBwb2ludHNbc2VnbWVudHNbY291bnQgLSAxXS5lbmRdO1xuICB9XG4gIGludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdmFsdWUgPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0aGlzLCB7cHJvcGVydHksIHN0YXJ0OiB2YWx1ZSwgZW5kOiB2YWx1ZX0pO1xuICAgIGlmICghc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IF9pbnRlcnBvbGF0ZSA9IF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IHtzdGFydCwgZW5kfSA9IHNlZ21lbnRzW2ldO1xuICAgICAgY29uc3QgcDEgPSBwb2ludHNbc3RhcnRdO1xuICAgICAgY29uc3QgcDIgPSBwb2ludHNbZW5kXTtcbiAgICAgIGlmIChwMSA9PT0gcDIpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocDEpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHQgPSBNYXRoLmFicygodmFsdWUgLSBwMVtwcm9wZXJ0eV0pIC8gKHAyW3Byb3BlcnR5XSAtIHAxW3Byb3BlcnR5XSkpO1xuICAgICAgY29uc3QgaW50ZXJwb2xhdGVkID0gX2ludGVycG9sYXRlKHAxLCBwMiwgdCwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICAgIGludGVycG9sYXRlZFtwcm9wZXJ0eV0gPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgICByZXN1bHQucHVzaChpbnRlcnBvbGF0ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgfVxuICBwYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICByZXR1cm4gc2VnbWVudE1ldGhvZChjdHgsIHRoaXMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gIH1cbiAgcGF0aChjdHgsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QodGhpcyk7XG4gICAgbGV0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICBjb3VudCA9IGNvdW50IHx8ICh0aGlzLnBvaW50cy5sZW5ndGggLSBzdGFydCk7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgICBsb29wICY9IHNlZ21lbnRNZXRob2QoY3R4LCB0aGlzLCBzZWdtZW50LCB7c3RhcnQsIGVuZDogc3RhcnQgKyBjb3VudCAtIDF9KTtcbiAgICB9XG4gICAgcmV0dXJuICEhbG9vcDtcbiAgfVxuICBkcmF3KGN0eCwgY2hhcnRBcmVhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzIHx8IFtdO1xuICAgIGlmIChwb2ludHMubGVuZ3RoICYmIG9wdGlvbnMuYm9yZGVyV2lkdGgpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBkcmF3KGN0eCwgdGhpcywgc3RhcnQsIGNvdW50KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmFuaW1hdGVkKSB7XG4gICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuTGluZUVsZW1lbnQuaWQgPSAnbGluZSc7XG5MaW5lRWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYm9yZGVyQ2FwU3R5bGU6ICdidXR0JyxcbiAgYm9yZGVyRGFzaDogW10sXG4gIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gIGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcbiAgYm9yZGVyV2lkdGg6IDMsXG4gIGNhcEJlemllclBvaW50czogdHJ1ZSxcbiAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogJ2RlZmF1bHQnLFxuICBmaWxsOiBmYWxzZSxcbiAgc3BhbkdhcHM6IGZhbHNlLFxuICBzdGVwcGVkOiBmYWxzZSxcbiAgdGVuc2lvbjogMCxcbn07XG5MaW5lRWxlbWVudC5kZWZhdWx0Um91dGVzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xufTtcbkxpbmVFbGVtZW50LmRlc2NyaXB0b3JzID0ge1xuICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZmlsbCcsXG59O1xuXG5mdW5jdGlvbiBpblJhbmdlJDEoZWwsIHBvcywgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCBvcHRpb25zID0gZWwub3B0aW9ucztcbiAgY29uc3Qge1theGlzXTogdmFsdWV9ID0gZWwuZ2V0UHJvcHMoW2F4aXNdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgcmV0dXJuIChNYXRoLmFicyhwb3MgLSB2YWx1ZSkgPCBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzKTtcbn1cbmNsYXNzIFBvaW50RWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhcnNlZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNraXAgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdG9wID0gdW5kZWZpbmVkO1xuICAgIGlmIChjZmcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICB9XG4gIH1cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge3gsIHl9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4gKChNYXRoLnBvdyhtb3VzZVggLSB4LCAyKSArIE1hdGgucG93KG1vdXNlWSAtIHksIDIpKSA8IE1hdGgucG93KG9wdGlvbnMuaGl0UmFkaXVzICsgb3B0aW9ucy5yYWRpdXMsIDIpKTtcbiAgfVxuICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWCwgJ3gnLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBpbllSYW5nZShtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWSwgJ3knLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qge3gsIHl9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4ge3gsIHl9O1xuICB9XG4gIHNpemUob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICBsZXQgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXMgfHwgMDtcbiAgICByYWRpdXMgPSBNYXRoLm1heChyYWRpdXMsIHJhZGl1cyAmJiBvcHRpb25zLmhvdmVyUmFkaXVzIHx8IDApO1xuICAgIGNvbnN0IGJvcmRlcldpZHRoID0gcmFkaXVzICYmIG9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICByZXR1cm4gKHJhZGl1cyArIGJvcmRlcldpZHRoKSAqIDI7XG4gIH1cbiAgZHJhdyhjdHgsIGFyZWEpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICh0aGlzLnNraXAgfHwgb3B0aW9ucy5yYWRpdXMgPCAwLjEgfHwgIV9pc1BvaW50SW5BcmVhKHRoaXMsIGFyZWEsIHRoaXMuc2l6ZShvcHRpb25zKSAvIDIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIGRyYXdQb2ludChjdHgsIG9wdGlvbnMsIHRoaXMueCwgdGhpcy55KTtcbiAgfVxuICBnZXRSYW5nZSgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgIHJldHVybiBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzO1xuICB9XG59XG5Qb2ludEVsZW1lbnQuaWQgPSAncG9pbnQnO1xuUG9pbnRFbGVtZW50LmRlZmF1bHRzID0ge1xuICBib3JkZXJXaWR0aDogMSxcbiAgaGl0UmFkaXVzOiAxLFxuICBob3ZlckJvcmRlcldpZHRoOiAxLFxuICBob3ZlclJhZGl1czogNCxcbiAgcG9pbnRTdHlsZTogJ2NpcmNsZScsXG4gIHJhZGl1czogMyxcbiAgcm90YXRpb246IDBcbn07XG5Qb2ludEVsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbn07XG5cbmZ1bmN0aW9uIGdldEJhckJvdW5kcyhiYXIsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3Qge3gsIHksIGJhc2UsIHdpZHRoLCBoZWlnaHR9ID0gYmFyLmdldFByb3BzKFsneCcsICd5JywgJ2Jhc2UnLCAnd2lkdGgnLCAnaGVpZ2h0J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICBsZXQgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBoYWxmO1xuICBpZiAoYmFyLmhvcml6b250YWwpIHtcbiAgICBoYWxmID0gaGVpZ2h0IC8gMjtcbiAgICBsZWZ0ID0gTWF0aC5taW4oeCwgYmFzZSk7XG4gICAgcmlnaHQgPSBNYXRoLm1heCh4LCBiYXNlKTtcbiAgICB0b3AgPSB5IC0gaGFsZjtcbiAgICBib3R0b20gPSB5ICsgaGFsZjtcbiAgfSBlbHNlIHtcbiAgICBoYWxmID0gd2lkdGggLyAyO1xuICAgIGxlZnQgPSB4IC0gaGFsZjtcbiAgICByaWdodCA9IHggKyBoYWxmO1xuICAgIHRvcCA9IE1hdGgubWluKHksIGJhc2UpO1xuICAgIGJvdHRvbSA9IE1hdGgubWF4KHksIGJhc2UpO1xuICB9XG4gIHJldHVybiB7bGVmdCwgdG9wLCByaWdodCwgYm90dG9tfTtcbn1cbmZ1bmN0aW9uIHNraXBPckxpbWl0KHNraXAsIHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gc2tpcCA/IDAgOiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpO1xufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJXaWR0aChiYXIsIG1heFcsIG1heEgpIHtcbiAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgY29uc3Qgc2tpcCA9IGJhci5ib3JkZXJTa2lwcGVkO1xuICBjb25zdCBvID0gdG9UUkJMKHZhbHVlKTtcbiAgcmV0dXJuIHtcbiAgICB0OiBza2lwT3JMaW1pdChza2lwLnRvcCwgby50b3AsIDAsIG1heEgpLFxuICAgIHI6IHNraXBPckxpbWl0KHNraXAucmlnaHQsIG8ucmlnaHQsIDAsIG1heFcpLFxuICAgIGI6IHNraXBPckxpbWl0KHNraXAuYm90dG9tLCBvLmJvdHRvbSwgMCwgbWF4SCksXG4gICAgbDogc2tpcE9yTGltaXQoc2tpcC5sZWZ0LCBvLmxlZnQsIDAsIG1heFcpXG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIG1heFcsIG1heEgpIHtcbiAgY29uc3Qge2VuYWJsZUJvcmRlclJhZGl1c30gPSBiYXIuZ2V0UHJvcHMoWydlbmFibGVCb3JkZXJSYWRpdXMnXSk7XG4gIGNvbnN0IHZhbHVlID0gYmFyLm9wdGlvbnMuYm9yZGVyUmFkaXVzO1xuICBjb25zdCBvID0gdG9UUkJMQ29ybmVycyh2YWx1ZSk7XG4gIGNvbnN0IG1heFIgPSBNYXRoLm1pbihtYXhXLCBtYXhIKTtcbiAgY29uc3Qgc2tpcCA9IGJhci5ib3JkZXJTa2lwcGVkO1xuICBjb25zdCBlbmFibGVCb3JkZXIgPSBlbmFibGVCb3JkZXJSYWRpdXMgfHwgaXNPYmplY3QodmFsdWUpO1xuICByZXR1cm4ge1xuICAgIHRvcExlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5sZWZ0LCBvLnRvcExlZnQsIDAsIG1heFIpLFxuICAgIHRvcFJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAudG9wIHx8IHNraXAucmlnaHQsIG8udG9wUmlnaHQsIDAsIG1heFIpLFxuICAgIGJvdHRvbUxlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC5ib3R0b20gfHwgc2tpcC5sZWZ0LCBvLmJvdHRvbUxlZnQsIDAsIG1heFIpLFxuICAgIGJvdHRvbVJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAuYm90dG9tIHx8IHNraXAucmlnaHQsIG8uYm90dG9tUmlnaHQsIDAsIG1heFIpXG4gIH07XG59XG5mdW5jdGlvbiBib3VuZGluZ1JlY3RzKGJhcikge1xuICBjb25zdCBib3VuZHMgPSBnZXRCYXJCb3VuZHMoYmFyKTtcbiAgY29uc3Qgd2lkdGggPSBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdDtcbiAgY29uc3QgaGVpZ2h0ID0gYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3A7XG4gIGNvbnN0IGJvcmRlciA9IHBhcnNlQm9yZGVyV2lkdGgoYmFyLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICBjb25zdCByYWRpdXMgPSBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gIHJldHVybiB7XG4gICAgb3V0ZXI6IHtcbiAgICAgIHg6IGJvdW5kcy5sZWZ0LFxuICAgICAgeTogYm91bmRzLnRvcCxcbiAgICAgIHc6IHdpZHRoLFxuICAgICAgaDogaGVpZ2h0LFxuICAgICAgcmFkaXVzXG4gICAgfSxcbiAgICBpbm5lcjoge1xuICAgICAgeDogYm91bmRzLmxlZnQgKyBib3JkZXIubCxcbiAgICAgIHk6IGJvdW5kcy50b3AgKyBib3JkZXIudCxcbiAgICAgIHc6IHdpZHRoIC0gYm9yZGVyLmwgLSBib3JkZXIucixcbiAgICAgIGg6IGhlaWdodCAtIGJvcmRlci50IC0gYm9yZGVyLmIsXG4gICAgICByYWRpdXM6IHtcbiAgICAgICAgdG9wTGVmdDogTWF0aC5tYXgoMCwgcmFkaXVzLnRvcExlZnQgLSBNYXRoLm1heChib3JkZXIudCwgYm9yZGVyLmwpKSxcbiAgICAgICAgdG9wUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BSaWdodCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIucikpLFxuICAgICAgICBib3R0b21MZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tTGVmdCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIubCkpLFxuICAgICAgICBib3R0b21SaWdodDogTWF0aC5tYXgoMCwgcmFkaXVzLmJvdHRvbVJpZ2h0IC0gTWF0aC5tYXgoYm9yZGVyLmIsIGJvcmRlci5yKSksXG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5SYW5nZShiYXIsIHgsIHksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3Qgc2tpcFggPSB4ID09PSBudWxsO1xuICBjb25zdCBza2lwWSA9IHkgPT09IG51bGw7XG4gIGNvbnN0IHNraXBCb3RoID0gc2tpcFggJiYgc2tpcFk7XG4gIGNvbnN0IGJvdW5kcyA9IGJhciAmJiAhc2tpcEJvdGggJiYgZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbik7XG4gIHJldHVybiBib3VuZHNcblx0XHQmJiAoc2tpcFggfHwgX2lzQmV0d2Vlbih4LCBib3VuZHMubGVmdCwgYm91bmRzLnJpZ2h0KSlcblx0XHQmJiAoc2tpcFkgfHwgX2lzQmV0d2Vlbih5LCBib3VuZHMudG9wLCBib3VuZHMuYm90dG9tKSk7XG59XG5mdW5jdGlvbiBoYXNSYWRpdXMocmFkaXVzKSB7XG4gIHJldHVybiByYWRpdXMudG9wTGVmdCB8fCByYWRpdXMudG9wUmlnaHQgfHwgcmFkaXVzLmJvdHRvbUxlZnQgfHwgcmFkaXVzLmJvdHRvbVJpZ2h0O1xufVxuZnVuY3Rpb24gYWRkTm9ybWFsUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gIGN0eC5yZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaCk7XG59XG5mdW5jdGlvbiBpbmZsYXRlUmVjdChyZWN0LCBhbW91bnQsIHJlZlJlY3QgPSB7fSkge1xuICBjb25zdCB4ID0gcmVjdC54ICE9PSByZWZSZWN0LnggPyAtYW1vdW50IDogMDtcbiAgY29uc3QgeSA9IHJlY3QueSAhPT0gcmVmUmVjdC55ID8gLWFtb3VudCA6IDA7XG4gIGNvbnN0IHcgPSAocmVjdC54ICsgcmVjdC53ICE9PSByZWZSZWN0LnggKyByZWZSZWN0LncgPyBhbW91bnQgOiAwKSAtIHg7XG4gIGNvbnN0IGggPSAocmVjdC55ICsgcmVjdC5oICE9PSByZWZSZWN0LnkgKyByZWZSZWN0LmggPyBhbW91bnQgOiAwKSAtIHk7XG4gIHJldHVybiB7XG4gICAgeDogcmVjdC54ICsgeCxcbiAgICB5OiByZWN0LnkgKyB5LFxuICAgIHc6IHJlY3QudyArIHcsXG4gICAgaDogcmVjdC5oICsgaCxcbiAgICByYWRpdXM6IHJlY3QucmFkaXVzXG4gIH07XG59XG5jbGFzcyBCYXJFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaG9yaXpvbnRhbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJhc2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmluZmxhdGVBbW91bnQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGNmZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgIH1cbiAgfVxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IHtpbmZsYXRlQW1vdW50LCBvcHRpb25zOiB7Ym9yZGVyQ29sb3IsIGJhY2tncm91bmRDb2xvcn19ID0gdGhpcztcbiAgICBjb25zdCB7aW5uZXIsIG91dGVyfSA9IGJvdW5kaW5nUmVjdHModGhpcyk7XG4gICAgY29uc3QgYWRkUmVjdFBhdGggPSBoYXNSYWRpdXMob3V0ZXIucmFkaXVzKSA/IGFkZFJvdW5kZWRSZWN0UGF0aCA6IGFkZE5vcm1hbFJlY3RQYXRoO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgaWYgKG91dGVyLncgIT09IGlubmVyLncgfHwgb3V0ZXIuaCAhPT0gaW5uZXIuaCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChvdXRlciwgaW5mbGF0ZUFtb3VudCwgaW5uZXIpKTtcbiAgICAgIGN0eC5jbGlwKCk7XG4gICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KGlubmVyLCAtaW5mbGF0ZUFtb3VudCwgb3V0ZXIpKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBib3JkZXJDb2xvcjtcbiAgICAgIGN0eC5maWxsKCdldmVub2RkJyk7XG4gICAgfVxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KGlubmVyLCBpbmZsYXRlQW1vdW50KSk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG51bGwsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG51bGwsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5LCBiYXNlLCBob3Jpem9udGFsfSA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knLCAnYmFzZScsICdob3Jpem9udGFsJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBob3Jpem9udGFsID8gKHggKyBiYXNlKSAvIDIgOiB4LFxuICAgICAgeTogaG9yaXpvbnRhbCA/IHkgOiAoeSArIGJhc2UpIC8gMlxuICAgIH07XG4gIH1cbiAgZ2V0UmFuZ2UoYXhpcykge1xuICAgIHJldHVybiBheGlzID09PSAneCcgPyB0aGlzLndpZHRoIC8gMiA6IHRoaXMuaGVpZ2h0IC8gMjtcbiAgfVxufVxuQmFyRWxlbWVudC5pZCA9ICdiYXInO1xuQmFyRWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYm9yZGVyU2tpcHBlZDogJ3N0YXJ0JyxcbiAgYm9yZGVyV2lkdGg6IDAsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgaW5mbGF0ZUFtb3VudDogJ2F1dG8nLFxuICBwb2ludFN0eWxlOiB1bmRlZmluZWRcbn07XG5CYXJFbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG59O1xuXG52YXIgZWxlbWVudHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5BcmNFbGVtZW50OiBBcmNFbGVtZW50LFxuTGluZUVsZW1lbnQ6IExpbmVFbGVtZW50LFxuUG9pbnRFbGVtZW50OiBQb2ludEVsZW1lbnQsXG5CYXJFbGVtZW50OiBCYXJFbGVtZW50XG59KTtcblxuZnVuY3Rpb24gbHR0YkRlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCwgb3B0aW9ucykge1xuICBjb25zdCBzYW1wbGVzID0gb3B0aW9ucy5zYW1wbGVzIHx8IGF2YWlsYWJsZVdpZHRoO1xuICBpZiAoc2FtcGxlcyA+PSBjb3VudCkge1xuICAgIHJldHVybiBkYXRhLnNsaWNlKHN0YXJ0LCBzdGFydCArIGNvdW50KTtcbiAgfVxuICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgY29uc3QgYnVja2V0V2lkdGggPSAoY291bnQgLSAyKSAvIChzYW1wbGVzIC0gMik7XG4gIGxldCBzYW1wbGVkSW5kZXggPSAwO1xuICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICBsZXQgYSA9IHN0YXJ0O1xuICBsZXQgaSwgbWF4QXJlYVBvaW50LCBtYXhBcmVhLCBhcmVhLCBuZXh0QTtcbiAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbYV07XG4gIGZvciAoaSA9IDA7IGkgPCBzYW1wbGVzIC0gMjsgaSsrKSB7XG4gICAgbGV0IGF2Z1ggPSAwO1xuICAgIGxldCBhdmdZID0gMDtcbiAgICBsZXQgajtcbiAgICBjb25zdCBhdmdSYW5nZVN0YXJ0ID0gTWF0aC5mbG9vcigoaSArIDEpICogYnVja2V0V2lkdGgpICsgMSArIHN0YXJ0O1xuICAgIGNvbnN0IGF2Z1JhbmdlRW5kID0gTWF0aC5taW4oTWF0aC5mbG9vcigoaSArIDIpICogYnVja2V0V2lkdGgpICsgMSwgY291bnQpICsgc3RhcnQ7XG4gICAgY29uc3QgYXZnUmFuZ2VMZW5ndGggPSBhdmdSYW5nZUVuZCAtIGF2Z1JhbmdlU3RhcnQ7XG4gICAgZm9yIChqID0gYXZnUmFuZ2VTdGFydDsgaiA8IGF2Z1JhbmdlRW5kOyBqKyspIHtcbiAgICAgIGF2Z1ggKz0gZGF0YVtqXS54O1xuICAgICAgYXZnWSArPSBkYXRhW2pdLnk7XG4gICAgfVxuICAgIGF2Z1ggLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgYXZnWSAvPSBhdmdSYW5nZUxlbmd0aDtcbiAgICBjb25zdCByYW5nZU9mZnMgPSBNYXRoLmZsb29yKGkgKiBidWNrZXRXaWR0aCkgKyAxICsgc3RhcnQ7XG4gICAgY29uc3QgcmFuZ2VUbyA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgIGNvbnN0IHt4OiBwb2ludEF4LCB5OiBwb2ludEF5fSA9IGRhdGFbYV07XG4gICAgbWF4QXJlYSA9IGFyZWEgPSAtMTtcbiAgICBmb3IgKGogPSByYW5nZU9mZnM7IGogPCByYW5nZVRvOyBqKyspIHtcbiAgICAgIGFyZWEgPSAwLjUgKiBNYXRoLmFicyhcbiAgICAgICAgKHBvaW50QXggLSBhdmdYKSAqIChkYXRhW2pdLnkgLSBwb2ludEF5KSAtXG4gICAgICAgIChwb2ludEF4IC0gZGF0YVtqXS54KSAqIChhdmdZIC0gcG9pbnRBeSlcbiAgICAgICk7XG4gICAgICBpZiAoYXJlYSA+IG1heEFyZWEpIHtcbiAgICAgICAgbWF4QXJlYSA9IGFyZWE7XG4gICAgICAgIG1heEFyZWFQb2ludCA9IGRhdGFbal07XG4gICAgICAgIG5leHRBID0gajtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IG1heEFyZWFQb2ludDtcbiAgICBhID0gbmV4dEE7XG4gIH1cbiAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbZW5kSW5kZXhdO1xuICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKSB7XG4gIGxldCBhdmdYID0gMDtcbiAgbGV0IGNvdW50WCA9IDA7XG4gIGxldCBpLCBwb2ludCwgeCwgeSwgcHJldlgsIG1pbkluZGV4LCBtYXhJbmRleCwgc3RhcnRJbmRleCwgbWluWSwgbWF4WTtcbiAgY29uc3QgZGVjaW1hdGVkID0gW107XG4gIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gIGNvbnN0IHhNaW4gPSBkYXRhW3N0YXJ0XS54O1xuICBjb25zdCB4TWF4ID0gZGF0YVtlbmRJbmRleF0ueDtcbiAgY29uc3QgZHggPSB4TWF4IC0geE1pbjtcbiAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICBwb2ludCA9IGRhdGFbaV07XG4gICAgeCA9IChwb2ludC54IC0geE1pbikgLyBkeCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgIHkgPSBwb2ludC55O1xuICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgbWluWSA9IHk7XG4gICAgICAgIG1pbkluZGV4ID0gaTtcbiAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgIG1heEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIGF2Z1ggPSAoY291bnRYICogYXZnWCArIHBvaW50LngpIC8gKytjb3VudFg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGkgLSAxO1xuICAgICAgaWYgKCFpc051bGxPclVuZGVmKG1pbkluZGV4KSAmJiAhaXNOdWxsT3JVbmRlZihtYXhJbmRleCkpIHtcbiAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgxID0gTWF0aC5taW4obWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgyID0gTWF0aC5tYXgobWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MSAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDEgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgxXSxcbiAgICAgICAgICAgIHg6IGF2Z1gsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MiAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDIgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgyXSxcbiAgICAgICAgICAgIHg6IGF2Z1hcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPiAwICYmIGxhc3RJbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICBkZWNpbWF0ZWQucHVzaChkYXRhW2xhc3RJbmRleF0pO1xuICAgICAgfVxuICAgICAgZGVjaW1hdGVkLnB1c2gocG9pbnQpO1xuICAgICAgcHJldlggPSB0cnVuY1g7XG4gICAgICBjb3VudFggPSAwO1xuICAgICAgbWluWSA9IG1heFkgPSB5O1xuICAgICAgbWluSW5kZXggPSBtYXhJbmRleCA9IHN0YXJ0SW5kZXggPSBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpIHtcbiAgaWYgKGRhdGFzZXQuX2RlY2ltYXRlZCkge1xuICAgIGNvbnN0IGRhdGEgPSBkYXRhc2V0Ll9kYXRhO1xuICAgIGRlbGV0ZSBkYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgZGVsZXRlIGRhdGFzZXQuX2RhdGE7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge3ZhbHVlOiBkYXRhfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCkge1xuICBjaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQpID0+IHtcbiAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQobWV0YSwgcG9pbnRzKSB7XG4gIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgY291bnQ7XG4gIGNvbnN0IHtpU2NhbGV9ID0gbWV0YTtcbiAgY29uc3Qge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgc3RhcnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWluKS5sbywgMCwgcG9pbnRDb3VudCAtIDEpO1xuICB9XG4gIGlmIChtYXhEZWZpbmVkKSB7XG4gICAgY291bnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWF4KS5oaSArIDEsIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICB9IGVsc2Uge1xuICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICB9XG4gIHJldHVybiB7c3RhcnQsIGNvdW50fTtcbn1cbnZhciBwbHVnaW5fZGVjaW1hdGlvbiA9IHtcbiAgaWQ6ICdkZWNpbWF0aW9uJyxcbiAgZGVmYXVsdHM6IHtcbiAgICBhbGdvcml0aG06ICdtaW4tbWF4JyxcbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgfSxcbiAgYmVmb3JlRWxlbWVudHNVcGRhdGU6IChjaGFydCwgYXJncywgb3B0aW9ucykgPT4ge1xuICAgIGlmICghb3B0aW9ucy5lbmFibGVkKSB7XG4gICAgICBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IGNoYXJ0LndpZHRoO1xuICAgIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCwgZGF0YXNldEluZGV4KSA9PiB7XG4gICAgICBjb25zdCB7X2RhdGEsIGluZGV4QXhpc30gPSBkYXRhc2V0O1xuICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICBjb25zdCBkYXRhID0gX2RhdGEgfHwgZGF0YXNldC5kYXRhO1xuICAgICAgaWYgKHJlc29sdmUoW2luZGV4QXhpcywgY2hhcnQub3B0aW9ucy5pbmRleEF4aXNdKSA9PT0gJ3knKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghbWV0YS5jb250cm9sbGVyLnN1cHBvcnRzRGVjaW1hdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB4QXhpcyA9IGNoYXJ0LnNjYWxlc1ttZXRhLnhBeGlzSURdO1xuICAgICAgaWYgKHhBeGlzLnR5cGUgIT09ICdsaW5lYXInICYmIHhBeGlzLnR5cGUgIT09ICd0aW1lJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY2hhcnQub3B0aW9ucy5wYXJzaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCB7c3RhcnQsIGNvdW50fSA9IGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkKG1ldGEsIGRhdGEpO1xuICAgICAgY29uc3QgdGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGQgfHwgNCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgaWYgKGNvdW50IDw9IHRocmVzaG9sZCkge1xuICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc051bGxPclVuZGVmKF9kYXRhKSkge1xuICAgICAgICBkYXRhc2V0Ll9kYXRhID0gZGF0YTtcbiAgICAgICAgZGVsZXRlIGRhdGFzZXQuZGF0YTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVjaW1hdGVkO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbGV0IGRlY2ltYXRlZDtcbiAgICAgIHN3aXRjaCAob3B0aW9ucy5hbGdvcml0aG0pIHtcbiAgICAgIGNhc2UgJ2x0dGInOlxuICAgICAgICBkZWNpbWF0ZWQgPSBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtaW4tbWF4JzpcbiAgICAgICAgZGVjaW1hdGVkID0gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGRlY2ltYXRpb24gYWxnb3JpdGhtICcke29wdGlvbnMuYWxnb3JpdGhtfSdgKTtcbiAgICAgIH1cbiAgICAgIGRhdGFzZXQuX2RlY2ltYXRlZCA9IGRlY2ltYXRlZDtcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveShjaGFydCkge1xuICAgIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9zZWdtZW50cyhsaW5lLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHRwb2ludHMgPSB0YXJnZXQucG9pbnRzO1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBsZXQge3N0YXJ0LCBlbmR9ID0gc2VnbWVudDtcbiAgICBlbmQgPSBfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKTtcbiAgICBjb25zdCBib3VuZHMgPSBfZ2V0Qm91bmRzKHByb3BlcnR5LCBwb2ludHNbc3RhcnRdLCBwb2ludHNbZW5kXSwgc2VnbWVudC5sb29wKTtcbiAgICBpZiAoIXRhcmdldC5zZWdtZW50cykge1xuICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgIHNvdXJjZTogc2VnbWVudCxcbiAgICAgICAgdGFyZ2V0OiBib3VuZHMsXG4gICAgICAgIHN0YXJ0OiBwb2ludHNbc3RhcnRdLFxuICAgICAgICBlbmQ6IHBvaW50c1tlbmRdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXRTZWdtZW50cyA9IF9ib3VuZFNlZ21lbnRzKHRhcmdldCwgYm91bmRzKTtcbiAgICBmb3IgKGNvbnN0IHRndCBvZiB0YXJnZXRTZWdtZW50cykge1xuICAgICAgY29uc3Qgc3ViQm91bmRzID0gX2dldEJvdW5kcyhwcm9wZXJ0eSwgdHBvaW50c1t0Z3Quc3RhcnRdLCB0cG9pbnRzW3RndC5lbmRdLCB0Z3QubG9vcCk7XG4gICAgICBjb25zdCBmaWxsU291cmNlcyA9IF9ib3VuZFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBzdWJCb3VuZHMpO1xuICAgICAgZm9yIChjb25zdCBmaWxsU291cmNlIG9mIGZpbGxTb3VyY2VzKSB7XG4gICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgIHNvdXJjZTogZmlsbFNvdXJjZSxcbiAgICAgICAgICB0YXJnZXQ6IHRndCxcbiAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdzdGFydCcsIE1hdGgubWF4KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICBbcHJvcGVydHldOiBfZ2V0RWRnZShib3VuZHMsIHN1YkJvdW5kcywgJ2VuZCcsIE1hdGgubWluKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJ0cztcbn1cbmZ1bmN0aW9uIF9nZXRCb3VuZHMocHJvcGVydHksIGZpcnN0LCBsYXN0LCBsb29wKSB7XG4gIGlmIChsb29wKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBzdGFydCA9IGZpcnN0W3Byb3BlcnR5XTtcbiAgbGV0IGVuZCA9IGxhc3RbcHJvcGVydHldO1xuICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICBzdGFydCA9IF9ub3JtYWxpemVBbmdsZShzdGFydCk7XG4gICAgZW5kID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gIH1cbiAgcmV0dXJuIHtwcm9wZXJ0eSwgc3RhcnQsIGVuZH07XG59XG5mdW5jdGlvbiBfcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKSB7XG4gIGNvbnN0IHt4ID0gbnVsbCwgeSA9IG51bGx9ID0gYm91bmRhcnkgfHwge307XG4gIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3QgcG9pbnRzID0gW107XG4gIGxpbmUuc2VnbWVudHMuZm9yRWFjaCgoe3N0YXJ0LCBlbmR9KSA9PiB7XG4gICAgZW5kID0gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIGxpbmVQb2ludHMpO1xuICAgIGNvbnN0IGZpcnN0ID0gbGluZVBvaW50c1tzdGFydF07XG4gICAgY29uc3QgbGFzdCA9IGxpbmVQb2ludHNbZW5kXTtcbiAgICBpZiAoeSAhPT0gbnVsbCkge1xuICAgICAgcG9pbnRzLnB1c2goe3g6IGZpcnN0LngsIHl9KTtcbiAgICAgIHBvaW50cy5wdXNoKHt4OiBsYXN0LngsIHl9KTtcbiAgICB9IGVsc2UgaWYgKHggIT09IG51bGwpIHtcbiAgICAgIHBvaW50cy5wdXNoKHt4LCB5OiBmaXJzdC55fSk7XG4gICAgICBwb2ludHMucHVzaCh7eCwgeTogbGFzdC55fSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHBvaW50cztcbn1cbmZ1bmN0aW9uIF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpIHtcbiAgZm9yICg7ZW5kID4gc3RhcnQ7IGVuZC0tKSB7XG4gICAgY29uc3QgcG9pbnQgPSBwb2ludHNbZW5kXTtcbiAgICBpZiAoIWlzTmFOKHBvaW50LngpICYmICFpc05hTihwb2ludC55KSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBlbmQ7XG59XG5mdW5jdGlvbiBfZ2V0RWRnZShhLCBiLCBwcm9wLCBmbikge1xuICBpZiAoYSAmJiBiKSB7XG4gICAgcmV0dXJuIGZuKGFbcHJvcF0sIGJbcHJvcF0pO1xuICB9XG4gIHJldHVybiBhID8gYVtwcm9wXSA6IGIgPyBiW3Byb3BdIDogMDtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUJvdW5kYXJ5TGluZShib3VuZGFyeSwgbGluZSkge1xuICBsZXQgcG9pbnRzID0gW107XG4gIGxldCBfbG9vcCA9IGZhbHNlO1xuICBpZiAoaXNBcnJheShib3VuZGFyeSkpIHtcbiAgICBfbG9vcCA9IHRydWU7XG4gICAgcG9pbnRzID0gYm91bmRhcnk7XG4gIH0gZWxzZSB7XG4gICAgcG9pbnRzID0gX3BvaW50c0Zyb21TZWdtZW50cyhib3VuZGFyeSwgbGluZSk7XG4gIH1cbiAgcmV0dXJuIHBvaW50cy5sZW5ndGggPyBuZXcgTGluZUVsZW1lbnQoe1xuICAgIHBvaW50cyxcbiAgICBvcHRpb25zOiB7dGVuc2lvbjogMH0sXG4gICAgX2xvb3AsXG4gICAgX2Z1bGxMb29wOiBfbG9vcFxuICB9KSA6IG51bGw7XG59XG5mdW5jdGlvbiBfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkge1xuICByZXR1cm4gc291cmNlICYmIHNvdXJjZS5maWxsICE9PSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX3Jlc29sdmVUYXJnZXQoc291cmNlcywgaW5kZXgsIHByb3BhZ2F0ZSkge1xuICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgbGV0IGZpbGwgPSBzb3VyY2UuZmlsbDtcbiAgY29uc3QgdmlzaXRlZCA9IFtpbmRleF07XG4gIGxldCB0YXJnZXQ7XG4gIGlmICghcHJvcGFnYXRlKSB7XG4gICAgcmV0dXJuIGZpbGw7XG4gIH1cbiAgd2hpbGUgKGZpbGwgIT09IGZhbHNlICYmIHZpc2l0ZWQuaW5kZXhPZihmaWxsKSA9PT0gLTEpIHtcbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKGZpbGwpKSB7XG4gICAgICByZXR1cm4gZmlsbDtcbiAgICB9XG4gICAgdGFyZ2V0ID0gc291cmNlc1tmaWxsXTtcbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGFyZ2V0LnZpc2libGUpIHtcbiAgICAgIHJldHVybiBmaWxsO1xuICAgIH1cbiAgICB2aXNpdGVkLnB1c2goZmlsbCk7XG4gICAgZmlsbCA9IHRhcmdldC5maWxsO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIF9kZWNvZGVGaWxsKGxpbmUsIGluZGV4LCBjb3VudCkge1xuICBjb25zdCBmaWxsID0gcGFyc2VGaWxsT3B0aW9uKGxpbmUpO1xuICBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICByZXR1cm4gaXNOYU4oZmlsbC52YWx1ZSkgPyBmYWxzZSA6IGZpbGw7XG4gIH1cbiAgbGV0IHRhcmdldCA9IHBhcnNlRmxvYXQoZmlsbCk7XG4gIGlmIChpc051bWJlckZpbml0ZSh0YXJnZXQpICYmIE1hdGguZmxvb3IodGFyZ2V0KSA9PT0gdGFyZ2V0KSB7XG4gICAgcmV0dXJuIGRlY29kZVRhcmdldEluZGV4KGZpbGxbMF0sIGluZGV4LCB0YXJnZXQsIGNvdW50KTtcbiAgfVxuICByZXR1cm4gWydvcmlnaW4nLCAnc3RhcnQnLCAnZW5kJywgJ3N0YWNrJywgJ3NoYXBlJ10uaW5kZXhPZihmaWxsKSA+PSAwICYmIGZpbGw7XG59XG5mdW5jdGlvbiBkZWNvZGVUYXJnZXRJbmRleChmaXJzdENoLCBpbmRleCwgdGFyZ2V0LCBjb3VudCkge1xuICBpZiAoZmlyc3RDaCA9PT0gJy0nIHx8IGZpcnN0Q2ggPT09ICcrJykge1xuICAgIHRhcmdldCA9IGluZGV4ICsgdGFyZ2V0O1xuICB9XG4gIGlmICh0YXJnZXQgPT09IGluZGV4IHx8IHRhcmdldCA8IDAgfHwgdGFyZ2V0ID49IGNvdW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfZ2V0VGFyZ2V0UGl4ZWwoZmlsbCwgc2NhbGUpIHtcbiAgbGV0IHBpeGVsID0gbnVsbDtcbiAgaWYgKGZpbGwgPT09ICdzdGFydCcpIHtcbiAgICBwaXhlbCA9IHNjYWxlLmJvdHRvbTtcbiAgfSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuICAgIHBpeGVsID0gc2NhbGUudG9wO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgcGl4ZWwgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKGZpbGwudmFsdWUpO1xuICB9IGVsc2UgaWYgKHNjYWxlLmdldEJhc2VQaXhlbCkge1xuICAgIHBpeGVsID0gc2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gIH1cbiAgcmV0dXJuIHBpeGVsO1xufVxuZnVuY3Rpb24gX2dldFRhcmdldFZhbHVlKGZpbGwsIHNjYWxlLCBzdGFydFZhbHVlKSB7XG4gIGxldCB2YWx1ZTtcbiAgaWYgKGZpbGwgPT09ICdzdGFydCcpIHtcbiAgICB2YWx1ZSA9IHN0YXJ0VmFsdWU7XG4gIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2VuZCcpIHtcbiAgICB2YWx1ZSA9IHNjYWxlLm9wdGlvbnMucmV2ZXJzZSA/IHNjYWxlLm1pbiA6IHNjYWxlLm1heDtcbiAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgIHZhbHVlID0gZmlsbC52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHNjYWxlLmdldEJhc2VWYWx1ZSgpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHBhcnNlRmlsbE9wdGlvbihsaW5lKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBsaW5lLm9wdGlvbnM7XG4gIGNvbnN0IGZpbGxPcHRpb24gPSBvcHRpb25zLmZpbGw7XG4gIGxldCBmaWxsID0gdmFsdWVPckRlZmF1bHQoZmlsbE9wdGlvbiAmJiBmaWxsT3B0aW9uLnRhcmdldCwgZmlsbE9wdGlvbik7XG4gIGlmIChmaWxsID09PSB1bmRlZmluZWQpIHtcbiAgICBmaWxsID0gISFvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgfVxuICBpZiAoZmlsbCA9PT0gZmFsc2UgfHwgZmlsbCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZmlsbCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiAnb3JpZ2luJztcbiAgfVxuICByZXR1cm4gZmlsbDtcbn1cblxuZnVuY3Rpb24gX2J1aWxkU3RhY2tMaW5lKHNvdXJjZSkge1xuICBjb25zdCB7c2NhbGUsIGluZGV4LCBsaW5lfSA9IHNvdXJjZTtcbiAgY29uc3QgcG9pbnRzID0gW107XG4gIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgY29uc3Qgc291cmNlUG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IGxpbmVzQmVsb3cgPSBnZXRMaW5lc0JlbG93KHNjYWxlLCBpbmRleCk7XG4gIGxpbmVzQmVsb3cucHVzaChfY3JlYXRlQm91bmRhcnlMaW5lKHt4OiBudWxsLCB5OiBzY2FsZS5ib3R0b219LCBsaW5lKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgZm9yIChsZXQgaiA9IHNlZ21lbnQuc3RhcnQ7IGogPD0gc2VnbWVudC5lbmQ7IGorKykge1xuICAgICAgYWRkUG9pbnRzQmVsb3cocG9pbnRzLCBzb3VyY2VQb2ludHNbal0sIGxpbmVzQmVsb3cpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IExpbmVFbGVtZW50KHtwb2ludHMsIG9wdGlvbnM6IHt9fSk7XG59XG5mdW5jdGlvbiBnZXRMaW5lc0JlbG93KHNjYWxlLCBpbmRleCkge1xuICBjb25zdCBiZWxvdyA9IFtdO1xuICBjb25zdCBtZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCdsaW5lJyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWV0YXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBtZXRhID0gbWV0YXNbaV07XG4gICAgaWYgKG1ldGEuaW5kZXggPT09IGluZGV4KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKCFtZXRhLmhpZGRlbikge1xuICAgICAgYmVsb3cudW5zaGlmdChtZXRhLmRhdGFzZXQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmVsb3c7XG59XG5mdW5jdGlvbiBhZGRQb2ludHNCZWxvdyhwb2ludHMsIHNvdXJjZVBvaW50LCBsaW5lc0JlbG93KSB7XG4gIGNvbnN0IHBvc3Rwb25lZCA9IFtdO1xuICBmb3IgKGxldCBqID0gMDsgaiA8IGxpbmVzQmVsb3cubGVuZ3RoOyBqKyspIHtcbiAgICBjb25zdCBsaW5lID0gbGluZXNCZWxvd1tqXTtcbiAgICBjb25zdCB7Zmlyc3QsIGxhc3QsIHBvaW50fSA9IGZpbmRQb2ludChsaW5lLCBzb3VyY2VQb2ludCwgJ3gnKTtcbiAgICBpZiAoIXBvaW50IHx8IChmaXJzdCAmJiBsYXN0KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChmaXJzdCkge1xuICAgICAgcG9zdHBvbmVkLnVuc2hpZnQocG9pbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgICBpZiAoIWxhc3QpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHBvaW50cy5wdXNoKC4uLnBvc3Rwb25lZCk7XG59XG5mdW5jdGlvbiBmaW5kUG9pbnQobGluZSwgc291cmNlUG9pbnQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IHBvaW50ID0gbGluZS5pbnRlcnBvbGF0ZShzb3VyY2VQb2ludCwgcHJvcGVydHkpO1xuICBpZiAoIXBvaW50KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHBvaW50VmFsdWUgPSBwb2ludFtwcm9wZXJ0eV07XG4gIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgY29uc3QgbGluZVBvaW50cyA9IGxpbmUucG9pbnRzO1xuICBsZXQgZmlyc3QgPSBmYWxzZTtcbiAgbGV0IGxhc3QgPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICBjb25zdCBmaXJzdFZhbHVlID0gbGluZVBvaW50c1tzZWdtZW50LnN0YXJ0XVtwcm9wZXJ0eV07XG4gICAgY29uc3QgbGFzdFZhbHVlID0gbGluZVBvaW50c1tzZWdtZW50LmVuZF1bcHJvcGVydHldO1xuICAgIGlmIChfaXNCZXR3ZWVuKHBvaW50VmFsdWUsIGZpcnN0VmFsdWUsIGxhc3RWYWx1ZSkpIHtcbiAgICAgIGZpcnN0ID0gcG9pbnRWYWx1ZSA9PT0gZmlyc3RWYWx1ZTtcbiAgICAgIGxhc3QgPSBwb2ludFZhbHVlID09PSBsYXN0VmFsdWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtmaXJzdCwgbGFzdCwgcG9pbnR9O1xufVxuXG5jbGFzcyBzaW1wbGVBcmMge1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgdGhpcy54ID0gb3B0cy54O1xuICAgIHRoaXMueSA9IG9wdHMueTtcbiAgICB0aGlzLnJhZGl1cyA9IG9wdHMucmFkaXVzO1xuICB9XG4gIHBhdGhTZWdtZW50KGN0eCwgYm91bmRzLCBvcHRzKSB7XG4gICAgY29uc3Qge3gsIHksIHJhZGl1c30gPSB0aGlzO1xuICAgIGJvdW5kcyA9IGJvdW5kcyB8fCB7c3RhcnQ6IDAsIGVuZDogVEFVfTtcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgYm91bmRzLmVuZCwgYm91bmRzLnN0YXJ0LCB0cnVlKTtcbiAgICByZXR1cm4gIW9wdHMuYm91bmRzO1xuICB9XG4gIGludGVycG9sYXRlKHBvaW50KSB7XG4gICAgY29uc3Qge3gsIHksIHJhZGl1c30gPSB0aGlzO1xuICAgIGNvbnN0IGFuZ2xlID0gcG9pbnQuYW5nbGU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHggKyBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsXG4gICAgICB5OiB5ICsgTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzLFxuICAgICAgYW5nbGVcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRUYXJnZXQoc291cmNlKSB7XG4gIGNvbnN0IHtjaGFydCwgZmlsbCwgbGluZX0gPSBzb3VyY2U7XG4gIGlmIChpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgIHJldHVybiBnZXRMaW5lQnlJbmRleChjaGFydCwgZmlsbCk7XG4gIH1cbiAgaWYgKGZpbGwgPT09ICdzdGFjaycpIHtcbiAgICByZXR1cm4gX2J1aWxkU3RhY2tMaW5lKHNvdXJjZSk7XG4gIH1cbiAgaWYgKGZpbGwgPT09ICdzaGFwZScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBib3VuZGFyeSA9IGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpO1xuICBpZiAoYm91bmRhcnkgaW5zdGFuY2VvZiBzaW1wbGVBcmMpIHtcbiAgICByZXR1cm4gYm91bmRhcnk7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVCb3VuZGFyeUxpbmUoYm91bmRhcnksIGxpbmUpO1xufVxuZnVuY3Rpb24gZ2V0TGluZUJ5SW5kZXgoY2hhcnQsIGluZGV4KSB7XG4gIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gIGNvbnN0IHZpc2libGUgPSBtZXRhICYmIGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaW5kZXgpO1xuICByZXR1cm4gdmlzaWJsZSA/IG1ldGEuZGF0YXNldCA6IG51bGw7XG59XG5mdW5jdGlvbiBjb21wdXRlQm91bmRhcnkoc291cmNlKSB7XG4gIGNvbnN0IHNjYWxlID0gc291cmNlLnNjYWxlIHx8IHt9O1xuICBpZiAoc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKSB7XG4gICAgcmV0dXJuIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSk7XG4gIH1cbiAgcmV0dXJuIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpO1xufVxuZnVuY3Rpb24gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSkge1xuICBjb25zdCB7c2NhbGUgPSB7fSwgZmlsbH0gPSBzb3VyY2U7XG4gIGNvbnN0IHBpeGVsID0gX2dldFRhcmdldFBpeGVsKGZpbGwsIHNjYWxlKTtcbiAgaWYgKGlzTnVtYmVyRmluaXRlKHBpeGVsKSkge1xuICAgIGNvbnN0IGhvcml6b250YWwgPSBzY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogaG9yaXpvbnRhbCA/IHBpeGVsIDogbnVsbCxcbiAgICAgIHk6IGhvcml6b250YWwgPyBudWxsIDogcGl4ZWxcbiAgICB9O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKSB7XG4gIGNvbnN0IHtzY2FsZSwgZmlsbH0gPSBzb3VyY2U7XG4gIGNvbnN0IG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zO1xuICBjb25zdCBsZW5ndGggPSBzY2FsZS5nZXRMYWJlbHMoKS5sZW5ndGg7XG4gIGNvbnN0IHN0YXJ0ID0gb3B0aW9ucy5yZXZlcnNlID8gc2NhbGUubWF4IDogc2NhbGUubWluO1xuICBjb25zdCB2YWx1ZSA9IF9nZXRUYXJnZXRWYWx1ZShmaWxsLCBzY2FsZSwgc3RhcnQpO1xuICBjb25zdCB0YXJnZXQgPSBbXTtcbiAgaWYgKG9wdGlvbnMuZ3JpZC5jaXJjdWxhcikge1xuICAgIGNvbnN0IGNlbnRlciA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSgwLCBzdGFydCk7XG4gICAgcmV0dXJuIG5ldyBzaW1wbGVBcmMoe1xuICAgICAgeDogY2VudGVyLngsXG4gICAgICB5OiBjZW50ZXIueSxcbiAgICAgIHJhZGl1czogc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpXG4gICAgfSk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHRhcmdldC5wdXNoKHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCB2YWx1ZSkpO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9kcmF3ZmlsbChjdHgsIHNvdXJjZSwgYXJlYSkge1xuICBjb25zdCB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHNvdXJjZSk7XG4gIGNvbnN0IHtsaW5lLCBzY2FsZSwgYXhpc30gPSBzb3VyY2U7XG4gIGNvbnN0IGxpbmVPcHRzID0gbGluZS5vcHRpb25zO1xuICBjb25zdCBmaWxsT3B0aW9uID0gbGluZU9wdHMuZmlsbDtcbiAgY29uc3QgY29sb3IgPSBsaW5lT3B0cy5iYWNrZ3JvdW5kQ29sb3I7XG4gIGNvbnN0IHthYm92ZSA9IGNvbG9yLCBiZWxvdyA9IGNvbG9yfSA9IGZpbGxPcHRpb24gfHwge307XG4gIGlmICh0YXJnZXQgJiYgbGluZS5wb2ludHMubGVuZ3RoKSB7XG4gICAgY2xpcEFyZWEoY3R4LCBhcmVhKTtcbiAgICBkb0ZpbGwoY3R4LCB7bGluZSwgdGFyZ2V0LCBhYm92ZSwgYmVsb3csIGFyZWEsIHNjYWxlLCBheGlzfSk7XG4gICAgdW5jbGlwQXJlYShjdHgpO1xuICB9XG59XG5mdW5jdGlvbiBkb0ZpbGwoY3R4LCBjZmcpIHtcbiAgY29uc3Qge2xpbmUsIHRhcmdldCwgYWJvdmUsIGJlbG93LCBhcmVhLCBzY2FsZX0gPSBjZmc7XG4gIGNvbnN0IHByb3BlcnR5ID0gbGluZS5fbG9vcCA/ICdhbmdsZScgOiBjZmcuYXhpcztcbiAgY3R4LnNhdmUoKTtcbiAgaWYgKHByb3BlcnR5ID09PSAneCcgJiYgYmVsb3cgIT09IGFib3ZlKSB7XG4gICAgY2xpcFZlcnRpY2FsKGN0eCwgdGFyZ2V0LCBhcmVhLnRvcCk7XG4gICAgZmlsbChjdHgsIHtsaW5lLCB0YXJnZXQsIGNvbG9yOiBhYm92ZSwgc2NhbGUsIHByb3BlcnR5fSk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgYXJlYS5ib3R0b20pO1xuICB9XG4gIGZpbGwoY3R4LCB7bGluZSwgdGFyZ2V0LCBjb2xvcjogYmVsb3csIHNjYWxlLCBwcm9wZXJ0eX0pO1xuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gY2xpcFZlcnRpY2FsKGN0eCwgdGFyZ2V0LCBjbGlwWSkge1xuICBjb25zdCB7c2VnbWVudHMsIHBvaW50c30gPSB0YXJnZXQ7XG4gIGxldCBmaXJzdCA9IHRydWU7XG4gIGxldCBsaW5lTG9vcCA9IGZhbHNlO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xuICAgIGNvbnN0IHtzdGFydCwgZW5kfSA9IHNlZ21lbnQ7XG4gICAgY29uc3QgZmlyc3RQb2ludCA9IHBvaW50c1tzdGFydF07XG4gICAgY29uc3QgbGFzdFBvaW50ID0gcG9pbnRzW19maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpXTtcbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgIGN0eC5tb3ZlVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xuICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmxpbmVUbyhmaXJzdFBvaW50LngsIGNsaXBZKTtcbiAgICAgIGN0eC5saW5lVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xuICAgIH1cbiAgICBsaW5lTG9vcCA9ICEhdGFyZ2V0LnBhdGhTZWdtZW50KGN0eCwgc2VnbWVudCwge21vdmU6IGxpbmVMb29wfSk7XG4gICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5saW5lVG8obGFzdFBvaW50LngsIGNsaXBZKTtcbiAgICB9XG4gIH1cbiAgY3R4LmxpbmVUbyh0YXJnZXQuZmlyc3QoKS54LCBjbGlwWSk7XG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIGZpbGwoY3R4LCBjZmcpIHtcbiAgY29uc3Qge2xpbmUsIHRhcmdldCwgcHJvcGVydHksIGNvbG9yLCBzY2FsZX0gPSBjZmc7XG4gIGNvbnN0IHNlZ21lbnRzID0gX3NlZ21lbnRzKGxpbmUsIHRhcmdldCwgcHJvcGVydHkpO1xuICBmb3IgKGNvbnN0IHtzb3VyY2U6IHNyYywgdGFyZ2V0OiB0Z3QsIHN0YXJ0LCBlbmR9IG9mIHNlZ21lbnRzKSB7XG4gICAgY29uc3Qge3N0eWxlOiB7YmFja2dyb3VuZENvbG9yID0gY29sb3J9ID0ge319ID0gc3JjO1xuICAgIGNvbnN0IG5vdFNoYXBlID0gdGFyZ2V0ICE9PSB0cnVlO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICBjbGlwQm91bmRzKGN0eCwgc2NhbGUsIG5vdFNoYXBlICYmIF9nZXRCb3VuZHMocHJvcGVydHksIHN0YXJ0LCBlbmQpKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY29uc3QgbGluZUxvb3AgPSAhIWxpbmUucGF0aFNlZ21lbnQoY3R4LCBzcmMpO1xuICAgIGxldCBsb29wO1xuICAgIGlmIChub3RTaGFwZSkge1xuICAgICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgZW5kLCBwcm9wZXJ0eSk7XG4gICAgICB9XG4gICAgICBjb25zdCB0YXJnZXRMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCB0Z3QsIHttb3ZlOiBsaW5lTG9vcCwgcmV2ZXJzZTogdHJ1ZX0pO1xuICAgICAgbG9vcCA9IGxpbmVMb29wICYmIHRhcmdldExvb3A7XG4gICAgICBpZiAoIWxvb3ApIHtcbiAgICAgICAgaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBzdGFydCwgcHJvcGVydHkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmZpbGwobG9vcCA/ICdldmVub2RkJyA6ICdub256ZXJvJyk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxufVxuZnVuY3Rpb24gY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBib3VuZHMpIHtcbiAgY29uc3Qge3RvcCwgYm90dG9tfSA9IHNjYWxlLmNoYXJ0LmNoYXJ0QXJlYTtcbiAgY29uc3Qge3Byb3BlcnR5LCBzdGFydCwgZW5kfSA9IGJvdW5kcyB8fCB7fTtcbiAgaWYgKHByb3BlcnR5ID09PSAneCcpIHtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LnJlY3Qoc3RhcnQsIHRvcCwgZW5kIC0gc3RhcnQsIGJvdHRvbSAtIHRvcCk7XG4gICAgY3R4LmNsaXAoKTtcbiAgfVxufVxuZnVuY3Rpb24gaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBwb2ludCwgcHJvcGVydHkpIHtcbiAgY29uc3QgaW50ZXJwb2xhdGVkUG9pbnQgPSB0YXJnZXQuaW50ZXJwb2xhdGUocG9pbnQsIHByb3BlcnR5KTtcbiAgaWYgKGludGVycG9sYXRlZFBvaW50KSB7XG4gICAgY3R4LmxpbmVUbyhpbnRlcnBvbGF0ZWRQb2ludC54LCBpbnRlcnBvbGF0ZWRQb2ludC55KTtcbiAgfVxufVxuXG52YXIgaW5kZXggPSB7XG4gIGlkOiAnZmlsbGVyJyxcbiAgYWZ0ZXJEYXRhc2V0c1VwZGF0ZShjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjb3VudCA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7XG4gICAgY29uc3Qgc291cmNlcyA9IFtdO1xuICAgIGxldCBtZXRhLCBpLCBsaW5lLCBzb3VyY2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgIGxpbmUgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICBzb3VyY2UgPSBudWxsO1xuICAgICAgaWYgKGxpbmUgJiYgbGluZS5vcHRpb25zICYmIGxpbmUgaW5zdGFuY2VvZiBMaW5lRWxlbWVudCkge1xuICAgICAgICBzb3VyY2UgPSB7XG4gICAgICAgICAgdmlzaWJsZTogY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSxcbiAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICBmaWxsOiBfZGVjb2RlRmlsbChsaW5lLCBpLCBjb3VudCksXG4gICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgYXhpczogbWV0YS5jb250cm9sbGVyLm9wdGlvbnMuaW5kZXhBeGlzLFxuICAgICAgICAgIHNjYWxlOiBtZXRhLnZTY2FsZSxcbiAgICAgICAgICBsaW5lLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgbWV0YS4kZmlsbGVyID0gc291cmNlO1xuICAgICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgaWYgKCFzb3VyY2UgfHwgc291cmNlLmZpbGwgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgc291cmNlLmZpbGwgPSBfcmVzb2x2ZVRhcmdldChzb3VyY2VzLCBpLCBvcHRpb25zLnByb3BhZ2F0ZSk7XG4gICAgfVxuICB9LFxuICBiZWZvcmVEcmF3KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IGRyYXcgPSBvcHRpb25zLmRyYXdUaW1lID09PSAnYmVmb3JlRHJhdyc7XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgY29uc3QgYXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBmb3IgKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IG1ldGFzZXRzW2ldLiRmaWxsZXI7XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHNvdXJjZS5saW5lLnVwZGF0ZUNvbnRyb2xQb2ludHMoYXJlYSwgc291cmNlLmF4aXMpO1xuICAgICAgaWYgKGRyYXcgJiYgc291cmNlLmZpbGwpIHtcbiAgICAgICAgX2RyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBhcmVhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGJlZm9yZURhdGFzZXRzRHJhdyhjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXRzRHJhdycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgZm9yIChsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgaWYgKF9zaG91bGRBcHBseUZpbGwoc291cmNlKSkge1xuICAgICAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBiZWZvcmVEYXRhc2V0RHJhdyhjaGFydCwgYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3MubWV0YS4kZmlsbGVyO1xuICAgIGlmICghX3Nob3VsZEFwcGx5RmlsbChzb3VyY2UpIHx8IG9wdGlvbnMuZHJhd1RpbWUgIT09ICdiZWZvcmVEYXRhc2V0RHJhdycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2RyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBjaGFydC5jaGFydEFyZWEpO1xuICB9LFxuICBkZWZhdWx0czoge1xuICAgIHByb3BhZ2F0ZTogdHJ1ZSxcbiAgICBkcmF3VGltZTogJ2JlZm9yZURhdGFzZXREcmF3J1xuICB9XG59O1xuXG5jb25zdCBnZXRCb3hTaXplID0gKGxhYmVsT3B0cywgZm9udFNpemUpID0+IHtcbiAgbGV0IHtib3hIZWlnaHQgPSBmb250U2l6ZSwgYm94V2lkdGggPSBmb250U2l6ZX0gPSBsYWJlbE9wdHM7XG4gIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgIGJveEhlaWdodCA9IE1hdGgubWluKGJveEhlaWdodCwgZm9udFNpemUpO1xuICAgIGJveFdpZHRoID0gbGFiZWxPcHRzLnBvaW50U3R5bGVXaWR0aCB8fCBNYXRoLm1pbihib3hXaWR0aCwgZm9udFNpemUpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYm94V2lkdGgsXG4gICAgYm94SGVpZ2h0LFxuICAgIGl0ZW1IZWlnaHQ6IE1hdGgubWF4KGZvbnRTaXplLCBib3hIZWlnaHQpXG4gIH07XG59O1xuY29uc3QgaXRlbXNFcXVhbCA9IChhLCBiKSA9PiBhICE9PSBudWxsICYmIGIgIT09IG51bGwgJiYgYS5kYXRhc2V0SW5kZXggPT09IGIuZGF0YXNldEluZGV4ICYmIGEuaW5kZXggPT09IGIuaW5kZXg7XG5jbGFzcyBMZWdlbmQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9hZGRlZCA9IGZhbHNlO1xuICAgIHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICB0aGlzLl9ob3ZlcmVkSXRlbSA9IG51bGw7XG4gICAgdGhpcy5kb3VnaG51dE1vZGUgPSBmYWxzZTtcbiAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29sdW1uU2l6ZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5saW5lV2lkdGhzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9tYXJnaW5zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53ZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgIHRoaXMubWF4V2lkdGggPSBtYXhXaWR0aDtcbiAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucztcbiAgICB0aGlzLnNldERpbWVuc2lvbnMoKTtcbiAgICB0aGlzLmJ1aWxkTGFiZWxzKCk7XG4gICAgdGhpcy5maXQoKTtcbiAgfVxuICBzZXREaW1lbnNpb25zKCkge1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgIHRoaXMubGVmdCA9IHRoaXMuX21hcmdpbnMubGVmdDtcbiAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgdGhpcy50b3AgPSB0aGlzLl9tYXJnaW5zLnRvcDtcbiAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgfVxuICB9XG4gIGJ1aWxkTGFiZWxzKCkge1xuICAgIGNvbnN0IGxhYmVsT3B0cyA9IHRoaXMub3B0aW9ucy5sYWJlbHMgfHwge307XG4gICAgbGV0IGxlZ2VuZEl0ZW1zID0gY2FsbGJhY2sobGFiZWxPcHRzLmdlbmVyYXRlTGFiZWxzLCBbdGhpcy5jaGFydF0sIHRoaXMpIHx8IFtdO1xuICAgIGlmIChsYWJlbE9wdHMuZmlsdGVyKSB7XG4gICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLmZpbHRlcigoaXRlbSkgPT4gbGFiZWxPcHRzLmZpbHRlcihpdGVtLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICB9XG4gICAgaWYgKGxhYmVsT3B0cy5zb3J0KSB7XG4gICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLnNvcnQoKGEsIGIpID0+IGxhYmVsT3B0cy5zb3J0KGEsIGIsIHRoaXMuY2hhcnQuZGF0YSkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgIGxlZ2VuZEl0ZW1zLnJldmVyc2UoKTtcbiAgICB9XG4gICAgdGhpcy5sZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zO1xuICB9XG4gIGZpdCgpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgY3R4fSA9IHRoaXM7XG4gICAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhYmVsT3B0cyA9IG9wdGlvbnMubGFiZWxzO1xuICAgIGNvbnN0IGxhYmVsRm9udCA9IHRvRm9udChsYWJlbE9wdHMuZm9udCk7XG4gICAgY29uc3QgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcbiAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgIGNvbnN0IHtib3hXaWR0aCwgaXRlbUhlaWdodH0gPSBnZXRCb3hTaXplKGxhYmVsT3B0cywgZm9udFNpemUpO1xuICAgIGxldCB3aWR0aCwgaGVpZ2h0O1xuICAgIGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgd2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gdGhpcy5fZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgIHdpZHRoID0gdGhpcy5fZml0Q29scyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgIH1cbiAgICB0aGlzLndpZHRoID0gTWF0aC5taW4od2lkdGgsIG9wdGlvbnMubWF4V2lkdGggfHwgdGhpcy5tYXhXaWR0aCk7XG4gICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIG9wdGlvbnMubWF4SGVpZ2h0IHx8IHRoaXMubWF4SGVpZ2h0KTtcbiAgfVxuICBfZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSB7XG4gICAgY29uc3Qge2N0eCwgbWF4V2lkdGgsIG9wdGlvbnM6IHtsYWJlbHM6IHtwYWRkaW5nfX19ID0gdGhpcztcbiAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICBjb25zdCBsaW5lV2lkdGhzID0gdGhpcy5saW5lV2lkdGhzID0gWzBdO1xuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICBsZXQgdG90YWxIZWlnaHQgPSB0aXRsZUhlaWdodDtcbiAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBsZXQgcm93ID0gLTE7XG4gICAgbGV0IHRvcCA9IC1saW5lSGVpZ2h0O1xuICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSkgPT4ge1xuICAgICAgY29uc3QgaXRlbVdpZHRoID0gYm94V2lkdGggKyAoZm9udFNpemUgLyAyKSArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgaWYgKGkgPT09IDAgfHwgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICsgaXRlbVdpZHRoICsgMiAqIHBhZGRpbmcgPiBtYXhXaWR0aCkge1xuICAgICAgICB0b3RhbEhlaWdodCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gKGkgPiAwID8gMCA6IDEpXSA9IDA7XG4gICAgICAgIHRvcCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICByb3crKztcbiAgICAgIH1cbiAgICAgIGhpdGJveGVzW2ldID0ge2xlZnQ6IDAsIHRvcCwgcm93LCB3aWR0aDogaXRlbVdpZHRoLCBoZWlnaHQ6IGl0ZW1IZWlnaHR9O1xuICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICs9IGl0ZW1XaWR0aCArIHBhZGRpbmc7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvdGFsSGVpZ2h0O1xuICB9XG4gIF9maXRDb2xzKHRpdGxlSGVpZ2h0LCBmb250U2l6ZSwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpIHtcbiAgICBjb25zdCB7Y3R4LCBtYXhIZWlnaHQsIG9wdGlvbnM6IHtsYWJlbHM6IHtwYWRkaW5nfX19ID0gdGhpcztcbiAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICBjb25zdCBjb2x1bW5TaXplcyA9IHRoaXMuY29sdW1uU2l6ZXMgPSBbXTtcbiAgICBjb25zdCBoZWlnaHRMaW1pdCA9IG1heEhlaWdodCAtIHRpdGxlSGVpZ2h0O1xuICAgIGxldCB0b3RhbFdpZHRoID0gcGFkZGluZztcbiAgICBsZXQgY3VycmVudENvbFdpZHRoID0gMDtcbiAgICBsZXQgY3VycmVudENvbEhlaWdodCA9IDA7XG4gICAgbGV0IGxlZnQgPSAwO1xuICAgIGxldCBjb2wgPSAwO1xuICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSkgPT4ge1xuICAgICAgY29uc3QgaXRlbVdpZHRoID0gYm94V2lkdGggKyAoZm9udFNpemUgLyAyKSArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgaWYgKGkgPiAwICYmIGN1cnJlbnRDb2xIZWlnaHQgKyBpdGVtSGVpZ2h0ICsgMiAqIHBhZGRpbmcgPiBoZWlnaHRMaW1pdCkge1xuICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgIGNvbHVtblNpemVzLnB1c2goe3dpZHRoOiBjdXJyZW50Q29sV2lkdGgsIGhlaWdodDogY3VycmVudENvbEhlaWdodH0pO1xuICAgICAgICBsZWZ0ICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgIGNvbCsrO1xuICAgICAgICBjdXJyZW50Q29sV2lkdGggPSBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICAgIH1cbiAgICAgIGhpdGJveGVzW2ldID0ge2xlZnQsIHRvcDogY3VycmVudENvbEhlaWdodCwgY29sLCB3aWR0aDogaXRlbVdpZHRoLCBoZWlnaHQ6IGl0ZW1IZWlnaHR9O1xuICAgICAgY3VycmVudENvbFdpZHRoID0gTWF0aC5tYXgoY3VycmVudENvbFdpZHRoLCBpdGVtV2lkdGgpO1xuICAgICAgY3VycmVudENvbEhlaWdodCArPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICB9KTtcbiAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aDtcbiAgICBjb2x1bW5TaXplcy5wdXNoKHt3aWR0aDogY3VycmVudENvbFdpZHRoLCBoZWlnaHQ6IGN1cnJlbnRDb2xIZWlnaHR9KTtcbiAgICByZXR1cm4gdG90YWxXaWR0aDtcbiAgfVxuICBhZGp1c3RIaXRCb3hlcygpIHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgY29uc3Qge2xlZ2VuZEhpdEJveGVzOiBoaXRib3hlcywgb3B0aW9uczoge2FsaWduLCBsYWJlbHM6IHtwYWRkaW5nfSwgcnRsfX0gPSB0aGlzO1xuICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIocnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBsZXQgcm93ID0gMDtcbiAgICAgIGxldCBsZWZ0ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSB0aGlzLmxpbmVXaWR0aHNbcm93XSk7XG4gICAgICBmb3IgKGNvbnN0IGhpdGJveCBvZiBoaXRib3hlcykge1xuICAgICAgICBpZiAocm93ICE9PSBoaXRib3gucm93KSB7XG4gICAgICAgICAgcm93ID0gaGl0Ym94LnJvdztcbiAgICAgICAgICBsZWZ0ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSB0aGlzLmxpbmVXaWR0aHNbcm93XSk7XG4gICAgICAgIH1cbiAgICAgICAgaGl0Ym94LnRvcCArPSB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgaGl0Ym94LmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChsZWZ0KSwgaGl0Ym94LndpZHRoKTtcbiAgICAgICAgbGVmdCArPSBoaXRib3gud2lkdGggKyBwYWRkaW5nO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY29sID0gMDtcbiAgICAgIGxldCB0b3AgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gdGhpcy5jb2x1bW5TaXplc1tjb2xdLmhlaWdodCk7XG4gICAgICBmb3IgKGNvbnN0IGhpdGJveCBvZiBoaXRib3hlcykge1xuICAgICAgICBpZiAoaGl0Ym94LmNvbCAhPT0gY29sKSB7XG4gICAgICAgICAgY29sID0gaGl0Ym94LmNvbDtcbiAgICAgICAgICB0b3AgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gdGhpcy5jb2x1bW5TaXplc1tjb2xdLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaGl0Ym94LnRvcCA9IHRvcDtcbiAgICAgICAgaGl0Ym94LmxlZnQgKz0gdGhpcy5sZWZ0ICsgcGFkZGluZztcbiAgICAgICAgaGl0Ym94LmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChoaXRib3gubGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgIHRvcCArPSBoaXRib3guaGVpZ2h0ICsgcGFkZGluZztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaXNIb3Jpem9udGFsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG4gIH1cbiAgZHJhdygpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgY2xpcEFyZWEoY3R4LCB0aGlzKTtcbiAgICAgIHRoaXMuX2RyYXcoKTtcbiAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICB9XG4gIH1cbiAgX2RyYXcoKSB7XG4gICAgY29uc3Qge29wdGlvbnM6IG9wdHMsIGNvbHVtblNpemVzLCBsaW5lV2lkdGhzLCBjdHh9ID0gdGhpcztcbiAgICBjb25zdCB7YWxpZ24sIGxhYmVsczogbGFiZWxPcHRzfSA9IG9wdHM7XG4gICAgY29uc3QgZGVmYXVsdENvbG9yID0gZGVmYXVsdHMuY29sb3I7XG4gICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICBjb25zdCBsYWJlbEZvbnQgPSB0b0ZvbnQobGFiZWxPcHRzLmZvbnQpO1xuICAgIGNvbnN0IHtjb2xvcjogZm9udENvbG9yLCBwYWRkaW5nfSA9IGxhYmVsT3B0cztcbiAgICBjb25zdCBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IGZvbnRTaXplIC8gMjtcbiAgICBsZXQgY3Vyc29yO1xuICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oJ2xlZnQnKTtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgY3R4LmxpbmVXaWR0aCA9IDAuNTtcbiAgICBjdHguZm9udCA9IGxhYmVsRm9udC5zdHJpbmc7XG4gICAgY29uc3Qge2JveFdpZHRoLCBib3hIZWlnaHQsIGl0ZW1IZWlnaHR9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICBjb25zdCBkcmF3TGVnZW5kQm94ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuICAgICAgaWYgKGlzTmFOKGJveFdpZHRoKSB8fCBib3hXaWR0aCA8PSAwIHx8IGlzTmFOKGJveEhlaWdodCkgfHwgYm94SGVpZ2h0IDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY29uc3QgbGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lV2lkdGgsIDEpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uZmlsbFN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVDYXAsICdidXR0Jyk7XG4gICAgICBjdHgubGluZURhc2hPZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVEYXNoT2Zmc2V0LCAwKTtcbiAgICAgIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZUpvaW4sICdtaXRlcicpO1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uc3Ryb2tlU3R5bGUsIGRlZmF1bHRDb2xvcik7XG4gICAgICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaCwgW10pKTtcbiAgICAgIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICBjb25zdCBkcmF3T3B0aW9ucyA9IHtcbiAgICAgICAgICByYWRpdXM6IGJveEhlaWdodCAqIE1hdGguU1FSVDIgLyAyLFxuICAgICAgICAgIHBvaW50U3R5bGU6IGxlZ2VuZEl0ZW0ucG9pbnRTdHlsZSxcbiAgICAgICAgICByb3RhdGlvbjogbGVnZW5kSXRlbS5yb3RhdGlvbixcbiAgICAgICAgICBib3JkZXJXaWR0aDogbGluZVdpZHRoXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNlbnRlclggPSBydGxIZWxwZXIueFBsdXMoeCwgYm94V2lkdGggLyAyKTtcbiAgICAgICAgY29uc3QgY2VudGVyWSA9IHkgKyBoYWxmRm9udFNpemU7XG4gICAgICAgIGRyYXdQb2ludExlZ2VuZChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZLCBsYWJlbE9wdHMucG9pbnRTdHlsZVdpZHRoICYmIGJveFdpZHRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHlCb3hUb3AgPSB5ICsgTWF0aC5tYXgoKGZvbnRTaXplIC0gYm94SGVpZ2h0KSAvIDIsIDApO1xuICAgICAgICBjb25zdCB4Qm94TGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHgsIGJveFdpZHRoKTtcbiAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsZWdlbmRJdGVtLmJvcmRlclJhZGl1cyk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKHYgPT4gdiAhPT0gMCkpIHtcbiAgICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgICB4OiB4Qm94TGVmdCxcbiAgICAgICAgICAgIHk6IHlCb3hUb3AsXG4gICAgICAgICAgICB3OiBib3hXaWR0aCxcbiAgICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0eC5yZWN0KHhCb3hMZWZ0LCB5Qm94VG9wLCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBpZiAobGluZVdpZHRoICE9PSAwKSB7XG4gICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH07XG4gICAgY29uc3QgZmlsbFRleHQgPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG4gICAgICByZW5kZXJUZXh0KGN0eCwgbGVnZW5kSXRlbS50ZXh0LCB4LCB5ICsgKGl0ZW1IZWlnaHQgLyAyKSwgbGFiZWxGb250LCB7XG4gICAgICAgIHN0cmlrZXRocm91Z2g6IGxlZ2VuZEl0ZW0uaGlkZGVuLFxuICAgICAgICB0ZXh0QWxpZ246IHJ0bEhlbHBlci50ZXh0QWxpZ24obGVnZW5kSXRlbS50ZXh0QWxpZ24pXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICBjdXJzb3IgPSB7XG4gICAgICAgIHg6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gbGluZVdpZHRoc1swXSksXG4gICAgICAgIHk6IHRoaXMudG9wICsgcGFkZGluZyArIHRpdGxlSGVpZ2h0LFxuICAgICAgICBsaW5lOiAwXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJzb3IgPSB7XG4gICAgICAgIHg6IHRoaXMubGVmdCArIHBhZGRpbmcsXG4gICAgICAgIHk6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSBjb2x1bW5TaXplc1swXS5oZWlnaHQpLFxuICAgICAgICBsaW5lOiAwXG4gICAgICB9O1xuICAgIH1cbiAgICBvdmVycmlkZVRleHREaXJlY3Rpb24odGhpcy5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG4gICAgY29uc3QgbGluZUhlaWdodCA9IGl0ZW1IZWlnaHQgKyBwYWRkaW5nO1xuICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSkgPT4ge1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3IgfHwgZm9udENvbG9yO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGxlZ2VuZEl0ZW0uZm9udENvbG9yIHx8IGZvbnRDb2xvcjtcbiAgICAgIGNvbnN0IHRleHRXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgY29uc3QgdGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihsZWdlbmRJdGVtLnRleHRBbGlnbiB8fCAobGVnZW5kSXRlbS50ZXh0QWxpZ24gPSBsYWJlbE9wdHMudGV4dEFsaWduKSk7XG4gICAgICBjb25zdCB3aWR0aCA9IGJveFdpZHRoICsgaGFsZkZvbnRTaXplICsgdGV4dFdpZHRoO1xuICAgICAgbGV0IHggPSBjdXJzb3IueDtcbiAgICAgIGxldCB5ID0gY3Vyc29yLnk7XG4gICAgICBydGxIZWxwZXIuc2V0V2lkdGgodGhpcy53aWR0aCk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGlmIChpID4gMCAmJiB4ICsgd2lkdGggKyBwYWRkaW5nID4gdGhpcy5yaWdodCkge1xuICAgICAgICAgIHkgPSBjdXJzb3IueSArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgIGN1cnNvci5saW5lKys7XG4gICAgICAgICAgeCA9IGN1cnNvci54ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzW2N1cnNvci5saW5lXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaSA+IDAgJiYgeSArIGxpbmVIZWlnaHQgPiB0aGlzLmJvdHRvbSkge1xuICAgICAgICB4ID0gY3Vyc29yLnggPSB4ICsgY29sdW1uU2l6ZXNbY3Vyc29yLmxpbmVdLndpZHRoICsgcGFkZGluZztcbiAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgeSA9IGN1cnNvci55ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzW2N1cnNvci5saW5lXS5oZWlnaHQpO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVhbFggPSBydGxIZWxwZXIueCh4KTtcbiAgICAgIGRyYXdMZWdlbmRCb3gocmVhbFgsIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgeCA9IF90ZXh0WCh0ZXh0QWxpZ24sIHggKyBib3hXaWR0aCArIGhhbGZGb250U2l6ZSwgaXNIb3Jpem9udGFsID8geCArIHdpZHRoIDogdGhpcy5yaWdodCwgb3B0cy5ydGwpO1xuICAgICAgZmlsbFRleHQocnRsSGVscGVyLngoeCksIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjdXJzb3IueCArPSB3aWR0aCArIHBhZGRpbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJzb3IueSArPSBsaW5lSGVpZ2h0O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICB9XG4gIGRyYXdUaXRsZSgpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpdGxlT3B0cyA9IG9wdHMudGl0bGU7XG4gICAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KHRpdGxlT3B0cy5mb250KTtcbiAgICBjb25zdCB0aXRsZVBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGVPcHRzLnBhZGRpbmcpO1xuICAgIGlmICghdGl0bGVPcHRzLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRpdGxlT3B0cy5wb3NpdGlvbjtcbiAgICBjb25zdCBoYWxmRm9udFNpemUgPSB0aXRsZUZvbnQuc2l6ZSAvIDI7XG4gICAgY29uc3QgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUgPSB0aXRsZVBhZGRpbmcudG9wICsgaGFsZkZvbnRTaXplO1xuICAgIGxldCB5O1xuICAgIGxldCBsZWZ0ID0gdGhpcy5sZWZ0O1xuICAgIGxldCBtYXhXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIG1heFdpZHRoID0gTWF0aC5tYXgoLi4udGhpcy5saW5lV2lkdGhzKTtcbiAgICAgIHkgPSB0aGlzLnRvcCArIHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplO1xuICAgICAgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKG9wdHMuYWxpZ24sIGxlZnQsIHRoaXMucmlnaHQgLSBtYXhXaWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1heEhlaWdodCA9IHRoaXMuY29sdW1uU2l6ZXMucmVkdWNlKChhY2MsIHNpemUpID0+IE1hdGgubWF4KGFjYywgc2l6ZS5oZWlnaHQpLCAwKTtcbiAgICAgIHkgPSB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSArIF9hbGlnblN0YXJ0RW5kKG9wdHMuYWxpZ24sIHRoaXMudG9wLCB0aGlzLmJvdHRvbSAtIG1heEhlaWdodCAtIG9wdHMubGFiZWxzLnBhZGRpbmcgLSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKSk7XG4gICAgfVxuICAgIGNvbnN0IHggPSBfYWxpZ25TdGFydEVuZChwb3NpdGlvbiwgbGVmdCwgbGVmdCArIG1heFdpZHRoKTtcbiAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihfdG9MZWZ0UmlnaHRDZW50ZXIocG9zaXRpb24pKTtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gdGl0bGVPcHRzLmNvbG9yO1xuICAgIGN0eC5maWxsU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgY3R4LmZvbnQgPSB0aXRsZUZvbnQuc3RyaW5nO1xuICAgIHJlbmRlclRleHQoY3R4LCB0aXRsZU9wdHMudGV4dCwgeCwgeSwgdGl0bGVGb250KTtcbiAgfVxuICBfY29tcHV0ZVRpdGxlSGVpZ2h0KCkge1xuICAgIGNvbnN0IHRpdGxlT3B0cyA9IHRoaXMub3B0aW9ucy50aXRsZTtcbiAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQodGl0bGVPcHRzLmZvbnQpO1xuICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgcmV0dXJuIHRpdGxlT3B0cy5kaXNwbGF5ID8gdGl0bGVGb250LmxpbmVIZWlnaHQgKyB0aXRsZVBhZGRpbmcuaGVpZ2h0IDogMDtcbiAgfVxuICBfZ2V0TGVnZW5kSXRlbUF0KHgsIHkpIHtcbiAgICBsZXQgaSwgaGl0Qm94LCBsaDtcbiAgICBpZiAoX2lzQmV0d2Vlbih4LCB0aGlzLmxlZnQsIHRoaXMucmlnaHQpXG4gICAgICAmJiBfaXNCZXR3ZWVuKHksIHRoaXMudG9wLCB0aGlzLmJvdHRvbSkpIHtcbiAgICAgIGxoID0gdGhpcy5sZWdlbmRIaXRCb3hlcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsaC5sZW5ndGg7ICsraSkge1xuICAgICAgICBoaXRCb3ggPSBsaFtpXTtcbiAgICAgICAgaWYgKF9pc0JldHdlZW4oeCwgaGl0Qm94LmxlZnQsIGhpdEJveC5sZWZ0ICsgaGl0Qm94LndpZHRoKVxuICAgICAgICAgICYmIF9pc0JldHdlZW4oeSwgaGl0Qm94LnRvcCwgaGl0Qm94LnRvcCArIGhpdEJveC5oZWlnaHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubGVnZW5kSXRlbXNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaGFuZGxlRXZlbnQoZSkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKCFpc0xpc3RlbmVkKGUudHlwZSwgb3B0cykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaG92ZXJlZEl0ZW0gPSB0aGlzLl9nZXRMZWdlbmRJdGVtQXQoZS54LCBlLnkpO1xuICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW1vdmUnIHx8IGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgY29uc3QgcHJldmlvdXMgPSB0aGlzLl9ob3ZlcmVkSXRlbTtcbiAgICAgIGNvbnN0IHNhbWVJdGVtID0gaXRlbXNFcXVhbChwcmV2aW91cywgaG92ZXJlZEl0ZW0pO1xuICAgICAgaWYgKHByZXZpb3VzICYmICFzYW1lSXRlbSkge1xuICAgICAgICBjYWxsYmFjayhvcHRzLm9uTGVhdmUsIFtlLCBwcmV2aW91cywgdGhpc10sIHRoaXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5faG92ZXJlZEl0ZW0gPSBob3ZlcmVkSXRlbTtcbiAgICAgIGlmIChob3ZlcmVkSXRlbSAmJiAhc2FtZUl0ZW0pIHtcbiAgICAgICAgY2FsbGJhY2sob3B0cy5vbkhvdmVyLCBbZSwgaG92ZXJlZEl0ZW0sIHRoaXNdLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGhvdmVyZWRJdGVtKSB7XG4gICAgICBjYWxsYmFjayhvcHRzLm9uQ2xpY2ssIFtlLCBob3ZlcmVkSXRlbSwgdGhpc10sIHRoaXMpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gaXNMaXN0ZW5lZCh0eXBlLCBvcHRzKSB7XG4gIGlmICgodHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgdHlwZSA9PT0gJ21vdXNlb3V0JykgJiYgKG9wdHMub25Ib3ZlciB8fCBvcHRzLm9uTGVhdmUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9wdHMub25DbGljayAmJiAodHlwZSA9PT0gJ2NsaWNrJyB8fCB0eXBlID09PSAnbW91c2V1cCcpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxudmFyIHBsdWdpbl9sZWdlbmQgPSB7XG4gIGlkOiAnbGVnZW5kJyxcbiAgX2VsZW1lbnQ6IExlZ2VuZCxcbiAgc3RhcnQoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kID0gbmV3IExlZ2VuZCh7Y3R4OiBjaGFydC5jdHgsIG9wdGlvbnMsIGNoYXJ0fSk7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgb3B0aW9ucyk7XG4gICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIGxlZ2VuZCk7XG4gIH0sXG4gIHN0b3AoY2hhcnQpIHtcbiAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgY2hhcnQubGVnZW5kKTtcbiAgICBkZWxldGUgY2hhcnQubGVnZW5kO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgIGxlZ2VuZC5vcHRpb25zID0gb3B0aW9ucztcbiAgfSxcbiAgYWZ0ZXJVcGRhdGUoY2hhcnQpIHtcbiAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgbGVnZW5kLmJ1aWxkTGFiZWxzKCk7XG4gICAgbGVnZW5kLmFkanVzdEhpdEJveGVzKCk7XG4gIH0sXG4gIGFmdGVyRXZlbnQoY2hhcnQsIGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MucmVwbGF5KSB7XG4gICAgICBjaGFydC5sZWdlbmQuaGFuZGxlRXZlbnQoYXJncy5ldmVudCk7XG4gICAgfVxuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgcG9zaXRpb246ICd0b3AnLFxuICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICByZXZlcnNlOiBmYWxzZSxcbiAgICB3ZWlnaHQ6IDEwMDAsXG4gICAgb25DbGljayhlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gbGVnZW5kSXRlbS5kYXRhc2V0SW5kZXg7XG4gICAgICBjb25zdCBjaSA9IGxlZ2VuZC5jaGFydDtcbiAgICAgIGlmIChjaS5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KSkge1xuICAgICAgICBjaS5oaWRlKGluZGV4KTtcbiAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2kuc2hvdyhpbmRleCk7XG4gICAgICAgIGxlZ2VuZEl0ZW0uaGlkZGVuID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkhvdmVyOiBudWxsLFxuICAgIG9uTGVhdmU6IG51bGwsXG4gICAgbGFiZWxzOiB7XG4gICAgICBjb2xvcjogKGN0eCkgPT4gY3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICBib3hXaWR0aDogNDAsXG4gICAgICBwYWRkaW5nOiAxMCxcbiAgICAgIGdlbmVyYXRlTGFiZWxzKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgY29uc3Qge2xhYmVsczoge3VzZVBvaW50U3R5bGUsIHBvaW50U3R5bGUsIHRleHRBbGlnbiwgY29sb3J9fSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICByZXR1cm4gY2hhcnQuX2dldFNvcnRlZERhdGFzZXRNZXRhcygpLm1hcCgobWV0YSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHVzZVBvaW50U3R5bGUgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHRvUGFkZGluZyhzdHlsZS5ib3JkZXJXaWR0aCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHQ6IGRhdGFzZXRzW21ldGEuaW5kZXhdLmxhYmVsLFxuICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgaGlkZGVuOiAhbWV0YS52aXNpYmxlLFxuICAgICAgICAgICAgbGluZUNhcDogc3R5bGUuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgICAgICBsaW5lRGFzaDogc3R5bGUuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgIGxpbmVEYXNoT2Zmc2V0OiBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgbGluZUpvaW46IHN0eWxlLmJvcmRlckpvaW5TdHlsZSxcbiAgICAgICAgICAgIGxpbmVXaWR0aDogKGJvcmRlcldpZHRoLndpZHRoICsgYm9yZGVyV2lkdGguaGVpZ2h0KSAvIDQsXG4gICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlIHx8IHN0eWxlLnBvaW50U3R5bGUsXG4gICAgICAgICAgICByb3RhdGlvbjogc3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICB0ZXh0QWxpZ246IHRleHRBbGlnbiB8fCBzdHlsZS50ZXh0QWxpZ24sXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICBkYXRhc2V0SW5kZXg6IG1ldGEuaW5kZXhcbiAgICAgICAgICB9O1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRpdGxlOiB7XG4gICAgICBjb2xvcjogKGN0eCkgPT4gY3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgIHRleHQ6ICcnLFxuICAgIH1cbiAgfSxcbiAgZGVzY3JpcHRvcnM6IHtcbiAgICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gICAgbGFiZWxzOiB7XG4gICAgICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFbJ2dlbmVyYXRlTGFiZWxzJywgJ2ZpbHRlcicsICdzb3J0J10uaW5jbHVkZXMobmFtZSksXG4gICAgfVxuICB9LFxufTtcblxuY2xhc3MgVGl0bGUgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICB0aGlzLl9wYWRkaW5nID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICB9XG4gIHVwZGF0ZShtYXhXaWR0aCwgbWF4SGVpZ2h0KSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICB0aGlzLmxlZnQgPSAwO1xuICAgIHRoaXMudG9wID0gMDtcbiAgICBpZiAoIW9wdHMuZGlzcGxheSkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy5yaWdodCA9IHRoaXMuYm90dG9tID0gMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy53aWR0aCA9IHRoaXMucmlnaHQgPSBtYXhXaWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm90dG9tID0gbWF4SGVpZ2h0O1xuICAgIGNvbnN0IGxpbmVDb3VudCA9IGlzQXJyYXkob3B0cy50ZXh0KSA/IG9wdHMudGV4dC5sZW5ndGggOiAxO1xuICAgIHRoaXMuX3BhZGRpbmcgPSB0b1BhZGRpbmcob3B0cy5wYWRkaW5nKTtcbiAgICBjb25zdCB0ZXh0U2l6ZSA9IGxpbmVDb3VudCAqIHRvRm9udChvcHRzLmZvbnQpLmxpbmVIZWlnaHQgKyB0aGlzLl9wYWRkaW5nLmhlaWdodDtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy5oZWlnaHQgPSB0ZXh0U2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53aWR0aCA9IHRleHRTaXplO1xuICAgIH1cbiAgfVxuICBpc0hvcml6b250YWwoKSB7XG4gICAgY29uc3QgcG9zID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgIHJldHVybiBwb3MgPT09ICd0b3AnIHx8IHBvcyA9PT0gJ2JvdHRvbSc7XG4gIH1cbiAgX2RyYXdBcmdzKG9mZnNldCkge1xuICAgIGNvbnN0IHt0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsIG9wdGlvbnN9ID0gdGhpcztcbiAgICBjb25zdCBhbGlnbiA9IG9wdGlvbnMuYWxpZ247XG4gICAgbGV0IHJvdGF0aW9uID0gMDtcbiAgICBsZXQgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgdGl0bGVZID0gdG9wICsgb2Zmc2V0O1xuICAgICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLnBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgdGl0bGVYID0gbGVmdCArIG9mZnNldDtcbiAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICAgICAgcm90YXRpb24gPSBQSSAqIC0wLjU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aXRsZVggPSByaWdodCAtIG9mZnNldDtcbiAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRvcCwgYm90dG9tKTtcbiAgICAgICAgcm90YXRpb24gPSBQSSAqIDAuNTtcbiAgICAgIH1cbiAgICAgIG1heFdpZHRoID0gYm90dG9tIC0gdG9wO1xuICAgIH1cbiAgICByZXR1cm4ge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259O1xuICB9XG4gIGRyYXcoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoIW9wdHMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmb250T3B0cyA9IHRvRm9udChvcHRzLmZvbnQpO1xuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBmb250T3B0cy5saW5lSGVpZ2h0O1xuICAgIGNvbnN0IG9mZnNldCA9IGxpbmVIZWlnaHQgLyAyICsgdGhpcy5fcGFkZGluZy50b3A7XG4gICAgY29uc3Qge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259ID0gdGhpcy5fZHJhd0FyZ3Mob2Zmc2V0KTtcbiAgICByZW5kZXJUZXh0KGN0eCwgb3B0cy50ZXh0LCAwLCAwLCBmb250T3B0cywge1xuICAgICAgY29sb3I6IG9wdHMuY29sb3IsXG4gICAgICBtYXhXaWR0aCxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgdGV4dEFsaWduOiBfdG9MZWZ0UmlnaHRDZW50ZXIob3B0cy5hbGlnbiksXG4gICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgdHJhbnNsYXRpb246IFt0aXRsZVgsIHRpdGxlWV0sXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVRpdGxlKGNoYXJ0LCB0aXRsZU9wdHMpIHtcbiAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgIGN0eDogY2hhcnQuY3R4LFxuICAgIG9wdGlvbnM6IHRpdGxlT3B0cyxcbiAgICBjaGFydFxuICB9KTtcbiAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCB0aXRsZU9wdHMpO1xuICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICBjaGFydC50aXRsZUJsb2NrID0gdGl0bGU7XG59XG52YXIgcGx1Z2luX3RpdGxlID0ge1xuICBpZDogJ3RpdGxlJyxcbiAgX2VsZW1lbnQ6IFRpdGxlLFxuICBzdGFydChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjcmVhdGVUaXRsZShjaGFydCwgb3B0aW9ucyk7XG4gIH0sXG4gIHN0b3AoY2hhcnQpIHtcbiAgICBjb25zdCB0aXRsZUJsb2NrID0gY2hhcnQudGl0bGVCbG9jaztcbiAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgdGl0bGVCbG9jayk7XG4gICAgZGVsZXRlIGNoYXJ0LnRpdGxlQmxvY2s7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICB0aXRsZS5vcHRpb25zID0gb3B0aW9ucztcbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgZm9udDoge1xuICAgICAgd2VpZ2h0OiAnYm9sZCcsXG4gICAgfSxcbiAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICBwYWRkaW5nOiAxMCxcbiAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgdGV4dDogJycsXG4gICAgd2VpZ2h0OiAyMDAwXG4gIH0sXG4gIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICBjb2xvcjogJ2NvbG9yJ1xuICB9LFxuICBkZXNjcmlwdG9yczoge1xuICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICB9LFxufTtcblxuY29uc3QgbWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBwbHVnaW5fc3VidGl0bGUgPSB7XG4gIGlkOiAnc3VidGl0bGUnLFxuICBzdGFydChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IG5ldyBUaXRsZSh7XG4gICAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBjaGFydFxuICAgIH0pO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcbiAgICBtYXAuc2V0KGNoYXJ0LCB0aXRsZSk7XG4gIH0sXG4gIHN0b3AoY2hhcnQpIHtcbiAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgbWFwLmdldChjaGFydCkpO1xuICAgIG1hcC5kZWxldGUoY2hhcnQpO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgdGl0bGUgPSBtYXAuZ2V0KGNoYXJ0KTtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICBmb250OiB7XG4gICAgICB3ZWlnaHQ6ICdub3JtYWwnLFxuICAgIH0sXG4gICAgZnVsbFNpemU6IHRydWUsXG4gICAgcGFkZGluZzogMCxcbiAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgdGV4dDogJycsXG4gICAgd2VpZ2h0OiAxNTAwXG4gIH0sXG4gIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICBjb2xvcjogJ2NvbG9yJ1xuICB9LFxuICBkZXNjcmlwdG9yczoge1xuICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICB9LFxufTtcblxuY29uc3QgcG9zaXRpb25lcnMgPSB7XG4gIGF2ZXJhZ2UoaXRlbXMpIHtcbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgaSwgbGVuO1xuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgeSA9IDA7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgY29uc3QgcG9zID0gZWwudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgIHggKz0gcG9zLng7XG4gICAgICAgIHkgKz0gcG9zLnk7XG4gICAgICAgICsrY291bnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB4OiB4IC8gY291bnQsXG4gICAgICB5OiB5IC8gY291bnRcbiAgICB9O1xuICB9LFxuICBuZWFyZXN0KGl0ZW1zLCBldmVudFBvc2l0aW9uKSB7XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHggPSBldmVudFBvc2l0aW9uLng7XG4gICAgbGV0IHkgPSBldmVudFBvc2l0aW9uLnk7XG4gICAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGxldCBpLCBsZW4sIG5lYXJlc3RFbGVtZW50O1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjb25zdCBlbCA9IGl0ZW1zW2ldLmVsZW1lbnQ7XG4gICAgICBpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBlbC5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgICBjb25zdCBkID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGV2ZW50UG9zaXRpb24sIGNlbnRlcik7XG4gICAgICAgIGlmIChkIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICBtaW5EaXN0YW5jZSA9IGQ7XG4gICAgICAgICAgbmVhcmVzdEVsZW1lbnQgPSBlbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmVhcmVzdEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHRwID0gbmVhcmVzdEVsZW1lbnQudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICB4ID0gdHAueDtcbiAgICAgIHkgPSB0cC55O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gcHVzaE9yQ29uY2F0KGJhc2UsIHRvUHVzaCkge1xuICBpZiAodG9QdXNoKSB7XG4gICAgaWYgKGlzQXJyYXkodG9QdXNoKSkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYmFzZSwgdG9QdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZS5wdXNoKHRvUHVzaCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlO1xufVxuZnVuY3Rpb24gc3BsaXROZXdsaW5lcyhzdHIpIHtcbiAgaWYgKCh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIgaW5zdGFuY2VvZiBTdHJpbmcpICYmIHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgcmV0dXJuIHN0ci5zcGxpdCgnXFxuJyk7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBJdGVtKGNoYXJ0LCBpdGVtKSB7XG4gIGNvbnN0IHtlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fSA9IGl0ZW07XG4gIGNvbnN0IGNvbnRyb2xsZXIgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gIGNvbnN0IHtsYWJlbCwgdmFsdWV9ID0gY29udHJvbGxlci5nZXRMYWJlbEFuZFZhbHVlKGluZGV4KTtcbiAgcmV0dXJuIHtcbiAgICBjaGFydCxcbiAgICBsYWJlbCxcbiAgICBwYXJzZWQ6IGNvbnRyb2xsZXIuZ2V0UGFyc2VkKGluZGV4KSxcbiAgICByYXc6IGNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSxcbiAgICBmb3JtYXR0ZWRWYWx1ZTogdmFsdWUsXG4gICAgZGF0YXNldDogY29udHJvbGxlci5nZXREYXRhc2V0KCksXG4gICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICBkYXRhc2V0SW5kZXgsXG4gICAgZWxlbWVudFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VG9vbHRpcFNpemUodG9vbHRpcCwgb3B0aW9ucykge1xuICBjb25zdCBjdHggPSB0b29sdGlwLmNoYXJ0LmN0eDtcbiAgY29uc3Qge2JvZHksIGZvb3RlciwgdGl0bGV9ID0gdG9vbHRpcDtcbiAgY29uc3Qge2JveFdpZHRoLCBib3hIZWlnaHR9ID0gb3B0aW9ucztcbiAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gIGNvbnN0IGZvb3RlckZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb290ZXJGb250KTtcbiAgY29uc3QgdGl0bGVMaW5lQ291bnQgPSB0aXRsZS5sZW5ndGg7XG4gIGNvbnN0IGZvb3RlckxpbmVDb3VudCA9IGZvb3Rlci5sZW5ndGg7XG4gIGNvbnN0IGJvZHlMaW5lSXRlbUNvdW50ID0gYm9keS5sZW5ndGg7XG4gIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgbGV0IGhlaWdodCA9IHBhZGRpbmcuaGVpZ2h0O1xuICBsZXQgd2lkdGggPSAwO1xuICBsZXQgY29tYmluZWRCb2R5TGVuZ3RoID0gYm9keS5yZWR1Y2UoKGNvdW50LCBib2R5SXRlbSkgPT4gY291bnQgKyBib2R5SXRlbS5iZWZvcmUubGVuZ3RoICsgYm9keUl0ZW0ubGluZXMubGVuZ3RoICsgYm9keUl0ZW0uYWZ0ZXIubGVuZ3RoLCAwKTtcbiAgY29tYmluZWRCb2R5TGVuZ3RoICs9IHRvb2x0aXAuYmVmb3JlQm9keS5sZW5ndGggKyB0b29sdGlwLmFmdGVyQm9keS5sZW5ndGg7XG4gIGlmICh0aXRsZUxpbmVDb3VudCkge1xuICAgIGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCAqIHRpdGxlRm9udC5saW5lSGVpZ2h0XG5cdFx0XHQrICh0aXRsZUxpbmVDb3VudCAtIDEpICogb3B0aW9ucy50aXRsZVNwYWNpbmdcblx0XHRcdCsgb3B0aW9ucy50aXRsZU1hcmdpbkJvdHRvbTtcbiAgfVxuICBpZiAoY29tYmluZWRCb2R5TGVuZ3RoKSB7XG4gICAgY29uc3QgYm9keUxpbmVIZWlnaHQgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBNYXRoLm1heChib3hIZWlnaHQsIGJvZHlGb250LmxpbmVIZWlnaHQpIDogYm9keUZvbnQubGluZUhlaWdodDtcbiAgICBoZWlnaHQgKz0gYm9keUxpbmVJdGVtQ291bnQgKiBib2R5TGluZUhlaWdodFxuXHRcdFx0KyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gYm9keUxpbmVJdGVtQ291bnQpICogYm9keUZvbnQubGluZUhlaWdodFxuXHRcdFx0KyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gMSkgKiBvcHRpb25zLmJvZHlTcGFjaW5nO1xuICB9XG4gIGlmIChmb290ZXJMaW5lQ291bnQpIHtcbiAgICBoZWlnaHQgKz0gb3B0aW9ucy5mb290ZXJNYXJnaW5Ub3Bcblx0XHRcdCsgZm9vdGVyTGluZUNvdW50ICogZm9vdGVyRm9udC5saW5lSGVpZ2h0XG5cdFx0XHQrIChmb290ZXJMaW5lQ291bnQgLSAxKSAqIG9wdGlvbnMuZm9vdGVyU3BhY2luZztcbiAgfVxuICBsZXQgd2lkdGhQYWRkaW5nID0gMDtcbiAgY29uc3QgbWF4TGluZVdpZHRoID0gZnVuY3Rpb24obGluZSkge1xuICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG4gIH07XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgZWFjaCh0b29sdGlwLnRpdGxlLCBtYXhMaW5lV2lkdGgpO1xuICBjdHguZm9udCA9IGJvZHlGb250LnN0cmluZztcbiAgZWFjaCh0b29sdGlwLmJlZm9yZUJvZHkuY29uY2F0KHRvb2x0aXAuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcbiAgd2lkdGhQYWRkaW5nID0gb3B0aW9ucy5kaXNwbGF5Q29sb3JzID8gKGJveFdpZHRoICsgMiArIG9wdGlvbnMuYm94UGFkZGluZykgOiAwO1xuICBlYWNoKGJvZHksIChib2R5SXRlbSkgPT4ge1xuICAgIGVhY2goYm9keUl0ZW0uYmVmb3JlLCBtYXhMaW5lV2lkdGgpO1xuICAgIGVhY2goYm9keUl0ZW0ubGluZXMsIG1heExpbmVXaWR0aCk7XG4gICAgZWFjaChib2R5SXRlbS5hZnRlciwgbWF4TGluZVdpZHRoKTtcbiAgfSk7XG4gIHdpZHRoUGFkZGluZyA9IDA7XG4gIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gIGVhY2godG9vbHRpcC5mb290ZXIsIG1heExpbmVXaWR0aCk7XG4gIGN0eC5yZXN0b3JlKCk7XG4gIHdpZHRoICs9IHBhZGRpbmcud2lkdGg7XG4gIHJldHVybiB7d2lkdGgsIGhlaWdodH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpIHtcbiAgY29uc3Qge3ksIGhlaWdodH0gPSBzaXplO1xuICBpZiAoeSA8IGhlaWdodCAvIDIpIHtcbiAgICByZXR1cm4gJ3RvcCc7XG4gIH0gZWxzZSBpZiAoeSA+IChjaGFydC5oZWlnaHQgLSBoZWlnaHQgLyAyKSkge1xuICAgIHJldHVybiAnYm90dG9tJztcbiAgfVxuICByZXR1cm4gJ2NlbnRlcic7XG59XG5mdW5jdGlvbiBkb2VzTm90Rml0V2l0aEFsaWduKHhBbGlnbiwgY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgY29uc3Qge3gsIHdpZHRofSA9IHNpemU7XG4gIGNvbnN0IGNhcmV0ID0gb3B0aW9ucy5jYXJldFNpemUgKyBvcHRpb25zLmNhcmV0UGFkZGluZztcbiAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnICYmIHggKyB3aWR0aCArIGNhcmV0ID4gY2hhcnQud2lkdGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoeEFsaWduID09PSAncmlnaHQnICYmIHggLSB3aWR0aCAtIGNhcmV0IDwgMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVYQWxpZ24oY2hhcnQsIG9wdGlvbnMsIHNpemUsIHlBbGlnbikge1xuICBjb25zdCB7eCwgd2lkdGh9ID0gc2l6ZTtcbiAgY29uc3Qge3dpZHRoOiBjaGFydFdpZHRoLCBjaGFydEFyZWE6IHtsZWZ0LCByaWdodH19ID0gY2hhcnQ7XG4gIGxldCB4QWxpZ24gPSAnY2VudGVyJztcbiAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICB4QWxpZ24gPSB4IDw9IChsZWZ0ICsgcmlnaHQpIC8gMiA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIH0gZWxzZSBpZiAoeCA8PSB3aWR0aCAvIDIpIHtcbiAgICB4QWxpZ24gPSAnbGVmdCc7XG4gIH0gZWxzZSBpZiAoeCA+PSBjaGFydFdpZHRoIC0gd2lkdGggLyAyKSB7XG4gICAgeEFsaWduID0gJ3JpZ2h0JztcbiAgfVxuICBpZiAoZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSkge1xuICAgIHhBbGlnbiA9ICdjZW50ZXInO1xuICB9XG4gIHJldHVybiB4QWxpZ247XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgY29uc3QgeUFsaWduID0gc2l6ZS55QWxpZ24gfHwgb3B0aW9ucy55QWxpZ24gfHwgZGV0ZXJtaW5lWUFsaWduKGNoYXJ0LCBzaXplKTtcbiAgcmV0dXJuIHtcbiAgICB4QWxpZ246IHNpemUueEFsaWduIHx8IG9wdGlvbnMueEFsaWduIHx8IGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSxcbiAgICB5QWxpZ25cbiAgfTtcbn1cbmZ1bmN0aW9uIGFsaWduWChzaXplLCB4QWxpZ24pIHtcbiAgbGV0IHt4LCB3aWR0aH0gPSBzaXplO1xuICBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgeCAtPSB3aWR0aDtcbiAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgeCAtPSAod2lkdGggLyAyKTtcbiAgfVxuICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIGFsaWduWShzaXplLCB5QWxpZ24sIHBhZGRpbmdBbmRTaXplKSB7XG4gIGxldCB7eSwgaGVpZ2h0fSA9IHNpemU7XG4gIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgeSArPSBwYWRkaW5nQW5kU2l6ZTtcbiAgfSBlbHNlIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgeSAtPSBoZWlnaHQgKyBwYWRkaW5nQW5kU2l6ZTtcbiAgfSBlbHNlIHtcbiAgICB5IC09IChoZWlnaHQgLyAyKTtcbiAgfVxuICByZXR1cm4geTtcbn1cbmZ1bmN0aW9uIGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBzaXplLCBhbGlnbm1lbnQsIGNoYXJ0KSB7XG4gIGNvbnN0IHtjYXJldFNpemUsIGNhcmV0UGFkZGluZywgY29ybmVyUmFkaXVzfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHt4QWxpZ24sIHlBbGlnbn0gPSBhbGlnbm1lbnQ7XG4gIGNvbnN0IHBhZGRpbmdBbmRTaXplID0gY2FyZXRTaXplICsgY2FyZXRQYWRkaW5nO1xuICBjb25zdCB7dG9wTGVmdCwgdG9wUmlnaHQsIGJvdHRvbUxlZnQsIGJvdHRvbVJpZ2h0fSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgbGV0IHggPSBhbGlnblgoc2l6ZSwgeEFsaWduKTtcbiAgY29uc3QgeSA9IGFsaWduWShzaXplLCB5QWxpZ24sIHBhZGRpbmdBbmRTaXplKTtcbiAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgIHggKz0gcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgIHggLT0gcGFkZGluZ0FuZFNpemU7XG4gICAgfVxuICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgeCAtPSBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIGNhcmV0U2l6ZTtcbiAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICB4ICs9IE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgKyBjYXJldFNpemU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiBfbGltaXRWYWx1ZSh4LCAwLCBjaGFydC53aWR0aCAtIHNpemUud2lkdGgpLFxuICAgIHk6IF9saW1pdFZhbHVlKHksIDAsIGNoYXJ0LmhlaWdodCAtIHNpemUuaGVpZ2h0KVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25lZFgodG9vbHRpcCwgYWxpZ24sIG9wdGlvbnMpIHtcbiAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICByZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInXG4gICAgPyB0b29sdGlwLnggKyB0b29sdGlwLndpZHRoIC8gMlxuICAgIDogYWxpZ24gPT09ICdyaWdodCdcbiAgICAgID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAtIHBhZGRpbmcucmlnaHRcbiAgICAgIDogdG9vbHRpcC54ICsgcGFkZGluZy5sZWZ0O1xufVxuZnVuY3Rpb24gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMoY2FsbGJhY2spIHtcbiAgcmV0dXJuIHB1c2hPckNvbmNhdChbXSwgc3BsaXROZXdsaW5lcyhjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlVG9vbHRpcENvbnRleHQocGFyZW50LCB0b29sdGlwLCB0b29sdGlwSXRlbXMpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgdG9vbHRpcCxcbiAgICB0b29sdGlwSXRlbXMsXG4gICAgdHlwZTogJ3Rvb2x0aXAnXG4gIH0pO1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KSB7XG4gIGNvbnN0IG92ZXJyaWRlID0gY29udGV4dCAmJiBjb250ZXh0LmRhdGFzZXQgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAuY2FsbGJhY2tzO1xuICByZXR1cm4gb3ZlcnJpZGUgPyBjYWxsYmFja3Mub3ZlcnJpZGUob3ZlcnJpZGUpIDogY2FsbGJhY2tzO1xufVxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3BhY2l0eSA9IDA7XG4gICAgdGhpcy5fYWN0aXZlID0gW107XG4gICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zaXplID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdG9vbHRpcEl0ZW1zID0gW107XG4gICAgdGhpcy4kYW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2hhcnQgPSBjb25maWcuY2hhcnQgfHwgY29uZmlnLl9jaGFydDtcbiAgICB0aGlzLl9jaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgdGhpcy5kYXRhUG9pbnRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudGl0bGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5iZWZvcmVCb2R5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm9keSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFmdGVyQm9keSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZvb3RlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnhBbGlnbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnlBbGlnbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy55ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jYXJldFggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jYXJldFkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxhYmVsUG9pbnRTdHlsZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvcnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaW5pdGlhbGl6ZShvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgX3Jlc29sdmVBbmltYXRpb25zKCkge1xuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuX2NhY2hlZEFuaW1hdGlvbnM7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3Qgb3B0cyA9IG9wdGlvbnMuZW5hYmxlZCAmJiBjaGFydC5vcHRpb25zLmFuaW1hdGlvbiAmJiBvcHRpb25zLmFuaW1hdGlvbnM7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IG5ldyBBbmltYXRpb25zKHRoaXMuY2hhcnQsIG9wdHMpO1xuICAgIGlmIChvcHRzLl9jYWNoZWFibGUpIHtcbiAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgfVxuICBnZXRDb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8XG5cdFx0XHQodGhpcy4kY29udGV4dCA9IGNyZWF0ZVRvb2x0aXBDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLCB0aGlzLl90b29sdGlwSXRlbXMpKTtcbiAgfVxuICBnZXRUaXRsZShjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2NhbGxiYWNrc30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJlZm9yZVRpdGxlID0gY2FsbGJhY2tzLmJlZm9yZVRpdGxlLmFwcGx5KHRoaXMsIFtjb250ZXh0XSk7XG4gICAgY29uc3QgdGl0bGUgPSBjYWxsYmFja3MudGl0bGUuYXBwbHkodGhpcywgW2NvbnRleHRdKTtcbiAgICBjb25zdCBhZnRlclRpdGxlID0gY2FsbGJhY2tzLmFmdGVyVGl0bGUuYXBwbHkodGhpcywgW2NvbnRleHRdKTtcbiAgICBsZXQgbGluZXMgPSBbXTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVUaXRsZSkpO1xuICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKHRpdGxlKSk7XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJUaXRsZSkpO1xuICAgIHJldHVybiBsaW5lcztcbiAgfVxuICBnZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhvcHRpb25zLmNhbGxiYWNrcy5iZWZvcmVCb2R5LmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKSk7XG4gIH1cbiAgZ2V0Qm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7Y2FsbGJhY2tzfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUl0ZW1zID0gW107XG4gICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCBib2R5SXRlbSA9IHtcbiAgICAgICAgYmVmb3JlOiBbXSxcbiAgICAgICAgbGluZXM6IFtdLFxuICAgICAgICBhZnRlcjogW11cbiAgICAgIH07XG4gICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhjYWxsYmFja3MsIGNvbnRleHQpO1xuICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmJlZm9yZSwgc3BsaXROZXdsaW5lcyhzY29wZWQuYmVmb3JlTGFiZWwuY2FsbCh0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmxpbmVzLCBzY29wZWQubGFiZWwuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0uYWZ0ZXIsIHNwbGl0TmV3bGluZXMoc2NvcGVkLmFmdGVyTGFiZWwuY2FsbCh0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgYm9keUl0ZW1zLnB1c2goYm9keUl0ZW0pO1xuICAgIH0pO1xuICAgIHJldHVybiBib2R5SXRlbXM7XG4gIH1cbiAgZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhvcHRpb25zLmNhbGxiYWNrcy5hZnRlckJvZHkuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pKTtcbiAgfVxuICBnZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2NhbGxiYWNrc30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJlZm9yZUZvb3RlciA9IGNhbGxiYWNrcy5iZWZvcmVGb290ZXIuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pO1xuICAgIGNvbnN0IGZvb3RlciA9IGNhbGxiYWNrcy5mb290ZXIuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pO1xuICAgIGNvbnN0IGFmdGVyRm9vdGVyID0gY2FsbGJhY2tzLmFmdGVyRm9vdGVyLmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKTtcbiAgICBsZXQgbGluZXMgPSBbXTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVGb290ZXIpKTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhmb290ZXIpKTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhhZnRlckZvb3RlcikpO1xuICAgIHJldHVybiBsaW5lcztcbiAgfVxuICBfY3JlYXRlSXRlbXMob3B0aW9ucykge1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuICAgIGNvbnN0IGxhYmVsQ29sb3JzID0gW107XG4gICAgY29uc3QgbGFiZWxQb2ludFN0eWxlcyA9IFtdO1xuICAgIGNvbnN0IGxhYmVsVGV4dENvbG9ycyA9IFtdO1xuICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICBsZXQgaSwgbGVuO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGFjdGl2ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgdG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0odGhpcy5jaGFydCwgYWN0aXZlW2ldKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmZpbHRlcikge1xuICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLmZpbHRlcigoZWxlbWVudCwgaW5kZXgsIGFycmF5KSA9PiBvcHRpb25zLmZpbHRlcihlbGVtZW50LCBpbmRleCwgYXJyYXksIGRhdGEpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaXRlbVNvcnQpIHtcbiAgICAgIHRvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcy5zb3J0KChhLCBiKSA9PiBvcHRpb25zLml0ZW1Tb3J0KGEsIGIsIGRhdGEpKTtcbiAgICB9XG4gICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhvcHRpb25zLmNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICBsYWJlbENvbG9ycy5wdXNoKHNjb3BlZC5sYWJlbENvbG9yLmNhbGwodGhpcywgY29udGV4dCkpO1xuICAgICAgbGFiZWxQb2ludFN0eWxlcy5wdXNoKHNjb3BlZC5sYWJlbFBvaW50U3R5bGUuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgICBsYWJlbFRleHRDb2xvcnMucHVzaChzY29wZWQubGFiZWxUZXh0Q29sb3IuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgfSk7XG4gICAgdGhpcy5sYWJlbENvbG9ycyA9IGxhYmVsQ29sb3JzO1xuICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IGxhYmVsUG9pbnRTdHlsZXM7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvcnMgPSBsYWJlbFRleHRDb2xvcnM7XG4gICAgdGhpcy5kYXRhUG9pbnRzID0gdG9vbHRpcEl0ZW1zO1xuICAgIHJldHVybiB0b29sdGlwSXRlbXM7XG4gIH1cbiAgdXBkYXRlKGNoYW5nZWQsIHJlcGxheSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgIGxldCBwcm9wZXJ0aWVzO1xuICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICBpZiAoIWFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLm9wYWNpdHkgIT09IDApIHtcbiAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgdG9vbHRpcEl0ZW1zID0gdGhpcy5fY3JlYXRlSXRlbXMob3B0aW9ucyk7XG4gICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdGhpcy5nZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmJvZHkgPSB0aGlzLmdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdGhpcy5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuZm9vdGVyID0gdGhpcy5nZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgc2l6ZSk7XG4gICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcy5jaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgIGNvbnN0IGJhY2tncm91bmRQb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgdGhpcy5jaGFydCk7XG4gICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB4OiBiYWNrZ3JvdW5kUG9pbnQueCxcbiAgICAgICAgeTogYmFja2dyb3VuZFBvaW50LnksXG4gICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0LFxuICAgICAgICBjYXJldFg6IHBvc2l0aW9uLngsXG4gICAgICAgIGNhcmV0WTogcG9zaXRpb24ueVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5fdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHByb3BlcnRpZXMpO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlZCAmJiBvcHRpb25zLmV4dGVybmFsKSB7XG4gICAgICBvcHRpb25zLmV4dGVybmFsLmNhbGwodGhpcywge2NoYXJ0OiB0aGlzLmNoYXJ0LCB0b29sdGlwOiB0aGlzLCByZXBsYXl9KTtcbiAgICB9XG4gIH1cbiAgZHJhd0NhcmV0KHRvb2x0aXBQb2ludCwgY3R4LCBzaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY2FyZXRQb3NpdGlvbiA9IHRoaXMuZ2V0Q2FyZXRQb3NpdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIG9wdGlvbnMpO1xuICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG4gICAgY3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngyLCBjYXJldFBvc2l0aW9uLnkyKTtcbiAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDMsIGNhcmV0UG9zaXRpb24ueTMpO1xuICB9XG4gIGdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge3hBbGlnbiwgeUFsaWdufSA9IHRoaXM7XG4gICAgY29uc3Qge2NhcmV0U2l6ZSwgY29ybmVyUmFkaXVzfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qge3RvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodH0gPSB0b1RSQkxDb3JuZXJzKGNvcm5lclJhZGl1cyk7XG4gICAgY29uc3Qge3g6IHB0WCwgeTogcHRZfSA9IHRvb2x0aXBQb2ludDtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBzaXplO1xuICAgIGxldCB4MSwgeDIsIHgzLCB5MSwgeTIsIHkzO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICB5MiA9IHB0WSArIChoZWlnaHQgLyAyKTtcbiAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICB4MSA9IHB0WDtcbiAgICAgICAgeDIgPSB4MSAtIGNhcmV0U2l6ZTtcbiAgICAgICAgeTEgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgeTMgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgxID0gcHRYICsgd2lkdGg7XG4gICAgICAgIHgyID0geDEgKyBjYXJldFNpemU7XG4gICAgICAgIHkxID0geTIgLSBjYXJldFNpemU7XG4gICAgICAgIHkzID0geTIgKyBjYXJldFNpemU7XG4gICAgICB9XG4gICAgICB4MyA9IHgxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgeDIgPSBwdFggKyBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIChjYXJldFNpemUpO1xuICAgICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgeDIgPSBwdFggKyB3aWR0aCAtIE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgLSBjYXJldFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHRoaXMuY2FyZXRYO1xuICAgICAgfVxuICAgICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgeTEgPSBwdFk7XG4gICAgICAgIHkyID0geTEgLSBjYXJldFNpemU7XG4gICAgICAgIHgxID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgIHgzID0geDIgKyBjYXJldFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5MSA9IHB0WSArIGhlaWdodDtcbiAgICAgICAgeTIgPSB5MSArIGNhcmV0U2l6ZTtcbiAgICAgICAgeDEgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgeDMgPSB4MiAtIGNhcmV0U2l6ZTtcbiAgICAgIH1cbiAgICAgIHkzID0geTE7XG4gICAgfVxuICAgIHJldHVybiB7eDEsIHgyLCB4MywgeTEsIHkyLCB5M307XG4gIH1cbiAgZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMudGl0bGU7XG4gICAgY29uc3QgbGVuZ3RoID0gdGl0bGUubGVuZ3RoO1xuICAgIGxldCB0aXRsZUZvbnQsIHRpdGxlU3BhY2luZywgaTtcbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdGlvbnMucnRsLCB0aGlzLngsIHRoaXMud2lkdGgpO1xuICAgICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIG9wdGlvbnMudGl0bGVBbGlnbiwgb3B0aW9ucyk7XG4gICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihvcHRpb25zLnRpdGxlQWxpZ24pO1xuICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgdGl0bGVGb250ID0gdG9Gb250KG9wdGlvbnMudGl0bGVGb250KTtcbiAgICAgIHRpdGxlU3BhY2luZyA9IG9wdGlvbnMudGl0bGVTcGFjaW5nO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMudGl0bGVDb2xvcjtcbiAgICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBjdHguZmlsbFRleHQodGl0bGVbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgdGl0bGVGb250LmxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgcHQueSArPSB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlU3BhY2luZztcbiAgICAgICAgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBwdC55ICs9IG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b20gLSB0aXRsZVNwYWNpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsYWJlbENvbG9ycyA9IHRoaXMubGFiZWxDb2xvcnNbaV07XG4gICAgY29uc3QgbGFiZWxQb2ludFN0eWxlID0gdGhpcy5sYWJlbFBvaW50U3R5bGVzW2ldO1xuICAgIGNvbnN0IHtib3hIZWlnaHQsIGJveFdpZHRoLCBib3hQYWRkaW5nfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgY29uc3QgY29sb3JYID0gZ2V0QWxpZ25lZFgodGhpcywgJ2xlZnQnLCBvcHRpb25zKTtcbiAgICBjb25zdCBydGxDb2xvclggPSBydGxIZWxwZXIueChjb2xvclgpO1xuICAgIGNvbnN0IHlPZmZTZXQgPSBib3hIZWlnaHQgPCBib2R5Rm9udC5saW5lSGVpZ2h0ID8gKGJvZHlGb250LmxpbmVIZWlnaHQgLSBib3hIZWlnaHQpIC8gMiA6IDA7XG4gICAgY29uc3QgY29sb3JZID0gcHQueSArIHlPZmZTZXQ7XG4gICAgaWYgKG9wdGlvbnMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgY29uc3QgZHJhd09wdGlvbnMgPSB7XG4gICAgICAgIHJhZGl1czogTWF0aC5taW4oYm94V2lkdGgsIGJveEhlaWdodCkgLyAyLFxuICAgICAgICBwb2ludFN0eWxlOiBsYWJlbFBvaW50U3R5bGUucG9pbnRTdHlsZSxcbiAgICAgICAgcm90YXRpb246IGxhYmVsUG9pbnRTdHlsZS5yb3RhdGlvbixcbiAgICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICAgIH07XG4gICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCkgKyBib3hXaWR0aCAvIDI7XG4gICAgICBjb25zdCBjZW50ZXJZID0gY29sb3JZICsgYm94SGVpZ2h0IC8gMjtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvcnMuYm9yZGVyQ29sb3I7XG4gICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHgubGluZVdpZHRoID0gaXNPYmplY3QobGFiZWxDb2xvcnMuYm9yZGVyV2lkdGgpID8gTWF0aC5tYXgoLi4uT2JqZWN0LnZhbHVlcyhsYWJlbENvbG9ycy5ib3JkZXJXaWR0aCkpIDogKGxhYmVsQ29sb3JzLmJvcmRlcldpZHRoIHx8IDEpO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvcnMuYm9yZGVyQ29sb3I7XG4gICAgICBjdHguc2V0TGluZURhc2gobGFiZWxDb2xvcnMuYm9yZGVyRGFzaCB8fCBbXSk7XG4gICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBsYWJlbENvbG9ycy5ib3JkZXJEYXNoT2Zmc2V0IHx8IDA7XG4gICAgICBjb25zdCBvdXRlclggPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxDb2xvclgsIGJveFdpZHRoIC0gYm94UGFkZGluZyk7XG4gICAgICBjb25zdCBpbm5lclggPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueFBsdXMocnRsQ29sb3JYLCAxKSwgYm94V2lkdGggLSBib3hQYWRkaW5nIC0gMik7XG4gICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKGxhYmVsQ29sb3JzLmJvcmRlclJhZGl1cyk7XG4gICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUodiA9PiB2ICE9PSAwKSkge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgIHg6IG91dGVyWCxcbiAgICAgICAgICB5OiBjb2xvclksXG4gICAgICAgICAgdzogYm94V2lkdGgsXG4gICAgICAgICAgaDogYm94SGVpZ2h0LFxuICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICB9KTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICB4OiBpbm5lclgsXG4gICAgICAgICAgeTogY29sb3JZICsgMSxcbiAgICAgICAgICB3OiBib3hXaWR0aCAtIDIsXG4gICAgICAgICAgaDogYm94SGVpZ2h0IC0gMixcbiAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgfSk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgIGN0eC5maWxsUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgIGN0eC5zdHJva2VSZWN0KG91dGVyWCwgY29sb3JZLCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3JzLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LmZpbGxSZWN0KGlubmVyWCwgY29sb3JZICsgMSwgYm94V2lkdGggLSAyLCBib3hIZWlnaHQgLSAyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMubGFiZWxUZXh0Q29sb3JzW2ldO1xuICB9XG4gIGRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7Ym9keX0gPSB0aGlzO1xuICAgIGNvbnN0IHtib2R5U3BhY2luZywgYm9keUFsaWduLCBkaXNwbGF5Q29sb3JzLCBib3hIZWlnaHQsIGJveFdpZHRoLCBib3hQYWRkaW5nfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgbGV0IGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICBsZXQgeExpbmVQYWRkaW5nID0gMDtcbiAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdGlvbnMucnRsLCB0aGlzLngsIHRoaXMud2lkdGgpO1xuICAgIGNvbnN0IGZpbGxMaW5lT2ZUZXh0ID0gZnVuY3Rpb24obGluZSkge1xuICAgICAgY3R4LmZpbGxUZXh0KGxpbmUsIHJ0bEhlbHBlci54KHB0LnggKyB4TGluZVBhZGRpbmcpLCBwdC55ICsgYm9keUxpbmVIZWlnaHQgLyAyKTtcbiAgICAgIHB0LnkgKz0gYm9keUxpbmVIZWlnaHQgKyBib2R5U3BhY2luZztcbiAgICB9O1xuICAgIGNvbnN0IGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uID0gcnRsSGVscGVyLnRleHRBbGlnbihib2R5QWxpZ24pO1xuICAgIGxldCBib2R5SXRlbSwgdGV4dENvbG9yLCBsaW5lcywgaSwgaiwgaWxlbiwgamxlbjtcbiAgICBjdHgudGV4dEFsaWduID0gYm9keUFsaWduO1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBjdHguZm9udCA9IGJvZHlGb250LnN0cmluZztcbiAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24sIG9wdGlvbnMpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJvZHlDb2xvcjtcbiAgICBlYWNoKHRoaXMuYmVmb3JlQm9keSwgZmlsbExpbmVPZlRleHQpO1xuICAgIHhMaW5lUGFkZGluZyA9IGRpc3BsYXlDb2xvcnMgJiYgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gIT09ICdyaWdodCdcbiAgICAgID8gYm9keUFsaWduID09PSAnY2VudGVyJyA/IChib3hXaWR0aCAvIDIgKyBib3hQYWRkaW5nKSA6IChib3hXaWR0aCArIDIgKyBib3hQYWRkaW5nKVxuICAgICAgOiAwO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBib2R5Lmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgYm9keUl0ZW0gPSBib2R5W2ldO1xuICAgICAgdGV4dENvbG9yID0gdGhpcy5sYWJlbFRleHRDb2xvcnNbaV07XG4gICAgICBjdHguZmlsbFN0eWxlID0gdGV4dENvbG9yO1xuICAgICAgZWFjaChib2R5SXRlbS5iZWZvcmUsIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgIGxpbmVzID0gYm9keUl0ZW0ubGluZXM7XG4gICAgICBpZiAoZGlzcGxheUNvbG9ycyAmJiBsaW5lcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fZHJhd0NvbG9yQm94KGN0eCwgcHQsIGksIHJ0bEhlbHBlciwgb3B0aW9ucyk7XG4gICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gTWF0aC5tYXgoYm9keUZvbnQubGluZUhlaWdodCwgYm94SGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGZvciAoaiA9IDAsIGpsZW4gPSBsaW5lcy5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcbiAgICAgICAgZmlsbExpbmVPZlRleHQobGluZXNbal0pO1xuICAgICAgICBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICB9XG4gICAgICBlYWNoKGJvZHlJdGVtLmFmdGVyLCBmaWxsTGluZU9mVGV4dCk7XG4gICAgfVxuICAgIHhMaW5lUGFkZGluZyA9IDA7XG4gICAgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgIGVhY2godGhpcy5hZnRlckJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICBwdC55IC09IGJvZHlTcGFjaW5nO1xuICB9XG4gIGRyYXdGb290ZXIocHQsIGN0eCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGZvb3RlciA9IHRoaXMuZm9vdGVyO1xuICAgIGNvbnN0IGxlbmd0aCA9IGZvb3Rlci5sZW5ndGg7XG4gICAgbGV0IGZvb3RlckZvbnQsIGk7XG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLmZvb3RlckFsaWduLCBvcHRpb25zKTtcbiAgICAgIHB0LnkgKz0gb3B0aW9ucy5mb290ZXJNYXJnaW5Ub3A7XG4gICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihvcHRpb25zLmZvb3RlckFsaWduKTtcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgIGZvb3RlckZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb290ZXJGb250KTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmZvb3RlckNvbG9yO1xuICAgICAgY3R4LmZvbnQgPSBmb290ZXJGb250LnN0cmluZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBjdHguZmlsbFRleHQoZm9vdGVyW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIGZvb3RlckZvbnQubGluZUhlaWdodCAvIDIpO1xuICAgICAgICBwdC55ICs9IGZvb3RlckZvbnQubGluZUhlaWdodCArIG9wdGlvbnMuZm9vdGVyU3BhY2luZztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZHJhd0JhY2tncm91bmQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7eEFsaWduLCB5QWxpZ259ID0gdGhpcztcbiAgICBjb25zdCB7eCwgeX0gPSBwdDtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSB0b29sdGlwU2l6ZTtcbiAgICBjb25zdCB7dG9wTGVmdCwgdG9wUmlnaHQsIGJvdHRvbUxlZnQsIGJvdHRvbVJpZ2h0fSA9IHRvVFJCTENvcm5lcnMob3B0aW9ucy5jb3JuZXJSYWRpdXMpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgIGN0eC5saW5lV2lkdGggPSBvcHRpb25zLmJvcmRlcldpZHRoO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKHggKyB0b3BMZWZ0LCB5KTtcbiAgICBpZiAoeUFsaWduID09PSAndG9wJykge1xuICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHggKyB3aWR0aCAtIHRvcFJpZ2h0LCB5KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHRvcFJpZ2h0KTtcbiAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSBib3R0b21SaWdodCk7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSBib3R0b21SaWdodCwgeSArIGhlaWdodCk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyh4ICsgYm90dG9tTGVmdCwgeSArIGhlaWdodCk7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSArIGhlaWdodCwgeCwgeSArIGhlaWdodCAtIGJvdHRvbUxlZnQpO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInICYmIHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCwgeSArIHRvcExlZnQpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHksIHggKyB0b3BMZWZ0LCB5KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBpZiAob3B0aW9ucy5ib3JkZXJXaWR0aCA+IDApIHtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gIH1cbiAgX3VwZGF0ZUFuaW1hdGlvblRhcmdldChvcHRpb25zKSB7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGFuaW1zID0gdGhpcy4kYW5pbWF0aW9ucztcbiAgICBjb25zdCBhbmltWCA9IGFuaW1zICYmIGFuaW1zLng7XG4gICAgY29uc3QgYW5pbVkgPSBhbmltcyAmJiBhbmltcy55O1xuICAgIGlmIChhbmltWCB8fCBhbmltWSkge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIHRoaXMuX2FjdGl2ZSwgdGhpcy5fZXZlbnRQb3NpdGlvbik7XG4gICAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgdGhpcy5fc2l6ZSk7XG4gICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSk7XG4gICAgICBjb25zdCBwb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgY2hhcnQpO1xuICAgICAgaWYgKGFuaW1YLl90byAhPT0gcG9pbnQueCB8fCBhbmltWS5fdG8gIT09IHBvaW50LnkpIHtcbiAgICAgICAgdGhpcy54QWxpZ24gPSBhbGlnbm1lbnQueEFsaWduO1xuICAgICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICAgIHRoaXMud2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuICAgICAgICB0aGlzLmNhcmV0WCA9IHBvc2l0aW9uLng7XG4gICAgICAgIHRoaXMuY2FyZXRZID0gcG9zaXRpb24ueTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnMoKS51cGRhdGUodGhpcywgcG9pbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfd2lsbFJlbmRlcigpIHtcbiAgICByZXR1cm4gISF0aGlzLm9wYWNpdHk7XG4gIH1cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGxldCBvcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuICAgIGlmICghb3BhY2l0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucyk7XG4gICAgY29uc3QgdG9vbHRpcFNpemUgPSB7XG4gICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5oZWlnaHRcbiAgICB9O1xuICAgIGNvbnN0IHB0ID0ge1xuICAgICAgeDogdGhpcy54LFxuICAgICAgeTogdGhpcy55XG4gICAgfTtcbiAgICBvcGFjaXR5ID0gTWF0aC5hYnMob3BhY2l0eSkgPCAxZS0zID8gMCA6IG9wYWNpdHk7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgIGNvbnN0IGhhc1Rvb2x0aXBDb250ZW50ID0gdGhpcy50aXRsZS5sZW5ndGggfHwgdGhpcy5iZWZvcmVCb2R5Lmxlbmd0aCB8fCB0aGlzLmJvZHkubGVuZ3RoIHx8IHRoaXMuYWZ0ZXJCb2R5Lmxlbmd0aCB8fCB0aGlzLmZvb3Rlci5sZW5ndGg7XG4gICAgaWYgKG9wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG4gICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIG9wdGlvbnMudGV4dERpcmVjdGlvbik7XG4gICAgICBwdC55ICs9IHBhZGRpbmcudG9wO1xuICAgICAgdGhpcy5kcmF3VGl0bGUocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5kcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZ2V0QWN0aXZlRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgfVxuICBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cywgZXZlbnRQb3NpdGlvbikge1xuICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7ZGF0YXNldEluZGV4LCBpbmRleH0pID0+IHtcbiAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBhIGRhdGFzZXQgYXQgaW5kZXggJyArIGRhdGFzZXRJbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgIGVsZW1lbnQ6IG1ldGEuZGF0YVtpbmRleF0sXG4gICAgICAgIGluZGV4LFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGxhc3RBY3RpdmUsIGFjdGl2ZSk7XG4gICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZXZlbnRQb3NpdGlvbik7XG4gICAgaWYgKGNoYW5nZWQgfHwgcG9zaXRpb25DaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0gZXZlbnRQb3NpdGlvbjtcbiAgICAgIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cyA9IHRydWU7XG4gICAgICB0aGlzLnVwZGF0ZSh0cnVlKTtcbiAgICB9XG4gIH1cbiAgaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSA9IHRydWUpIHtcbiAgICBpZiAocmVwbGF5ICYmIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSBmYWxzZTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSk7XG4gICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSk7XG4gICAgY29uc3QgY2hhbmdlZCA9IHJlcGxheSB8fCAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKSB8fCBwb3NpdGlvbkNoYW5nZWQ7XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgIGlmIChvcHRpb25zLmVuYWJsZWQgfHwgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0ge1xuICAgICAgICAgIHg6IGUueCxcbiAgICAgICAgICB5OiBlLnlcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSwgcmVwbGF5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH1cbiAgX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIHJlcGxheSwgaW5DaGFydEFyZWEpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgfVxuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBvcHRpb25zLm1vZGUsIG9wdGlvbnMsIHJlcGxheSk7XG4gICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgYWN0aXZlLnJldmVyc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGl2ZTtcbiAgfVxuICBfcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSkge1xuICAgIGNvbnN0IHtjYXJldFgsIGNhcmV0WSwgb3B0aW9uc30gPSB0aGlzO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIGUpO1xuICAgIHJldHVybiBwb3NpdGlvbiAhPT0gZmFsc2UgJiYgKGNhcmV0WCAhPT0gcG9zaXRpb24ueCB8fCBjYXJldFkgIT09IHBvc2l0aW9uLnkpO1xuICB9XG59XG5Ub29sdGlwLnBvc2l0aW9uZXJzID0gcG9zaXRpb25lcnM7XG52YXIgcGx1Z2luX3Rvb2x0aXAgPSB7XG4gIGlkOiAndG9vbHRpcCcsXG4gIF9lbGVtZW50OiBUb29sdGlwLFxuICBwb3NpdGlvbmVycyxcbiAgYWZ0ZXJJbml0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBjaGFydC50b29sdGlwID0gbmV3IFRvb2x0aXAoe2NoYXJ0LCBvcHRpb25zfSk7XG4gICAgfVxuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgIGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9XG4gIH0sXG4gIHJlc2V0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfVxuICB9LFxuICBhZnRlckRyYXcoY2hhcnQpIHtcbiAgICBjb25zdCB0b29sdGlwID0gY2hhcnQudG9vbHRpcDtcbiAgICBpZiAodG9vbHRpcCAmJiB0b29sdGlwLl93aWxsUmVuZGVyKCkpIHtcbiAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgIHRvb2x0aXBcbiAgICAgIH07XG4gICAgICBpZiAoY2hhcnQubm90aWZ5UGx1Z2lucygnYmVmb3JlVG9vbHRpcERyYXcnLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdG9vbHRpcC5kcmF3KGNoYXJ0LmN0eCk7XG4gICAgICBjaGFydC5ub3RpZnlQbHVnaW5zKCdhZnRlclRvb2x0aXBEcmF3JywgYXJncyk7XG4gICAgfVxuICB9LFxuICBhZnRlckV2ZW50KGNoYXJ0LCBhcmdzKSB7XG4gICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSBhcmdzLnJlcGxheTtcbiAgICAgIGlmIChjaGFydC50b29sdGlwLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQsIHVzZUZpbmFsUG9zaXRpb24sIGFyZ3MuaW5DaGFydEFyZWEpKSB7XG4gICAgICAgIGFyZ3MuY2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgZXh0ZXJuYWw6IG51bGwsXG4gICAgcG9zaXRpb246ICdhdmVyYWdlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknLFxuICAgIHRpdGxlQ29sb3I6ICcjZmZmJyxcbiAgICB0aXRsZUZvbnQ6IHtcbiAgICAgIHdlaWdodDogJ2JvbGQnLFxuICAgIH0sXG4gICAgdGl0bGVTcGFjaW5nOiAyLFxuICAgIHRpdGxlTWFyZ2luQm90dG9tOiA2LFxuICAgIHRpdGxlQWxpZ246ICdsZWZ0JyxcbiAgICBib2R5Q29sb3I6ICcjZmZmJyxcbiAgICBib2R5U3BhY2luZzogMixcbiAgICBib2R5Rm9udDoge1xuICAgIH0sXG4gICAgYm9keUFsaWduOiAnbGVmdCcsXG4gICAgZm9vdGVyQ29sb3I6ICcjZmZmJyxcbiAgICBmb290ZXJTcGFjaW5nOiAyLFxuICAgIGZvb3Rlck1hcmdpblRvcDogNixcbiAgICBmb290ZXJGb250OiB7XG4gICAgICB3ZWlnaHQ6ICdib2xkJyxcbiAgICB9LFxuICAgIGZvb3RlckFsaWduOiAnbGVmdCcsXG4gICAgcGFkZGluZzogNixcbiAgICBjYXJldFBhZGRpbmc6IDIsXG4gICAgY2FyZXRTaXplOiA1LFxuICAgIGNvcm5lclJhZGl1czogNixcbiAgICBib3hIZWlnaHQ6IChjdHgsIG9wdHMpID0+IG9wdHMuYm9keUZvbnQuc2l6ZSxcbiAgICBib3hXaWR0aDogKGN0eCwgb3B0cykgPT4gb3B0cy5ib2R5Rm9udC5zaXplLFxuICAgIG11bHRpS2V5QmFja2dyb3VuZDogJyNmZmYnLFxuICAgIGRpc3BsYXlDb2xvcnM6IHRydWUsXG4gICAgYm94UGFkZGluZzogMCxcbiAgICBib3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgIGJvcmRlcldpZHRoOiAwLFxuICAgIGFuaW1hdGlvbjoge1xuICAgICAgZHVyYXRpb246IDQwMCxcbiAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFydCcsXG4gICAgfSxcbiAgICBhbmltYXRpb25zOiB7XG4gICAgICBudW1iZXJzOiB7XG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICd3aWR0aCcsICdoZWlnaHQnLCAnY2FyZXRYJywgJ2NhcmV0WSddLFxuICAgICAgfSxcbiAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgZHVyYXRpb246IDIwMFxuICAgICAgfVxuICAgIH0sXG4gICAgY2FsbGJhY2tzOiB7XG4gICAgICBiZWZvcmVUaXRsZTogbm9vcCxcbiAgICAgIHRpdGxlKHRvb2x0aXBJdGVtcykge1xuICAgICAgICBpZiAodG9vbHRpcEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gdG9vbHRpcEl0ZW1zWzBdO1xuICAgICAgICAgIGNvbnN0IGxhYmVscyA9IGl0ZW0uY2hhcnQuZGF0YS5sYWJlbHM7XG4gICAgICAgICAgY29uc3QgbGFiZWxDb3VudCA9IGxhYmVscyA/IGxhYmVscy5sZW5ndGggOiAwO1xuICAgICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5kYXRhc2V0LmxhYmVsIHx8ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5sYWJlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubGFiZWw7XG4gICAgICAgICAgfSBlbHNlIGlmIChsYWJlbENvdW50ID4gMCAmJiBpdGVtLmRhdGFJbmRleCA8IGxhYmVsQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbHNbaXRlbS5kYXRhSW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9LFxuICAgICAgYWZ0ZXJUaXRsZTogbm9vcCxcbiAgICAgIGJlZm9yZUJvZHk6IG5vb3AsXG4gICAgICBiZWZvcmVMYWJlbDogbm9vcCxcbiAgICAgIGxhYmVsKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgcmV0dXJuIHRvb2x0aXBJdGVtLmxhYmVsICsgJzogJyArIHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlIHx8IHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYWJlbCA9IHRvb2x0aXBJdGVtLmRhdGFzZXQubGFiZWwgfHwgJyc7XG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgIGxhYmVsICs9ICc6ICc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICAgIGxhYmVsICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgIH0sXG4gICAgICBsYWJlbENvbG9yKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgICBib3JkZXJEYXNoOiBvcHRpb25zLmJvcmRlckRhc2gsXG4gICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBsYWJlbFRleHRDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgICB9LFxuICAgICAgbGFiZWxQb2ludFN0eWxlKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9pbnRTdHlsZTogb3B0aW9ucy5wb2ludFN0eWxlLFxuICAgICAgICAgIHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGFmdGVyTGFiZWw6IG5vb3AsXG4gICAgICBhZnRlckJvZHk6IG5vb3AsXG4gICAgICBiZWZvcmVGb290ZXI6IG5vb3AsXG4gICAgICBmb290ZXI6IG5vb3AsXG4gICAgICBhZnRlckZvb3Rlcjogbm9vcFxuICAgIH1cbiAgfSxcbiAgZGVmYXVsdFJvdXRlczoge1xuICAgIGJvZHlGb250OiAnZm9udCcsXG4gICAgZm9vdGVyRm9udDogJ2ZvbnQnLFxuICAgIHRpdGxlRm9udDogJ2ZvbnQnXG4gIH0sXG4gIGRlc2NyaXB0b3JzOiB7XG4gICAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnZmlsdGVyJyAmJiBuYW1lICE9PSAnaXRlbVNvcnQnICYmIG5hbWUgIT09ICdleHRlcm5hbCcsXG4gICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgY2FsbGJhY2tzOiB7XG4gICAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICB9LFxuICAgIGFuaW1hdGlvbjoge1xuICAgICAgX2ZhbGxiYWNrOiBmYWxzZVxuICAgIH0sXG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJ1xuICAgIH1cbiAgfSxcbiAgYWRkaXRpb25hbE9wdGlvblNjb3BlczogWydpbnRlcmFjdGlvbiddXG59O1xuXG52YXIgcGx1Z2lucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkRlY2ltYXRpb246IHBsdWdpbl9kZWNpbWF0aW9uLFxuRmlsbGVyOiBpbmRleCxcbkxlZ2VuZDogcGx1Z2luX2xlZ2VuZCxcblN1YlRpdGxlOiBwbHVnaW5fc3VidGl0bGUsXG5UaXRsZTogcGx1Z2luX3RpdGxlLFxuVG9vbHRpcDogcGx1Z2luX3Rvb2x0aXBcbn0pO1xuXG5jb25zdCBhZGRJZlN0cmluZyA9IChsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKSA9PiB7XG4gIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykge1xuICAgIGluZGV4ID0gbGFiZWxzLnB1c2gocmF3KSAtIDE7XG4gICAgYWRkZWRMYWJlbHMudW5zaGlmdCh7aW5kZXgsIGxhYmVsOiByYXd9KTtcbiAgfSBlbHNlIGlmIChpc05hTihyYXcpKSB7XG4gICAgaW5kZXggPSBudWxsO1xuICB9XG4gIHJldHVybiBpbmRleDtcbn07XG5mdW5jdGlvbiBmaW5kT3JBZGRMYWJlbChsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKSB7XG4gIGNvbnN0IGZpcnN0ID0gbGFiZWxzLmluZGV4T2YocmF3KTtcbiAgaWYgKGZpcnN0ID09PSAtMSkge1xuICAgIHJldHVybiBhZGRJZlN0cmluZyhsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKTtcbiAgfVxuICBjb25zdCBsYXN0ID0gbGFiZWxzLmxhc3RJbmRleE9mKHJhdyk7XG4gIHJldHVybiBmaXJzdCAhPT0gbGFzdCA/IGluZGV4IDogZmlyc3Q7XG59XG5jb25zdCB2YWxpZEluZGV4ID0gKGluZGV4LCBtYXgpID0+IGluZGV4ID09PSBudWxsID8gbnVsbCA6IF9saW1pdFZhbHVlKE1hdGgucm91bmQoaW5kZXgpLCAwLCBtYXgpO1xuY2xhc3MgQ2F0ZWdvcnlTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoY2ZnKTtcbiAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICAgIHRoaXMuX2FkZGVkTGFiZWxzID0gW107XG4gIH1cbiAgaW5pdChzY2FsZU9wdGlvbnMpIHtcbiAgICBjb25zdCBhZGRlZCA9IHRoaXMuX2FkZGVkTGFiZWxzO1xuICAgIGlmIChhZGRlZC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgICBmb3IgKGNvbnN0IHtpbmRleCwgbGFiZWx9IG9mIGFkZGVkKSB7XG4gICAgICAgIGlmIChsYWJlbHNbaW5kZXhdID09PSBsYWJlbCkge1xuICAgICAgICAgIGxhYmVscy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgIH1cbiAgICBzdXBlci5pbml0KHNjYWxlT3B0aW9ucyk7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIGlmIChpc051bGxPclVuZGVmKHJhdykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgIGluZGV4ID0gaXNGaW5pdGUoaW5kZXgpICYmIGxhYmVsc1tpbmRleF0gPT09IHJhdyA/IGluZGV4XG4gICAgICA6IGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCB2YWx1ZU9yRGVmYXVsdChpbmRleCwgcmF3KSwgdGhpcy5fYWRkZWRMYWJlbHMpO1xuICAgIHJldHVybiB2YWxpZEluZGV4KGluZGV4LCBsYWJlbHMubGVuZ3RoIC0gMSk7XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCB7bWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICBsZXQge21pbiwgbWF4fSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICBpZiAoIW1pbkRlZmluZWQpIHtcbiAgICAgICAgbWluID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICBtYXggPSB0aGlzLmdldExhYmVscygpLmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgIGxldCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgIGxhYmVscyA9IChtaW4gPT09IDAgJiYgbWF4ID09PSBsYWJlbHMubGVuZ3RoIC0gMSkgPyBsYWJlbHMgOiBsYWJlbHMuc2xpY2UobWluLCBtYXggKyAxKTtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gTWF0aC5tYXgobGFiZWxzLmxlbmd0aCAtIChvZmZzZXQgPyAwIDogMSksIDEpO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB0aGlzLm1pbiAtIChvZmZzZXQgPyAwLjUgOiAwKTtcbiAgICBmb3IgKGxldCB2YWx1ZSA9IG1pbjsgdmFsdWUgPD0gbWF4OyB2YWx1ZSsrKSB7XG4gICAgICB0aWNrcy5wdXNoKHt2YWx1ZX0pO1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgaWYgKHZhbHVlID49IDAgJiYgdmFsdWUgPCBsYWJlbHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbGFiZWxzW3ZhbHVlXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICBpZiAoIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSAhdGhpcy5fcmV2ZXJzZVBpeGVscztcbiAgICB9XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMucGFyc2UodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICB9XG4gIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICB9XG4gIGdldEJhc2VQaXhlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5ib3R0b207XG4gIH1cbn1cbkNhdGVnb3J5U2NhbGUuaWQgPSAnY2F0ZWdvcnknO1xuQ2F0ZWdvcnlTY2FsZS5kZWZhdWx0cyA9IHtcbiAgdGlja3M6IHtcbiAgICBjYWxsYmFjazogQ2F0ZWdvcnlTY2FsZS5wcm90b3R5cGUuZ2V0TGFiZWxGb3JWYWx1ZVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzJDEoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuICBjb25zdCB0aWNrcyA9IFtdO1xuICBjb25zdCBNSU5fU1BBQ0lORyA9IDFlLTE0O1xuICBjb25zdCB7Ym91bmRzLCBzdGVwLCBtaW4sIG1heCwgcHJlY2lzaW9uLCBjb3VudCwgbWF4VGlja3MsIG1heERpZ2l0cywgaW5jbHVkZUJvdW5kc30gPSBnZW5lcmF0aW9uT3B0aW9ucztcbiAgY29uc3QgdW5pdCA9IHN0ZXAgfHwgMTtcbiAgY29uc3QgbWF4U3BhY2VzID0gbWF4VGlja3MgLSAxO1xuICBjb25zdCB7bWluOiBybWluLCBtYXg6IHJtYXh9ID0gZGF0YVJhbmdlO1xuICBjb25zdCBtaW5EZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYobWluKTtcbiAgY29uc3QgbWF4RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1heCk7XG4gIGNvbnN0IGNvdW50RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKGNvdW50KTtcbiAgY29uc3QgbWluU3BhY2luZyA9IChybWF4IC0gcm1pbikgLyAobWF4RGlnaXRzICsgMSk7XG4gIGxldCBzcGFjaW5nID0gbmljZU51bSgocm1heCAtIHJtaW4pIC8gbWF4U3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuICBsZXQgZmFjdG9yLCBuaWNlTWluLCBuaWNlTWF4LCBudW1TcGFjZXM7XG4gIGlmIChzcGFjaW5nIDwgTUlOX1NQQUNJTkcgJiYgIW1pbkRlZmluZWQgJiYgIW1heERlZmluZWQpIHtcbiAgICByZXR1cm4gW3t2YWx1ZTogcm1pbn0sIHt2YWx1ZTogcm1heH1dO1xuICB9XG4gIG51bVNwYWNlcyA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgLSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKTtcbiAgaWYgKG51bVNwYWNlcyA+IG1heFNwYWNlcykge1xuICAgIHNwYWNpbmcgPSBuaWNlTnVtKG51bVNwYWNlcyAqIHNwYWNpbmcgLyBtYXhTcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG4gIH1cbiAgaWYgKCFpc051bGxPclVuZGVmKHByZWNpc2lvbikpIHtcbiAgICBmYWN0b3IgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcgKiBmYWN0b3IpIC8gZmFjdG9yO1xuICB9XG4gIGlmIChib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICBuaWNlTWluID0gTWF0aC5mbG9vcihybWluIC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICAgIG5pY2VNYXggPSBNYXRoLmNlaWwocm1heCAvIHNwYWNpbmcpICogc3BhY2luZztcbiAgfSBlbHNlIHtcbiAgICBuaWNlTWluID0gcm1pbjtcbiAgICBuaWNlTWF4ID0gcm1heDtcbiAgfVxuICBpZiAobWluRGVmaW5lZCAmJiBtYXhEZWZpbmVkICYmIHN0ZXAgJiYgYWxtb3N0V2hvbGUoKG1heCAtIG1pbikgLyBzdGVwLCBzcGFjaW5nIC8gMTAwMCkpIHtcbiAgICBudW1TcGFjZXMgPSBNYXRoLnJvdW5kKE1hdGgubWluKChtYXggLSBtaW4pIC8gc3BhY2luZywgbWF4VGlja3MpKTtcbiAgICBzcGFjaW5nID0gKG1heCAtIG1pbikgLyBudW1TcGFjZXM7XG4gICAgbmljZU1pbiA9IG1pbjtcbiAgICBuaWNlTWF4ID0gbWF4O1xuICB9IGVsc2UgaWYgKGNvdW50RGVmaW5lZCkge1xuICAgIG5pY2VNaW4gPSBtaW5EZWZpbmVkID8gbWluIDogbmljZU1pbjtcbiAgICBuaWNlTWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IG5pY2VNYXg7XG4gICAgbnVtU3BhY2VzID0gY291bnQgLSAxO1xuICAgIHNwYWNpbmcgPSAobmljZU1heCAtIG5pY2VNaW4pIC8gbnVtU3BhY2VzO1xuICB9IGVsc2Uge1xuICAgIG51bVNwYWNlcyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBzcGFjaW5nO1xuICAgIGlmIChhbG1vc3RFcXVhbHMobnVtU3BhY2VzLCBNYXRoLnJvdW5kKG51bVNwYWNlcyksIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgICAgbnVtU3BhY2VzID0gTWF0aC5yb3VuZChudW1TcGFjZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1TcGFjZXMgPSBNYXRoLmNlaWwobnVtU3BhY2VzKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZGVjaW1hbFBsYWNlcyA9IE1hdGgubWF4KFxuICAgIF9kZWNpbWFsUGxhY2VzKHNwYWNpbmcpLFxuICAgIF9kZWNpbWFsUGxhY2VzKG5pY2VNaW4pXG4gICk7XG4gIGZhY3RvciA9IE1hdGgucG93KDEwLCBpc051bGxPclVuZGVmKHByZWNpc2lvbikgPyBkZWNpbWFsUGxhY2VzIDogcHJlY2lzaW9uKTtcbiAgbmljZU1pbiA9IE1hdGgucm91bmQobmljZU1pbiAqIGZhY3RvcikgLyBmYWN0b3I7XG4gIG5pY2VNYXggPSBNYXRoLnJvdW5kKG5pY2VNYXggKiBmYWN0b3IpIC8gZmFjdG9yO1xuICBsZXQgaiA9IDA7XG4gIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgaWYgKGluY2x1ZGVCb3VuZHMgJiYgbmljZU1pbiAhPT0gbWluKSB7XG4gICAgICB0aWNrcy5wdXNoKHt2YWx1ZTogbWlufSk7XG4gICAgICBpZiAobmljZU1pbiA8IG1pbikge1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgICBpZiAoYWxtb3N0RXF1YWxzKE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yLCBtaW4sIHJlbGF0aXZlTGFiZWxTaXplKG1pbiwgbWluU3BhY2luZywgZ2VuZXJhdGlvbk9wdGlvbnMpKSkge1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICBqKys7XG4gICAgfVxuICB9XG4gIGZvciAoOyBqIDwgbnVtU3BhY2VzOyArK2opIHtcbiAgICB0aWNrcy5wdXNoKHt2YWx1ZTogTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3J9KTtcbiAgfVxuICBpZiAobWF4RGVmaW5lZCAmJiBpbmNsdWRlQm91bmRzICYmIG5pY2VNYXggIT09IG1heCkge1xuICAgIGlmICh0aWNrcy5sZW5ndGggJiYgYWxtb3N0RXF1YWxzKHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlLCBtYXgsIHJlbGF0aXZlTGFiZWxTaXplKG1heCwgbWluU3BhY2luZywgZ2VuZXJhdGlvbk9wdGlvbnMpKSkge1xuICAgICAgdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUgPSBtYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpY2tzLnB1c2goe3ZhbHVlOiBtYXh9KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIW1heERlZmluZWQgfHwgbmljZU1heCA9PT0gbWF4KSB7XG4gICAgdGlja3MucHVzaCh7dmFsdWU6IG5pY2VNYXh9KTtcbiAgfVxuICByZXR1cm4gdGlja3M7XG59XG5mdW5jdGlvbiByZWxhdGl2ZUxhYmVsU2l6ZSh2YWx1ZSwgbWluU3BhY2luZywge2hvcml6b250YWwsIG1pblJvdGF0aW9ufSkge1xuICBjb25zdCByYWQgPSB0b1JhZGlhbnMobWluUm90YXRpb24pO1xuICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4ocmFkKSA6IE1hdGguY29zKHJhZCkpIHx8IDAuMDAxO1xuICBjb25zdCBsZW5ndGggPSAwLjc1ICogbWluU3BhY2luZyAqICgnJyArIHZhbHVlKS5sZW5ndGg7XG4gIHJldHVybiBNYXRoLm1pbihtaW5TcGFjaW5nIC8gcmF0aW8sIGxlbmd0aCk7XG59XG5jbGFzcyBMaW5lYXJTY2FsZUJhc2UgZXh0ZW5kcyBTY2FsZSB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKGNmZyk7XG4gICAgdGhpcy5zdGFydCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2VuZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICB9XG4gIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZihyYXcpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCh0eXBlb2YgcmF3ID09PSAnbnVtYmVyJyB8fCByYXcgaW5zdGFuY2VvZiBOdW1iZXIpICYmICFpc0Zpbml0ZSgrcmF3KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiArcmF3O1xuICB9XG4gIGhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKSB7XG4gICAgY29uc3Qge2JlZ2luQXRaZXJvfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7bWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICBsZXQge21pbiwgbWF4fSA9IHRoaXM7XG4gICAgY29uc3Qgc2V0TWluID0gdiA9PiAobWluID0gbWluRGVmaW5lZCA/IG1pbiA6IHYpO1xuICAgIGNvbnN0IHNldE1heCA9IHYgPT4gKG1heCA9IG1heERlZmluZWQgPyBtYXggOiB2KTtcbiAgICBpZiAoYmVnaW5BdFplcm8pIHtcbiAgICAgIGNvbnN0IG1pblNpZ24gPSBzaWduKG1pbik7XG4gICAgICBjb25zdCBtYXhTaWduID0gc2lnbihtYXgpO1xuICAgICAgaWYgKG1pblNpZ24gPCAwICYmIG1heFNpZ24gPCAwKSB7XG4gICAgICAgIHNldE1heCgwKTtcbiAgICAgIH0gZWxzZSBpZiAobWluU2lnbiA+IDAgJiYgbWF4U2lnbiA+IDApIHtcbiAgICAgICAgc2V0TWluKDApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobWluID09PSBtYXgpIHtcbiAgICAgIGxldCBvZmZzZXQgPSAxO1xuICAgICAgaWYgKG1heCA+PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCBtaW4gPD0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5hYnMobWF4ICogMC4wNSk7XG4gICAgICB9XG4gICAgICBzZXRNYXgobWF4ICsgb2Zmc2V0KTtcbiAgICAgIGlmICghYmVnaW5BdFplcm8pIHtcbiAgICAgICAgc2V0TWluKG1pbiAtIG9mZnNldCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICB9XG4gIGdldFRpY2tMaW1pdCgpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICBsZXQge21heFRpY2tzTGltaXQsIHN0ZXBTaXplfSA9IHRpY2tPcHRzO1xuICAgIGxldCBtYXhUaWNrcztcbiAgICBpZiAoc3RlcFNpemUpIHtcbiAgICAgIG1heFRpY2tzID0gTWF0aC5jZWlsKHRoaXMubWF4IC8gc3RlcFNpemUpIC0gTWF0aC5mbG9vcih0aGlzLm1pbiAvIHN0ZXBTaXplKSArIDE7XG4gICAgICBpZiAobWF4VGlja3MgPiAxMDAwKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihgc2NhbGVzLiR7dGhpcy5pZH0udGlja3Muc3RlcFNpemU6ICR7c3RlcFNpemV9IHdvdWxkIHJlc3VsdCBnZW5lcmF0aW5nIHVwIHRvICR7bWF4VGlja3N9IHRpY2tzLiBMaW1pdGluZyB0byAxMDAwLmApO1xuICAgICAgICBtYXhUaWNrcyA9IDEwMDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1heFRpY2tzID0gdGhpcy5jb21wdXRlVGlja0xpbWl0KCk7XG4gICAgICBtYXhUaWNrc0xpbWl0ID0gbWF4VGlja3NMaW1pdCB8fCAxMTtcbiAgICB9XG4gICAgaWYgKG1heFRpY2tzTGltaXQpIHtcbiAgICAgIG1heFRpY2tzID0gTWF0aC5taW4obWF4VGlja3NMaW1pdCwgbWF4VGlja3MpO1xuICAgIH1cbiAgICByZXR1cm4gbWF4VGlja3M7XG4gIH1cbiAgY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICByZXR1cm4gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgbGV0IG1heFRpY2tzID0gdGhpcy5nZXRUaWNrTGltaXQoKTtcbiAgICBtYXhUaWNrcyA9IE1hdGgubWF4KDIsIG1heFRpY2tzKTtcbiAgICBjb25zdCBudW1lcmljR2VuZXJhdG9yT3B0aW9ucyA9IHtcbiAgICAgIG1heFRpY2tzLFxuICAgICAgYm91bmRzOiBvcHRzLmJvdW5kcyxcbiAgICAgIG1pbjogb3B0cy5taW4sXG4gICAgICBtYXg6IG9wdHMubWF4LFxuICAgICAgcHJlY2lzaW9uOiB0aWNrT3B0cy5wcmVjaXNpb24sXG4gICAgICBzdGVwOiB0aWNrT3B0cy5zdGVwU2l6ZSxcbiAgICAgIGNvdW50OiB0aWNrT3B0cy5jb3VudCxcbiAgICAgIG1heERpZ2l0czogdGhpcy5fbWF4RGlnaXRzKCksXG4gICAgICBob3Jpem9udGFsOiB0aGlzLmlzSG9yaXpvbnRhbCgpLFxuICAgICAgbWluUm90YXRpb246IHRpY2tPcHRzLm1pblJvdGF0aW9uIHx8IDAsXG4gICAgICBpbmNsdWRlQm91bmRzOiB0aWNrT3B0cy5pbmNsdWRlQm91bmRzICE9PSBmYWxzZVxuICAgIH07XG4gICAgY29uc3QgZGF0YVJhbmdlID0gdGhpcy5fcmFuZ2UgfHwgdGhpcztcbiAgICBjb25zdCB0aWNrcyA9IGdlbmVyYXRlVGlja3MkMShudW1lcmljR2VuZXJhdG9yT3B0aW9ucywgZGF0YVJhbmdlKTtcbiAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgfVxuICAgIGlmIChvcHRzLnJldmVyc2UpIHtcbiAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1heDtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5taW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbiAgfVxuICBjb25maWd1cmUoKSB7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGxldCBzdGFydCA9IHRoaXMubWluO1xuICAgIGxldCBlbmQgPSB0aGlzLm1heDtcbiAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9mZnNldCAmJiB0aWNrcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG9mZnNldCA9IChlbmQgLSBzdGFydCkgLyBNYXRoLm1heCh0aWNrcy5sZW5ndGggLSAxLCAxKSAvIDI7XG4gICAgICBzdGFydCAtPSBvZmZzZXQ7XG4gICAgICBlbmQgKz0gb2Zmc2V0O1xuICAgIH1cbiAgICB0aGlzLl9zdGFydFZhbHVlID0gc3RhcnQ7XG4gICAgdGhpcy5fZW5kVmFsdWUgPSBlbmQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IGVuZCAtIHN0YXJ0O1xuICB9XG4gIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKHZhbHVlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgfVxufVxuXG5jbGFzcyBMaW5lYXJTY2FsZSBleHRlbmRzIExpbmVhclNjYWxlQmFzZSB7XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSA/IG1pbiA6IDA7XG4gICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gbWF4IDogMTtcbiAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgfVxuICBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgIGNvbnN0IGhvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IGxlbmd0aCA9IGhvcml6b250YWwgPyB0aGlzLndpZHRoIDogdGhpcy5oZWlnaHQ7XG4gICAgY29uc3QgbWluUm90YXRpb24gPSB0b1JhZGlhbnModGhpcy5vcHRpb25zLnRpY2tzLm1pblJvdGF0aW9uKTtcbiAgICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4obWluUm90YXRpb24pIDogTWF0aC5jb3MobWluUm90YXRpb24pKSB8fCAwLjAwMTtcbiAgICBjb25zdCB0aWNrRm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoMCk7XG4gICAgcmV0dXJuIE1hdGguY2VpbChsZW5ndGggLyBNYXRoLm1pbig0MCwgdGlja0ZvbnQubGluZUhlaWdodCAvIHJhdGlvKSk7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZTtcbiAgfVxufVxuTGluZWFyU2NhbGUuaWQgPSAnbGluZWFyJztcbkxpbmVhclNjYWxlLmRlZmF1bHRzID0ge1xuICB0aWNrczoge1xuICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgfVxufTtcblxuZnVuY3Rpb24gaXNNYWpvcih0aWNrVmFsKSB7XG4gIGNvbnN0IHJlbWFpbiA9IHRpY2tWYWwgLyAoTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodGlja1ZhbCkpKSk7XG4gIHJldHVybiByZW1haW4gPT09IDE7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCBkYXRhUmFuZ2UpIHtcbiAgY29uc3QgZW5kRXhwID0gTWF0aC5mbG9vcihsb2cxMChkYXRhUmFuZ2UubWF4KSk7XG4gIGNvbnN0IGVuZFNpZ25pZmljYW5kID0gTWF0aC5jZWlsKGRhdGFSYW5nZS5tYXggLyBNYXRoLnBvdygxMCwgZW5kRXhwKSk7XG4gIGNvbnN0IHRpY2tzID0gW107XG4gIGxldCB0aWNrVmFsID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1pbiwgTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAoZGF0YVJhbmdlLm1pbikpKSk7XG4gIGxldCBleHAgPSBNYXRoLmZsb29yKGxvZzEwKHRpY2tWYWwpKTtcbiAgbGV0IHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcih0aWNrVmFsIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuICBsZXQgcHJlY2lzaW9uID0gZXhwIDwgMCA/IE1hdGgucG93KDEwLCBNYXRoLmFicyhleHApKSA6IDE7XG4gIGRvIHtcbiAgICB0aWNrcy5wdXNoKHt2YWx1ZTogdGlja1ZhbCwgbWFqb3I6IGlzTWFqb3IodGlja1ZhbCl9KTtcbiAgICArK3NpZ25pZmljYW5kO1xuICAgIGlmIChzaWduaWZpY2FuZCA9PT0gMTApIHtcbiAgICAgIHNpZ25pZmljYW5kID0gMTtcbiAgICAgICsrZXhwO1xuICAgICAgcHJlY2lzaW9uID0gZXhwID49IDAgPyAxIDogcHJlY2lzaW9uO1xuICAgIH1cbiAgICB0aWNrVmFsID0gTWF0aC5yb3VuZChzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcbiAgfSB3aGlsZSAoZXhwIDwgZW5kRXhwIHx8IChleHAgPT09IGVuZEV4cCAmJiBzaWduaWZpY2FuZCA8IGVuZFNpZ25pZmljYW5kKSk7XG4gIGNvbnN0IGxhc3RUaWNrID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1heCwgdGlja1ZhbCk7XG4gIHRpY2tzLnB1c2goe3ZhbHVlOiBsYXN0VGljaywgbWFqb3I6IGlzTWFqb3IodGlja1ZhbCl9KTtcbiAgcmV0dXJuIHRpY2tzO1xufVxuY2xhc3MgTG9nYXJpdGhtaWNTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoY2ZnKTtcbiAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZW5kID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIGNvbnN0IHZhbHVlID0gTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5wYXJzZS5hcHBseSh0aGlzLCBbcmF3LCBpbmRleF0pO1xuICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgdGhpcy5femVybyA9IHRydWU7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpICYmIHZhbHVlID4gMCA/IHZhbHVlIDogbnVsbDtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgPyBNYXRoLm1heCgwLCBtaW4pIDogbnVsbDtcbiAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgPyBNYXRoLm1heCgwLCBtYXgpIDogbnVsbDtcbiAgICBpZiAodGhpcy5vcHRpb25zLmJlZ2luQXRaZXJvKSB7XG4gICAgICB0aGlzLl96ZXJvID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gIH1cbiAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICBjb25zdCB7bWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICBsZXQgbWluID0gdGhpcy5taW47XG4gICAgbGV0IG1heCA9IHRoaXMubWF4O1xuICAgIGNvbnN0IHNldE1pbiA9IHYgPT4gKG1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiB2KTtcbiAgICBjb25zdCBzZXRNYXggPSB2ID0+IChtYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdik7XG4gICAgY29uc3QgZXhwID0gKHYsIG0pID0+IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHYpKSArIG0pO1xuICAgIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgaWYgKG1pbiA8PSAwKSB7XG4gICAgICAgIHNldE1pbigxKTtcbiAgICAgICAgc2V0TWF4KDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldE1pbihleHAobWluLCAtMSkpO1xuICAgICAgICBzZXRNYXgoZXhwKG1heCwgKzEpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1pbiA8PSAwKSB7XG4gICAgICBzZXRNaW4oZXhwKG1heCwgLTEpKTtcbiAgICB9XG4gICAgaWYgKG1heCA8PSAwKSB7XG4gICAgICBzZXRNYXgoZXhwKG1pbiwgKzEpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3plcm8gJiYgdGhpcy5taW4gIT09IHRoaXMuX3N1Z2dlc3RlZE1pbiAmJiBtaW4gPT09IGV4cCh0aGlzLm1pbiwgMCkpIHtcbiAgICAgIHNldE1pbihleHAobWluLCAtMSkpO1xuICAgIH1cbiAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICB0aGlzLm1heCA9IG1heDtcbiAgfVxuICBidWlsZFRpY2tzKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgZ2VuZXJhdGlvbk9wdGlvbnMgPSB7XG4gICAgICBtaW46IHRoaXMuX3VzZXJNaW4sXG4gICAgICBtYXg6IHRoaXMuX3VzZXJNYXhcbiAgICB9O1xuICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyhnZW5lcmF0aW9uT3B0aW9ucywgdGhpcyk7XG4gICAgaWYgKG9wdHMuYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICBfc2V0TWluQW5kTWF4QnlLZXkodGlja3MsIHRoaXMsICd2YWx1ZScpO1xuICAgIH1cbiAgICBpZiAob3B0cy5yZXZlcnNlKSB7XG4gICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5tYXg7XG4gICAgICB0aGlzLmVuZCA9IHRoaXMubWluO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5taW47XG4gICAgICB0aGlzLmVuZCA9IHRoaXMubWF4O1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICcwJ1xuICAgICAgOiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMubWluO1xuICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSBsb2cxMChzdGFydCk7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IGxvZzEwKHRoaXMubWF4KSAtIGxvZzEwKHN0YXJ0KTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHZhbHVlID0gdGhpcy5taW47XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBpc05hTih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCh2YWx1ZSA9PT0gdGhpcy5taW5cbiAgICAgID8gMFxuICAgICAgOiAobG9nMTAodmFsdWUpIC0gdGhpcy5fc3RhcnRWYWx1ZSkgLyB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKTtcbiAgICByZXR1cm4gTWF0aC5wb3coMTAsIHRoaXMuX3N0YXJ0VmFsdWUgKyBkZWNpbWFsICogdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbn1cbkxvZ2FyaXRobWljU2NhbGUuaWQgPSAnbG9nYXJpdGhtaWMnO1xuTG9nYXJpdGhtaWNTY2FsZS5kZWZhdWx0cyA9IHtcbiAgdGlja3M6IHtcbiAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5sb2dhcml0aG1pYyxcbiAgICBtYWpvcjoge1xuICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG9wdHMpIHtcbiAgY29uc3QgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuICBpZiAodGlja09wdHMuZGlzcGxheSAmJiBvcHRzLmRpc3BsYXkpIHtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZyk7XG4gICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KHRpY2tPcHRzLmZvbnQgJiYgdGlja09wdHMuZm9udC5zaXplLCBkZWZhdWx0cy5mb250LnNpemUpICsgcGFkZGluZy5oZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBtZWFzdXJlTGFiZWxTaXplKGN0eCwgZm9udCwgbGFiZWwpIHtcbiAgbGFiZWwgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsIDogW2xhYmVsXTtcbiAgcmV0dXJuIHtcbiAgICB3OiBfbG9uZ2VzdFRleHQoY3R4LCBmb250LnN0cmluZywgbGFiZWwpLFxuICAgIGg6IGxhYmVsLmxlbmd0aCAqIGZvbnQubGluZUhlaWdodFxuICB9O1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb3MsIHNpemUsIG1pbiwgbWF4KSB7XG4gIGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHBvcyAtIChzaXplIC8gMiksXG4gICAgICBlbmQ6IHBvcyArIChzaXplIC8gMilcbiAgICB9O1xuICB9IGVsc2UgaWYgKGFuZ2xlIDwgbWluIHx8IGFuZ2xlID4gbWF4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBwb3MgLSBzaXplLFxuICAgICAgZW5kOiBwb3NcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHBvcyxcbiAgICBlbmQ6IHBvcyArIHNpemVcbiAgfTtcbn1cbmZ1bmN0aW9uIGZpdFdpdGhQb2ludExhYmVscyhzY2FsZSkge1xuICBjb25zdCBvcmlnID0ge1xuICAgIGw6IHNjYWxlLmxlZnQgKyBzY2FsZS5fcGFkZGluZy5sZWZ0LFxuICAgIHI6IHNjYWxlLnJpZ2h0IC0gc2NhbGUuX3BhZGRpbmcucmlnaHQsXG4gICAgdDogc2NhbGUudG9wICsgc2NhbGUuX3BhZGRpbmcudG9wLFxuICAgIGI6IHNjYWxlLmJvdHRvbSAtIHNjYWxlLl9wYWRkaW5nLmJvdHRvbVxuICB9O1xuICBjb25zdCBsaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnKTtcbiAgY29uc3QgbGFiZWxTaXplcyA9IFtdO1xuICBjb25zdCBwYWRkaW5nID0gW107XG4gIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICBjb25zdCBwb2ludExhYmVsT3B0cyA9IHNjYWxlLm9wdGlvbnMucG9pbnRMYWJlbHM7XG4gIGNvbnN0IGFkZGl0aW9uYWxBbmdsZSA9IHBvaW50TGFiZWxPcHRzLmNlbnRlclBvaW50TGFiZWxzID8gUEkgLyB2YWx1ZUNvdW50IDogMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZUNvdW50OyBpKyspIHtcbiAgICBjb25zdCBvcHRzID0gcG9pbnRMYWJlbE9wdHMuc2V0Q29udGV4dChzY2FsZS5nZXRQb2ludExhYmVsQ29udGV4dChpKSk7XG4gICAgcGFkZGluZ1tpXSA9IG9wdHMucGFkZGluZztcbiAgICBjb25zdCBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBzY2FsZS5kcmF3aW5nQXJlYSArIHBhZGRpbmdbaV0sIGFkZGl0aW9uYWxBbmdsZSk7XG4gICAgY29uc3QgcGxGb250ID0gdG9Gb250KG9wdHMuZm9udCk7XG4gICAgY29uc3QgdGV4dFNpemUgPSBtZWFzdXJlTGFiZWxTaXplKHNjYWxlLmN0eCwgcGxGb250LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0pO1xuICAgIGxhYmVsU2l6ZXNbaV0gPSB0ZXh0U2l6ZTtcbiAgICBjb25zdCBhbmdsZVJhZGlhbnMgPSBfbm9ybWFsaXplQW5nbGUoc2NhbGUuZ2V0SW5kZXhBbmdsZShpKSArIGFkZGl0aW9uYWxBbmdsZSk7XG4gICAgY29uc3QgYW5nbGUgPSBNYXRoLnJvdW5kKHRvRGVncmVlcyhhbmdsZVJhZGlhbnMpKTtcbiAgICBjb25zdCBoTGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLngsIHRleHRTaXplLncsIDAsIDE4MCk7XG4gICAgY29uc3QgdkxpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi55LCB0ZXh0U2l6ZS5oLCA5MCwgMjcwKTtcbiAgICB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZVJhZGlhbnMsIGhMaW1pdHMsIHZMaW1pdHMpO1xuICB9XG4gIHNjYWxlLnNldENlbnRlclBvaW50KFxuICAgIG9yaWcubCAtIGxpbWl0cy5sLFxuICAgIGxpbWl0cy5yIC0gb3JpZy5yLFxuICAgIG9yaWcudCAtIGxpbWl0cy50LFxuICAgIGxpbWl0cy5iIC0gb3JpZy5iXG4gICk7XG4gIHNjYWxlLl9wb2ludExhYmVsSXRlbXMgPSBidWlsZFBvaW50TGFiZWxJdGVtcyhzY2FsZSwgbGFiZWxTaXplcywgcGFkZGluZyk7XG59XG5mdW5jdGlvbiB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZSwgaExpbWl0cywgdkxpbWl0cykge1xuICBjb25zdCBzaW4gPSBNYXRoLmFicyhNYXRoLnNpbihhbmdsZSkpO1xuICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhhbmdsZSkpO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgaWYgKGhMaW1pdHMuc3RhcnQgPCBvcmlnLmwpIHtcbiAgICB4ID0gKG9yaWcubCAtIGhMaW1pdHMuc3RhcnQpIC8gc2luO1xuICAgIGxpbWl0cy5sID0gTWF0aC5taW4obGltaXRzLmwsIG9yaWcubCAtIHgpO1xuICB9IGVsc2UgaWYgKGhMaW1pdHMuZW5kID4gb3JpZy5yKSB7XG4gICAgeCA9IChoTGltaXRzLmVuZCAtIG9yaWcucikgLyBzaW47XG4gICAgbGltaXRzLnIgPSBNYXRoLm1heChsaW1pdHMuciwgb3JpZy5yICsgeCk7XG4gIH1cbiAgaWYgKHZMaW1pdHMuc3RhcnQgPCBvcmlnLnQpIHtcbiAgICB5ID0gKG9yaWcudCAtIHZMaW1pdHMuc3RhcnQpIC8gY29zO1xuICAgIGxpbWl0cy50ID0gTWF0aC5taW4obGltaXRzLnQsIG9yaWcudCAtIHkpO1xuICB9IGVsc2UgaWYgKHZMaW1pdHMuZW5kID4gb3JpZy5iKSB7XG4gICAgeSA9ICh2TGltaXRzLmVuZCAtIG9yaWcuYikgLyBjb3M7XG4gICAgbGltaXRzLmIgPSBNYXRoLm1heChsaW1pdHMuYiwgb3JpZy5iICsgeSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKSB7XG4gIGNvbnN0IGl0ZW1zID0gW107XG4gIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICBjb25zdCBvcHRzID0gc2NhbGUub3B0aW9ucztcbiAgY29uc3QgZXh0cmEgPSBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykgLyAyO1xuICBjb25zdCBvdXRlckRpc3RhbmNlID0gc2NhbGUuZHJhd2luZ0FyZWE7XG4gIGNvbnN0IGFkZGl0aW9uYWxBbmdsZSA9IG9wdHMucG9pbnRMYWJlbHMuY2VudGVyUG9pbnRMYWJlbHMgPyBQSSAvIHZhbHVlQ291bnQgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKykge1xuICAgIGNvbnN0IHBvaW50TGFiZWxQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgb3V0ZXJEaXN0YW5jZSArIGV4dHJhICsgcGFkZGluZ1tpXSwgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKF9ub3JtYWxpemVBbmdsZShwb2ludExhYmVsUG9zaXRpb24uYW5nbGUgKyBIQUxGX1BJKSkpO1xuICAgIGNvbnN0IHNpemUgPSBsYWJlbFNpemVzW2ldO1xuICAgIGNvbnN0IHkgPSB5Rm9yQW5nbGUocG9pbnRMYWJlbFBvc2l0aW9uLnksIHNpemUuaCwgYW5nbGUpO1xuICAgIGNvbnN0IHRleHRBbGlnbiA9IGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBsZWZ0ID0gbGVmdEZvclRleHRBbGlnbihwb2ludExhYmVsUG9zaXRpb24ueCwgc2l6ZS53LCB0ZXh0QWxpZ24pO1xuICAgIGl0ZW1zLnB1c2goe1xuICAgICAgeDogcG9pbnRMYWJlbFBvc2l0aW9uLngsXG4gICAgICB5LFxuICAgICAgdGV4dEFsaWduLFxuICAgICAgbGVmdCxcbiAgICAgIHRvcDogeSxcbiAgICAgIHJpZ2h0OiBsZWZ0ICsgc2l6ZS53LFxuICAgICAgYm90dG9tOiB5ICsgc2l6ZS5oXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpIHtcbiAgaWYgKGFuZ2xlID09PSAwIHx8IGFuZ2xlID09PSAxODApIHtcbiAgICByZXR1cm4gJ2NlbnRlcic7XG4gIH0gZWxzZSBpZiAoYW5nbGUgPCAxODApIHtcbiAgICByZXR1cm4gJ2xlZnQnO1xuICB9XG4gIHJldHVybiAncmlnaHQnO1xufVxuZnVuY3Rpb24gbGVmdEZvclRleHRBbGlnbih4LCB3LCBhbGlnbikge1xuICBpZiAoYWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICB4IC09IHc7XG4gIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgeCAtPSAodyAvIDIpO1xuICB9XG4gIHJldHVybiB4O1xufVxuZnVuY3Rpb24geUZvckFuZ2xlKHksIGgsIGFuZ2xlKSB7XG4gIGlmIChhbmdsZSA9PT0gOTAgfHwgYW5nbGUgPT09IDI3MCkge1xuICAgIHkgLT0gKGggLyAyKTtcbiAgfSBlbHNlIGlmIChhbmdsZSA+IDI3MCB8fCBhbmdsZSA8IDkwKSB7XG4gICAgeSAtPSBoO1xuICB9XG4gIHJldHVybiB5O1xufVxuZnVuY3Rpb24gZHJhd1BvaW50TGFiZWxzKHNjYWxlLCBsYWJlbENvdW50KSB7XG4gIGNvbnN0IHtjdHgsIG9wdGlvbnM6IHtwb2ludExhYmVsc319ID0gc2NhbGU7XG4gIGZvciAobGV0IGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBvcHRzQXRJbmRleCA9IHBvaW50TGFiZWxzLnNldENvbnRleHQoc2NhbGUuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgIGNvbnN0IHBsRm9udCA9IHRvRm9udChvcHRzQXRJbmRleC5mb250KTtcbiAgICBjb25zdCB7eCwgeSwgdGV4dEFsaWduLCBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b219ID0gc2NhbGUuX3BvaW50TGFiZWxJdGVtc1tpXTtcbiAgICBjb25zdCB7YmFja2Ryb3BDb2xvcn0gPSBvcHRzQXRJbmRleDtcbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYoYmFja2Ryb3BDb2xvcikpIHtcbiAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9IHRvVFJCTENvcm5lcnMob3B0c0F0SW5kZXguYm9yZGVyUmFkaXVzKTtcbiAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZHJvcENvbG9yO1xuICAgICAgY29uc3QgYmFja2Ryb3BMZWZ0ID0gbGVmdCAtIHBhZGRpbmcubGVmdDtcbiAgICAgIGNvbnN0IGJhY2tkcm9wVG9wID0gdG9wIC0gcGFkZGluZy50b3A7XG4gICAgICBjb25zdCBiYWNrZHJvcFdpZHRoID0gcmlnaHQgLSBsZWZ0ICsgcGFkZGluZy53aWR0aDtcbiAgICAgIGNvbnN0IGJhY2tkcm9wSGVpZ2h0ID0gYm90dG9tIC0gdG9wICsgcGFkZGluZy5oZWlnaHQ7XG4gICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUodiA9PiB2ICE9PSAwKSkge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICB4OiBiYWNrZHJvcExlZnQsXG4gICAgICAgICAgeTogYmFja2Ryb3BUb3AsXG4gICAgICAgICAgdzogYmFja2Ryb3BXaWR0aCxcbiAgICAgICAgICBoOiBiYWNrZHJvcEhlaWdodCxcbiAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgfSk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZmlsbFJlY3QoYmFja2Ryb3BMZWZ0LCBiYWNrZHJvcFRvcCwgYmFja2Ryb3BXaWR0aCwgYmFja2Ryb3BIZWlnaHQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZW5kZXJUZXh0KFxuICAgICAgY3R4LFxuICAgICAgc2NhbGUuX3BvaW50TGFiZWxzW2ldLFxuICAgICAgeCxcbiAgICAgIHkgKyAocGxGb250LmxpbmVIZWlnaHQgLyAyKSxcbiAgICAgIHBsRm9udCxcbiAgICAgIHtcbiAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmNvbG9yLFxuICAgICAgICB0ZXh0QWxpZ246IHRleHRBbGlnbixcbiAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJ1xuICAgICAgfVxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KSB7XG4gIGNvbnN0IHtjdHh9ID0gc2NhbGU7XG4gIGlmIChjaXJjdWxhcikge1xuICAgIGN0eC5hcmMoc2NhbGUueENlbnRlciwgc2NhbGUueUNlbnRlciwgcmFkaXVzLCAwLCBUQVUpO1xuICB9IGVsc2Uge1xuICAgIGxldCBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbigwLCByYWRpdXMpO1xuICAgIGN0eC5tb3ZlVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGFiZWxDb3VudDsgaSsrKSB7XG4gICAgICBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCByYWRpdXMpO1xuICAgICAgY3R4LmxpbmVUbyhwb2ludFBvc2l0aW9uLngsIHBvaW50UG9zaXRpb24ueSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBkcmF3UmFkaXVzTGluZShzY2FsZSwgZ3JpZExpbmVPcHRzLCByYWRpdXMsIGxhYmVsQ291bnQpIHtcbiAgY29uc3QgY3R4ID0gc2NhbGUuY3R4O1xuICBjb25zdCBjaXJjdWxhciA9IGdyaWRMaW5lT3B0cy5jaXJjdWxhcjtcbiAgY29uc3Qge2NvbG9yLCBsaW5lV2lkdGh9ID0gZ3JpZExpbmVPcHRzO1xuICBpZiAoKCFjaXJjdWxhciAmJiAhbGFiZWxDb3VudCkgfHwgIWNvbG9yIHx8ICFsaW5lV2lkdGggfHwgcmFkaXVzIDwgMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjdHguc2F2ZSgpO1xuICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgY3R4LnNldExpbmVEYXNoKGdyaWRMaW5lT3B0cy5ib3JkZXJEYXNoKTtcbiAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gZ3JpZExpbmVPcHRzLmJvcmRlckRhc2hPZmZzZXQ7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgcGF0aFJhZGl1c0xpbmUoc2NhbGUsIHJhZGl1cywgY2lyY3VsYXIsIGxhYmVsQ291bnQpO1xuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5zdHJva2UoKTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBvaW50TGFiZWxDb250ZXh0KHBhcmVudCwgaW5kZXgsIGxhYmVsKSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgIGxhYmVsLFxuICAgIGluZGV4LFxuICAgIHR5cGU6ICdwb2ludExhYmVsJ1xuICB9KTtcbn1cbmNsYXNzIFJhZGlhbExpbmVhclNjYWxlIGV4dGVuZHMgTGluZWFyU2NhbGVCYXNlIHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoY2ZnKTtcbiAgICB0aGlzLnhDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy55Q2VudGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZHJhd2luZ0FyZWEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcG9pbnRMYWJlbHMgPSBbXTtcbiAgICB0aGlzLl9wb2ludExhYmVsSXRlbXMgPSBbXTtcbiAgfVxuICBzZXREaW1lbnNpb25zKCkge1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpIC8gMik7XG4gICAgY29uc3QgdyA9IHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoIC0gcGFkZGluZy53aWR0aDtcbiAgICBjb25zdCBoID0gdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodCAtIHBhZGRpbmcuaGVpZ2h0O1xuICAgIHRoaXMueENlbnRlciA9IE1hdGguZmxvb3IodGhpcy5sZWZ0ICsgdyAvIDIgKyBwYWRkaW5nLmxlZnQpO1xuICAgIHRoaXMueUNlbnRlciA9IE1hdGguZmxvb3IodGhpcy50b3AgKyBoIC8gMiArIHBhZGRpbmcudG9wKTtcbiAgICB0aGlzLmRyYXdpbmdBcmVhID0gTWF0aC5mbG9vcihNYXRoLm1pbih3LCBoKSAvIDIpO1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXMuZ2V0TWluTWF4KGZhbHNlKTtcbiAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiAwO1xuICAgIHRoaXMubWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSAmJiAhaXNOYU4obWF4KSA/IG1heCA6IDA7XG4gICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gIH1cbiAgY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuZHJhd2luZ0FyZWEgLyBnZXRUaWNrQmFja2Ryb3BIZWlnaHQodGhpcy5vcHRpb25zKSk7XG4gIH1cbiAgZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5nZW5lcmF0ZVRpY2tMYWJlbHMuY2FsbCh0aGlzLCB0aWNrcyk7XG4gICAgdGhpcy5fcG9pbnRMYWJlbHMgPSB0aGlzLmdldExhYmVscygpXG4gICAgICAubWFwKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBjYWxsYmFjayh0aGlzLm9wdGlvbnMucG9pbnRMYWJlbHMuY2FsbGJhY2ssIFt2YWx1ZSwgaW5kZXhdLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIGxhYmVsIHx8IGxhYmVsID09PSAwID8gbGFiZWwgOiAnJztcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKCh2LCBpKSA9PiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpKTtcbiAgfVxuICBmaXQoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAob3B0cy5kaXNwbGF5ICYmIG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuICAgICAgZml0V2l0aFBvaW50TGFiZWxzKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldENlbnRlclBvaW50KDAsIDAsIDAsIDApO1xuICAgIH1cbiAgfVxuICBzZXRDZW50ZXJQb2ludChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkge1xuICAgIHRoaXMueENlbnRlciArPSBNYXRoLmZsb29yKChsZWZ0TW92ZW1lbnQgLSByaWdodE1vdmVtZW50KSAvIDIpO1xuICAgIHRoaXMueUNlbnRlciArPSBNYXRoLmZsb29yKCh0b3BNb3ZlbWVudCAtIGJvdHRvbU1vdmVtZW50KSAvIDIpO1xuICAgIHRoaXMuZHJhd2luZ0FyZWEgLT0gTWF0aC5taW4odGhpcy5kcmF3aW5nQXJlYSAvIDIsIE1hdGgubWF4KGxlZnRNb3ZlbWVudCwgcmlnaHRNb3ZlbWVudCwgdG9wTW92ZW1lbnQsIGJvdHRvbU1vdmVtZW50KSk7XG4gIH1cbiAgZ2V0SW5kZXhBbmdsZShpbmRleCkge1xuICAgIGNvbnN0IGFuZ2xlTXVsdGlwbGllciA9IFRBVSAvICh0aGlzLl9wb2ludExhYmVscy5sZW5ndGggfHwgMSk7XG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9IHRoaXMub3B0aW9ucy5zdGFydEFuZ2xlIHx8IDA7XG4gICAgcmV0dXJuIF9ub3JtYWxpemVBbmdsZShpbmRleCAqIGFuZ2xlTXVsdGlwbGllciArIHRvUmFkaWFucyhzdGFydEFuZ2xlKSk7XG4gIH1cbiAgZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIGNvbnN0IHNjYWxpbmdGYWN0b3IgPSB0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgIGlmICh0aGlzLm9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgcmV0dXJuICh0aGlzLm1heCAtIHZhbHVlKSAqIHNjYWxpbmdGYWN0b3I7XG4gICAgfVxuICAgIHJldHVybiAodmFsdWUgLSB0aGlzLm1pbikgKiBzY2FsaW5nRmFjdG9yO1xuICB9XG4gIGdldFZhbHVlRm9yRGlzdGFuY2VGcm9tQ2VudGVyKGRpc3RhbmNlKSB7XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYoZGlzdGFuY2UpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBjb25zdCBzY2FsZWREaXN0YW5jZSA9IGRpc3RhbmNlIC8gKHRoaXMuZHJhd2luZ0FyZWEgLyAodGhpcy5tYXggLSB0aGlzLm1pbikpO1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmV2ZXJzZSA/IHRoaXMubWF4IC0gc2NhbGVkRGlzdGFuY2UgOiB0aGlzLm1pbiArIHNjYWxlZERpc3RhbmNlO1xuICB9XG4gIGdldFBvaW50TGFiZWxDb250ZXh0KGluZGV4KSB7XG4gICAgY29uc3QgcG9pbnRMYWJlbHMgPSB0aGlzLl9wb2ludExhYmVscyB8fCBbXTtcbiAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHBvaW50TGFiZWxzLmxlbmd0aCkge1xuICAgICAgY29uc3QgcG9pbnRMYWJlbCA9IHBvaW50TGFiZWxzW2luZGV4XTtcbiAgICAgIHJldHVybiBjcmVhdGVQb2ludExhYmVsQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIHBvaW50TGFiZWwpO1xuICAgIH1cbiAgfVxuICBnZXRQb2ludFBvc2l0aW9uKGluZGV4LCBkaXN0YW5jZUZyb21DZW50ZXIsIGFkZGl0aW9uYWxBbmdsZSA9IDApIHtcbiAgICBjb25zdCBhbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZShpbmRleCkgLSBIQUxGX1BJICsgYWRkaXRpb25hbEFuZ2xlO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnhDZW50ZXIsXG4gICAgICB5OiBNYXRoLnNpbihhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnlDZW50ZXIsXG4gICAgICBhbmdsZVxuICAgIH07XG4gIH1cbiAgZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGluZGV4LCB2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb24oaW5kZXgsIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpKTtcbiAgfVxuICBnZXRCYXNlUG9zaXRpb24oaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXggfHwgMCwgdGhpcy5nZXRCYXNlVmFsdWUoKSk7XG4gIH1cbiAgZ2V0UG9pbnRMYWJlbFBvc2l0aW9uKGluZGV4KSB7XG4gICAgY29uc3Qge2xlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbX0gPSB0aGlzLl9wb2ludExhYmVsSXRlbXNbaW5kZXhdO1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0LFxuICAgICAgdG9wLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgfTtcbiAgfVxuICBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICBjb25zdCB7YmFja2dyb3VuZENvbG9yLCBncmlkOiB7Y2lyY3VsYXJ9fSA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBwYXRoUmFkaXVzTGluZSh0aGlzLCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuX2VuZFZhbHVlKSwgY2lyY3VsYXIsIHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aCk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG4gIGRyYXdHcmlkKCkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge2FuZ2xlTGluZXMsIGdyaWR9ID0gb3B0cztcbiAgICBjb25zdCBsYWJlbENvdW50ID0gdGhpcy5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICAgIGxldCBpLCBvZmZzZXQsIHBvc2l0aW9uO1xuICAgIGlmIChvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgIGRyYXdQb2ludExhYmVscyh0aGlzLCBsYWJlbENvdW50KTtcbiAgICB9XG4gICAgaWYgKGdyaWQuZGlzcGxheSkge1xuICAgICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRpY2sudmFsdWUpO1xuICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCAtIDEpKTtcbiAgICAgICAgICBkcmF3UmFkaXVzTGluZSh0aGlzLCBvcHRzQXRJbmRleCwgb2Zmc2V0LCBsYWJlbENvdW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChhbmdsZUxpbmVzLmRpc3BsYXkpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBmb3IgKGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBhbmdsZUxpbmVzLnNldENvbnRleHQodGhpcy5nZXRQb2ludExhYmVsQ29udGV4dChpKSk7XG4gICAgICAgIGNvbnN0IHtjb2xvciwgbGluZVdpZHRofSA9IG9wdHNBdEluZGV4O1xuICAgICAgICBpZiAoIWxpbmVXaWR0aCB8fCAhY29sb3IpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgY3R4LnNldExpbmVEYXNoKG9wdHNBdEluZGV4LmJvcmRlckRhc2gpO1xuICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBvcHRzQXRJbmRleC5ib3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKG9wdHMudGlja3MucmV2ZXJzZSA/IHRoaXMubWluIDogdGhpcy5tYXgpO1xuICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCBvZmZzZXQpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8odGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuICAgICAgICBjdHgubGluZVRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICB9XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuICBkcmF3Qm9yZGVyKCkge31cbiAgZHJhd0xhYmVscygpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICBpZiAoIXRpY2tPcHRzLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZSgwKTtcbiAgICBsZXQgb2Zmc2V0LCB3aWR0aDtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC50cmFuc2xhdGUodGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuICAgIGN0eC5yb3RhdGUoc3RhcnRBbmdsZSk7XG4gICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICB0aGlzLnRpY2tzLmZvckVhY2goKHRpY2ssIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPT09IDAgJiYgIW9wdHMucmV2ZXJzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBvcHRzQXRJbmRleCA9IHRpY2tPcHRzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgICBjb25zdCB0aWNrRm9udCA9IHRvRm9udChvcHRzQXRJbmRleC5mb250KTtcbiAgICAgIG9mZnNldCA9IHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGhpcy50aWNrc1tpbmRleF0udmFsdWUpO1xuICAgICAgaWYgKG9wdHNBdEluZGV4LnNob3dMYWJlbEJhY2tkcm9wKSB7XG4gICAgICAgIGN0eC5mb250ID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgICB3aWR0aCA9IGN0eC5tZWFzdXJlVGV4dCh0aWNrLmxhYmVsKS53aWR0aDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdHNBdEluZGV4LmJhY2tkcm9wQ29sb3I7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgY3R4LmZpbGxSZWN0KFxuICAgICAgICAgIC13aWR0aCAvIDIgLSBwYWRkaW5nLmxlZnQsXG4gICAgICAgICAgLW9mZnNldCAtIHRpY2tGb250LnNpemUgLyAyIC0gcGFkZGluZy50b3AsXG4gICAgICAgICAgd2lkdGggKyBwYWRkaW5nLndpZHRoLFxuICAgICAgICAgIHRpY2tGb250LnNpemUgKyBwYWRkaW5nLmhlaWdodFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmVuZGVyVGV4dChjdHgsIHRpY2subGFiZWwsIDAsIC1vZmZzZXQsIHRpY2tGb250LCB7XG4gICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvcixcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgZHJhd1RpdGxlKCkge31cbn1cblJhZGlhbExpbmVhclNjYWxlLmlkID0gJ3JhZGlhbExpbmVhcic7XG5SYWRpYWxMaW5lYXJTY2FsZS5kZWZhdWx0cyA9IHtcbiAgZGlzcGxheTogdHJ1ZSxcbiAgYW5pbWF0ZTogdHJ1ZSxcbiAgcG9zaXRpb246ICdjaGFydEFyZWEnLFxuICBhbmdsZUxpbmVzOiB7XG4gICAgZGlzcGxheTogdHJ1ZSxcbiAgICBsaW5lV2lkdGg6IDEsXG4gICAgYm9yZGVyRGFzaDogW10sXG4gICAgYm9yZGVyRGFzaE9mZnNldDogMC4wXG4gIH0sXG4gIGdyaWQ6IHtcbiAgICBjaXJjdWxhcjogZmFsc2VcbiAgfSxcbiAgc3RhcnRBbmdsZTogMCxcbiAgdGlja3M6IHtcbiAgICBzaG93TGFiZWxCYWNrZHJvcDogdHJ1ZSxcbiAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5udW1lcmljXG4gIH0sXG4gIHBvaW50TGFiZWxzOiB7XG4gICAgYmFja2Ryb3BDb2xvcjogdW5kZWZpbmVkLFxuICAgIGJhY2tkcm9wUGFkZGluZzogMixcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIGZvbnQ6IHtcbiAgICAgIHNpemU6IDEwXG4gICAgfSxcbiAgICBjYWxsYmFjayhsYWJlbCkge1xuICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH0sXG4gICAgcGFkZGluZzogNSxcbiAgICBjZW50ZXJQb2ludExhYmVsczogZmFsc2VcbiAgfVxufTtcblJhZGlhbExpbmVhclNjYWxlLmRlZmF1bHRSb3V0ZXMgPSB7XG4gICdhbmdsZUxpbmVzLmNvbG9yJzogJ2JvcmRlckNvbG9yJyxcbiAgJ3BvaW50TGFiZWxzLmNvbG9yJzogJ2NvbG9yJyxcbiAgJ3RpY2tzLmNvbG9yJzogJ2NvbG9yJ1xufTtcblJhZGlhbExpbmVhclNjYWxlLmRlc2NyaXB0b3JzID0ge1xuICBhbmdsZUxpbmVzOiB7XG4gICAgX2ZhbGxiYWNrOiAnZ3JpZCdcbiAgfVxufTtcblxuY29uc3QgSU5URVJWQUxTID0ge1xuICBtaWxsaXNlY29uZDoge2NvbW1vbjogdHJ1ZSwgc2l6ZTogMSwgc3RlcHM6IDEwMDB9LFxuICBzZWNvbmQ6IHtjb21tb246IHRydWUsIHNpemU6IDEwMDAsIHN0ZXBzOiA2MH0sXG4gIG1pbnV0ZToge2NvbW1vbjogdHJ1ZSwgc2l6ZTogNjAwMDAsIHN0ZXBzOiA2MH0sXG4gIGhvdXI6IHtjb21tb246IHRydWUsIHNpemU6IDM2MDAwMDAsIHN0ZXBzOiAyNH0sXG4gIGRheToge2NvbW1vbjogdHJ1ZSwgc2l6ZTogODY0MDAwMDAsIHN0ZXBzOiAzMH0sXG4gIHdlZWs6IHtjb21tb246IGZhbHNlLCBzaXplOiA2MDQ4MDAwMDAsIHN0ZXBzOiA0fSxcbiAgbW9udGg6IHtjb21tb246IHRydWUsIHNpemU6IDIuNjI4ZTksIHN0ZXBzOiAxMn0sXG4gIHF1YXJ0ZXI6IHtjb21tb246IGZhbHNlLCBzaXplOiA3Ljg4NGU5LCBzdGVwczogNH0sXG4gIHllYXI6IHtjb21tb246IHRydWUsIHNpemU6IDMuMTU0ZTEwfVxufTtcbmNvbnN0IFVOSVRTID0gKE9iamVjdC5rZXlzKElOVEVSVkFMUykpO1xuZnVuY3Rpb24gc29ydGVyKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuZnVuY3Rpb24gcGFyc2Uoc2NhbGUsIGlucHV0KSB7XG4gIGlmIChpc051bGxPclVuZGVmKGlucHV0KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgY29uc3Qge3BhcnNlciwgcm91bmQsIGlzb1dlZWtkYXl9ID0gc2NhbGUuX3BhcnNlT3B0cztcbiAgbGV0IHZhbHVlID0gaW5wdXQ7XG4gIGlmICh0eXBlb2YgcGFyc2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsdWUgPSBwYXJzZXIodmFsdWUpO1xuICB9XG4gIGlmICghaXNOdW1iZXJGaW5pdGUodmFsdWUpKSB7XG4gICAgdmFsdWUgPSB0eXBlb2YgcGFyc2VyID09PSAnc3RyaW5nJ1xuICAgICAgPyBhZGFwdGVyLnBhcnNlKHZhbHVlLCBwYXJzZXIpXG4gICAgICA6IGFkYXB0ZXIucGFyc2UodmFsdWUpO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChyb3VuZCkge1xuICAgIHZhbHVlID0gcm91bmQgPT09ICd3ZWVrJyAmJiAoaXNOdW1iZXIoaXNvV2Vla2RheSkgfHwgaXNvV2Vla2RheSA9PT0gdHJ1ZSlcbiAgICAgID8gYWRhcHRlci5zdGFydE9mKHZhbHVlLCAnaXNvV2VlaycsIGlzb1dlZWtkYXkpXG4gICAgICA6IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgcm91bmQpO1xuICB9XG4gIHJldHVybiArdmFsdWU7XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKG1pblVuaXQsIG1pbiwgbWF4LCBjYXBhY2l0eSkge1xuICBjb25zdCBpbGVuID0gVU5JVFMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaSA8IGlsZW4gLSAxOyArK2kpIHtcbiAgICBjb25zdCBpbnRlcnZhbCA9IElOVEVSVkFMU1tVTklUU1tpXV07XG4gICAgY29uc3QgZmFjdG9yID0gaW50ZXJ2YWwuc3RlcHMgPyBpbnRlcnZhbC5zdGVwcyA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgIGlmIChpbnRlcnZhbC5jb21tb24gJiYgTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKGZhY3RvciAqIGludGVydmFsLnNpemUpKSA8PSBjYXBhY2l0eSkge1xuICAgICAgcmV0dXJuIFVOSVRTW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gVU5JVFNbaWxlbiAtIDFdO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcoc2NhbGUsIG51bVRpY2tzLCBtaW5Vbml0LCBtaW4sIG1heCkge1xuICBmb3IgKGxldCBpID0gVU5JVFMubGVuZ3RoIC0gMTsgaSA+PSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpLS0pIHtcbiAgICBjb25zdCB1bml0ID0gVU5JVFNbaV07XG4gICAgaWYgKElOVEVSVkFMU1t1bml0XS5jb21tb24gJiYgc2NhbGUuX2FkYXB0ZXIuZGlmZihtYXgsIG1pbiwgdW5pdCkgPj0gbnVtVGlja3MgLSAxKSB7XG4gICAgICByZXR1cm4gdW5pdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFVOSVRTW21pblVuaXQgPyBVTklUUy5pbmRleE9mKG1pblVuaXQpIDogMF07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVNYWpvclVuaXQodW5pdCkge1xuICBmb3IgKGxldCBpID0gVU5JVFMuaW5kZXhPZih1bml0KSArIDEsIGlsZW4gPSBVTklUUy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBpZiAoSU5URVJWQUxTW1VOSVRTW2ldXS5jb21tb24pIHtcbiAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpIHtcbiAgaWYgKCF0aW1lc3RhbXBzKSB7XG4gICAgdGlja3NbdGltZV0gPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgY29uc3Qge2xvLCBoaX0gPSBfbG9va3VwKHRpbWVzdGFtcHMsIHRpbWUpO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRpbWVzdGFtcHNbbG9dID49IHRpbWUgPyB0aW1lc3RhbXBzW2xvXSA6IHRpbWVzdGFtcHNbaGldO1xuICAgIHRpY2tzW3RpbWVzdGFtcF0gPSB0cnVlO1xuICB9XG59XG5mdW5jdGlvbiBzZXRNYWpvclRpY2tzKHNjYWxlLCB0aWNrcywgbWFwLCBtYWpvclVuaXQpIHtcbiAgY29uc3QgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuICBjb25zdCBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YodGlja3NbMF0udmFsdWUsIG1ham9yVW5pdCk7XG4gIGNvbnN0IGxhc3QgPSB0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZTtcbiAgbGV0IG1ham9yLCBpbmRleDtcbiAgZm9yIChtYWpvciA9IGZpcnN0OyBtYWpvciA8PSBsYXN0OyBtYWpvciA9ICthZGFwdGVyLmFkZChtYWpvciwgMSwgbWFqb3JVbml0KSkge1xuICAgIGluZGV4ID0gbWFwW21ham9yXTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdGlja3NbaW5kZXhdLm1ham9yID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpY2tzO1xufVxuZnVuY3Rpb24gdGlja3NGcm9tVGltZXN0YW1wcyhzY2FsZSwgdmFsdWVzLCBtYWpvclVuaXQpIHtcbiAgY29uc3QgdGlja3MgPSBbXTtcbiAgY29uc3QgbWFwID0ge307XG4gIGNvbnN0IGlsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICBsZXQgaSwgdmFsdWU7XG4gIGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICBtYXBbdmFsdWVdID0gaTtcbiAgICB0aWNrcy5wdXNoKHtcbiAgICAgIHZhbHVlLFxuICAgICAgbWFqb3I6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIChpbGVuID09PSAwIHx8ICFtYWpvclVuaXQpID8gdGlja3MgOiBzZXRNYWpvclRpY2tzKHNjYWxlLCB0aWNrcywgbWFwLCBtYWpvclVuaXQpO1xufVxuY2xhc3MgVGltZVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgbGFiZWxzOiBbXSxcbiAgICAgIGFsbDogW11cbiAgICB9O1xuICAgIHRoaXMuX3VuaXQgPSAnZGF5JztcbiAgICB0aGlzLl9tYWpvclVuaXQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fb2Zmc2V0cyA9IHt9O1xuICAgIHRoaXMuX25vcm1hbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wYXJzZU9wdHMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaW5pdChzY2FsZU9wdHMsIG9wdHMpIHtcbiAgICBjb25zdCB0aW1lID0gc2NhbGVPcHRzLnRpbWUgfHwgKHNjYWxlT3B0cy50aW1lID0ge30pO1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyID0gbmV3IGFkYXB0ZXJzLl9kYXRlKHNjYWxlT3B0cy5hZGFwdGVycy5kYXRlKTtcbiAgICBhZGFwdGVyLmluaXQob3B0cyk7XG4gICAgbWVyZ2VJZih0aW1lLmRpc3BsYXlGb3JtYXRzLCBhZGFwdGVyLmZvcm1hdHMoKSk7XG4gICAgdGhpcy5fcGFyc2VPcHRzID0ge1xuICAgICAgcGFyc2VyOiB0aW1lLnBhcnNlcixcbiAgICAgIHJvdW5kOiB0aW1lLnJvdW5kLFxuICAgICAgaXNvV2Vla2RheTogdGltZS5pc29XZWVrZGF5XG4gICAgfTtcbiAgICBzdXBlci5pbml0KHNjYWxlT3B0cyk7XG4gICAgdGhpcy5fbm9ybWFsaXplZCA9IG9wdHMubm9ybWFsaXplZDtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgaWYgKHJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlKHRoaXMsIHJhdyk7XG4gIH1cbiAgYmVmb3JlTGF5b3V0KCkge1xuICAgIHN1cGVyLmJlZm9yZUxheW91dCgpO1xuICAgIHRoaXMuX2NhY2hlID0ge1xuICAgICAgZGF0YTogW10sXG4gICAgICBsYWJlbHM6IFtdLFxuICAgICAgYWxsOiBbXVxuICAgIH07XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgIGNvbnN0IHVuaXQgPSBvcHRpb25zLnRpbWUudW5pdCB8fCAnZGF5JztcbiAgICBsZXQge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGZ1bmN0aW9uIF9hcHBseUJvdW5kcyhib3VuZHMpIHtcbiAgICAgIGlmICghbWluRGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1pbikpIHtcbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBib3VuZHMubWluKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWF4RGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1heCkpIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBib3VuZHMubWF4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFtaW5EZWZpbmVkIHx8ICFtYXhEZWZpbmVkKSB7XG4gICAgICBfYXBwbHlCb3VuZHModGhpcy5fZ2V0TGFiZWxCb3VuZHMoKSk7XG4gICAgICBpZiAob3B0aW9ucy5ib3VuZHMgIT09ICd0aWNrcycgfHwgb3B0aW9ucy50aWNrcy5zb3VyY2UgIT09ICdsYWJlbHMnKSB7XG4gICAgICAgIF9hcHBseUJvdW5kcyh0aGlzLmdldE1pbk1heChmYWxzZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBtaW4gPSBpc051bWJlckZpbml0ZShtaW4pICYmICFpc05hTihtaW4pID8gbWluIDogK2FkYXB0ZXIuc3RhcnRPZihEYXRlLm5vdygpLCB1bml0KTtcbiAgICBtYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogK2FkYXB0ZXIuZW5kT2YoRGF0ZS5ub3coKSwgdW5pdCkgKyAxO1xuICAgIHRoaXMubWluID0gTWF0aC5taW4obWluLCBtYXggLSAxKTtcbiAgICB0aGlzLm1heCA9IE1hdGgubWF4KG1pbiArIDEsIG1heCk7XG4gIH1cbiAgX2dldExhYmVsQm91bmRzKCkge1xuICAgIGNvbnN0IGFyciA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgbGV0IG1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBsZXQgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgICBtaW4gPSBhcnJbMF07XG4gICAgICBtYXggPSBhcnJbYXJyLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4ge21pbiwgbWF4fTtcbiAgfVxuICBidWlsZFRpY2tzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgY29uc3QgdGlja09wdHMgPSBvcHRpb25zLnRpY2tzO1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aWNrT3B0cy5zb3VyY2UgPT09ICdsYWJlbHMnID8gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKSA6IHRoaXMuX2dlbmVyYXRlKCk7XG4gICAgaWYgKG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1pbiA9IHRoaXMuX3VzZXJNaW4gfHwgdGltZXN0YW1wc1swXTtcbiAgICAgIHRoaXMubWF4ID0gdGhpcy5fdXNlck1heCB8fCB0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgIGNvbnN0IHRpY2tzID0gX2ZpbHRlckJldHdlZW4odGltZXN0YW1wcywgbWluLCBtYXgpO1xuICAgIHRoaXMuX3VuaXQgPSB0aW1lT3B0cy51bml0IHx8ICh0aWNrT3B0cy5hdXRvU2tpcFxuICAgICAgPyBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIHRoaXMubWluLCB0aGlzLm1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKVxuICAgICAgOiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyh0aGlzLCB0aWNrcy5sZW5ndGgsIHRpbWVPcHRzLm1pblVuaXQsIHRoaXMubWluLCB0aGlzLm1heCkpO1xuICAgIHRoaXMuX21ham9yVW5pdCA9ICF0aWNrT3B0cy5tYWpvci5lbmFibGVkIHx8IHRoaXMuX3VuaXQgPT09ICd5ZWFyJyA/IHVuZGVmaW5lZFxuICAgICAgOiBkZXRlcm1pbmVNYWpvclVuaXQodGhpcy5fdW5pdCk7XG4gICAgdGhpcy5pbml0T2Zmc2V0cyh0aW1lc3RhbXBzKTtcbiAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aWNrc0Zyb21UaW1lc3RhbXBzKHRoaXMsIHRpY2tzLCB0aGlzLl9tYWpvclVuaXQpO1xuICB9XG4gIGFmdGVyQXV0b1NraXAoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXRBZnRlckF1dG9za2lwKSB7XG4gICAgICB0aGlzLmluaXRPZmZzZXRzKHRoaXMudGlja3MubWFwKHRpY2sgPT4gK3RpY2sudmFsdWUpKTtcbiAgICB9XG4gIH1cbiAgaW5pdE9mZnNldHModGltZXN0YW1wcykge1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IDA7XG4gICAgbGV0IGZpcnN0LCBsYXN0O1xuICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICBmaXJzdCA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMF0pO1xuICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHN0YXJ0ID0gMSAtIGZpcnN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSAodGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1sxXSkgLSBmaXJzdCkgLyAyO1xuICAgICAgfVxuICAgICAgbGFzdCA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAxXSk7XG4gICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZW5kID0gbGFzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IChsYXN0IC0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDJdKSkgLyAyO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsaW1pdCA9IHRpbWVzdGFtcHMubGVuZ3RoIDwgMyA/IDAuNSA6IDAuMjU7XG4gICAgc3RhcnQgPSBfbGltaXRWYWx1ZShzdGFydCwgMCwgbGltaXQpO1xuICAgIGVuZCA9IF9saW1pdFZhbHVlKGVuZCwgMCwgbGltaXQpO1xuICAgIHRoaXMuX29mZnNldHMgPSB7c3RhcnQsIGVuZCwgZmFjdG9yOiAxIC8gKHN0YXJ0ICsgMSArIGVuZCl9O1xuICB9XG4gIF9nZW5lcmF0ZSgpIHtcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgIGNvbnN0IG1pbm9yID0gdGltZU9wdHMudW5pdCB8fCBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIG1pbiwgbWF4LCB0aGlzLl9nZXRMYWJlbENhcGFjaXR5KG1pbikpO1xuICAgIGNvbnN0IHN0ZXBTaXplID0gdmFsdWVPckRlZmF1bHQodGltZU9wdHMuc3RlcFNpemUsIDEpO1xuICAgIGNvbnN0IHdlZWtkYXkgPSBtaW5vciA9PT0gJ3dlZWsnID8gdGltZU9wdHMuaXNvV2Vla2RheSA6IGZhbHNlO1xuICAgIGNvbnN0IGhhc1dlZWtkYXkgPSBpc051bWJlcih3ZWVrZGF5KSB8fCB3ZWVrZGF5ID09PSB0cnVlO1xuICAgIGNvbnN0IHRpY2tzID0ge307XG4gICAgbGV0IGZpcnN0ID0gbWluO1xuICAgIGxldCB0aW1lLCBjb3VudDtcbiAgICBpZiAoaGFzV2Vla2RheSkge1xuICAgICAgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKGZpcnN0LCAnaXNvV2VlaycsIHdlZWtkYXkpO1xuICAgIH1cbiAgICBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YoZmlyc3QsIGhhc1dlZWtkYXkgPyAnZGF5JyA6IG1pbm9yKTtcbiAgICBpZiAoYWRhcHRlci5kaWZmKG1heCwgbWluLCBtaW5vcikgPiAxMDAwMDAgKiBzdGVwU2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1pbiArICcgYW5kICcgKyBtYXggKyAnIGFyZSB0b28gZmFyIGFwYXJ0IHdpdGggc3RlcFNpemUgb2YgJyArIHN0ZXBTaXplICsgJyAnICsgbWlub3IpO1xuICAgIH1cbiAgICBjb25zdCB0aW1lc3RhbXBzID0gb3B0aW9ucy50aWNrcy5zb3VyY2UgPT09ICdkYXRhJyAmJiB0aGlzLmdldERhdGFUaW1lc3RhbXBzKCk7XG4gICAgZm9yICh0aW1lID0gZmlyc3QsIGNvdW50ID0gMDsgdGltZSA8IG1heDsgdGltZSA9ICthZGFwdGVyLmFkZCh0aW1lLCBzdGVwU2l6ZSwgbWlub3IpLCBjb3VudCsrKSB7XG4gICAgICBhZGRUaWNrKHRpY2tzLCB0aW1lLCB0aW1lc3RhbXBzKTtcbiAgICB9XG4gICAgaWYgKHRpbWUgPT09IG1heCB8fCBvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyB8fCBjb3VudCA9PT0gMSkge1xuICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aWNrcykuc29ydCgoYSwgYikgPT4gYSAtIGIpLm1hcCh4ID0+ICt4KTtcbiAgfVxuICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICBpZiAodGltZU9wdHMudG9vbHRpcEZvcm1hdCkge1xuICAgICAgcmV0dXJuIGFkYXB0ZXIuZm9ybWF0KHZhbHVlLCB0aW1lT3B0cy50b29sdGlwRm9ybWF0KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkYXB0ZXIuZm9ybWF0KHZhbHVlLCB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cy5kYXRldGltZSk7XG4gIH1cbiAgX3RpY2tGb3JtYXRGdW5jdGlvbih0aW1lLCBpbmRleCwgdGlja3MsIGZvcm1hdCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgZm9ybWF0cyA9IG9wdGlvbnMudGltZS5kaXNwbGF5Rm9ybWF0cztcbiAgICBjb25zdCB1bml0ID0gdGhpcy5fdW5pdDtcbiAgICBjb25zdCBtYWpvclVuaXQgPSB0aGlzLl9tYWpvclVuaXQ7XG4gICAgY29uc3QgbWlub3JGb3JtYXQgPSB1bml0ICYmIGZvcm1hdHNbdW5pdF07XG4gICAgY29uc3QgbWFqb3JGb3JtYXQgPSBtYWpvclVuaXQgJiYgZm9ybWF0c1ttYWpvclVuaXRdO1xuICAgIGNvbnN0IHRpY2sgPSB0aWNrc1tpbmRleF07XG4gICAgY29uc3QgbWFqb3IgPSBtYWpvclVuaXQgJiYgbWFqb3JGb3JtYXQgJiYgdGljayAmJiB0aWNrLm1ham9yO1xuICAgIGNvbnN0IGxhYmVsID0gdGhpcy5fYWRhcHRlci5mb3JtYXQodGltZSwgZm9ybWF0IHx8IChtYWpvciA/IG1ham9yRm9ybWF0IDogbWlub3JGb3JtYXQpKTtcbiAgICBjb25zdCBmb3JtYXR0ZXIgPSBvcHRpb25zLnRpY2tzLmNhbGxiYWNrO1xuICAgIHJldHVybiBmb3JtYXR0ZXIgPyBjYWxsYmFjayhmb3JtYXR0ZXIsIFtsYWJlbCwgaW5kZXgsIHRpY2tzXSwgdGhpcykgOiBsYWJlbDtcbiAgfVxuICBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICBsZXQgaSwgaWxlbiwgdGljaztcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICB0aWNrLmxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKHRpY2sudmFsdWUsIGksIHRpY2tzKTtcbiAgICB9XG4gIH1cbiAgZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogKHZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICB9XG4gIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBvZmZzZXRzID0gdGhpcy5fb2Zmc2V0cztcbiAgICBjb25zdCBwb3MgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKChvZmZzZXRzLnN0YXJ0ICsgcG9zKSAqIG9mZnNldHMuZmFjdG9yKTtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgY29uc3QgcG9zID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIC8gb2Zmc2V0cy5mYWN0b3IgLSBvZmZzZXRzLmVuZDtcbiAgICByZXR1cm4gdGhpcy5taW4gKyBwb3MgKiAodGhpcy5tYXggLSB0aGlzLm1pbik7XG4gIH1cbiAgX2dldExhYmVsU2l6ZShsYWJlbCkge1xuICAgIGNvbnN0IHRpY2tzT3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICBjb25zdCB0aWNrTGFiZWxXaWR0aCA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KGxhYmVsKS53aWR0aDtcbiAgICBjb25zdCBhbmdsZSA9IHRvUmFkaWFucyh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGlja3NPcHRzLm1heFJvdGF0aW9uIDogdGlja3NPcHRzLm1pblJvdGF0aW9uKTtcbiAgICBjb25zdCBjb3NSb3RhdGlvbiA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICBjb25zdCBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICBjb25zdCB0aWNrRm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLnNpemU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHc6ICh0aWNrTGFiZWxXaWR0aCAqIGNvc1JvdGF0aW9uKSArICh0aWNrRm9udFNpemUgKiBzaW5Sb3RhdGlvbiksXG4gICAgICBoOiAodGlja0xhYmVsV2lkdGggKiBzaW5Sb3RhdGlvbikgKyAodGlja0ZvbnRTaXplICogY29zUm90YXRpb24pXG4gICAgfTtcbiAgfVxuICBfZ2V0TGFiZWxDYXBhY2l0eShleGFtcGxlVGltZSkge1xuICAgIGNvbnN0IHRpbWVPcHRzID0gdGhpcy5vcHRpb25zLnRpbWU7XG4gICAgY29uc3QgZGlzcGxheUZvcm1hdHMgPSB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cztcbiAgICBjb25zdCBmb3JtYXQgPSBkaXNwbGF5Rm9ybWF0c1t0aW1lT3B0cy51bml0XSB8fCBkaXNwbGF5Rm9ybWF0cy5taWxsaXNlY29uZDtcbiAgICBjb25zdCBleGFtcGxlTGFiZWwgPSB0aGlzLl90aWNrRm9ybWF0RnVuY3Rpb24oZXhhbXBsZVRpbWUsIDAsIHRpY2tzRnJvbVRpbWVzdGFtcHModGhpcywgW2V4YW1wbGVUaW1lXSwgdGhpcy5fbWFqb3JVbml0KSwgZm9ybWF0KTtcbiAgICBjb25zdCBzaXplID0gdGhpcy5fZ2V0TGFiZWxTaXplKGV4YW1wbGVMYWJlbCk7XG4gICAgY29uc3QgY2FwYWNpdHkgPSBNYXRoLmZsb29yKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aGlzLndpZHRoIC8gc2l6ZS53IDogdGhpcy5oZWlnaHQgLyBzaXplLmgpIC0gMTtcbiAgICByZXR1cm4gY2FwYWNpdHkgPiAwID8gY2FwYWNpdHkgOiAxO1xuICB9XG4gIGdldERhdGFUaW1lc3RhbXBzKCkge1xuICAgIGxldCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUuZGF0YSB8fCBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgIH1cbiAgICBjb25zdCBtZXRhcyA9IHRoaXMuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKTtcbiAgICBpZiAodGhpcy5fbm9ybWFsaXplZCAmJiBtZXRhcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAodGhpcy5fY2FjaGUuZGF0YSA9IG1ldGFzWzBdLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHRoaXMpKTtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IG1ldGFzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGltZXN0YW1wcyA9IHRpbWVzdGFtcHMuY29uY2F0KG1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHRoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLl9jYWNoZS5kYXRhID0gdGhpcy5ub3JtYWxpemUodGltZXN0YW1wcykpO1xuICB9XG4gIGdldExhYmVsVGltZXN0YW1wcygpIHtcbiAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUubGFiZWxzIHx8IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgfVxuICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGxhYmVscy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRpbWVzdGFtcHMucHVzaChwYXJzZSh0aGlzLCBsYWJlbHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLl9jYWNoZS5sYWJlbHMgPSB0aGlzLl9ub3JtYWxpemVkID8gdGltZXN0YW1wcyA6IHRoaXMubm9ybWFsaXplKHRpbWVzdGFtcHMpKTtcbiAgfVxuICBub3JtYWxpemUodmFsdWVzKSB7XG4gICAgcmV0dXJuIF9hcnJheVVuaXF1ZSh2YWx1ZXMuc29ydChzb3J0ZXIpKTtcbiAgfVxufVxuVGltZVNjYWxlLmlkID0gJ3RpbWUnO1xuVGltZVNjYWxlLmRlZmF1bHRzID0ge1xuICBib3VuZHM6ICdkYXRhJyxcbiAgYWRhcHRlcnM6IHt9LFxuICB0aW1lOiB7XG4gICAgcGFyc2VyOiBmYWxzZSxcbiAgICB1bml0OiBmYWxzZSxcbiAgICByb3VuZDogZmFsc2UsXG4gICAgaXNvV2Vla2RheTogZmFsc2UsXG4gICAgbWluVW5pdDogJ21pbGxpc2Vjb25kJyxcbiAgICBkaXNwbGF5Rm9ybWF0czoge31cbiAgfSxcbiAgdGlja3M6IHtcbiAgICBzb3VyY2U6ICdhdXRvJyxcbiAgICBtYWpvcjoge1xuICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlKHRhYmxlLCB2YWwsIHJldmVyc2UpIHtcbiAgbGV0IGxvID0gMDtcbiAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgbGV0IHByZXZTb3VyY2UsIG5leHRTb3VyY2UsIHByZXZUYXJnZXQsIG5leHRUYXJnZXQ7XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgaWYgKHZhbCA+PSB0YWJsZVtsb10ucG9zICYmIHZhbCA8PSB0YWJsZVtoaV0ucG9zKSB7XG4gICAgICAoe2xvLCBoaX0gPSBfbG9va3VwQnlLZXkodGFibGUsICdwb3MnLCB2YWwpKTtcbiAgICB9XG4gICAgKHtwb3M6IHByZXZTb3VyY2UsIHRpbWU6IHByZXZUYXJnZXR9ID0gdGFibGVbbG9dKTtcbiAgICAoe3BvczogbmV4dFNvdXJjZSwgdGltZTogbmV4dFRhcmdldH0gPSB0YWJsZVtoaV0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh2YWwgPj0gdGFibGVbbG9dLnRpbWUgJiYgdmFsIDw9IHRhYmxlW2hpXS50aW1lKSB7XG4gICAgICAoe2xvLCBoaX0gPSBfbG9va3VwQnlLZXkodGFibGUsICd0aW1lJywgdmFsKSk7XG4gICAgfVxuICAgICh7dGltZTogcHJldlNvdXJjZSwgcG9zOiBwcmV2VGFyZ2V0fSA9IHRhYmxlW2xvXSk7XG4gICAgKHt0aW1lOiBuZXh0U291cmNlLCBwb3M6IG5leHRUYXJnZXR9ID0gdGFibGVbaGldKTtcbiAgfVxuICBjb25zdCBzcGFuID0gbmV4dFNvdXJjZSAtIHByZXZTb3VyY2U7XG4gIHJldHVybiBzcGFuID8gcHJldlRhcmdldCArIChuZXh0VGFyZ2V0IC0gcHJldlRhcmdldCkgKiAodmFsIC0gcHJldlNvdXJjZSkgLyBzcGFuIDogcHJldlRhcmdldDtcbn1cbmNsYXNzIFRpbWVTZXJpZXNTY2FsZSBleHRlbmRzIFRpbWVTY2FsZSB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuX3RhYmxlID0gW107XG4gICAgdGhpcy5fbWluUG9zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaW5pdE9mZnNldHMoKSB7XG4gICAgY29uc3QgdGltZXN0YW1wcyA9IHRoaXMuX2dldFRpbWVzdGFtcHNGb3JUYWJsZSgpO1xuICAgIGNvbnN0IHRhYmxlID0gdGhpcy5fdGFibGUgPSB0aGlzLmJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcyk7XG4gICAgdGhpcy5fbWluUG9zID0gaW50ZXJwb2xhdGUodGFibGUsIHRoaXMubWluKTtcbiAgICB0aGlzLl90YWJsZVJhbmdlID0gaW50ZXJwb2xhdGUodGFibGUsIHRoaXMubWF4KSAtIHRoaXMuX21pblBvcztcbiAgICBzdXBlci5pbml0T2Zmc2V0cyh0aW1lc3RhbXBzKTtcbiAgfVxuICBidWlsZExvb2t1cFRhYmxlKHRpbWVzdGFtcHMpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcztcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IHRhYmxlID0gW107XG4gICAgbGV0IGksIGlsZW4sIHByZXYsIGN1cnIsIG5leHQ7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRpbWVzdGFtcHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjdXJyID0gdGltZXN0YW1wc1tpXTtcbiAgICAgIGlmIChjdXJyID49IG1pbiAmJiBjdXJyIDw9IG1heCkge1xuICAgICAgICBpdGVtcy5wdXNoKGN1cnIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXRlbXMubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAge3RpbWU6IG1pbiwgcG9zOiAwfSxcbiAgICAgICAge3RpbWU6IG1heCwgcG9zOiAxfVxuICAgICAgXTtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgbmV4dCA9IGl0ZW1zW2kgKyAxXTtcbiAgICAgIHByZXYgPSBpdGVtc1tpIC0gMV07XG4gICAgICBjdXJyID0gaXRlbXNbaV07XG4gICAgICBpZiAoTWF0aC5yb3VuZCgobmV4dCArIHByZXYpIC8gMikgIT09IGN1cnIpIHtcbiAgICAgICAgdGFibGUucHVzaCh7dGltZTogY3VyciwgcG9zOiBpIC8gKGlsZW4gLSAxKX0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFibGU7XG4gIH1cbiAgX2dldFRpbWVzdGFtcHNGb3JUYWJsZSgpIHtcbiAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmFsbCB8fCBbXTtcbiAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhVGltZXN0YW1wcygpO1xuICAgIGNvbnN0IGxhYmVsID0gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKTtcbiAgICBpZiAoZGF0YS5sZW5ndGggJiYgbGFiZWwubGVuZ3RoKSB7XG4gICAgICB0aW1lc3RhbXBzID0gdGhpcy5ub3JtYWxpemUoZGF0YS5jb25jYXQobGFiZWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZXN0YW1wcyA9IGRhdGEubGVuZ3RoID8gZGF0YSA6IGxhYmVsO1xuICAgIH1cbiAgICB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUuYWxsID0gdGltZXN0YW1wcztcbiAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgfVxuICBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gKGludGVycG9sYXRlKHRoaXMuX3RhYmxlLCB2YWx1ZSkgLSB0aGlzLl9taW5Qb3MpIC8gdGhpcy5fdGFibGVSYW5nZTtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgcmV0dXJuIGludGVycG9sYXRlKHRoaXMuX3RhYmxlLCBkZWNpbWFsICogdGhpcy5fdGFibGVSYW5nZSArIHRoaXMuX21pblBvcywgdHJ1ZSk7XG4gIH1cbn1cblRpbWVTZXJpZXNTY2FsZS5pZCA9ICd0aW1lc2VyaWVzJztcblRpbWVTZXJpZXNTY2FsZS5kZWZhdWx0cyA9IFRpbWVTY2FsZS5kZWZhdWx0cztcblxudmFyIHNjYWxlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkNhdGVnb3J5U2NhbGU6IENhdGVnb3J5U2NhbGUsXG5MaW5lYXJTY2FsZTogTGluZWFyU2NhbGUsXG5Mb2dhcml0aG1pY1NjYWxlOiBMb2dhcml0aG1pY1NjYWxlLFxuUmFkaWFsTGluZWFyU2NhbGU6IFJhZGlhbExpbmVhclNjYWxlLFxuVGltZVNjYWxlOiBUaW1lU2NhbGUsXG5UaW1lU2VyaWVzU2NhbGU6IFRpbWVTZXJpZXNTY2FsZVxufSk7XG5cbmNvbnN0IHJlZ2lzdGVyYWJsZXMgPSBbXG4gIGNvbnRyb2xsZXJzLFxuICBlbGVtZW50cyxcbiAgcGx1Z2lucyxcbiAgc2NhbGVzLFxuXTtcblxuZXhwb3J0IHsgQW5pbWF0aW9uLCBBbmltYXRpb25zLCBBcmNFbGVtZW50LCBCYXJDb250cm9sbGVyLCBCYXJFbGVtZW50LCBCYXNlUGxhdGZvcm0sIEJhc2ljUGxhdGZvcm0sIEJ1YmJsZUNvbnRyb2xsZXIsIENhdGVnb3J5U2NhbGUsIENoYXJ0LCBEYXRhc2V0Q29udHJvbGxlciwgcGx1Z2luX2RlY2ltYXRpb24gYXMgRGVjaW1hdGlvbiwgRG9tUGxhdGZvcm0sIERvdWdobnV0Q29udHJvbGxlciwgRWxlbWVudCwgaW5kZXggYXMgRmlsbGVyLCBJbnRlcmFjdGlvbiwgcGx1Z2luX2xlZ2VuZCBhcyBMZWdlbmQsIExpbmVDb250cm9sbGVyLCBMaW5lRWxlbWVudCwgTGluZWFyU2NhbGUsIExvZ2FyaXRobWljU2NhbGUsIFBpZUNvbnRyb2xsZXIsIFBvaW50RWxlbWVudCwgUG9sYXJBcmVhQ29udHJvbGxlciwgUmFkYXJDb250cm9sbGVyLCBSYWRpYWxMaW5lYXJTY2FsZSwgU2NhbGUsIFNjYXR0ZXJDb250cm9sbGVyLCBwbHVnaW5fc3VidGl0bGUgYXMgU3ViVGl0bGUsIFRpY2tzLCBUaW1lU2NhbGUsIFRpbWVTZXJpZXNTY2FsZSwgcGx1Z2luX3RpdGxlIGFzIFRpdGxlLCBwbHVnaW5fdG9vbHRpcCBhcyBUb29sdGlwLCBhZGFwdGVycyBhcyBfYWRhcHRlcnMsIF9kZXRlY3RQbGF0Zm9ybSwgYW5pbWF0b3IsIGNvbnRyb2xsZXJzLCBlbGVtZW50cywgbGF5b3V0cywgcGx1Z2lucywgcmVnaXN0ZXJhYmxlcywgcmVnaXN0cnksIHNjYWxlcyB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2hhcnQgYXMgQ2hhcnQkMSwgTGluZUNvbnRyb2xsZXIsIEJhckNvbnRyb2xsZXIsIFJhZGFyQ29udHJvbGxlciwgRG91Z2hudXRDb250cm9sbGVyLCBQb2xhckFyZWFDb250cm9sbGVyLCBCdWJibGVDb250cm9sbGVyLCBQaWVDb250cm9sbGVyLCBTY2F0dGVyQ29udHJvbGxlciB9IGZyb20gJ2NoYXJ0LmpzJztcblxuY29uc3QgZGVmYXVsdERhdGFzZXRJZEtleSA9ICdsYWJlbCc7XG5mdW5jdGlvbiByZWZvcndhcmRSZWYocmVmLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlZih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRPcHRpb25zKGNoYXJ0LCBuZXh0T3B0aW9ucykge1xuICAgIE9iamVjdC5hc3NpZ24oY2hhcnQub3B0aW9ucywgbmV4dE9wdGlvbnMpO1xufVxuZnVuY3Rpb24gc2V0TGFiZWxzKGN1cnJlbnREYXRhLCBuZXh0TGFiZWxzKSB7XG4gICAgY3VycmVudERhdGEubGFiZWxzID0gbmV4dExhYmVscztcbn1cbmZ1bmN0aW9uIHNldERhdGFzZXRzKGN1cnJlbnREYXRhLCBuZXh0RGF0YXNldHMpIHtcbiAgICBsZXQgZGF0YXNldElkS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB2b2lkIDAgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0RGF0YXNldElkS2V5O1xuICAgIGNvbnN0IGFkZGVkRGF0YXNldHMgPSBbXTtcbiAgICBjdXJyZW50RGF0YS5kYXRhc2V0cyA9IG5leHREYXRhc2V0cy5tYXAoKG5leHREYXRhc2V0KT0+e1xuICAgICAgICAvLyBnaXZlbiB0aGUgbmV3IHNldCwgZmluZCBpdCdzIGN1cnJlbnQgbWF0Y2hcbiAgICAgICAgY29uc3QgY3VycmVudERhdGFzZXQgPSBjdXJyZW50RGF0YS5kYXRhc2V0cy5maW5kKChkYXRhc2V0KT0+ZGF0YXNldFtkYXRhc2V0SWRLZXldID09PSBuZXh0RGF0YXNldFtkYXRhc2V0SWRLZXldXG4gICAgICAgICk7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIG9yaWdpbmFsIHRvIHVwZGF0ZSwgc28gc2ltcGx5IGFkZCBuZXcgb25lXG4gICAgICAgIGlmICghY3VycmVudERhdGFzZXQgfHwgIW5leHREYXRhc2V0LmRhdGEgfHwgYWRkZWREYXRhc2V0cy5pbmNsdWRlcyhjdXJyZW50RGF0YXNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ubmV4dERhdGFzZXRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgYWRkZWREYXRhc2V0cy5wdXNoKGN1cnJlbnREYXRhc2V0KTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihjdXJyZW50RGF0YXNldCwgbmV4dERhdGFzZXQpO1xuICAgICAgICByZXR1cm4gY3VycmVudERhdGFzZXQ7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjbG9uZURhdGEoZGF0YSkge1xuICAgIGxldCBkYXRhc2V0SWRLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHZvaWQgMCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHREYXRhc2V0SWRLZXk7XG4gICAgY29uc3QgbmV4dERhdGEgPSB7XG4gICAgICAgIGxhYmVsczogW10sXG4gICAgICAgIGRhdGFzZXRzOiBbXVxuICAgIH07XG4gICAgc2V0TGFiZWxzKG5leHREYXRhLCBkYXRhLmxhYmVscyk7XG4gICAgc2V0RGF0YXNldHMobmV4dERhdGEsIGRhdGEuZGF0YXNldHMsIGRhdGFzZXRJZEtleSk7XG4gICAgcmV0dXJuIG5leHREYXRhO1xufVxuLyoqXG4gKiBHZXQgZGF0YXNldCBmcm9tIG1vdXNlIGNsaWNrIGV2ZW50XG4gKiBAcGFyYW0gY2hhcnQgLSBDaGFydC5qcyBpbnN0YW5jZVxuICogQHBhcmFtIGV2ZW50IC0gTW91c2UgY2xpY2sgZXZlbnRcbiAqIEByZXR1cm5zIERhdGFzZXRcbiAqLyBmdW5jdGlvbiBnZXREYXRhc2V0QXRFdmVudChjaGFydCwgZXZlbnQpIHtcbiAgICByZXR1cm4gY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShldmVudC5uYXRpdmVFdmVudCwgJ2RhdGFzZXQnLCB7XG4gICAgICAgIGludGVyc2VjdDogdHJ1ZVxuICAgIH0sIGZhbHNlKTtcbn1cbi8qKlxuICogR2V0IHNpbmdsZSBkYXRhc2V0IGVsZW1lbnQgZnJvbSBtb3VzZSBjbGljayBldmVudFxuICogQHBhcmFtIGNoYXJ0IC0gQ2hhcnQuanMgaW5zdGFuY2VcbiAqIEBwYXJhbSBldmVudCAtIE1vdXNlIGNsaWNrIGV2ZW50XG4gKiBAcmV0dXJucyBEYXRhc2V0XG4gKi8gZnVuY3Rpb24gZ2V0RWxlbWVudEF0RXZlbnQoY2hhcnQsIGV2ZW50KSB7XG4gICAgcmV0dXJuIGNoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZXZlbnQubmF0aXZlRXZlbnQsICduZWFyZXN0Jywge1xuICAgICAgICBpbnRlcnNlY3Q6IHRydWVcbiAgICB9LCBmYWxzZSk7XG59XG4vKipcbiAqIEdldCBhbGwgZGF0YXNldCBlbGVtZW50cyBmcm9tIG1vdXNlIGNsaWNrIGV2ZW50XG4gKiBAcGFyYW0gY2hhcnQgLSBDaGFydC5qcyBpbnN0YW5jZVxuICogQHBhcmFtIGV2ZW50IC0gTW91c2UgY2xpY2sgZXZlbnRcbiAqIEByZXR1cm5zIERhdGFzZXRcbiAqLyBmdW5jdGlvbiBnZXRFbGVtZW50c0F0RXZlbnQoY2hhcnQsIGV2ZW50KSB7XG4gICAgcmV0dXJuIGNoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZXZlbnQubmF0aXZlRXZlbnQsICdpbmRleCcsIHtcbiAgICAgICAgaW50ZXJzZWN0OiB0cnVlXG4gICAgfSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBDaGFydENvbXBvbmVudChwYXJhbSwgcmVmKSB7XG4gICAgbGV0IHsgaGVpZ2h0ID0xNTAgLCB3aWR0aCA9MzAwICwgcmVkcmF3ID1mYWxzZSAsIGRhdGFzZXRJZEtleSAsIHR5cGUgLCBkYXRhICwgb3B0aW9ucyAsIHBsdWdpbnMgPVtdICwgZmFsbGJhY2tDb250ZW50ICwgdXBkYXRlTW9kZSAsIC4uLnByb3BzIH0gPSBwYXJhbTtcbiAgICBjb25zdCBjYW52YXNSZWYgPSB1c2VSZWYobnVsbCk7XG4gICAgY29uc3QgY2hhcnRSZWYgPSB1c2VSZWYoKTtcbiAgICBjb25zdCByZW5kZXJDaGFydCA9ICgpPT57XG4gICAgICAgIGlmICghY2FudmFzUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICAgICAgY2hhcnRSZWYuY3VycmVudCA9IG5ldyBDaGFydCQxKGNhbnZhc1JlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgZGF0YTogY2xvbmVEYXRhKGRhdGEsIGRhdGFzZXRJZEtleSksXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zICYmIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGx1Z2luc1xuICAgICAgICB9KTtcbiAgICAgICAgcmVmb3J3YXJkUmVmKHJlZiwgY2hhcnRSZWYuY3VycmVudCk7XG4gICAgfTtcbiAgICBjb25zdCBkZXN0cm95Q2hhcnQgPSAoKT0+e1xuICAgICAgICByZWZvcndhcmRSZWYocmVmLCBudWxsKTtcbiAgICAgICAgaWYgKGNoYXJ0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNoYXJ0UmVmLmN1cnJlbnQuZGVzdHJveSgpO1xuICAgICAgICAgICAgY2hhcnRSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoIXJlZHJhdyAmJiBjaGFydFJlZi5jdXJyZW50ICYmIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHNldE9wdGlvbnMoY2hhcnRSZWYuY3VycmVudCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LCBbXG4gICAgICAgIHJlZHJhdyxcbiAgICAgICAgb3B0aW9uc1xuICAgIF0pO1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoIXJlZHJhdyAmJiBjaGFydFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBzZXRMYWJlbHMoY2hhcnRSZWYuY3VycmVudC5jb25maWcuZGF0YSwgZGF0YS5sYWJlbHMpO1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICByZWRyYXcsXG4gICAgICAgIGRhdGEubGFiZWxzXG4gICAgXSk7XG4gICAgdXNlRWZmZWN0KCgpPT57XG4gICAgICAgIGlmICghcmVkcmF3ICYmIGNoYXJ0UmVmLmN1cnJlbnQgJiYgZGF0YS5kYXRhc2V0cykge1xuICAgICAgICAgICAgc2V0RGF0YXNldHMoY2hhcnRSZWYuY3VycmVudC5jb25maWcuZGF0YSwgZGF0YS5kYXRhc2V0cywgZGF0YXNldElkS2V5KTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgcmVkcmF3LFxuICAgICAgICBkYXRhLmRhdGFzZXRzXG4gICAgXSk7XG4gICAgdXNlRWZmZWN0KCgpPT57XG4gICAgICAgIGlmICghY2hhcnRSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgICAgICBpZiAocmVkcmF3KSB7XG4gICAgICAgICAgICBkZXN0cm95Q2hhcnQoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVuZGVyQ2hhcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhcnRSZWYuY3VycmVudC51cGRhdGUodXBkYXRlTW9kZSk7XG4gICAgICAgIH1cbiAgICB9LCBbXG4gICAgICAgIHJlZHJhdyxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgZGF0YS5sYWJlbHMsXG4gICAgICAgIGRhdGEuZGF0YXNldHMsXG4gICAgICAgIHVwZGF0ZU1vZGVcbiAgICBdKTtcbiAgICB1c2VFZmZlY3QoKCk9PntcbiAgICAgICAgaWYgKCFjaGFydFJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgICAgIGRlc3Ryb3lDaGFydCgpO1xuICAgICAgICBzZXRUaW1lb3V0KHJlbmRlckNoYXJ0KTtcbiAgICB9LCBbXG4gICAgICAgIHR5cGVcbiAgICBdKTtcbiAgICB1c2VFZmZlY3QoKCk9PntcbiAgICAgICAgcmVuZGVyQ2hhcnQoKTtcbiAgICAgICAgcmV0dXJuICgpPT5kZXN0cm95Q2hhcnQoKVxuICAgICAgICA7XG4gICAgfSwgW10pO1xuICAgIHJldHVybigvKiNfX1BVUkVfXyovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiwgT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHJlZjogY2FudmFzUmVmLFxuICAgICAgICByb2xlOiBcImltZ1wiLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgfSwgcHJvcHMpLCBmYWxsYmFja0NvbnRlbnQpKTtcbn1cbmNvbnN0IENoYXJ0ID0gLyojX19QVVJFX18qLyBmb3J3YXJkUmVmKENoYXJ0Q29tcG9uZW50KTtcblxuZnVuY3Rpb24gY3JlYXRlVHlwZWRDaGFydCh0eXBlLCByZWdpc3RlcmFibGVzKSB7XG4gICAgQ2hhcnQkMS5yZWdpc3RlcihyZWdpc3RlcmFibGVzKTtcbiAgICByZXR1cm4oLyojX19QVVJFX18qLyBmb3J3YXJkUmVmKChwcm9wcywgcmVmKT0+LyojX19QVVJFX18qLyBSZWFjdC5jcmVhdGVFbGVtZW50KENoYXJ0LCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgcmVmOiByZWYsXG4gICAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgIH0pKVxuICAgICkpO1xufVxuY29uc3QgTGluZSA9IC8qICNfX1BVUkVfXyAqLyBjcmVhdGVUeXBlZENoYXJ0KCdsaW5lJywgTGluZUNvbnRyb2xsZXIpO1xuY29uc3QgQmFyID0gLyogI19fUFVSRV9fICovIGNyZWF0ZVR5cGVkQ2hhcnQoJ2JhcicsIEJhckNvbnRyb2xsZXIpO1xuY29uc3QgUmFkYXIgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydCgncmFkYXInLCBSYWRhckNvbnRyb2xsZXIpO1xuY29uc3QgRG91Z2hudXQgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydCgnZG91Z2hudXQnLCBEb3VnaG51dENvbnRyb2xsZXIpO1xuY29uc3QgUG9sYXJBcmVhID0gLyogI19fUFVSRV9fICovIGNyZWF0ZVR5cGVkQ2hhcnQoJ3BvbGFyQXJlYScsIFBvbGFyQXJlYUNvbnRyb2xsZXIpO1xuY29uc3QgQnViYmxlID0gLyogI19fUFVSRV9fICovIGNyZWF0ZVR5cGVkQ2hhcnQoJ2J1YmJsZScsIEJ1YmJsZUNvbnRyb2xsZXIpO1xuY29uc3QgUGllID0gLyogI19fUFVSRV9fICovIGNyZWF0ZVR5cGVkQ2hhcnQoJ3BpZScsIFBpZUNvbnRyb2xsZXIpO1xuY29uc3QgU2NhdHRlciA9IC8qICNfX1BVUkVfXyAqLyBjcmVhdGVUeXBlZENoYXJ0KCdzY2F0dGVyJywgU2NhdHRlckNvbnRyb2xsZXIpO1xuXG5leHBvcnQgeyBCYXIsIEJ1YmJsZSwgQ2hhcnQsIERvdWdobnV0LCBMaW5lLCBQaWUsIFBvbGFyQXJlYSwgUmFkYXIsIFNjYXR0ZXIsIGdldERhdGFzZXRBdEV2ZW50LCBnZXRFbGVtZW50QXRFdmVudCwgZ2V0RWxlbWVudHNBdEV2ZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIENoYXJ0IGFzIENoYXJ0SlMsXG4gIENhdGVnb3J5U2NhbGUsXG4gIExpbmVhclNjYWxlLFxuICBQb2ludEVsZW1lbnQsXG4gIExpbmVFbGVtZW50LFxuICBUaXRsZSxcbiAgVG9vbHRpcCxcbiAgTGVnZW5kLFxuICBJbnRlcmFjdGlvbkl0ZW0sXG59IGZyb20gJ2NoYXJ0LmpzJztcbmltcG9ydCB7IGdldEVsZW1lbnRBdEV2ZW50LCBMaW5lIH0gZnJvbSAncmVhY3QtY2hhcnRqcy0yJztcbmltcG9ydCB7IEZpbHRlclR5cGUsIE1vbnRocyB9IGZyb20gJ0B0eXBlcyc7XG5pbXBvcnQgeyB1c2VBcHBTZWxlY3RvciB9IGZyb20gJ0ByZWR1eC9ob29rcyc7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnO1xuaW1wb3J0IHsgdXNlTmF2aWdhdGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuQ2hhcnRKUy5yZWdpc3RlcihDYXRlZ29yeVNjYWxlLCBMaW5lYXJTY2FsZSwgUG9pbnRFbGVtZW50LCBMaW5lRWxlbWVudCwgVGl0bGUsIFRvb2x0aXAsIExlZ2VuZCk7XG5cbmNvbnN0IGNvbnZlcnREYXRhVG9NYXRjaENoYXJ0SlMgPSAoXG4gIHNjaG9vbEdyYXBoOiBNYXA8c3RyaW5nLCBNYXA8a2V5b2YgTW9udGhzLCBudW1iZXI+PixcbiAgY2hhcnRDb2xvcnM6IHN0cmluZ1tdLFxuICBoaWRkZW5DaGFydHM6IHN0cmluZ1tdLFxuKSA9PiB7XG4gIGNvbnN0IGRhdGFzZXRzOiB7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBkYXRhOiB7IHg6IE1vbnRoczsgeTogbnVtYmVyIH1bXTtcbiAgICBwb2ludFN0eWxlOiBzdHJpbmc7XG4gICAgcG9pbnRSYWRpdXM6IG51bWJlcjtcbiAgICBwb2ludEhvdmVyUmFkaXVzOiBudW1iZXI7XG4gICAgYm9yZGVyQ29sb3I6IHN0cmluZztcbiAgICBoaWRkZW46IGJvb2xlYW47XG4gIH1bXSA9IFtdO1xuICBjb25zdCBsYWJlbHM6IE1vbnRoc1tdID0gT2JqZWN0LnZhbHVlcyhNb250aHMpIGFzIE1vbnRoc1tdO1xuXG4gIGNvbnN0IHNvcnRCeU1vbnRoID0gZnVuY3Rpb24gKGE6IHsgeDogTW9udGhzOyB5OiBudW1iZXIgfSwgYjogeyB4OiBNb250aHM7IHk6IG51bWJlciB9KSB7XG4gICAgcmV0dXJuIGxhYmVscy5pbmRleE9mKGEueCkgLSBsYWJlbHMuaW5kZXhPZihiLngpO1xuICB9O1xuXG4gIHNjaG9vbEdyYXBoLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICBkYXRhc2V0cy5wdXNoKHtcbiAgICAgIHBvaW50U3R5bGU6ICdjaXJjbGUnLFxuICAgICAgcG9pbnRSYWRpdXM6IDcsXG4gICAgICBwb2ludEhvdmVyUmFkaXVzOiAxNSxcbiAgICAgIGhpZGRlbjogaGlkZGVuQ2hhcnRzLmluZGV4T2Yoa2V5KSA+IC0xLFxuICAgICAgbGFiZWw6IGtleSxcbiAgICAgIGJvcmRlckNvbG9yOiBjaGFydENvbG9yc1tkYXRhc2V0cy5sZW5ndGhdLFxuICAgICAgZGF0YTogQXJyYXkuZnJvbSh2YWx1ZSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHsgeDogaXRlbVswXSBhcyBNb250aHMsIHk6IGl0ZW1bMV0gfTtcbiAgICAgIH0pLnNvcnQoc29ydEJ5TW9udGgpLFxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGxhYmVsczogT2JqZWN0LnZhbHVlcyhNb250aHMpLFxuICAgIGRhdGFzZXRzLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IENoYXJ0ID0gKHtcbiAgc2Nob29sR3JhcGgsXG4gIGNoYXJ0Q29sb3JzLFxufToge1xuICBzY2hvb2xHcmFwaDogTWFwPHN0cmluZywgTWFwPGtleW9mIE1vbnRocywgbnVtYmVyPj47XG4gIGNoYXJ0Q29sb3JzOiBzdHJpbmdbXTtcbn0pID0+IHtcbiAgY29uc3QgY2hhcnRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgY29uc3QgaGlkZGVuR3JhcGhzID0gdXNlQXBwU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5kYXRhLmhpZGRlbkdyYXBocyk7XG4gIGNvbnN0IGNvdW50cnlGaWx0ZXIgPSB1c2VBcHBTZWxlY3RvcihcbiAgICAoc3RhdGUpID0+IHN0YXRlLmRhdGFbRmlsdGVyVHlwZS5DT1VOVFJZX0ZJTFRFUl0uZmlsdGVyVmFsdWUsXG4gICk7XG4gIGNvbnN0IGNhbXBGaWx0ZXIgPSB1c2VBcHBTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmRhdGFbRmlsdGVyVHlwZS5DQU1QX0ZJTFRFUl0uZmlsdGVyVmFsdWUpO1xuICBjb25zdCBkYXRhID0gY29udmVydERhdGFUb01hdGNoQ2hhcnRKUyhzY2hvb2xHcmFwaCwgY2hhcnRDb2xvcnMsIGhpZGRlbkdyYXBocyk7XG4gIGNvbnN0IGkxOG4gPSB1c2VUcmFuc2xhdGlvbigpO1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgcGx1Z2luczoge1xuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgfSxcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIHRleHQ6IGkxOG4udGBOTyBvZiBsZXNzb25zYCxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBhbmltYXRpb246IHtcbiAgICAgIGR1cmF0aW9uOiAwLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgcHJpbnRFbGVtZW50QXRFdmVudCA9IChlbGVtZW50OiBJbnRlcmFjdGlvbkl0ZW1bXSkgPT4ge1xuICAgIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICAgIGNvbnN0IHsgZGF0YXNldEluZGV4LCBpbmRleCB9ID0gZWxlbWVudFswXTtcbiAgICBuYXZpZ2F0ZShcbiAgICAgIGAvcG9pbnQvJHtjb3VudHJ5RmlsdGVyfS8ke2NhbXBGaWx0ZXJ9LyR7ZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmxhYmVsfS8ke2RhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XS54fWAsXG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVDbGljayA9IChldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MQ2FudmFzRWxlbWVudD4pID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnQ6IGNoYXJ0IH0gPSBjaGFydFJlZjtcblxuICAgIGlmICghY2hhcnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJpbnRFbGVtZW50QXRFdmVudChnZXRFbGVtZW50QXRFdmVudChjaGFydCwgZXZlbnQpKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnMzlyZW0nIH19PlxuICAgICAgPExpbmUgcmVmPXtjaGFydFJlZn0gb25DbGljaz17aGFuZGxlQ2xpY2t9IG9wdGlvbnM9e29wdGlvbnN9IGRhdGE9e2RhdGF9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0IHsgTGVnZW5kSW5mbywgU2Nob29sc0xlZ2VuZCB9IGZyb20gJ0Bjb21wb25lbnRzJztcbmltcG9ydCB7IEZpbHRlck91dHB1dCB9IGZyb20gJ0B0eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzL2xlc3NvbnNMZWdlbmRzLnNjc3MnO1xuXG5leHBvcnQgY29uc3QgTGVzc29uc0xlZ2VuZHMgPSAoe1xuICBmaWx0ZXJlZE91dHB1dCxcbiAgY2hhcnRDb2xvcnMsXG59OiB7XG4gIGZpbHRlcmVkT3V0cHV0OiBGaWx0ZXJPdXRwdXQ7XG4gIGNoYXJ0Q29sb3JzOiBzdHJpbmdbXTtcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8YXNpZGUgY2xhc3NOYW1lPXtzdHlsZXMubGVnZW5kc0NvbnRhaW5lcn0+XG4gICAgICA8TGVnZW5kSW5mbyBwbGFjZU5hbWU9e2ZpbHRlcmVkT3V0cHV0LmNhbXBOYW1lfSBudW1iZXI9e2ZpbHRlcmVkT3V0cHV0LnRvdGFsTGVzc29uc30gLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2Nob29sc0xlZ2VuZENvbnRhaW5lcn0+XG4gICAgICAgIDxTY2hvb2xzTGVnZW5kIGNoYXJ0Q29sb3JzPXtjaGFydENvbG9yc30gc2Nob29sc01hcD17ZmlsdGVyZWRPdXRwdXQuc2Nob29sTGVzc29uc30gLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvYXNpZGU+XG4gICk7XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJ0b3RhbFRpdGxlXCI6XCJaYmNTcV81NENST0Z1bjhvSDU1X1wiLFwidG90YWxUaXRsZUNvbnRhaW5lclwiOlwiUllZMEw3QWhlYjNmMUxCdjYwYVVcIixcImNhbXBOYW1lVGl0bGVcIjpcImgzckZFaDJZWnJWckEzNldWaGpRXCIsXCJsZWdlbmRzQ29udGFpbmVyXCI6XCJYYzl3ZUFUSUJRekFpbFpNVTd1QVwiLFwic2Nob29sc0xlZ2VuZENvbnRhaW5lclwiOlwiS0p1SWxCNE1yX1BmQ3NYQ2t1ZUJcIn07IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0JztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMvbGVnZW5kSW5mby5zY3NzJztcblxudHlwZSBQcm9wcyA9IHtcbiAgbnVtYmVyOiBudW1iZXI7XG4gIHBsYWNlTmFtZTogc3RyaW5nO1xuICBjb2xvcj86IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBMZWdlbmRJbmZvID0gKHsgbnVtYmVyLCBwbGFjZU5hbWUsIGNvbG9yIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGkxOG4gPSB1c2VUcmFuc2xhdGlvbigpO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8ZGl2IHN0eWxlPXt7IGNvbG9yIH19IGNsYXNzTmFtZT17c3R5bGVzLnRvdGFsVGl0bGVDb250YWluZXJ9PlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy50b3RhbFRpdGxlfT57bnVtYmVyfTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+e2kxOG4udGBMZXNzb25zYH08L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9e3sgY29sb3IgfX0gY2xhc3NOYW1lPXtzdHlsZXMuY2FtcE5hbWVUaXRsZX0+XG4gICAgICAgIHtpMThuLnRgaW5gfSB7cGxhY2VOYW1lfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJ0b3RhbFRpdGxlXCI6XCJQNTZSRHZzZzZSU0s2ZFNESDNxYVwiLFwidG90YWxUaXRsZUNvbnRhaW5lclwiOlwiT2tQWjRVekM3b0xQSm9CSVA5QXRcIixcImNhbXBOYW1lVGl0bGVcIjpcIldvQTFtT2Q1ZjNTamZjTUtBMGhnXCIsXCJsZWdlbmRzQ29udGFpbmVyXCI6XCJxOE84aDdFNl9Wd1ZKSDR6Y2FNQVwifTsiLCJpbXBvcnQgeyB0b2dnbGVHcmFwaCB9IGZyb20gJ0ByZWR1eC9hY3Rpb25zL2RhdGEnO1xuaW1wb3J0IHsgdXNlQXBwRGlzcGF0Y2gsIHVzZUFwcFNlbGVjdG9yIH0gZnJvbSAnQHJlZHV4L2hvb2tzJztcbmltcG9ydCB7IFRvZ2dsZUdyYXBoVHlwZXMgfSBmcm9tICdAdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGVnZW5kSW5mbyB9IGZyb20gJy4vbGVnZW5kSW5mbyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzL3NjaG9vbENhcmQuc2Nzcyc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNjaG9vbE5hbWU6IHN0cmluZztcbiAgbGVzc29uc0NvdW50OiBudW1iZXI7XG4gIGNvbG9yOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgU2Nob29sQ2FyZCA9ICh7IHNjaG9vbE5hbWUsIGxlc3NvbnNDb3VudCwgY29sb3IgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VBcHBEaXNwYXRjaCgpO1xuICBjb25zdCBoaWRkZW5HcmFwaHMgPSB1c2VBcHBTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmRhdGEuaGlkZGVuR3JhcGhzKTtcbiAgY29uc3QgZW5hYmxlZCA9ICFoaWRkZW5HcmFwaHMuaW5jbHVkZXMoc2Nob29sTmFtZSk7XG4gIGNvbnN0IHNob3dHcmFwaCA9IGVuYWJsZWQgPyBUb2dnbGVHcmFwaFR5cGVzLkhJREVfR1JBUEggOiBUb2dnbGVHcmFwaFR5cGVzLlNIT1dfR1JBUEg7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHRvZ2dsZUdyYXBoKHNjaG9vbE5hbWUsIHNob3dHcmFwaCkpO1xuICAgICAgfX1cbiAgICAgIHN0eWxlPXtlbmFibGVkID8geyBjb2xvciB9IDogdW5kZWZpbmVkfVxuICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuY2FyZENvbnRhaW5lcn1cbiAgICA+XG4gICAgICA8ZGl2IHN0eWxlPXtlbmFibGVkID8geyBib3JkZXJDb2xvcjogY29sb3IgfSA6IHVuZGVmaW5lZH0gY2xhc3NOYW1lPXtzdHlsZXMudG9nZ2xlQ29udGFpbmVyfT5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIHN0eWxlPXtlbmFibGVkID8geyBiYWNrZ3JvdW5kOiBjb2xvciB9IDogdW5kZWZpbmVkfVxuICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnRvZ2dsZUJ1bGxldH1cbiAgICAgICAgPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8TGVnZW5kSW5mb1xuICAgICAgICBjb2xvcj17ZW5hYmxlZCA/IGNvbG9yIDogdW5kZWZpbmVkfVxuICAgICAgICBwbGFjZU5hbWU9e3NjaG9vbE5hbWV9XG4gICAgICAgIG51bWJlcj17bGVzc29uc0NvdW50fVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcInRvZ2dsZUNvbnRhaW5lclwiOlwiX0hHc0FSckR3bnVTYlNzWGpXMXJcIixcInRvZ2dsZUJ1bGxldFwiOlwiSGVxNDNSbXdBa2pVRm9RNkZPbXFcIixcImNhcmRDb250YWluZXJcIjpcIlZfM3JiclRjWF91bmxOODZWQW5qXCJ9OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjaG9vbENhcmQgfSBmcm9tICcuL3NjaG9vbENhcmQnO1xuXG50eXBlIFByb3BzID0ge1xuICBzY2hvb2xzTWFwOiBNYXA8c3RyaW5nLCBudW1iZXI+O1xuICBjaGFydENvbG9yczogc3RyaW5nW107XG59O1xuXG50eXBlIFNjaG9vbExlZ2VuZCA9IHtcbiAgc2Nob29sTmFtZTogc3RyaW5nO1xuICBsZXNzb25zOiBudW1iZXI7XG59O1xuXG5jb25zdCBjb252ZXJNYXBUb0FycmF5ID0gKG1hcDogTWFwPHN0cmluZywgbnVtYmVyPik6IFNjaG9vbExlZ2VuZFtdID0+IHtcbiAgY29uc3QgYXJyOiBTY2hvb2xMZWdlbmRbXSA9IFtdO1xuICBtYXAuZm9yRWFjaCgodmFsdWU6IG51bWJlciwga2V5OiBzdHJpbmcpID0+IHtcbiAgICBhcnIucHVzaCh7IHNjaG9vbE5hbWU6IGtleSwgbGVzc29uczogdmFsdWUgfSk7XG4gIH0pO1xuICByZXR1cm4gYXJyO1xufTtcblxuZXhwb3J0IGNvbnN0IFNjaG9vbHNMZWdlbmQgPSAoeyBzY2hvb2xzTWFwLCBjaGFydENvbG9ycyB9OiBQcm9wcykgPT4ge1xuICBjb25zdCBzY2hvb2xEYXRhID0gY29udmVyTWFwVG9BcnJheShzY2hvb2xzTWFwKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAge3NjaG9vbERhdGEubWFwKChzY2hvb2w6IFNjaG9vbExlZ2VuZCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxTY2hvb2xDYXJkXG4gICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgc2Nob29sTmFtZT17c2Nob29sLnNjaG9vbE5hbWV9XG4gICAgICAgICAgICBsZXNzb25zQ291bnQ9e3NjaG9vbC5sZXNzb25zfVxuICAgICAgICAgICAgY29sb3I9e2NoYXJ0Q29sb3JzW2luZGV4XX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy9sb2FkaW5nU3Bpbm5lci5zY3NzJztcblxuZXhwb3J0IGNvbnN0IExvYWRpbmdTcGlubmVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubGRzUmluZ30+XG4gICAgICA8ZGl2PjwvZGl2PlxuICAgICAgPGRpdj48L2Rpdj5cbiAgICAgIDxkaXY+PC9kaXY+XG4gICAgICA8ZGl2PjwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wibGRzUmluZ1wiOlwib1RrN1cwY05fX1hnRVpxS0pyU3JcIn07IiwiaW1wb3J0IHsgTG9hZGluZ1NwaW5uZXIgfSBmcm9tICdAY29tcG9uZW50cyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzL2xvYWRpbmdTY3JlZW4uc2Nzcyc7XG5cbmV4cG9ydCBjb25zdCBMb2FkaW5nU2NyZWVuID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9hZGluZ1NjcmVlbkJhY2tkcm9wfT5cbiAgICAgIDxMb2FkaW5nU3Bpbm5lciAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wibG9hZGluZ1NjcmVlbkJhY2tkcm9wXCI6XCJzMTVVaHRWV3hERUxDOW9QZnlfcVwifTsiLCJpbXBvcnQgeyBEYXRhLCBGaWx0ZXIsIEZpbHRlck91dHB1dCwgTW9udGhzLCBTaG93QWxsU2Nob29scyB9IGZyb20gJ0B0eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmaWx0ZXJTY2hvb2xzID0gKFxuICBkYXRhOiBEYXRhW10sXG4gIHsgY291bnRyeSwgY2FtcCB9OiB7IGNvdW50cnk6IHN0cmluZzsgY2FtcDogc3RyaW5nIH0sXG4gIGN1cnJlbnRWYWx1ZSA9ICcnLFxuKTogRmlsdGVyID0+IHtcbiAgY29uc3QgZmlsdGVyZWREYXRhID0gQXJyYXkuZnJvbShcbiAgICBuZXcgU2V0KFxuICAgICAgZGF0YVxuICAgICAgICAuZmlsdGVyKChpdGVtOiBEYXRhKSA9PiBpdGVtLmNvdW50cnkgPT09IGNvdW50cnkgJiYgaXRlbS5jYW1wID09PSBjYW1wKVxuICAgICAgICAubWFwKChlKSA9PiBlLnNjaG9vbCksXG4gICAgKSxcbiAgKTtcblxuICBmaWx0ZXJlZERhdGEucHVzaChTaG93QWxsU2Nob29scyk7XG5cbiAgcmV0dXJuIHtcbiAgICBkYXRhOiBmaWx0ZXJlZERhdGEsXG4gICAgZmlsdGVyVmFsdWU6IGZpbHRlcmVkRGF0YS5pbmNsdWRlcyhjdXJyZW50VmFsdWUpID8gY3VycmVudFZhbHVlIDogZmlsdGVyZWREYXRhWzBdLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGZpbHRlckNhbXBzID0gKFxuICBkYXRhOiBEYXRhW10sXG4gIHsgY291bnRyeSB9OiB7IGNvdW50cnk6IHN0cmluZyB9LFxuICBjdXJyZW50VmFsdWUgPSAnJyxcbik6IEZpbHRlciA9PiB7XG4gIGNvbnN0IGZpbHRlcmVkRGF0YSA9IEFycmF5LmZyb20oXG4gICAgbmV3IFNldChkYXRhLmZpbHRlcigoaXRlbTogRGF0YSkgPT4gaXRlbS5jb3VudHJ5ID09PSBjb3VudHJ5KS5tYXAoKGUpID0+IGUuY2FtcCkpLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgZGF0YTogZmlsdGVyZWREYXRhLFxuICAgIGZpbHRlclZhbHVlOiBmaWx0ZXJlZERhdGEuaW5jbHVkZXMoY3VycmVudFZhbHVlKSA/IGN1cnJlbnRWYWx1ZSA6IGZpbHRlcmVkRGF0YVswXSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBmaWx0ZXJEYXRhID0gKFxuICBkYXRhOiBEYXRhW10sXG4gIHtcbiAgICBjb3VudHJ5RmlsdGVyLFxuICAgIGNhbXBGaWx0ZXIsXG4gICAgc2Nob29sRmlsdGVyLFxuICB9OiB7IGNvdW50cnlGaWx0ZXI6IHN0cmluZzsgY2FtcEZpbHRlcjogc3RyaW5nOyBzY2hvb2xGaWx0ZXI6IHN0cmluZyB9LFxuKTogRmlsdGVyT3V0cHV0ID0+IHtcbiAgY29uc3Qgc2Nob29sTWFwID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcblxuICBjb25zdCBmaWx0ZXJlZERhdGEgPSBkYXRhLmZpbHRlcihcbiAgICAoaXRlbTogRGF0YSkgPT5cbiAgICAgIGl0ZW0uY2FtcCA9PT0gY2FtcEZpbHRlciAmJlxuICAgICAgaXRlbS5jb3VudHJ5ID09PSBjb3VudHJ5RmlsdGVyICYmXG4gICAgICAoaXRlbS5zY2hvb2wgPT09IHNjaG9vbEZpbHRlciB8fCBzY2hvb2xGaWx0ZXIgPT09IFNob3dBbGxTY2hvb2xzKSxcbiAgKTtcblxuICBmaWx0ZXJlZERhdGEuZm9yRWFjaCgoaXRlbTogRGF0YSkgPT4ge1xuICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBzY2hvb2xNYXAuZ2V0KGl0ZW0uc2Nob29sKSA/PyAwO1xuICAgIHNjaG9vbE1hcC5zZXQoaXRlbS5zY2hvb2wsIHByZXZpb3VzVmFsdWUgKyBpdGVtLmxlc3NvbnMpO1xuICB9KTtcblxuICBjb25zdCB0b3RhbExlc3NvbnM6IG51bWJlciA9IGRhdGEucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG4gICAgaWYgKGN1cnIuY2FtcCA9PT0gY2FtcEZpbHRlciAmJiBjdXJyLmNvdW50cnkgPT09IGNvdW50cnlGaWx0ZXIpIHtcbiAgICAgIHJldHVybiBwcmV2ICsgY3Vyci5sZXNzb25zO1xuICAgIH0gZWxzZSByZXR1cm4gcHJldjtcbiAgfSwgMCk7XG5cbiAgY29uc3Qgc2Nob29sR3JhcGhQb2ludHMgPSBuZXcgTWFwPHN0cmluZywgTWFwPGtleW9mIE1vbnRocywgbnVtYmVyPj4oKTtcblxuICBmaWx0ZXJlZERhdGEuZm9yRWFjaCgoaXRlbTogRGF0YSkgPT4ge1xuICAgIC8vICBDaGVjayBpZiB0aGlzIHNjaG9vbCB3YXMgcmVnaXN0ZXJlZCBiZWZvcmVcbiAgICBjb25zdCBwb2ludHMgPSBzY2hvb2xHcmFwaFBvaW50cy5nZXQoaXRlbS5zY2hvb2wpO1xuXG4gICAgaWYgKHBvaW50cykge1xuICAgICAgLy8gIENoZWNrIGlmIHRoaXMgbW9udGggd2FzIHJlZ2lzdGVyZWQgYmVmb3JlXG4gICAgICBjb25zdCB2YWx1ZSA9IHBvaW50cy5nZXQoaXRlbS5tb250aCkgPz8gMDtcbiAgICAgIHBvaW50cy5zZXQoaXRlbS5tb250aCwgdmFsdWUgKyBpdGVtLmxlc3NvbnMpO1xuICAgICAgc2Nob29sR3JhcGhQb2ludHMuc2V0KGl0ZW0uc2Nob29sLCBwb2ludHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hvb2xHcmFwaFBvaW50cy5zZXQoXG4gICAgICAgIGl0ZW0uc2Nob29sLFxuICAgICAgICBuZXcgTWFwPGtleW9mIE1vbnRocywgbnVtYmVyPigpLnNldChpdGVtLm1vbnRoLCBpdGVtLmxlc3NvbnMpLFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgc2Nob29sTGVzc29uczogc2Nob29sTWFwLFxuICAgIHRvdGFsTGVzc29ucyxcbiAgICBjYW1wTmFtZTogY2FtcEZpbHRlcixcbiAgICBzY2hvb2xHcmFwaDogc2Nob29sR3JhcGhQb2ludHMsXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgTGVzc29uc0xlZ2VuZHMsIENoYXJ0IH0gZnJvbSAnQGNvbXBvbmVudHMnO1xuaW1wb3J0IHsgdXNlQXBwU2VsZWN0b3IgfSBmcm9tICdAcmVkdXgvaG9va3MnO1xuaW1wb3J0IHsgRmlsdGVyT3V0cHV0LCBGaWx0ZXJUeXBlIH0gZnJvbSAnQHR5cGVzJztcbmltcG9ydCB7IGZpbHRlckRhdGEgfSBmcm9tICdAdXRpbHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy9jaGFydENvbnRhaW5lci5zY3NzJztcblxuZXhwb3J0IGNvbnN0IENoYXJ0Q29udGFpbmVyID0gKCkgPT4ge1xuICBjb25zdCB7IGRhdGEgfSA9IHVzZUFwcFNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuZGF0YSk7XG4gIGNvbnN0IGNhbXBGaWx0ZXIgPSB1c2VBcHBTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmRhdGFbRmlsdGVyVHlwZS5DQU1QX0ZJTFRFUl0uZmlsdGVyVmFsdWUpO1xuICBjb25zdCBzY2hvb2xGaWx0ZXIgPSB1c2VBcHBTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmRhdGFbRmlsdGVyVHlwZS5TQ0hPT0xfRklMVEVSXS5maWx0ZXJWYWx1ZSk7XG4gIGNvbnN0IGNvdW50cnlGaWx0ZXIgPSB1c2VBcHBTZWxlY3RvcihcbiAgICAoc3RhdGUpID0+IHN0YXRlLmRhdGFbRmlsdGVyVHlwZS5DT1VOVFJZX0ZJTFRFUl0uZmlsdGVyVmFsdWUsXG4gICk7XG5cbiAgY29uc3QgY2hhcnRDb2xvcnMgPSBbJyNlODcwN2QnLCAnIzhhNWVhOScsICcjM2NhNmRiJywgJyMzODVlNzcnLCAnIzI0YTQwOCddO1xuXG4gIGNvbnN0IGZpbHRlcmVkT3V0cHV0OiBGaWx0ZXJPdXRwdXQgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+XG4gICAgICBmaWx0ZXJEYXRhKGRhdGEsIHtcbiAgICAgICAgY2FtcEZpbHRlcixcbiAgICAgICAgc2Nob29sRmlsdGVyLFxuICAgICAgICBjb3VudHJ5RmlsdGVyLFxuICAgICAgfSksXG4gICAgW2RhdGEsIGNhbXBGaWx0ZXIsIHNjaG9vbEZpbHRlciwgY291bnRyeUZpbHRlcl0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnRvcENvbnRhaW5lcn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmJvdHRvbVNpZGVDb250YWluZXJ9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNoYXJ0Q29udGFpbmVyfT5cbiAgICAgICAgICA8Q2hhcnQgc2Nob29sR3JhcGg9e2ZpbHRlcmVkT3V0cHV0LnNjaG9vbEdyYXBofSBjaGFydENvbG9ycz17Y2hhcnRDb2xvcnN9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmxlc3NvbnNMZWdlbmRzQ29udGFpbmVyfT5cbiAgICAgICAgICA8TGVzc29uc0xlZ2VuZHMgZmlsdGVyZWRPdXRwdXQ9e2ZpbHRlcmVkT3V0cHV0fSBjaGFydENvbG9ycz17Y2hhcnRDb2xvcnN9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJib3R0b21TaWRlQ29udGFpbmVyXCI6XCJyMXhsd1J1OEpncXB3S1htZEhiU1wiLFwiY2hhcnRDb250YWluZXJcIjpcIml2MWp3Y2tleEdEWjhnY2FZRkxNXCIsXCJsZXNzb25zTGVnZW5kc0NvbnRhaW5lclwiOlwiaWlfMFdGdnRiOHp6TFh3MGZ1WGRcIixcInRvcENvbnRhaW5lclwiOlwid01wOTM1djR5Tm9fS2JjWHkzTG5cIn07IiwiaW1wb3J0IHsgRGlyZWN0aW9ucywgTGFuZ3VhZ2VzIH0gZnJvbSAnQHR5cGVzJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICdpMThuZXh0JztcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCB1c2VMYW5ndWFnZVN3aXRjaGVyID0gKCkgPT4ge1xuICBjb25zdCB7IGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gIGNvbnN0IGN1cnJlbnRMYW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmcnKSB8fCBMYW5ndWFnZXMuRU47XG4gIGNvbnN0IGNoYW5nZUxhbmd1YWdlID0gKCkgPT4ge1xuICAgIGN1cnJlbnRMYW5nID09PSBMYW5ndWFnZXMuRU5cbiAgICAgID8gc3dpdGNoTGFuZ3VhZ2UoTGFuZ3VhZ2VzLkFSLCBpMThuKVxuICAgICAgOiBzd2l0Y2hMYW5ndWFnZShMYW5ndWFnZXMuRU4sIGkxOG4pO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGN1cnJlbnRMYW5nID09PSBMYW5ndWFnZXMuQVIpIHtcbiAgICAgIHN3aXRjaExhbmd1YWdlKExhbmd1YWdlcy5BUiwgaTE4bik7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50TGFuZyxcbiAgICBjaGFuZ2VMYW5ndWFnZSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzd2l0Y2hMYW5ndWFnZSA9IChsYW5nOiBMYW5ndWFnZXMsIGkxOG46IGkxOG4pID0+IHtcbiAgaWYgKGxhbmcgPT09IExhbmd1YWdlcy5BUikge1xuICAgIGRvY3VtZW50LmJvZHkuZGlyID0gRGlyZWN0aW9ucy5SVEw7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xhbmcnLCBMYW5ndWFnZXMuQVIpO1xuICAgIGkxOG4uY2hhbmdlTGFuZ3VhZ2UoJ2FyJyk7XG4gICAgY29udHJvbFJUTFN0eWxlc2hlZXQoJ2FkZCcpO1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmJvZHkuZGlyID0gRGlyZWN0aW9ucy5MVFI7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xhbmcnLCBMYW5ndWFnZXMuRU4pO1xuICAgIGkxOG4uY2hhbmdlTGFuZ3VhZ2UoJ2VuJyk7XG4gICAgY29udHJvbFJUTFN0eWxlc2hlZXQoJ3JlbW92ZScpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY29udHJvbFJUTFN0eWxlc2hlZXQgPSAodHlwZSA9ICdhZGQnKSA9PiB7XG4gIGNvbnN0IGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdJyk7XG4gIGlmICh0eXBlID09ICdhZGQnKSB7XG4gICAgbGlua3MuZm9yRWFjaCgoc3R5bGVTaGVldDogSFRNTExpbmtFbGVtZW50KSA9PiB7XG4gICAgICBpZiAoc3R5bGVTaGVldC5ocmVmLmVuZHNXaXRoKCcuY2h1bmsuY3NzJykpIHtcbiAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgbGluay5ocmVmID0gc3R5bGVTaGVldC5ocmVmLnJlcGxhY2UoL1xcLmNzcyQvLCAnLnJ0bC5jc3MnKTtcbiAgICAgICAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbGlua3MuZm9yRWFjaCgoc3R5bGVTaGVldDogSFRNTExpbmtFbGVtZW50KSA9PiB7XG4gICAgICBpZiAoc3R5bGVTaGVldC5ocmVmLmVuZHNXaXRoKCcuY2h1bmsucnRsLmNzcycpKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc3R5bGVTaGVldCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBMYW5ndWFnZXMgfSBmcm9tICdAdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTGFuZ3VhZ2VTd2l0Y2hlciB9IGZyb20gJy4vaG9va3MvdXNlTGFuZ3VhZ2VTd2l0Y2hlcic7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzL2xhbmd1YWdlU3dpdGNoZXIuc2Nzcyc7XG5cbmV4cG9ydCBjb25zdCBMYW5ndWFnZVN3aXRjaGVyID0gKCkgPT4ge1xuICBjb25zdCB7IGN1cnJlbnRMYW5nLCBjaGFuZ2VMYW5ndWFnZSB9ID0gdXNlTGFuZ3VhZ2VTd2l0Y2hlcigpO1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmxhbmdCdG59XG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGNoYW5nZUxhbmd1YWdlKCk7XG4gICAgICB9fVxuICAgID5cbiAgICAgIHtjdXJyZW50TGFuZyA9PT0gTGFuZ3VhZ2VzLkFSID8gTGFuZ3VhZ2VzLkVOIDogTGFuZ3VhZ2VzLkFSfVxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wibGFuZ0J0blwiOlwiQzhxQ21mN2tpelllM0F3dG04Z1RcIn07IiwidmFyIF9wYXRoLCBfcGF0aDIsIF9wYXRoMztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG52YXIgU3ZnTW9vbiA9IGZ1bmN0aW9uIFN2Z01vb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDUxMiA1MTJcIixcbiAgICBzdHlsZToge1xuICAgICAgZW5hYmxlQmFja2dyb3VuZDogXCJuZXcgMCAwIDUxMiA1MTJcIlxuICAgIH0sXG4gICAgeG1sU3BhY2U6IFwicHJlc2VydmVcIlxuICB9LCBwcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZmlsbDogXCIjNGE3ZGJhXCJcbiAgICB9LFxuICAgIGN4OiAyNTYsXG4gICAgY3k6IDI1NixcbiAgICByOiAyNDQuODdcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZpbGw6IFwiI2U1ZTVlNVwiXG4gICAgfSxcbiAgICBkOiBcIk0yNTYgMjU2YzAtOTAuNjM1IDQ5LjI0NS0xNjkuNzYyIDEyMi40MzUtMjEyLjEwM0MzNDIuNDE3IDIzLjA2MSAzMDAuNjAzIDExLjEzIDI1NiAxMS4xMyAxMjAuNzYyIDExLjEzIDExLjEzIDEyMC43NjIgMTEuMTMgMjU2YzAgMTM1LjIzNyAxMDkuNjMxIDI0NC44NyAyNDQuODcgMjQ0Ljg3IDQ0LjYwMyAwIDg2LjQxNy0xMS45MzEgMTIyLjQzNS0zMi43NjdDMzA1LjI0NSA0MjUuNzYyIDI1NiAzNDYuNjM1IDI1NiAyNTZ6XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZmlsbDogXCIjYWZhZmFmXCJcbiAgICB9LFxuICAgIGN4OiA3Ny45MTMsXG4gICAgY3k6IDI3OC4yNjEsXG4gICAgcjogMjIuMjYxXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZpbGw6IFwiI2FmYWZhZlwiXG4gICAgfSxcbiAgICBjeDogMTU1LjgyNixcbiAgICBjeTogMzc4LjQzNSxcbiAgICByOiAzMy4zOTFcbiAgfSksIF9wYXRoIHx8IChfcGF0aCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTExLjEwMiAxMjguNzY3YzIuOTM0IDAgNS44NjQtMS4xNTMgOC4wNTEtMy40NDNDMTU1LjIxMiA4Ny41NzMgMjAzLjgxMiA2Ni43ODMgMjU2IDY2Ljc4M2M2LjE0NiAwIDExLjEzLTQuOTgzIDExLjEzLTExLjEzcy00Ljk4NC0xMS4xMy0xMS4xMy0xMS4xM2MtNTguMzI4IDAtMTEyLjY0NCAyMy4yMzYtMTUyLjk0NiA2NS40MjctNC4yNDUgNC40NDUtNC4wODQgMTEuNDkxLjM2MSAxNS43MzdhMTEuMSAxMS4xIDAgMCAwIDcuNjg3IDMuMDh6TTgzLjE4MSAxNTMuOTE0YTExLjA2NCAxMS4wNjQgMCAwIDAgNi4yIDEuODk2YzMuNTgzIDAgNy4xMDItMS43MjUgOS4yNTQtNC45MTZsLjEwNC0uMTU1YzMuMzc4LTUuMTEyIDEuOTY2LTExLjk1OS0zLjEzMS0xNS4zNTktNS4wOTYtMy40LTEyLjAwNi0yLjAxLTE1LjQzMSAzLjA3bC0uMDIxLjAzMWMtMy40MjkgNS4wOTgtMi4wNzIgMTIgMy4wMjUgMTUuNDMzelwiXG4gIH0pKSwgX3BhdGgyIHx8IChfcGF0aDIgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTI2Ny40MTEgNTExLjc0YzEuMjU2LS4wNTUgMi41MDktLjEyNCAzLjc2MS0uMTk3LjcwMi0uMDQxIDEuNDA1LS4wODEgMi4xMDctLjEyOCA2MS44NzUtNC4wOTcgMTE5LjQ4NC0zMC4xMzkgMTYzLjc0LTc0LjM5NUM0ODUuMzcyIDM4OC42NjcgNTEyIDMyNC4zOCA1MTIgMjU2cy0yNi42MjgtMTMyLjY2Ny03NC45OC0xODEuMDE5QzM5Mi43NjQgMzAuNzI2IDMzNS4xNTUgNC42ODQgMjczLjI4LjU4N2MtLjcwMi0uMDQ3LTEuNDA1LS4wODctMi4xMDctLjEyOGEyOTIuMDgyIDI5Mi4wODIgMCAwIDAtMy43NjEtLjE5NyAyNTYuODUzIDI1Ni44NTMgMCAwIDAtNS44NjItLjE5M0MyNTkuNy4wMjggMjU3Ljg1MSAwIDI1NiAwYy0yNS42NDIgMC01MC43MDkgMy43NDQtNzQuNTc2IDEwLjk3NmEyNTIuMTY3IDI1Mi4xNjcgMCAwIDAtMTcuNjY2IDYuMDczYy0zMi45MDYgMTIuNjktNjMuMDkxIDMyLjI0Ni04OC43NzcgNTcuOTMzQzI2LjYyOCAxMjMuMzMzIDAgMTg3LjYxOSAwIDI1NmMwIDY4LjM4IDI2LjYyOCAxMzIuNjY3IDc0Ljk4MSAxODEuMDE5QzEyMy4zMzMgNDg1LjM3MiAxODcuNjIgNTEyIDI1NiA1MTJjMS44NTEgMCAzLjctLjAyOCA1LjU0OS0uMDY4YTI1MS41NiAyNTEuNTYgMCAwIDAgNS44NjItLjE5MnpNNDg5LjczOSAyNTZjMCA4NC4wNTgtNDQuNjEgMTU3Ljg4NS0xMTEuMzkgMTk5LjA3OEMzMDkuNTgyIDQxMi42NDkgMjY3LjEzIDMzNi45ODEgMjY3LjEzIDI1NlMzMDkuNTgyIDk5LjM1MSAzNzguMzQ5IDU2LjkyMmM2Ni43OCA0MS4xOTMgMTExLjM5IDExNS4wMiAxMTEuMzkgMTk5LjA3OHptLTQ2Ny40NzggMEMyMi4yNjEgMTI3LjExNiAxMjcuMTE2IDIyLjI2MSAyNTYgMjIuMjYxYzIuMTEgMCA0LjIxNy4wMzEgNi4zMjMuMDg4LjQ5Mi4wMTMuOTgxLjA0IDEuNDczLjA1NiAxLjYzNi4wNTUgMy4yNzEuMTE2IDQuOTA0LjIwNS40ODYuMDI3Ljk2OS4wNjMgMS40NTUuMDkyIDEuNjU1LjEgMy4zMDguMjA5IDQuOTU5LjM0NS40MjEuMDM1LjgzOS4wNzYgMS4yNi4xMTIgMS43MjcuMTUxIDMuNDUyLjMxNSA1LjE3My41MDQuMzQ2LjAzOC42OTEuMDggMS4wMzcuMTE5YTIzNy43OCAyMzcuNzggMCAwIDEgNi4yMjcuNzkzIDI0MC4wMzcgMjQwLjAzNyAwIDAgMSA2LjI0Ljk2NmMxLjkzNi4zMjcgMy44NjYuNjc4IDUuNzkxIDEuMDU0LjE1LjAyOS4zMDEuMDU3LjQ1MS4wODcgMS45OTguMzk0IDMuOTkuODEzIDUuOTc2IDEuMjU4LjA4NS4wMi4xNy4wMzcuMjU1LjA1NmEyMzMuNzc5IDIzMy43NzkgMCAwIDEgMTguMDU4IDQuODQyYzEuNTM4LjQ4MSAzLjA2OC45ODMgNC41OTIgMS40OTQuMjc1LjA5Mi41NTEuMTc5LjgyNi4yNzNhMjMyLjE2IDIzMi4xNiAwIDAgMSAyNS4xMzMgMTAuMjIzYy0zMC44NTggMjEuMTk2LTU2Ljg4NyA0OS4wMjEtNzUuOTUyIDgxLjM2LTIzLjA5OSAzOS4xODgtMzUuMzEgODQuMDc3LTM1LjMxIDEyOS44MTNzMTIuMjExIDkwLjYyNSAzNS4zMTQgMTI5LjgxNGMxOS4wNjUgMzIuMzQxIDQ1LjA5NCA2MC4xNjQgNzUuOTUyIDgxLjM2YTIzMi4yNDQgMjMyLjI0NCAwIDAgMS0yNS4xMzMgMTAuMjIzYy0uMjc1LjA5Mi0uNTUxLjE4LS44MjYuMjczYTIzOC44MDIgMjM4LjgwMiAwIDAgMS00LjU5MiAxLjQ5NCAyMzQuMzU0IDIzNC4zNTQgMCAwIDEtMTguMDU4IDQuODQybC0uMjU1LjA1NmMtMS45ODYuNDQ1LTMuOTc4Ljg2NS01Ljk3NiAxLjI1OC0uMTUuMDI5LS4zMDEuMDU3LS40NTEuMDg3LTEuOTI2LjM3NS0zLjg1Ni43MjctNS43OTEgMS4wNTQtLjIxLjAzNi0uNDIyLjA3LS42MzIuMTA1LTEuODY1LjMwOS0zLjczNC41OTctNS42MDguODYxbC0uODI1LjExNmMtMS43OTguMjQ3LTMuNTk4LjQ3MS01LjQwMi42NzctLjM0Ni4wMzktLjY5LjA4MS0xLjAzNy4xMTlhMjQxLjk4IDI0MS45OCAwIDAgMS01LjE3My41MDRjLS40MjEuMDM3LS44MzkuMDc4LTEuMjYuMTEyYTIyOC4wNCAyMjguMDQgMCAwIDEtNC45NTkuMzQ1Yy0uNDg1LjAyOS0uOTY4LjA2Ny0xLjQ1NS4wOTItMS42MzMuMDg5LTMuMjY4LjE1LTQuOTA0LjIwNS0uNDkyLjAxNy0uOTgxLjA0My0xLjQ3My4wNTZhMjM4LjI0IDIzOC4yNCAwIDAgMS02LjMyNy4wODdDMTI3LjExNiA0ODkuNzM5IDIyLjI2MSAzODQuODg0IDIyLjI2MSAyNTZ6XCJcbiAgfSkpLCBfcGF0aDMgfHwgKF9wYXRoMyA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNzcuOTEzIDI0NC44N2MtMTguNDEyIDAtMzMuMzkxIDE0Ljk3OS0zMy4zOTEgMzMuMzkxczE0Ljk3OSAzMy4zOTEgMzMuMzkxIDMzLjM5MSAzMy4zOTEtMTQuOTc5IDMzLjM5MS0zMy4zOTEtMTQuOTc5LTMzLjM5MS0zMy4zOTEtMzMuMzkxem0wIDQ0LjUyMWMtNi4xMzcgMC0xMS4xMy00Ljk5My0xMS4xMy0xMS4xM3M0Ljk5My0xMS4xMyAxMS4xMy0xMS4xMyAxMS4xMyA0Ljk5MyAxMS4xMyAxMS4xMy00Ljk5MyAxMS4xMy0xMS4xMyAxMS4xM3pNMTU1LjgyNiAzMzMuOTEzYy0yNC41NDkgMC00NC41MjIgMTkuOTcyLTQ0LjUyMiA0NC41MjJzMTkuOTcyIDQ0LjUyMiA0NC41MjIgNDQuNTIyIDQ0LjUyMi0xOS45NzIgNDQuNTIyLTQ0LjUyMi0xOS45NzMtNDQuNTIyLTQ0LjUyMi00NC41MjJ6bTAgNjYuNzgzYy0xMi4yNzUgMC0yMi4yNjEtOS45ODYtMjIuMjYxLTIyLjI2MXM5Ljk4Ni0yMi4yNjEgMjIuMjYxLTIyLjI2MSAyMi4yNjEgOS45ODYgMjIuMjYxIDIyLjI2MS05Ljk4NiAyMi4yNjEtMjIuMjYxIDIyLjI2MXpcIlxuICB9KSkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU3ZnTW9vbjsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbnZhciBTdmdTdW4gPSBmdW5jdGlvbiBTdmdTdW4ocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDQ3My45MzEgNDczLjkzMVwiLFxuICAgIHN0eWxlOiB7XG4gICAgICBlbmFibGVCYWNrZ3JvdW5kOiBcIm5ldyAwIDAgNDczLjkzMSA0NzMuOTMxXCJcbiAgICB9LFxuICAgIHhtbFNwYWNlOiBcInByZXNlcnZlXCJcbiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZpbGw6IFwiI2YyYmUzZVwiXG4gICAgfSxcbiAgICBjeDogMjM2Ljk2NixcbiAgICBjeTogMjM2Ljk2NixcbiAgICByOiAyMzYuOTY2XG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZpbGw6IFwiI2YxZWI3NVwiXG4gICAgfSxcbiAgICBjeDogMjM2Ljk2NixcbiAgICBjeTogMjM2Ljk2NixcbiAgICByOiAxMTcuMTU0XG4gIH0pKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN2Z1N1bjsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcImRhcmtcIjpcIk1qY3RHcVdWeE51SmVFMG8yb0ZQXCIsXCJsaWdodFwiOlwiWXhCcm4zUHoyNTIxYWc5RDlGODhcIn07IiwiaW1wb3J0IHsgVGhlbWUgfSBmcm9tICdAdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgdXNlR2V0Q3VycmVudFRoZW1lID0gKCkgPT4ge1xuICBjb25zdCBwcmVmZXJzRGFya1NjaGVtZSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJykubWF0Y2hlcztcbiAgY29uc3QgY3VycmVudFRoZW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RoZW1lJyk7XG4gIGNvbnN0IHByZWZlcnJlZFRoZW1lID0gcHJlZmVyc0RhcmtTY2hlbWUgPyBUaGVtZS5EQVJLIDogVGhlbWUuTElHSFQ7XG4gIGNvbnN0IG91dHB1dFRoZW1lID0gY3VycmVudFRoZW1lID8/IHByZWZlcnJlZFRoZW1lO1xuICByZXR1cm4ge1xuICAgIHByZWZlcnJlZFRoZW1lLFxuICAgIGN1cnJlbnRUaGVtZTogb3V0cHV0VGhlbWUsXG4gIH07XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IE1vb25JY29uIGZyb20gJ2Fzc2V0cy9pY29ucy9tb29uLnN2Zyc7XG5pbXBvcnQgU3VuSWNvbiBmcm9tICdhc3NldHMvaWNvbnMvc3VuLnN2Zyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzL3RoZW1lU3dpdGNoZXIuc2Nzcyc7XG5pbXBvcnQgdGhlbWVzIGZyb20gJy4uLy4uL3N0eWxlcy9fY29sb3JzLnNjc3MnO1xuaW1wb3J0IHsgdXNlR2V0Q3VycmVudFRoZW1lIH0gZnJvbSAnLi9ob29rcy91c2VHZXRDdXJyZW50VGhlbWUnO1xuaW1wb3J0IHsgVGhlbWUgfSBmcm9tICdAdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgVGhlbWVTd2l0Y2hlciA9ICgpID0+IHtcbiAgY29uc3QgW3RoZW1lLCBzZXRUaGVtZV0gPSBSZWFjdC51c2VTdGF0ZSh1c2VHZXRDdXJyZW50VGhlbWUoKSk7XG4gIGNvbnN0IGljb24gPSB0aGVtZS5jdXJyZW50VGhlbWUgIT09IFRoZW1lLkRBUksgPyA8TW9vbkljb24gLz4gOiA8U3VuSWNvbiAvPjtcbiAgY29uc3Qgc3dpdGNoVGhlbWUgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV4dFRoZW1lID0gdGhlbWUuY3VycmVudFRoZW1lID09PSBUaGVtZS5EQVJLID8gVGhlbWUuTElHSFQgOiBUaGVtZS5EQVJLO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aGVtZScsIG5leHRUaGVtZSk7XG5cbiAgICBpZiAodGhlbWUucHJlZmVycmVkVGhlbWUgPT09IFRoZW1lLkRBUkspIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSh0aGVtZXMubGlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUodGhlbWVzLmRhcmspO1xuICAgIH1cbiAgICBzZXRUaGVtZSh7IC4uLnRoZW1lLCBjdXJyZW50VGhlbWU6IG5leHRUaGVtZSB9KTtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0aGVtZS5wcmVmZXJyZWRUaGVtZSA9PT0gVGhlbWUuREFSSyAmJiB0aGVtZS5jdXJyZW50VGhlbWUgPT09IFRoZW1lLkxJR0hUKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQodGhlbWVzLmxpZ2h0KTtcbiAgICB9XG4gICAgaWYgKHRoZW1lLnByZWZlcnJlZFRoZW1lID09PSBUaGVtZS5MSUdIVCAmJiB0aGVtZS5jdXJyZW50VGhlbWUgPT09IFRoZW1lLkRBUkspIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCh0aGVtZXMuZGFyayk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIHN3aXRjaFRoZW1lKCk7XG4gICAgICB9fVxuICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuaWNvbn1cbiAgICA+XG4gICAgICB7aWNvbn1cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn07XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcImljb25cIjpcIkhLbEp3OFRwV3o0bTVYUUN4MFJKXCJ9OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExvZ28gfSBmcm9tICcuLi9sb2dvL2xvZ28nO1xuaW1wb3J0IHsgTGFuZ3VhZ2VTd2l0Y2hlciB9IGZyb20gJy4vbGFuZ3VhZ2VTd2l0Y2hlcic7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzL2hlYWRlci5zY3NzJztcbmltcG9ydCB7IFRoZW1lU3dpdGNoZXIgfSBmcm9tICcuL3RoZW1lU3dpdGNoZXInO1xuXG5leHBvcnQgY29uc3QgSGVhZGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxoZWFkZXIgY2xhc3NOYW1lPXtzdHlsZXMuaGVhZGVyQ29udGFpbmVyfT5cbiAgICAgIDxMb2dvIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm9wdGlvbnNDb250YWluZXJ9PlxuICAgICAgICA8VGhlbWVTd2l0Y2hlciAvPlxuICAgICAgICA8TGFuZ3VhZ2VTd2l0Y2hlciAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9oZWFkZXI+XG4gICk7XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJoZWFkZXJDb250YWluZXJcIjpcInFpdGxwb2dSdTJqTzh5dFcwS2FiXCIsXCJvcHRpb25zQ29udGFpbmVyXCI6XCJzSXJPeUxtZTdWRGZ3YUNJYW9rT1wifTsiLCJpbXBvcnQgeyBnZXREYXRhIH0gZnJvbSAnQHJlZHV4L2FjdGlvbnMvZGF0YSc7XG5pbXBvcnQgeyB1c2VBcHBEaXNwYXRjaCwgdXNlQXBwU2VsZWN0b3IgfSBmcm9tICdAcmVkdXgvaG9va3MnO1xuaW1wb3J0IHsgQW55QWN0aW9uIH0gZnJvbSAncmVkdXgnO1xuXG5leHBvcnQgY29uc3QgdXNlRmV0Y2hEYXRhID0gKCkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZUFwcERpc3BhdGNoKCk7XG4gIGNvbnN0IGxvYWRlZCA9IHVzZUFwcFNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuZGF0YS5sb2FkZWQpO1xuICBjb25zdCBkYXRhID0gdXNlQXBwU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5kYXRhLmRhdGEpO1xuXG4gIGlmICghbG9hZGVkKSB7XG4gICAgZGlzcGF0Y2goZ2V0RGF0YSgpIGFzIHVua25vd24gYXMgQW55QWN0aW9uKTtcbiAgfVxuXG4gIHJldHVybiB7IGxvYWRlZCwgZGF0YSB9O1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMvbWFpblBhZ2Uuc2Nzcyc7XG5pbXBvcnQgeyBMZXNzb25zRmlsdGVycywgTG9hZGluZ1NjcmVlbiwgQ2hhcnRDb250YWluZXIsIEhlYWRlciB9IGZyb20gJ0Bjb21wb25lbnRzJztcbmltcG9ydCB7IHVzZUZldGNoRGF0YSB9IGZyb20gJ2hvb2tzL3VzZUZldGNoRGF0YSc7XG5cbmV4cG9ydCBjb25zdCBNYWluUGFnZSA9ICgpID0+IHtcbiAgY29uc3QgeyBsb2FkZWQgfSA9IHVzZUZldGNoRGF0YSgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIHshbG9hZGVkICYmIDxMb2FkaW5nU2NyZWVuIC8+fVxuICAgICAgPG1haW4gY2xhc3NOYW1lPXtzdHlsZXMubWFpbkNvbnRhaW5lcn0+XG4gICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAgPExlc3NvbnNGaWx0ZXJzIC8+XG4gICAgICAgIDxDaGFydENvbnRhaW5lciAvPlxuICAgICAgPC9tYWluPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wibWFpbkNvbnRhaW5lclwiOlwidnhhNV9vaG1vYmt6Y0laZUZMc3hcIn07IiwiaW1wb3J0IHsgTG9hZGluZ1NjcmVlbiwgSGVhZGVyIH0gZnJvbSAnQGNvbXBvbmVudHMnO1xuaW1wb3J0IHsgdXNlRmV0Y2hEYXRhIH0gZnJvbSAnaG9va3MvdXNlRmV0Y2hEYXRhJztcbmltcG9ydCB7IHVzZUdldFBvaW50RGF0YSB9IGZyb20gJ2hvb2tzL3VzZUdldFBvaW50RGF0YSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMvcG9pbnRQYWdlLnNjc3MnO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0JztcblxuZXhwb3J0IGNvbnN0IFBvaW50UGFnZSA9ICgpID0+IHtcbiAgY29uc3QgeyBsb2FkZWQgfSA9IHVzZUZldGNoRGF0YSgpO1xuICBjb25zdCB7IGNvdW50cnksIGNhbXAsIHNjaG9vbCwgbW9udGggfSA9IHVzZVBhcmFtcygpO1xuICBjb25zdCBpdGVtRGF0YSA9IHVzZUdldFBvaW50RGF0YShjb3VudHJ5ID8/ICcnLCBjYW1wID8/ICcnLCBzY2hvb2wgPz8gJycsIG1vbnRoID8/ICcnKTtcbiAgY29uc3QgaTE4biA9IHVzZVRyYW5zbGF0aW9uKCk7XG5cbiAgY29uc3QgdGFibGUgPSAoXG4gICAgPHRhYmxlIGNsYXNzTmFtZT17c3R5bGVzLnRhYmxlfT5cbiAgICAgIDx0aGVhZD5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD4ge2kxOG4udGBDb3VudHJ5IE5hbWVgfSA8L3RoPlxuICAgICAgICAgIDx0aD4ge2kxOG4udGBDYW1wIE5hbWVgfSA8L3RoPlxuICAgICAgICAgIDx0aD4ge2kxOG4udGBTY2hvb2wgTmFtZWB9PC90aD5cbiAgICAgICAgICA8dGg+IHtpMThuLnRgTW9udGhgfTwvdGg+XG4gICAgICAgICAgPHRoPiB7aTE4bi50YFRvdGFsIExlc3NvbnNgfTwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3RoZWFkPlxuICAgICAgPHRib2R5PlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkPiB7aXRlbURhdGEuY291bnRyeX0gPC90ZD5cbiAgICAgICAgICA8dGQ+IHtpdGVtRGF0YS5jYW1wfSA8L3RkPlxuICAgICAgICAgIDx0ZD4ge2l0ZW1EYXRhLnNjaG9vbH0gPC90ZD5cbiAgICAgICAgICA8dGQ+IHtpdGVtRGF0YS5tb250aH0gPC90ZD5cbiAgICAgICAgICA8dGQ+IHtpdGVtRGF0YS50b3RhbExlc3NvbnN9IDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3Rib2R5PlxuICAgIDwvdGFibGU+XG4gICk7XG4gIGNvbnN0IG5vdEZvdW5kID0gPGRpdj5Ob3QgRm91bmQ8L2Rpdj47XG5cbiAgY29uc3Qgb3V0cHV0ID0gaXRlbURhdGEgPyB0YWJsZSA6IG5vdEZvdW5kO1xuICByZXR1cm4gbG9hZGVkID8gKFxuICAgIDw+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnBhZ2VDb250YWluZXJ9PlxuICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMub3V0cHV0Q29udGFpbmVyfT57b3V0cHV0fTwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC8+XG4gICkgOiAoXG4gICAgPExvYWRpbmdTY3JlZW4gLz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyB1c2VBcHBTZWxlY3RvciB9IGZyb20gJ0ByZWR1eC9ob29rcyc7XG5cbmV4cG9ydCBjb25zdCB1c2VHZXRQb2ludERhdGEgPSAoY291bnRyeTogc3RyaW5nLCBjYW1wOiBzdHJpbmcsIHNjaG9vbDogc3RyaW5nLCBtb250aDogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSB1c2VBcHBTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmRhdGEuZGF0YSk7XG4gIGNvbnN0IHRvdGFsTGVzc29ucyA9IGRhdGEucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG4gICAgcmV0dXJuIGN1cnIuc2Nob29sID09PSBzY2hvb2wgJiZcbiAgICAgIGN1cnIuY2FtcCA9PT0gY2FtcCAmJlxuICAgICAgY3Vyci5jb3VudHJ5ID09PSBjb3VudHJ5ICYmXG4gICAgICBjdXJyLm1vbnRoID09IG1vbnRoXG4gICAgICA/IHByZXYgKyBjdXJyLmxlc3NvbnNcbiAgICAgIDogcHJldjtcbiAgfSwgMCk7XG5cbiAgcmV0dXJuIHsgY291bnRyeSwgY2FtcCwgc2Nob29sLCBtb250aCwgdG90YWxMZXNzb25zIH07XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJ0YWJsZVwiOlwiTjdnN250ejVld3BJYm43NnI3Tk5cIixcIm91dHB1dENvbnRhaW5lclwiOlwiSWplcHVzbktXYWdyblI0RGxVVjJcIixcInBhZ2VDb250YWluZXJcIjpcIlVjY0FhdUR4RUZVdmRFMnBGR2NrXCJ9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBfdHlwZW9mKG9iaik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZic7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZic7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBfdG9BcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0FycmF5JztcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgY29uc29sZUxvZ2dlciA9IHtcbiAgdHlwZTogJ2xvZ2dlcicsXG4gIGxvZzogZnVuY3Rpb24gbG9nKGFyZ3MpIHtcbiAgICB0aGlzLm91dHB1dCgnbG9nJywgYXJncyk7XG4gIH0sXG4gIHdhcm46IGZ1bmN0aW9uIHdhcm4oYXJncykge1xuICAgIHRoaXMub3V0cHV0KCd3YXJuJywgYXJncyk7XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcihhcmdzKSB7XG4gICAgdGhpcy5vdXRwdXQoJ2Vycm9yJywgYXJncyk7XG4gIH0sXG4gIG91dHB1dDogZnVuY3Rpb24gb3V0cHV0KHR5cGUsIGFyZ3MpIHtcbiAgICBpZiAoY29uc29sZSAmJiBjb25zb2xlW3R5cGVdKSBjb25zb2xlW3R5cGVdLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICB9XG59O1xuXG52YXIgTG9nZ2VyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMb2dnZXIoY29uY3JldGVMb2dnZXIpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9nZ2VyKTtcblxuICAgIHRoaXMuaW5pdChjb25jcmV0ZUxvZ2dlciwgb3B0aW9ucyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTG9nZ2VyLCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoY29uY3JldGVMb2dnZXIpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHRoaXMucHJlZml4ID0gb3B0aW9ucy5wcmVmaXggfHwgJ2kxOG5leHQ6JztcbiAgICAgIHRoaXMubG9nZ2VyID0gY29uY3JldGVMb2dnZXIgfHwgY29uc29sZUxvZ2dlcjtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICB0aGlzLmRlYnVnID0gb3B0aW9ucy5kZWJ1ZztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0RGVidWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGVidWcoYm9vbCkge1xuICAgICAgdGhpcy5kZWJ1ZyA9IGJvb2w7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2coKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZm9yd2FyZChhcmdzLCAnbG9nJywgJycsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3YXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICd3YXJuJywgJycsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ2Vycm9yJywgJycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZXByZWNhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVwcmVjYXRlKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZm9yd2FyZChhcmdzLCAnd2FybicsICdXQVJOSU5HIERFUFJFQ0FURUQ6ICcsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3J3YXJkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcndhcmQoYXJncywgbHZsLCBwcmVmaXgsIGRlYnVnT25seSkge1xuICAgICAgaWYgKGRlYnVnT25seSAmJiAhdGhpcy5kZWJ1ZykgcmV0dXJuIG51bGw7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSBhcmdzWzBdID0gXCJcIi5jb25jYXQocHJlZml4KS5jb25jYXQodGhpcy5wcmVmaXgsIFwiIFwiKS5jb25jYXQoYXJnc1swXSk7XG4gICAgICByZXR1cm4gdGhpcy5sb2dnZXJbbHZsXShhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShtb2R1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gbmV3IExvZ2dlcih0aGlzLmxvZ2dlciwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB7XG4gICAgICAgIHByZWZpeDogXCJcIi5jb25jYXQodGhpcy5wcmVmaXgsIFwiOlwiKS5jb25jYXQobW9kdWxlTmFtZSwgXCI6XCIpXG4gICAgICB9KSwgdGhpcy5vcHRpb25zKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvZ2dlcjtcbn0oKTtcblxudmFyIGJhc2VMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRFbWl0dGVyKTtcblxuICAgIHRoaXMub2JzZXJ2ZXJzID0ge307XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRXZlbnRFbWl0dGVyLCBbe1xuICAgIGtleTogXCJvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudHMsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnNbZXZlbnRdID0gX3RoaXMub2JzZXJ2ZXJzW2V2ZW50XSB8fCBbXTtcblxuICAgICAgICBfdGhpcy5vYnNlcnZlcnNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib2ZmXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICghdGhpcy5vYnNlcnZlcnNbZXZlbnRdKSByZXR1cm47XG5cbiAgICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMub2JzZXJ2ZXJzW2V2ZW50XTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9ic2VydmVyc1tldmVudF0gPSB0aGlzLm9ic2VydmVyc1tldmVudF0uZmlsdGVyKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgIHJldHVybiBsICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlbWl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9ic2VydmVyc1tldmVudF0pIHtcbiAgICAgICAgdmFyIGNsb25lZCA9IFtdLmNvbmNhdCh0aGlzLm9ic2VydmVyc1tldmVudF0pO1xuICAgICAgICBjbG9uZWQuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICBvYnNlcnZlci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzWycqJ10pIHtcbiAgICAgICAgdmFyIF9jbG9uZWQgPSBbXS5jb25jYXQodGhpcy5vYnNlcnZlcnNbJyonXSk7XG5cbiAgICAgICAgX2Nsb25lZC5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgIG9ic2VydmVyLmFwcGx5KG9ic2VydmVyLCBbZXZlbnRdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFdmVudEVtaXR0ZXI7XG59KCk7XG5cbmZ1bmN0aW9uIGRlZmVyKCkge1xuICB2YXIgcmVzO1xuICB2YXIgcmVqO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXMgPSByZXNvbHZlO1xuICAgIHJlaiA9IHJlamVjdDtcbiAgfSk7XG4gIHByb21pc2UucmVzb2x2ZSA9IHJlcztcbiAgcHJvbWlzZS5yZWplY3QgPSByZWo7XG4gIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gbWFrZVN0cmluZyhvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gJyc7XG4gIHJldHVybiAnJyArIG9iamVjdDtcbn1cbmZ1bmN0aW9uIGNvcHkoYSwgcywgdCkge1xuICBhLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICBpZiAoc1ttXSkgdFttXSA9IHNbbV07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCwgRW1wdHkpIHtcbiAgZnVuY3Rpb24gY2xlYW5LZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSAmJiBrZXkuaW5kZXhPZignIyMjJykgPiAtMSA/IGtleS5yZXBsYWNlKC8jIyMvZywgJy4nKSA6IGtleTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbk5vdFRyYXZlcnNlRGVlcGVyKCkge1xuICAgIHJldHVybiAhb2JqZWN0IHx8IHR5cGVvZiBvYmplY3QgPT09ICdzdHJpbmcnO1xuICB9XG5cbiAgdmFyIHN0YWNrID0gdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnID8gW10uY29uY2F0KHBhdGgpIDogcGF0aC5zcGxpdCgnLicpO1xuXG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAxKSB7XG4gICAgaWYgKGNhbk5vdFRyYXZlcnNlRGVlcGVyKCkpIHJldHVybiB7fTtcbiAgICB2YXIga2V5ID0gY2xlYW5LZXkoc3RhY2suc2hpZnQoKSk7XG4gICAgaWYgKCFvYmplY3Rba2V5XSAmJiBFbXB0eSkgb2JqZWN0W2tleV0gPSBuZXcgRW1wdHkoKTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0ID0ge307XG4gICAgfVxuICB9XG5cbiAgaWYgKGNhbk5vdFRyYXZlcnNlRGVlcGVyKCkpIHJldHVybiB7fTtcbiAgcmV0dXJuIHtcbiAgICBvYmo6IG9iamVjdCxcbiAgICBrOiBjbGVhbktleShzdGFjay5zaGlmdCgpKVxuICB9O1xufVxuXG5mdW5jdGlvbiBzZXRQYXRoKG9iamVjdCwgcGF0aCwgbmV3VmFsdWUpIHtcbiAgdmFyIF9nZXRMYXN0T2ZQYXRoID0gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgsIE9iamVjdCksXG4gICAgICBvYmogPSBfZ2V0TGFzdE9mUGF0aC5vYmosXG4gICAgICBrID0gX2dldExhc3RPZlBhdGguaztcblxuICBvYmpba10gPSBuZXdWYWx1ZTtcbn1cbmZ1bmN0aW9uIHB1c2hQYXRoKG9iamVjdCwgcGF0aCwgbmV3VmFsdWUsIGNvbmNhdCkge1xuICB2YXIgX2dldExhc3RPZlBhdGgyID0gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgsIE9iamVjdCksXG4gICAgICBvYmogPSBfZ2V0TGFzdE9mUGF0aDIub2JqLFxuICAgICAgayA9IF9nZXRMYXN0T2ZQYXRoMi5rO1xuXG4gIG9ialtrXSA9IG9ialtrXSB8fCBbXTtcbiAgaWYgKGNvbmNhdCkgb2JqW2tdID0gb2JqW2tdLmNvbmNhdChuZXdWYWx1ZSk7XG4gIGlmICghY29uY2F0KSBvYmpba10ucHVzaChuZXdWYWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRQYXRoKG9iamVjdCwgcGF0aCkge1xuICB2YXIgX2dldExhc3RPZlBhdGgzID0gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgpLFxuICAgICAgb2JqID0gX2dldExhc3RPZlBhdGgzLm9iaixcbiAgICAgIGsgPSBfZ2V0TGFzdE9mUGF0aDMuaztcblxuICBpZiAoIW9iaikgcmV0dXJuIHVuZGVmaW5lZDtcbiAgcmV0dXJuIG9ialtrXTtcbn1cbmZ1bmN0aW9uIGdldFBhdGhXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRQYXRoKGRhdGEsIGtleSk7XG5cbiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gZ2V0UGF0aChkZWZhdWx0RGF0YSwga2V5KTtcbn1cbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UsIG92ZXJ3cml0ZSkge1xuICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgIGlmIChwcm9wICE9PSAnX19wcm90b19fJyAmJiBwcm9wICE9PSAnY29uc3RydWN0b3InKSB7XG4gICAgICBpZiAocHJvcCBpbiB0YXJnZXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRbcHJvcF0gPT09ICdzdHJpbmcnIHx8IHRhcmdldFtwcm9wXSBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2Ygc291cmNlW3Byb3BdID09PSAnc3RyaW5nJyB8fCBzb3VyY2VbcHJvcF0gaW5zdGFuY2VvZiBTdHJpbmcpIHtcbiAgICAgICAgICBpZiAob3ZlcndyaXRlKSB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVlcEV4dGVuZCh0YXJnZXRbcHJvcF0sIHNvdXJjZVtwcm9wXSwgb3ZlcndyaXRlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiByZWdleEVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZywgJ1xcXFwkJicpO1xufVxudmFyIF9lbnRpdHlNYXAgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmIzM5OycsXG4gICcvJzogJyYjeDJGOydcbn07XG5mdW5jdGlvbiBlc2NhcGUoZGF0YSkge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRhdGEucmVwbGFjZSgvWyY8PlwiJ1xcL10vZywgZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBfZW50aXR5TWFwW3NdO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG52YXIgaXNJRTEwID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvciAmJiB0eXBlb2Ygd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnREYXRhID09PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgPiAtMTtcbnZhciBjaGFycyA9IFsnICcsICcsJywgJz8nLCAnIScsICc7J107XG5mdW5jdGlvbiBsb29rc0xpa2VPYmplY3RQYXRoKGtleSwgbnNTZXBhcmF0b3IsIGtleVNlcGFyYXRvcikge1xuICBuc1NlcGFyYXRvciA9IG5zU2VwYXJhdG9yIHx8ICcnO1xuICBrZXlTZXBhcmF0b3IgPSBrZXlTZXBhcmF0b3IgfHwgJyc7XG4gIHZhciBwb3NzaWJsZUNoYXJzID0gY2hhcnMuZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIG5zU2VwYXJhdG9yLmluZGV4T2YoYykgPCAwICYmIGtleVNlcGFyYXRvci5pbmRleE9mKGMpIDwgMDtcbiAgfSk7XG4gIGlmIChwb3NzaWJsZUNoYXJzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRydWU7XG4gIHZhciByID0gbmV3IFJlZ0V4cChcIihcIi5jb25jYXQocG9zc2libGVDaGFycy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gJz8nID8gJ1xcXFw/JyA6IGM7XG4gIH0pLmpvaW4oJ3wnKSwgXCIpXCIpKTtcbiAgdmFyIG1hdGNoZWQgPSAhci50ZXN0KGtleSk7XG5cbiAgaWYgKCFtYXRjaGVkKSB7XG4gICAgdmFyIGtpID0ga2V5LmluZGV4T2Yoa2V5U2VwYXJhdG9yKTtcblxuICAgIGlmIChraSA+IDAgJiYgIXIudGVzdChrZXkuc3Vic3RyaW5nKDAsIGtpKSkpIHtcbiAgICAgIG1hdGNoZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzJDEob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHsgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyB9IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkJDEodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyQxKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMkMShPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIGRlZXBGaW5kKG9iaiwgcGF0aCkge1xuICB2YXIga2V5U2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnLic7XG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAob2JqW3BhdGhdKSByZXR1cm4gb2JqW3BhdGhdO1xuICB2YXIgcGF0aHMgPSBwYXRoLnNwbGl0KGtleVNlcGFyYXRvcik7XG4gIHZhciBjdXJyZW50ID0gb2JqO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoIWN1cnJlbnQpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBpZiAodHlwZW9mIGN1cnJlbnRbcGF0aHNbaV1dID09PSAnc3RyaW5nJyAmJiBpICsgMSA8IHBhdGhzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFtwYXRoc1tpXV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGogPSAyO1xuICAgICAgdmFyIHAgPSBwYXRocy5zbGljZShpLCBpICsgaikuam9pbihrZXlTZXBhcmF0b3IpO1xuICAgICAgdmFyIG1peCA9IGN1cnJlbnRbcF07XG5cbiAgICAgIHdoaWxlIChtaXggPT09IHVuZGVmaW5lZCAmJiBwYXRocy5sZW5ndGggPiBpICsgaikge1xuICAgICAgICBqKys7XG4gICAgICAgIHAgPSBwYXRocy5zbGljZShpLCBpICsgaikuam9pbihrZXlTZXBhcmF0b3IpO1xuICAgICAgICBtaXggPSBjdXJyZW50W3BdO1xuICAgICAgfVxuXG4gICAgICBpZiAobWl4ID09PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAobWl4ID09PSBudWxsKSByZXR1cm4gbnVsbDtcblxuICAgICAgaWYgKHBhdGguZW5kc1dpdGgocCkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtaXggPT09ICdzdHJpbmcnKSByZXR1cm4gbWl4O1xuICAgICAgICBpZiAocCAmJiB0eXBlb2YgbWl4W3BdID09PSAnc3RyaW5nJykgcmV0dXJuIG1peFtwXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGpvaW5lZFBhdGggPSBwYXRocy5zbGljZShpICsgaikuam9pbihrZXlTZXBhcmF0b3IpO1xuICAgICAgaWYgKGpvaW5lZFBhdGgpIHJldHVybiBkZWVwRmluZChtaXgsIGpvaW5lZFBhdGgsIGtleVNlcGFyYXRvcik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSBjdXJyZW50W3BhdGhzW2ldXTtcbiAgfVxuXG4gIHJldHVybiBjdXJyZW50O1xufVxuXG52YXIgUmVzb3VyY2VTdG9yZSA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhSZXNvdXJjZVN0b3JlLCBfRXZlbnRFbWl0dGVyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFJlc291cmNlU3RvcmUpO1xuXG4gIGZ1bmN0aW9uIFJlc291cmNlU3RvcmUoZGF0YSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7XG4gICAgICBuczogWyd0cmFuc2xhdGlvbiddLFxuICAgICAgZGVmYXVsdE5TOiAndHJhbnNsYXRpb24nXG4gICAgfTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNvdXJjZVN0b3JlKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7XG5cbiAgICBpZiAoaXNJRTEwKSB7XG4gICAgICBFdmVudEVtaXR0ZXIuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgfVxuXG4gICAgX3RoaXMuZGF0YSA9IGRhdGEgfHwge307XG4gICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBpZiAoX3RoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgX3RoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgfVxuXG4gICAgaWYgKF90aGlzLm9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLmlnbm9yZUpTT05TdHJ1Y3R1cmUgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXNvdXJjZVN0b3JlLCBbe1xuICAgIGtleTogXCJhZGROYW1lc3BhY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE5hbWVzcGFjZXMobnMpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihucykgPCAwKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5ucy5wdXNoKG5zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlTmFtZXNwYWNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVOYW1lc3BhY2VzKG5zKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihucyk7XG5cbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSZXNvdXJjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXNvdXJjZShsbmcsIG5zLCBrZXkpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICAgIHZhciBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgICAgdmFyIGlnbm9yZUpTT05TdHJ1Y3R1cmUgPSBvcHRpb25zLmlnbm9yZUpTT05TdHJ1Y3R1cmUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuaWdub3JlSlNPTlN0cnVjdHVyZSA6IHRoaXMub3B0aW9ucy5pZ25vcmVKU09OU3RydWN0dXJlO1xuICAgICAgdmFyIHBhdGggPSBbbG5nLCBuc107XG4gICAgICBpZiAoa2V5ICYmIHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aC5jb25jYXQoa2V5KTtcbiAgICAgIGlmIChrZXkgJiYgdHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHBhdGggPSBwYXRoLmNvbmNhdChrZXlTZXBhcmF0b3IgPyBrZXkuc3BsaXQoa2V5U2VwYXJhdG9yKSA6IGtleSk7XG5cbiAgICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgICAgcGF0aCA9IGxuZy5zcGxpdCgnLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgpO1xuICAgICAgaWYgKHJlc3VsdCB8fCAhaWdub3JlSlNPTlN0cnVjdHVyZSB8fCB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykgcmV0dXJuIHJlc3VsdDtcbiAgICAgIHJldHVybiBkZWVwRmluZCh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhW2xuZ10gJiYgdGhpcy5kYXRhW2xuZ11bbnNdLCBrZXksIGtleVNlcGFyYXRvcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFJlc291cmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJlc291cmNlKGxuZywgbnMsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7XG4gICAgICAgIHNpbGVudDogZmFsc2VcbiAgICAgIH07XG4gICAgICB2YXIga2V5U2VwYXJhdG9yID0gdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICAgIGlmIChrZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkga2V5U2VwYXJhdG9yID0gJy4nO1xuICAgICAgdmFyIHBhdGggPSBbbG5nLCBuc107XG4gICAgICBpZiAoa2V5KSBwYXRoID0gcGF0aC5jb25jYXQoa2V5U2VwYXJhdG9yID8ga2V5LnNwbGl0KGtleVNlcGFyYXRvcikgOiBrZXkpO1xuXG4gICAgICBpZiAobG5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICAgICAgdmFsdWUgPSBucztcbiAgICAgICAgbnMgPSBwYXRoWzFdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFkZE5hbWVzcGFjZXMobnMpO1xuICAgICAgc2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgsIHZhbHVlKTtcbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMuZW1pdCgnYWRkZWQnLCBsbmcsIG5zLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkUmVzb3VyY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJlc291cmNlcyhsbmcsIG5zLCByZXNvdXJjZXMpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7XG4gICAgICAgIHNpbGVudDogZmFsc2VcbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIG0gaW4gcmVzb3VyY2VzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzb3VyY2VzW21dID09PSAnc3RyaW5nJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHJlc291cmNlc1ttXSkgPT09ICdbb2JqZWN0IEFycmF5XScpIHRoaXMuYWRkUmVzb3VyY2UobG5nLCBucywgbSwgcmVzb3VyY2VzW21dLCB7XG4gICAgICAgICAgc2lsZW50OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLmVtaXQoJ2FkZGVkJywgbG5nLCBucywgcmVzb3VyY2VzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkUmVzb3VyY2VCdW5kbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUmVzb3VyY2VCdW5kbGUobG5nLCBucywgcmVzb3VyY2VzLCBkZWVwLCBvdmVyd3JpdGUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiB7XG4gICAgICAgIHNpbGVudDogZmFsc2VcbiAgICAgIH07XG4gICAgICB2YXIgcGF0aCA9IFtsbmcsIG5zXTtcblxuICAgICAgaWYgKGxuZy5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgICAgICBwYXRoID0gbG5nLnNwbGl0KCcuJyk7XG4gICAgICAgIGRlZXAgPSByZXNvdXJjZXM7XG4gICAgICAgIHJlc291cmNlcyA9IG5zO1xuICAgICAgICBucyA9IHBhdGhbMV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkTmFtZXNwYWNlcyhucyk7XG4gICAgICB2YXIgcGFjayA9IGdldFBhdGgodGhpcy5kYXRhLCBwYXRoKSB8fCB7fTtcblxuICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgZGVlcEV4dGVuZChwYWNrLCByZXNvdXJjZXMsIG92ZXJ3cml0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWNrID0gX29iamVjdFNwcmVhZCQxKF9vYmplY3RTcHJlYWQkMSh7fSwgcGFjayksIHJlc291cmNlcyk7XG4gICAgICB9XG5cbiAgICAgIHNldFBhdGgodGhpcy5kYXRhLCBwYXRoLCBwYWNrKTtcbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMuZW1pdCgnYWRkZWQnLCBsbmcsIG5zLCByZXNvdXJjZXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVSZXNvdXJjZUJ1bmRsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSB7XG4gICAgICBpZiAodGhpcy5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkge1xuICAgICAgICBkZWxldGUgdGhpcy5kYXRhW2xuZ11bbnNdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbW92ZU5hbWVzcGFjZXMobnMpO1xuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVkJywgbG5nLCBucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc1Jlc291cmNlQnVuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFJlc291cmNlKGxuZywgbnMpICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFJlc291cmNlQnVuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICAgIGlmICghbnMpIG5zID0gdGhpcy5vcHRpb25zLmRlZmF1bHROUztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUFQSSA9PT0gJ3YxJykgcmV0dXJuIF9vYmplY3RTcHJlYWQkMShfb2JqZWN0U3ByZWFkJDEoe30sIHt9KSwgdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKSk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RGF0YUJ5TGFuZ3VhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YUJ5TGFuZ3VhZ2UobG5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhW2xuZ107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc0xhbmd1YWdlU29tZVRyYW5zbGF0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNMYW5ndWFnZVNvbWVUcmFuc2xhdGlvbnMobG5nKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0RGF0YUJ5TGFuZ3VhZ2UobG5nKTtcbiAgICAgIHZhciBuID0gZGF0YSAmJiBPYmplY3Qua2V5cyhkYXRhKSB8fCBbXTtcbiAgICAgIHJldHVybiAhIW4uZmluZChmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gZGF0YVt2XSAmJiBPYmplY3Qua2V5cyhkYXRhW3ZdKS5sZW5ndGggPiAwO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXNvdXJjZVN0b3JlO1xufShFdmVudEVtaXR0ZXIpO1xuXG52YXIgcG9zdFByb2Nlc3NvciA9IHtcbiAgcHJvY2Vzc29yczoge30sXG4gIGFkZFBvc3RQcm9jZXNzb3I6IGZ1bmN0aW9uIGFkZFBvc3RQcm9jZXNzb3IobW9kdWxlKSB7XG4gICAgdGhpcy5wcm9jZXNzb3JzW21vZHVsZS5uYW1lXSA9IG1vZHVsZTtcbiAgfSxcbiAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUocHJvY2Vzc29ycywgdmFsdWUsIGtleSwgb3B0aW9ucywgdHJhbnNsYXRvcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBwcm9jZXNzb3JzLmZvckVhY2goZnVuY3Rpb24gKHByb2Nlc3Nvcikge1xuICAgICAgaWYgKF90aGlzLnByb2Nlc3NvcnNbcHJvY2Vzc29yXSkgdmFsdWUgPSBfdGhpcy5wcm9jZXNzb3JzW3Byb2Nlc3Nvcl0ucHJvY2Vzcyh2YWx1ZSwga2V5LCBvcHRpb25zLCB0cmFuc2xhdG9yKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG93bktleXMkMihvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQkMih0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzJDIoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyQyKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIkMShEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxKCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxKCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cbnZhciBjaGVja2VkTG9hZGVkRm9yID0ge307XG5cbnZhciBUcmFuc2xhdG9yID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKFRyYW5zbGF0b3IsIF9FdmVudEVtaXR0ZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIkMShUcmFuc2xhdG9yKTtcblxuICBmdW5jdGlvbiBUcmFuc2xhdG9yKHNlcnZpY2VzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zbGF0b3IpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcblxuICAgIGlmIChpc0lFMTApIHtcbiAgICAgIEV2ZW50RW1pdHRlci5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB9XG5cbiAgICBjb3B5KFsncmVzb3VyY2VTdG9yZScsICdsYW5ndWFnZVV0aWxzJywgJ3BsdXJhbFJlc29sdmVyJywgJ2ludGVycG9sYXRvcicsICdiYWNrZW5kQ29ubmVjdG9yJywgJ2kxOG5Gb3JtYXQnLCAndXRpbHMnXSwgc2VydmljZXMsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIGlmIChfdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvciA9ICcuJztcbiAgICB9XG5cbiAgICBfdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgndHJhbnNsYXRvcicpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUcmFuc2xhdG9yLCBbe1xuICAgIGtleTogXCJjaGFuZ2VMYW5ndWFnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VMYW5ndWFnZShsbmcpIHtcbiAgICAgIGlmIChsbmcpIHRoaXMubGFuZ3VhZ2UgPSBsbmc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4aXN0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleGlzdHMoa2V5KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgICBpbnRlcnBvbGF0aW9uOiB7fVxuICAgICAgfTtcblxuICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IGtleSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXNvbHZlZCA9IHRoaXMucmVzb2x2ZShrZXksIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHJlc29sdmVkICYmIHJlc29sdmVkLnJlcyAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0RnJvbUtleVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0RnJvbUtleShrZXksIG9wdGlvbnMpIHtcbiAgICAgIHZhciBuc1NlcGFyYXRvciA9IG9wdGlvbnMubnNTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMubnNTZXBhcmF0b3I7XG4gICAgICBpZiAobnNTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgbnNTZXBhcmF0b3IgPSAnOic7XG4gICAgICB2YXIga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICAgIHZhciBuYW1lc3BhY2VzID0gb3B0aW9ucy5ucyB8fCB0aGlzLm9wdGlvbnMuZGVmYXVsdE5TIHx8IFtdO1xuICAgICAgdmFyIHdvdWxkQ2hlY2tGb3JOc0luS2V5ID0gbnNTZXBhcmF0b3IgJiYga2V5LmluZGV4T2YobnNTZXBhcmF0b3IpID4gLTE7XG4gICAgICB2YXIgc2VlbXNOYXR1cmFsTGFuZ3VhZ2UgPSAhdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkS2V5U2VwYXJhdG9yICYmICFvcHRpb25zLmtleVNlcGFyYXRvciAmJiAhdGhpcy5vcHRpb25zLnVzZXJEZWZpbmVkTnNTZXBhcmF0b3IgJiYgIW9wdGlvbnMubnNTZXBhcmF0b3IgJiYgIWxvb2tzTGlrZU9iamVjdFBhdGgoa2V5LCBuc1NlcGFyYXRvciwga2V5U2VwYXJhdG9yKTtcblxuICAgICAgaWYgKHdvdWxkQ2hlY2tGb3JOc0luS2V5ICYmICFzZWVtc05hdHVyYWxMYW5ndWFnZSkge1xuICAgICAgICB2YXIgbSA9IGtleS5tYXRjaCh0aGlzLmludGVycG9sYXRvci5uZXN0aW5nUmVnZXhwKTtcblxuICAgICAgICBpZiAobSAmJiBtLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBuYW1lc3BhY2VzOiBuYW1lc3BhY2VzXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJ0cyA9IGtleS5zcGxpdChuc1NlcGFyYXRvcik7XG4gICAgICAgIGlmIChuc1NlcGFyYXRvciAhPT0ga2V5U2VwYXJhdG9yIHx8IG5zU2VwYXJhdG9yID09PSBrZXlTZXBhcmF0b3IgJiYgdGhpcy5vcHRpb25zLm5zLmluZGV4T2YocGFydHNbMF0pID4gLTEpIG5hbWVzcGFjZXMgPSBwYXJ0cy5zaGlmdCgpO1xuICAgICAgICBrZXkgPSBwYXJ0cy5qb2luKGtleVNlcGFyYXRvcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycpIG5hbWVzcGFjZXMgPSBbbmFtZXNwYWNlc107XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgbmFtZXNwYWNlczogbmFtZXNwYWNlc1xuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidHJhbnNsYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zbGF0ZShrZXlzLCBvcHRpb25zLCBsYXN0S2V5KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKF90eXBlb2Yob3B0aW9ucykgIT09ICdvYmplY3QnICYmIHRoaXMub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcikge1xuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyKGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKGtleXMgPT09IHVuZGVmaW5lZCB8fCBrZXlzID09PSBudWxsKSByZXR1cm4gJyc7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5cykpIGtleXMgPSBbU3RyaW5nKGtleXMpXTtcbiAgICAgIHZhciByZXR1cm5EZXRhaWxzID0gb3B0aW9ucy5yZXR1cm5EZXRhaWxzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnJldHVybkRldGFpbHMgOiB0aGlzLm9wdGlvbnMucmV0dXJuRGV0YWlscztcbiAgICAgIHZhciBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuXG4gICAgICB2YXIgX3RoaXMkZXh0cmFjdEZyb21LZXkgPSB0aGlzLmV4dHJhY3RGcm9tS2V5KGtleXNba2V5cy5sZW5ndGggLSAxXSwgb3B0aW9ucyksXG4gICAgICAgICAga2V5ID0gX3RoaXMkZXh0cmFjdEZyb21LZXkua2V5LFxuICAgICAgICAgIG5hbWVzcGFjZXMgPSBfdGhpcyRleHRyYWN0RnJvbUtleS5uYW1lc3BhY2VzO1xuXG4gICAgICB2YXIgbmFtZXNwYWNlID0gbmFtZXNwYWNlc1tuYW1lc3BhY2VzLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIGxuZyA9IG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2U7XG4gICAgICB2YXIgYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUgPSBvcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlIHx8IHRoaXMub3B0aW9ucy5hcHBlbmROYW1lc3BhY2VUb0NJTW9kZTtcblxuICAgICAgaWYgKGxuZyAmJiBsbmcudG9Mb3dlckNhc2UoKSA9PT0gJ2NpbW9kZScpIHtcbiAgICAgICAgaWYgKGFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlKSB7XG4gICAgICAgICAgdmFyIG5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvciB8fCB0aGlzLm9wdGlvbnMubnNTZXBhcmF0b3I7XG5cbiAgICAgICAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgICAgICAgcmVzb2x2ZWQucmVzID0gXCJcIi5jb25jYXQobmFtZXNwYWNlKS5jb25jYXQobnNTZXBhcmF0b3IpLmNvbmNhdChrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChuYW1lc3BhY2UpLmNvbmNhdChuc1NlcGFyYXRvcikuY29uY2F0KGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmV0dXJuRGV0YWlscykge1xuICAgICAgICAgIHJlc29sdmVkLnJlcyA9IGtleTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzb2x2ZWQgPSB0aGlzLnJlc29sdmUoa2V5cywgb3B0aW9ucyk7XG4gICAgICB2YXIgcmVzID0gcmVzb2x2ZWQgJiYgcmVzb2x2ZWQucmVzO1xuICAgICAgdmFyIHJlc1VzZWRLZXkgPSByZXNvbHZlZCAmJiByZXNvbHZlZC51c2VkS2V5IHx8IGtleTtcbiAgICAgIHZhciByZXNFeGFjdFVzZWRLZXkgPSByZXNvbHZlZCAmJiByZXNvbHZlZC5leGFjdFVzZWRLZXkgfHwga2V5O1xuICAgICAgdmFyIHJlc1R5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHJlcyk7XG4gICAgICB2YXIgbm9PYmplY3QgPSBbJ1tvYmplY3QgTnVtYmVyXScsICdbb2JqZWN0IEZ1bmN0aW9uXScsICdbb2JqZWN0IFJlZ0V4cF0nXTtcbiAgICAgIHZhciBqb2luQXJyYXlzID0gb3B0aW9ucy5qb2luQXJyYXlzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmpvaW5BcnJheXMgOiB0aGlzLm9wdGlvbnMuam9pbkFycmF5cztcbiAgICAgIHZhciBoYW5kbGVBc09iamVjdEluSTE4bkZvcm1hdCA9ICF0aGlzLmkxOG5Gb3JtYXQgfHwgdGhpcy5pMThuRm9ybWF0LmhhbmRsZUFzT2JqZWN0O1xuICAgICAgdmFyIGhhbmRsZUFzT2JqZWN0ID0gdHlwZW9mIHJlcyAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHJlcyAhPT0gJ2Jvb2xlYW4nICYmIHR5cGVvZiByZXMgIT09ICdudW1iZXInO1xuXG4gICAgICBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgcmVzICYmIGhhbmRsZUFzT2JqZWN0ICYmIG5vT2JqZWN0LmluZGV4T2YocmVzVHlwZSkgPCAwICYmICEodHlwZW9mIGpvaW5BcnJheXMgPT09ICdzdHJpbmcnICYmIHJlc1R5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5yZXR1cm5PYmplY3RzICYmICF0aGlzLm9wdGlvbnMucmV0dXJuT2JqZWN0cykge1xuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybignYWNjZXNzaW5nIGFuIG9iamVjdCAtIGJ1dCByZXR1cm5PYmplY3RzIG9wdGlvbnMgaXMgbm90IGVuYWJsZWQhJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHIgPSB0aGlzLm9wdGlvbnMucmV0dXJuZWRPYmplY3RIYW5kbGVyID8gdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlcihyZXNVc2VkS2V5LCByZXMsIF9vYmplY3RTcHJlYWQkMihfb2JqZWN0U3ByZWFkJDIoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgICAgICAgICAgbnM6IG5hbWVzcGFjZXNcbiAgICAgICAgICB9KSkgOiBcImtleSAnXCIuY29uY2F0KGtleSwgXCIgKFwiKS5jb25jYXQodGhpcy5sYW5ndWFnZSwgXCIpJyByZXR1cm5lZCBhbiBvYmplY3QgaW5zdGVhZCBvZiBzdHJpbmcuXCIpO1xuXG4gICAgICAgICAgaWYgKHJldHVybkRldGFpbHMpIHtcbiAgICAgICAgICAgIHJlc29sdmVkLnJlcyA9IHI7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5U2VwYXJhdG9yKSB7XG4gICAgICAgICAgdmFyIHJlc1R5cGVJc0FycmF5ID0gcmVzVHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICAgICAgICB2YXIgY29weSA9IHJlc1R5cGVJc0FycmF5ID8gW10gOiB7fTtcbiAgICAgICAgICB2YXIgbmV3S2V5VG9Vc2UgPSByZXNUeXBlSXNBcnJheSA/IHJlc0V4YWN0VXNlZEtleSA6IHJlc1VzZWRLZXk7XG5cbiAgICAgICAgICBmb3IgKHZhciBtIGluIHJlcykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXMsIG0pKSB7XG4gICAgICAgICAgICAgIHZhciBkZWVwS2V5ID0gXCJcIi5jb25jYXQobmV3S2V5VG9Vc2UpLmNvbmNhdChrZXlTZXBhcmF0b3IpLmNvbmNhdChtKTtcbiAgICAgICAgICAgICAgY29weVttXSA9IHRoaXMudHJhbnNsYXRlKGRlZXBLZXksIF9vYmplY3RTcHJlYWQkMihfb2JqZWN0U3ByZWFkJDIoe30sIG9wdGlvbnMpLCB7XG4gICAgICAgICAgICAgICAgam9pbkFycmF5czogZmFsc2UsXG4gICAgICAgICAgICAgICAgbnM6IG5hbWVzcGFjZXNcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBpZiAoY29weVttXSA9PT0gZGVlcEtleSkgY29weVttXSA9IHJlc1ttXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXMgPSBjb3B5O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0ICYmIHR5cGVvZiBqb2luQXJyYXlzID09PSAnc3RyaW5nJyAmJiByZXNUeXBlID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgIHJlcyA9IHJlcy5qb2luKGpvaW5BcnJheXMpO1xuICAgICAgICBpZiAocmVzKSByZXMgPSB0aGlzLmV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5cywgb3B0aW9ucywgbGFzdEtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdXNlZERlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHVzZWRLZXkgPSBmYWxzZTtcbiAgICAgICAgdmFyIG5lZWRzUGx1cmFsSGFuZGxpbmcgPSBvcHRpb25zLmNvdW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdGlvbnMuY291bnQgIT09ICdzdHJpbmcnO1xuICAgICAgICB2YXIgaGFzRGVmYXVsdFZhbHVlID0gVHJhbnNsYXRvci5oYXNEZWZhdWx0VmFsdWUob3B0aW9ucyk7XG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWVTdWZmaXggPSBuZWVkc1BsdXJhbEhhbmRsaW5nID8gdGhpcy5wbHVyYWxSZXNvbHZlci5nZXRTdWZmaXgobG5nLCBvcHRpb25zLmNvdW50LCBvcHRpb25zKSA6ICcnO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gb3B0aW9uc1tcImRlZmF1bHRWYWx1ZVwiLmNvbmNhdChkZWZhdWx0VmFsdWVTdWZmaXgpXSB8fCBvcHRpb25zLmRlZmF1bHRWYWx1ZTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZExvb2t1cChyZXMpICYmIGhhc0RlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgIHVzZWREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgICByZXMgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZExvb2t1cChyZXMpKSB7XG4gICAgICAgICAgdXNlZEtleSA9IHRydWU7XG4gICAgICAgICAgcmVzID0ga2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pc3NpbmdLZXlOb1ZhbHVlRmFsbGJhY2tUb0tleSA9IG9wdGlvbnMubWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5IHx8IHRoaXMub3B0aW9ucy5taXNzaW5nS2V5Tm9WYWx1ZUZhbGxiYWNrVG9LZXk7XG4gICAgICAgIHZhciByZXNGb3JNaXNzaW5nID0gbWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5ICYmIHVzZWRLZXkgPyB1bmRlZmluZWQgOiByZXM7XG4gICAgICAgIHZhciB1cGRhdGVNaXNzaW5nID0gaGFzRGVmYXVsdFZhbHVlICYmIGRlZmF1bHRWYWx1ZSAhPT0gcmVzICYmIHRoaXMub3B0aW9ucy51cGRhdGVNaXNzaW5nO1xuXG4gICAgICAgIGlmICh1c2VkS2V5IHx8IHVzZWREZWZhdWx0IHx8IHVwZGF0ZU1pc3NpbmcpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5sb2codXBkYXRlTWlzc2luZyA/ICd1cGRhdGVLZXknIDogJ21pc3NpbmdLZXknLCBsbmcsIG5hbWVzcGFjZSwga2V5LCB1cGRhdGVNaXNzaW5nID8gZGVmYXVsdFZhbHVlIDogcmVzKTtcblxuICAgICAgICAgIGlmIChrZXlTZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIHZhciBmayA9IHRoaXMucmVzb2x2ZShrZXksIF9vYmplY3RTcHJlYWQkMihfb2JqZWN0U3ByZWFkJDIoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgICAgICAgICAgICBrZXlTZXBhcmF0b3I6IGZhbHNlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAoZmsgJiYgZmsucmVzKSB0aGlzLmxvZ2dlci53YXJuKCdTZWVtcyB0aGUgbG9hZGVkIHRyYW5zbGF0aW9ucyB3ZXJlIGluIGZsYXQgSlNPTiBmb3JtYXQgaW5zdGVhZCBvZiBuZXN0ZWQuIEVpdGhlciBzZXQga2V5U2VwYXJhdG9yOiBmYWxzZSBvbiBpbml0IG9yIG1ha2Ugc3VyZSB5b3VyIHRyYW5zbGF0aW9ucyBhcmUgcHVibGlzaGVkIGluIG5lc3RlZCBmb3JtYXQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGxuZ3MgPSBbXTtcbiAgICAgICAgICB2YXIgZmFsbGJhY2tMbmdzID0gdGhpcy5sYW5ndWFnZVV0aWxzLmdldEZhbGxiYWNrQ29kZXModGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nLCBvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdUbyA9PT0gJ2ZhbGxiYWNrJyAmJiBmYWxsYmFja0xuZ3MgJiYgZmFsbGJhY2tMbmdzWzBdKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZhbGxiYWNrTG5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBsbmdzLnB1c2goZmFsbGJhY2tMbmdzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZ1RvID09PSAnYWxsJykge1xuICAgICAgICAgICAgbG5ncyA9IHRoaXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkob3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxuZ3MucHVzaChvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc2VuZCA9IGZ1bmN0aW9uIHNlbmQobCwgaywgc3BlY2lmaWNEZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0Rm9yTWlzc2luZyA9IGhhc0RlZmF1bHRWYWx1ZSAmJiBzcGVjaWZpY0RlZmF1bHRWYWx1ZSAhPT0gcmVzID8gc3BlY2lmaWNEZWZhdWx0VmFsdWUgOiByZXNGb3JNaXNzaW5nO1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMubWlzc2luZ0tleUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLm9wdGlvbnMubWlzc2luZ0tleUhhbmRsZXIobCwgbmFtZXNwYWNlLCBrLCBkZWZhdWx0Rm9yTWlzc2luZywgdXBkYXRlTWlzc2luZywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzMi5iYWNrZW5kQ29ubmVjdG9yICYmIF90aGlzMi5iYWNrZW5kQ29ubmVjdG9yLnNhdmVNaXNzaW5nKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5iYWNrZW5kQ29ubmVjdG9yLnNhdmVNaXNzaW5nKGwsIG5hbWVzcGFjZSwgaywgZGVmYXVsdEZvck1pc3NpbmcsIHVwZGF0ZU1pc3NpbmcsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpczIuZW1pdCgnbWlzc2luZ0tleScsIGwsIG5hbWVzcGFjZSwgaywgcmVzKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZykge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZ1BsdXJhbHMgJiYgbmVlZHNQbHVyYWxIYW5kbGluZykge1xuICAgICAgICAgICAgICBsbmdzLmZvckVhY2goZnVuY3Rpb24gKGxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnBsdXJhbFJlc29sdmVyLmdldFN1ZmZpeGVzKGxhbmd1YWdlLCBvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChzdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgIHNlbmQoW2xhbmd1YWdlXSwga2V5ICsgc3VmZml4LCBvcHRpb25zW1wiZGVmYXVsdFZhbHVlXCIuY29uY2F0KHN1ZmZpeCldIHx8IGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VuZChsbmdzLCBrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzID0gdGhpcy5leHRlbmRUcmFuc2xhdGlvbihyZXMsIGtleXMsIG9wdGlvbnMsIHJlc29sdmVkLCBsYXN0S2V5KTtcbiAgICAgICAgaWYgKHVzZWRLZXkgJiYgcmVzID09PSBrZXkgJiYgdGhpcy5vcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleSkgcmVzID0gXCJcIi5jb25jYXQobmFtZXNwYWNlLCBcIjpcIikuY29uY2F0KGtleSk7XG5cbiAgICAgICAgaWYgKCh1c2VkS2V5IHx8IHVzZWREZWZhdWx0KSAmJiB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcikge1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUFQSSAhPT0gJ3YxJykge1xuICAgICAgICAgICAgcmVzID0gdGhpcy5vcHRpb25zLnBhcnNlTWlzc2luZ0tleUhhbmRsZXIodGhpcy5vcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleSA/IFwiXCIuY29uY2F0KG5hbWVzcGFjZSwgXCI6XCIpLmNvbmNhdChrZXkpIDoga2V5LCB1c2VkRGVmYXVsdCA/IHJlcyA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyA9IHRoaXMub3B0aW9ucy5wYXJzZU1pc3NpbmdLZXlIYW5kbGVyKHJlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXR1cm5EZXRhaWxzKSB7XG4gICAgICAgIHJlc29sdmVkLnJlcyA9IHJlcztcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleHRlbmRUcmFuc2xhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRlbmRUcmFuc2xhdGlvbihyZXMsIGtleSwgb3B0aW9ucywgcmVzb2x2ZWQsIGxhc3RLZXkpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5pMThuRm9ybWF0ICYmIHRoaXMuaTE4bkZvcm1hdC5wYXJzZSkge1xuICAgICAgICByZXMgPSB0aGlzLmkxOG5Gb3JtYXQucGFyc2UocmVzLCBfb2JqZWN0U3ByZWFkJDIoX29iamVjdFNwcmVhZCQyKHt9LCB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5kZWZhdWx0VmFyaWFibGVzKSwgb3B0aW9ucyksIHJlc29sdmVkLnVzZWRMbmcsIHJlc29sdmVkLnVzZWROUywgcmVzb2x2ZWQudXNlZEtleSwge1xuICAgICAgICAgIHJlc29sdmVkOiByZXNvbHZlZFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuc2tpcEludGVycG9sYXRpb24pIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaW50ZXJwb2xhdGlvbikgdGhpcy5pbnRlcnBvbGF0b3IuaW5pdChfb2JqZWN0U3ByZWFkJDIoX29iamVjdFNwcmVhZCQyKHt9LCBvcHRpb25zKSwge1xuICAgICAgICAgIGludGVycG9sYXRpb246IF9vYmplY3RTcHJlYWQkMihfb2JqZWN0U3ByZWFkJDIoe30sIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uKSwgb3B0aW9ucy5pbnRlcnBvbGF0aW9uKVxuICAgICAgICB9KSk7XG4gICAgICAgIHZhciBza2lwT25WYXJpYWJsZXMgPSB0eXBlb2YgcmVzID09PSAnc3RyaW5nJyAmJiAob3B0aW9ucyAmJiBvcHRpb25zLmludGVycG9sYXRpb24gJiYgb3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyA6IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLnNraXBPblZhcmlhYmxlcyk7XG4gICAgICAgIHZhciBuZXN0QmVmO1xuXG4gICAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgICB2YXIgbmIgPSByZXMubWF0Y2godGhpcy5pbnRlcnBvbGF0b3IubmVzdGluZ1JlZ2V4cCk7XG4gICAgICAgICAgbmVzdEJlZiA9IG5iICYmIG5iLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhID0gb3B0aW9ucy5yZXBsYWNlICYmIHR5cGVvZiBvcHRpb25zLnJlcGxhY2UgIT09ICdzdHJpbmcnID8gb3B0aW9ucy5yZXBsYWNlIDogb3B0aW9ucztcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmRlZmF1bHRWYXJpYWJsZXMpIGRhdGEgPSBfb2JqZWN0U3ByZWFkJDIoX29iamVjdFNwcmVhZCQyKHt9LCB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5kZWZhdWx0VmFyaWFibGVzKSwgZGF0YSk7XG4gICAgICAgIHJlcyA9IHRoaXMuaW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHJlcywgZGF0YSwgb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHNraXBPblZhcmlhYmxlcykge1xuICAgICAgICAgIHZhciBuYSA9IHJlcy5tYXRjaCh0aGlzLmludGVycG9sYXRvci5uZXN0aW5nUmVnZXhwKTtcbiAgICAgICAgICB2YXIgbmVzdEFmdCA9IG5hICYmIG5hLmxlbmd0aDtcbiAgICAgICAgICBpZiAobmVzdEJlZiA8IG5lc3RBZnQpIG9wdGlvbnMubmVzdCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubmVzdCAhPT0gZmFsc2UpIHJlcyA9IHRoaXMuaW50ZXJwb2xhdG9yLm5lc3QocmVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChsYXN0S2V5ICYmIGxhc3RLZXlbMF0gPT09IGFyZ3NbMF0gJiYgIW9wdGlvbnMuY29udGV4dCkge1xuICAgICAgICAgICAgX3RoaXMzLmxvZ2dlci53YXJuKFwiSXQgc2VlbXMgeW91IGFyZSBuZXN0aW5nIHJlY3Vyc2l2ZWx5IGtleTogXCIuY29uY2F0KGFyZ3NbMF0sIFwiIGluIGtleTogXCIpLmNvbmNhdChrZXlbMF0pKTtcblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF90aGlzMy50cmFuc2xhdGUuYXBwbHkoX3RoaXMzLCBhcmdzLmNvbmNhdChba2V5XSkpO1xuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuaW50ZXJwb2xhdGlvbikgdGhpcy5pbnRlcnBvbGF0b3IucmVzZXQoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvc3RQcm9jZXNzID0gb3B0aW9ucy5wb3N0UHJvY2VzcyB8fCB0aGlzLm9wdGlvbnMucG9zdFByb2Nlc3M7XG4gICAgICB2YXIgcG9zdFByb2Nlc3Nvck5hbWVzID0gdHlwZW9mIHBvc3RQcm9jZXNzID09PSAnc3RyaW5nJyA/IFtwb3N0UHJvY2Vzc10gOiBwb3N0UHJvY2VzcztcblxuICAgICAgaWYgKHJlcyAhPT0gdW5kZWZpbmVkICYmIHJlcyAhPT0gbnVsbCAmJiBwb3N0UHJvY2Vzc29yTmFtZXMgJiYgcG9zdFByb2Nlc3Nvck5hbWVzLmxlbmd0aCAmJiBvcHRpb25zLmFwcGx5UG9zdFByb2Nlc3NvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmVzID0gcG9zdFByb2Nlc3Nvci5oYW5kbGUocG9zdFByb2Nlc3Nvck5hbWVzLCByZXMsIGtleSwgdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5wb3N0UHJvY2Vzc1Bhc3NSZXNvbHZlZCA/IF9vYmplY3RTcHJlYWQkMih7XG4gICAgICAgICAgaTE4blJlc29sdmVkOiByZXNvbHZlZFxuICAgICAgICB9LCBvcHRpb25zKSA6IG9wdGlvbnMsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXNvbHZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmUoa2V5cykge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBmb3VuZDtcbiAgICAgIHZhciB1c2VkS2V5O1xuICAgICAgdmFyIGV4YWN0VXNlZEtleTtcbiAgICAgIHZhciB1c2VkTG5nO1xuICAgICAgdmFyIHVzZWROUztcbiAgICAgIGlmICh0eXBlb2Yga2V5cyA9PT0gJ3N0cmluZycpIGtleXMgPSBba2V5c107XG4gICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgaWYgKF90aGlzNC5pc1ZhbGlkTG9va3VwKGZvdW5kKSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBleHRyYWN0ZWQgPSBfdGhpczQuZXh0cmFjdEZyb21LZXkoaywgb3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIGtleSA9IGV4dHJhY3RlZC5rZXk7XG4gICAgICAgIHVzZWRLZXkgPSBrZXk7XG4gICAgICAgIHZhciBuYW1lc3BhY2VzID0gZXh0cmFjdGVkLm5hbWVzcGFjZXM7XG4gICAgICAgIGlmIChfdGhpczQub3B0aW9ucy5mYWxsYmFja05TKSBuYW1lc3BhY2VzID0gbmFtZXNwYWNlcy5jb25jYXQoX3RoaXM0Lm9wdGlvbnMuZmFsbGJhY2tOUyk7XG4gICAgICAgIHZhciBuZWVkc1BsdXJhbEhhbmRsaW5nID0gb3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmNvdW50ICE9PSAnc3RyaW5nJztcblxuICAgICAgICB2YXIgbmVlZHNaZXJvU3VmZml4TG9va3VwID0gbmVlZHNQbHVyYWxIYW5kbGluZyAmJiAhb3B0aW9ucy5vcmRpbmFsICYmIG9wdGlvbnMuY291bnQgPT09IDAgJiYgX3RoaXM0LnBsdXJhbFJlc29sdmVyLnNob3VsZFVzZUludGxBcGkoKTtcblxuICAgICAgICB2YXIgbmVlZHNDb250ZXh0SGFuZGxpbmcgPSBvcHRpb25zLmNvbnRleHQgIT09IHVuZGVmaW5lZCAmJiAodHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ251bWJlcicpICYmIG9wdGlvbnMuY29udGV4dCAhPT0gJyc7XG4gICAgICAgIHZhciBjb2RlcyA9IG9wdGlvbnMubG5ncyA/IG9wdGlvbnMubG5ncyA6IF90aGlzNC5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShvcHRpb25zLmxuZyB8fCBfdGhpczQubGFuZ3VhZ2UsIG9wdGlvbnMuZmFsbGJhY2tMbmcpO1xuICAgICAgICBuYW1lc3BhY2VzLmZvckVhY2goZnVuY3Rpb24gKG5zKSB7XG4gICAgICAgICAgaWYgKF90aGlzNC5pc1ZhbGlkTG9va3VwKGZvdW5kKSkgcmV0dXJuO1xuICAgICAgICAgIHVzZWROUyA9IG5zO1xuXG4gICAgICAgICAgaWYgKCFjaGVja2VkTG9hZGVkRm9yW1wiXCIuY29uY2F0KGNvZGVzWzBdLCBcIi1cIikuY29uY2F0KG5zKV0gJiYgX3RoaXM0LnV0aWxzICYmIF90aGlzNC51dGlscy5oYXNMb2FkZWROYW1lc3BhY2UgJiYgIV90aGlzNC51dGlscy5oYXNMb2FkZWROYW1lc3BhY2UodXNlZE5TKSkge1xuICAgICAgICAgICAgY2hlY2tlZExvYWRlZEZvcltcIlwiLmNvbmNhdChjb2Rlc1swXSwgXCItXCIpLmNvbmNhdChucyldID0gdHJ1ZTtcblxuICAgICAgICAgICAgX3RoaXM0LmxvZ2dlci53YXJuKFwia2V5IFxcXCJcIi5jb25jYXQodXNlZEtleSwgXCJcXFwiIGZvciBsYW5ndWFnZXMgXFxcIlwiKS5jb25jYXQoY29kZXMuam9pbignLCAnKSwgXCJcXFwiIHdvbid0IGdldCByZXNvbHZlZCBhcyBuYW1lc3BhY2UgXFxcIlwiKS5jb25jYXQodXNlZE5TLCBcIlxcXCIgd2FzIG5vdCB5ZXQgbG9hZGVkXCIpLCAnVGhpcyBtZWFucyBzb21ldGhpbmcgSVMgV1JPTkcgaW4geW91ciBzZXR1cC4gWW91IGFjY2VzcyB0aGUgdCBmdW5jdGlvbiBiZWZvcmUgaTE4bmV4dC5pbml0IC8gaTE4bmV4dC5sb2FkTmFtZXNwYWNlIC8gaTE4bmV4dC5jaGFuZ2VMYW5ndWFnZSB3YXMgZG9uZS4gV2FpdCBmb3IgdGhlIGNhbGxiYWNrIG9yIFByb21pc2UgdG8gcmVzb2x2ZSBiZWZvcmUgYWNjZXNzaW5nIGl0ISEhJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29kZXMuZm9yRWFjaChmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzNC5pc1ZhbGlkTG9va3VwKGZvdW5kKSkgcmV0dXJuO1xuICAgICAgICAgICAgdXNlZExuZyA9IGNvZGU7XG4gICAgICAgICAgICB2YXIgZmluYWxLZXlzID0gW2tleV07XG5cbiAgICAgICAgICAgIGlmIChfdGhpczQuaTE4bkZvcm1hdCAmJiBfdGhpczQuaTE4bkZvcm1hdC5hZGRMb29rdXBLZXlzKSB7XG4gICAgICAgICAgICAgIF90aGlzNC5pMThuRm9ybWF0LmFkZExvb2t1cEtleXMoZmluYWxLZXlzLCBrZXksIGNvZGUsIG5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBwbHVyYWxTdWZmaXg7XG4gICAgICAgICAgICAgIGlmIChuZWVkc1BsdXJhbEhhbmRsaW5nKSBwbHVyYWxTdWZmaXggPSBfdGhpczQucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4KGNvZGUsIG9wdGlvbnMuY291bnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICB2YXIgemVyb1N1ZmZpeCA9IFwiXCIuY29uY2F0KF90aGlzNC5vcHRpb25zLnBsdXJhbFNlcGFyYXRvciwgXCJ6ZXJvXCIpO1xuXG4gICAgICAgICAgICAgIGlmIChuZWVkc1BsdXJhbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goa2V5ICsgcGx1cmFsU3VmZml4KTtcblxuICAgICAgICAgICAgICAgIGlmIChuZWVkc1plcm9TdWZmaXhMb29rdXApIHtcbiAgICAgICAgICAgICAgICAgIGZpbmFsS2V5cy5wdXNoKGtleSArIHplcm9TdWZmaXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChuZWVkc0NvbnRleHRIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0S2V5ID0gXCJcIi5jb25jYXQoa2V5KS5jb25jYXQoX3RoaXM0Lm9wdGlvbnMuY29udGV4dFNlcGFyYXRvcikuY29uY2F0KG9wdGlvbnMuY29udGV4dCk7XG4gICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobmVlZHNQbHVyYWxIYW5kbGluZykge1xuICAgICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSArIHBsdXJhbFN1ZmZpeCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChuZWVkc1plcm9TdWZmaXhMb29rdXApIHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxLZXlzLnB1c2goY29udGV4dEtleSArIHplcm9TdWZmaXgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcG9zc2libGVLZXk7XG5cbiAgICAgICAgICAgIHdoaWxlIChwb3NzaWJsZUtleSA9IGZpbmFsS2V5cy5wb3AoKSkge1xuICAgICAgICAgICAgICBpZiAoIV90aGlzNC5pc1ZhbGlkTG9va3VwKGZvdW5kKSkge1xuICAgICAgICAgICAgICAgIGV4YWN0VXNlZEtleSA9IHBvc3NpYmxlS2V5O1xuICAgICAgICAgICAgICAgIGZvdW5kID0gX3RoaXM0LmdldFJlc291cmNlKGNvZGUsIG5zLCBwb3NzaWJsZUtleSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlczogZm91bmQsXG4gICAgICAgIHVzZWRLZXk6IHVzZWRLZXksXG4gICAgICAgIGV4YWN0VXNlZEtleTogZXhhY3RVc2VkS2V5LFxuICAgICAgICB1c2VkTG5nOiB1c2VkTG5nLFxuICAgICAgICB1c2VkTlM6IHVzZWROU1xuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNWYWxpZExvb2t1cFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1ZhbGlkTG9va3VwKHJlcykge1xuICAgICAgcmV0dXJuIHJlcyAhPT0gdW5kZWZpbmVkICYmICEoIXRoaXMub3B0aW9ucy5yZXR1cm5OdWxsICYmIHJlcyA9PT0gbnVsbCkgJiYgISghdGhpcy5vcHRpb25zLnJldHVybkVtcHR5U3RyaW5nICYmIHJlcyA9PT0gJycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSZXNvdXJjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXNvdXJjZShjb2RlLCBucywga2V5KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgICBpZiAodGhpcy5pMThuRm9ybWF0ICYmIHRoaXMuaTE4bkZvcm1hdC5nZXRSZXNvdXJjZSkgcmV0dXJuIHRoaXMuaTE4bkZvcm1hdC5nZXRSZXNvdXJjZShjb2RlLCBucywga2V5LCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzLnJlc291cmNlU3RvcmUuZ2V0UmVzb3VyY2UoY29kZSwgbnMsIGtleSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiaGFzRGVmYXVsdFZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0RlZmF1bHRWYWx1ZShvcHRpb25zKSB7XG4gICAgICB2YXIgcHJlZml4ID0gJ2RlZmF1bHRWYWx1ZSc7XG5cbiAgICAgIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgb3B0aW9uKSAmJiBwcmVmaXggPT09IG9wdGlvbi5zdWJzdHJpbmcoMCwgcHJlZml4Lmxlbmd0aCkgJiYgdW5kZWZpbmVkICE9PSBvcHRpb25zW29wdGlvbl0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRyYW5zbGF0b3I7XG59KEV2ZW50RW1pdHRlcik7XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG5cbnZhciBMYW5ndWFnZVV0aWwgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExhbmd1YWdlVXRpbChvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExhbmd1YWdlVXRpbCk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3VwcG9ydGVkTG5ncyA9IHRoaXMub3B0aW9ucy5zdXBwb3J0ZWRMbmdzIHx8IGZhbHNlO1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2xhbmd1YWdlVXRpbHMnKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMYW5ndWFnZVV0aWwsIFt7XG4gICAga2V5OiBcImdldFNjcmlwdFBhcnRGcm9tQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSkge1xuICAgICAgaWYgKCFjb2RlIHx8IGNvZGUuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcCA9IGNvZGUuc3BsaXQoJy0nKTtcbiAgICAgIGlmIChwLmxlbmd0aCA9PT0gMikgcmV0dXJuIG51bGw7XG4gICAgICBwLnBvcCgpO1xuICAgICAgaWYgKHBbcC5sZW5ndGggLSAxXS50b0xvd2VyQ2FzZSgpID09PSAneCcpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKHAuam9pbignLScpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSkge1xuICAgICAgaWYgKCFjb2RlIHx8IGNvZGUuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuIGNvZGU7XG4gICAgICB2YXIgcCA9IGNvZGUuc3BsaXQoJy0nKTtcbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShwWzBdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0TGFuZ3VhZ2VDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSB7XG4gICAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnICYmIGNvZGUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgICAgdmFyIHNwZWNpYWxDYXNlcyA9IFsnaGFucycsICdoYW50JywgJ2xhdG4nLCAnY3lybCcsICdjYW5zJywgJ21vbmcnLCAnYXJhYiddO1xuICAgICAgICB2YXIgcCA9IGNvZGUuc3BsaXQoJy0nKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxvd2VyQ2FzZUxuZykge1xuICAgICAgICAgIHAgPSBwLm1hcChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChwLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgIHBbMF0gPSBwWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgcFsxXSA9IHBbMV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICBpZiAoc3BlY2lhbENhc2VzLmluZGV4T2YocFsxXS50b0xvd2VyQ2FzZSgpKSA+IC0xKSBwWzFdID0gY2FwaXRhbGl6ZShwWzFdLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHAubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgcFswXSA9IHBbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAocFsxXS5sZW5ndGggPT09IDIpIHBbMV0gPSBwWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKHBbMF0gIT09ICdzZ24nICYmIHBbMl0ubGVuZ3RoID09PSAyKSBwWzJdID0gcFsyXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIGlmIChzcGVjaWFsQ2FzZXMuaW5kZXhPZihwWzFdLnRvTG93ZXJDYXNlKCkpID4gLTEpIHBbMV0gPSBjYXBpdGFsaXplKHBbMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgaWYgKHNwZWNpYWxDYXNlcy5pbmRleE9mKHBbMl0udG9Mb3dlckNhc2UoKSkgPiAtMSkgcFsyXSA9IGNhcGl0YWxpemUocFsyXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwLmpvaW4oJy0nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGVhbkNvZGUgfHwgdGhpcy5vcHRpb25zLmxvd2VyQ2FzZUxuZyA/IGNvZGUudG9Mb3dlckNhc2UoKSA6IGNvZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzU3VwcG9ydGVkQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1N1cHBvcnRlZENvZGUoY29kZSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkID09PSAnbGFuZ3VhZ2VPbmx5JyB8fCB0aGlzLm9wdGlvbnMubm9uRXhwbGljaXRTdXBwb3J0ZWRMbmdzKSB7XG4gICAgICAgIGNvZGUgPSB0aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIXRoaXMuc3VwcG9ydGVkTG5ncyB8fCAhdGhpcy5zdXBwb3J0ZWRMbmdzLmxlbmd0aCB8fCB0aGlzLnN1cHBvcnRlZExuZ3MuaW5kZXhPZihjb2RlKSA+IC0xO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRCZXN0TWF0Y2hGcm9tQ29kZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QmVzdE1hdGNoRnJvbUNvZGVzKGNvZGVzKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIWNvZGVzKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBmb3VuZDtcbiAgICAgIGNvZGVzLmZvckVhY2goZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgaWYgKGZvdW5kKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGNsZWFuZWRMbmcgPSBfdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSk7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnN1cHBvcnRlZExuZ3MgfHwgX3RoaXMuaXNTdXBwb3J0ZWRDb2RlKGNsZWFuZWRMbmcpKSBmb3VuZCA9IGNsZWFuZWRMbmc7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFmb3VuZCAmJiB0aGlzLm9wdGlvbnMuc3VwcG9ydGVkTG5ncykge1xuICAgICAgICBjb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICAgICAgaWYgKGZvdW5kKSByZXR1cm47XG5cbiAgICAgICAgICB2YXIgbG5nT25seSA9IF90aGlzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpO1xuXG4gICAgICAgICAgaWYgKF90aGlzLmlzU3VwcG9ydGVkQ29kZShsbmdPbmx5KSkgcmV0dXJuIGZvdW5kID0gbG5nT25seTtcbiAgICAgICAgICBmb3VuZCA9IF90aGlzLm9wdGlvbnMuc3VwcG9ydGVkTG5ncy5maW5kKGZ1bmN0aW9uIChzdXBwb3J0ZWRMbmcpIHtcbiAgICAgICAgICAgIGlmIChzdXBwb3J0ZWRMbmcuaW5kZXhPZihsbmdPbmx5KSA9PT0gMCkgcmV0dXJuIHN1cHBvcnRlZExuZztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZm91bmQpIGZvdW5kID0gdGhpcy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZylbMF07XG4gICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEZhbGxiYWNrQ29kZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmFsbGJhY2tDb2RlcyhmYWxsYmFja3MsIGNvZGUpIHtcbiAgICAgIGlmICghZmFsbGJhY2tzKSByZXR1cm4gW107XG4gICAgICBpZiAodHlwZW9mIGZhbGxiYWNrcyA9PT0gJ2Z1bmN0aW9uJykgZmFsbGJhY2tzID0gZmFsbGJhY2tzKGNvZGUpO1xuICAgICAgaWYgKHR5cGVvZiBmYWxsYmFja3MgPT09ICdzdHJpbmcnKSBmYWxsYmFja3MgPSBbZmFsbGJhY2tzXTtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KGZhbGxiYWNrcykgPT09ICdbb2JqZWN0IEFycmF5XScpIHJldHVybiBmYWxsYmFja3M7XG4gICAgICBpZiAoIWNvZGUpIHJldHVybiBmYWxsYmFja3NbXCJkZWZhdWx0XCJdIHx8IFtdO1xuICAgICAgdmFyIGZvdW5kID0gZmFsbGJhY2tzW2NvZGVdO1xuICAgICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5nZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSldO1xuICAgICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSldO1xuICAgICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3NbdGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKV07XG4gICAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrc1tcImRlZmF1bHRcIl07XG4gICAgICByZXR1cm4gZm91bmQgfHwgW107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvUmVzb2x2ZUhpZXJhcmNoeVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1Jlc29sdmVIaWVyYXJjaHkoY29kZSwgZmFsbGJhY2tDb2RlKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGZhbGxiYWNrQ29kZXMgPSB0aGlzLmdldEZhbGxiYWNrQ29kZXMoZmFsbGJhY2tDb2RlIHx8IHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyB8fCBbXSwgY29kZSk7XG4gICAgICB2YXIgY29kZXMgPSBbXTtcblxuICAgICAgdmFyIGFkZENvZGUgPSBmdW5jdGlvbiBhZGRDb2RlKGMpIHtcbiAgICAgICAgaWYgKCFjKSByZXR1cm47XG5cbiAgICAgICAgaWYgKF90aGlzMi5pc1N1cHBvcnRlZENvZGUoYykpIHtcbiAgICAgICAgICBjb2Rlcy5wdXNoKGMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMi5sb2dnZXIud2FybihcInJlamVjdGluZyBsYW5ndWFnZSBjb2RlIG5vdCBmb3VuZCBpbiBzdXBwb3J0ZWRMbmdzOiBcIi5jb25jYXQoYykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnICYmIGNvZGUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkICE9PSAnbGFuZ3VhZ2VPbmx5JykgYWRkQ29kZSh0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2xhbmd1YWdlT25seScgJiYgdGhpcy5vcHRpb25zLmxvYWQgIT09ICdjdXJyZW50T25seScpIGFkZENvZGUodGhpcy5nZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSkpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgIT09ICdjdXJyZW50T25seScpIGFkZENvZGUodGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICBhZGRDb2RlKHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpKTtcbiAgICAgIH1cblxuICAgICAgZmFsbGJhY2tDb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChmYykge1xuICAgICAgICBpZiAoY29kZXMuaW5kZXhPZihmYykgPCAwKSBhZGRDb2RlKF90aGlzMi5mb3JtYXRMYW5ndWFnZUNvZGUoZmMpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvZGVzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMYW5ndWFnZVV0aWw7XG59KCk7XG5cbnZhciBzZXRzID0gW3tcbiAgbG5nczogWydhY2gnLCAnYWsnLCAnYW0nLCAnYXJuJywgJ2JyJywgJ2ZpbCcsICdndW4nLCAnbG4nLCAnbWZlJywgJ21nJywgJ21pJywgJ29jJywgJ3B0JywgJ3B0LUJSJywgJ3RnJywgJ3RsJywgJ3RpJywgJ3RyJywgJ3V6JywgJ3dhJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxXG59LCB7XG4gIGxuZ3M6IFsnYWYnLCAnYW4nLCAnYXN0JywgJ2F6JywgJ2JnJywgJ2JuJywgJ2NhJywgJ2RhJywgJ2RlJywgJ2RldicsICdlbCcsICdlbicsICdlbycsICdlcycsICdldCcsICdldScsICdmaScsICdmbycsICdmdXInLCAnZnknLCAnZ2wnLCAnZ3UnLCAnaGEnLCAnaGknLCAnaHUnLCAnaHknLCAnaWEnLCAnaXQnLCAna2snLCAna24nLCAna3UnLCAnbGInLCAnbWFpJywgJ21sJywgJ21uJywgJ21yJywgJ25haCcsICduYXAnLCAnbmInLCAnbmUnLCAnbmwnLCAnbm4nLCAnbm8nLCAnbnNvJywgJ3BhJywgJ3BhcCcsICdwbXMnLCAncHMnLCAncHQtUFQnLCAncm0nLCAnc2NvJywgJ3NlJywgJ3NpJywgJ3NvJywgJ3NvbicsICdzcScsICdzdicsICdzdycsICd0YScsICd0ZScsICd0aycsICd1cicsICd5byddLFxuICBucjogWzEsIDJdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ2F5JywgJ2JvJywgJ2NnZycsICdmYScsICdodCcsICdpZCcsICdqYScsICdqYm8nLCAna2EnLCAna20nLCAna28nLCAna3knLCAnbG8nLCAnbXMnLCAnc2FoJywgJ3N1JywgJ3RoJywgJ3R0JywgJ3VnJywgJ3ZpJywgJ3dvJywgJ3poJ10sXG4gIG5yOiBbMV0sXG4gIGZjOiAzXG59LCB7XG4gIGxuZ3M6IFsnYmUnLCAnYnMnLCAnY25yJywgJ2R6JywgJ2hyJywgJ3J1JywgJ3NyJywgJ3VrJ10sXG4gIG5yOiBbMSwgMiwgNV0sXG4gIGZjOiA0XG59LCB7XG4gIGxuZ3M6IFsnYXInXSxcbiAgbnI6IFswLCAxLCAyLCAzLCAxMSwgMTAwXSxcbiAgZmM6IDVcbn0sIHtcbiAgbG5nczogWydjcycsICdzayddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogNlxufSwge1xuICBsbmdzOiBbJ2NzYicsICdwbCddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogN1xufSwge1xuICBsbmdzOiBbJ2N5J10sXG4gIG5yOiBbMSwgMiwgMywgOF0sXG4gIGZjOiA4XG59LCB7XG4gIGxuZ3M6IFsnZnInXSxcbiAgbnI6IFsxLCAyXSxcbiAgZmM6IDlcbn0sIHtcbiAgbG5nczogWydnYSddLFxuICBucjogWzEsIDIsIDMsIDcsIDExXSxcbiAgZmM6IDEwXG59LCB7XG4gIGxuZ3M6IFsnZ2QnXSxcbiAgbnI6IFsxLCAyLCAzLCAyMF0sXG4gIGZjOiAxMVxufSwge1xuICBsbmdzOiBbJ2lzJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxMlxufSwge1xuICBsbmdzOiBbJ2p2J10sXG4gIG5yOiBbMCwgMV0sXG4gIGZjOiAxM1xufSwge1xuICBsbmdzOiBbJ2t3J10sXG4gIG5yOiBbMSwgMiwgMywgNF0sXG4gIGZjOiAxNFxufSwge1xuICBsbmdzOiBbJ2x0J10sXG4gIG5yOiBbMSwgMiwgMTBdLFxuICBmYzogMTVcbn0sIHtcbiAgbG5nczogWydsdiddLFxuICBucjogWzEsIDIsIDBdLFxuICBmYzogMTZcbn0sIHtcbiAgbG5nczogWydtayddLFxuICBucjogWzEsIDJdLFxuICBmYzogMTdcbn0sIHtcbiAgbG5nczogWydtbmsnXSxcbiAgbnI6IFswLCAxLCAyXSxcbiAgZmM6IDE4XG59LCB7XG4gIGxuZ3M6IFsnbXQnXSxcbiAgbnI6IFsxLCAyLCAxMSwgMjBdLFxuICBmYzogMTlcbn0sIHtcbiAgbG5nczogWydvciddLFxuICBucjogWzIsIDFdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ3JvJ10sXG4gIG5yOiBbMSwgMiwgMjBdLFxuICBmYzogMjBcbn0sIHtcbiAgbG5nczogWydzbCddLFxuICBucjogWzUsIDEsIDIsIDNdLFxuICBmYzogMjFcbn0sIHtcbiAgbG5nczogWydoZScsICdpdyddLFxuICBucjogWzEsIDIsIDIwLCAyMV0sXG4gIGZjOiAyMlxufV07XG52YXIgX3J1bGVzUGx1cmFsc1R5cGVzID0ge1xuICAxOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPiAxKTtcbiAgfSxcbiAgMjogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICE9IDEpO1xuICB9LFxuICAzOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgNDogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gJSAxMCA+PSAyICYmIG4gJSAxMCA8PSA0ICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMik7XG4gIH0sXG4gIDU6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAwID8gMCA6IG4gPT0gMSA/IDEgOiBuID09IDIgPyAyIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTAgPyAzIDogbiAlIDEwMCA+PSAxMSA/IDQgOiA1KTtcbiAgfSxcbiAgNjogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA+PSAyICYmIG4gPD0gNCA/IDEgOiAyKTtcbiAgfSxcbiAgNzogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiAlIDEwID49IDIgJiYgbiAlIDEwIDw9IDQgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyKTtcbiAgfSxcbiAgODogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PSAyID8gMSA6IG4gIT0gOCAmJiBuICE9IDExID8gMiA6IDMpO1xuICB9LFxuICA5OiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPj0gMik7XG4gIH0sXG4gIDEwOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuID09IDIgPyAxIDogbiA8IDcgPyAyIDogbiA8IDExID8gMyA6IDQpO1xuICB9LFxuICAxMTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgfHwgbiA9PSAxMSA/IDAgOiBuID09IDIgfHwgbiA9PSAxMiA/IDEgOiBuID4gMiAmJiBuIDwgMjAgPyAyIDogMyk7XG4gIH0sXG4gIDEyOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCAhPSAxIHx8IG4gJSAxMDAgPT0gMTEpO1xuICB9LFxuICAxMzogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICE9PSAwKTtcbiAgfSxcbiAgMTQ6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuID09IDMgPyAyIDogMyk7XG4gIH0sXG4gIDE1OiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogbiAlIDEwID49IDIgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyKTtcbiAgfSxcbiAgMTY6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiAlIDEwID09IDEgJiYgbiAlIDEwMCAhPSAxMSA/IDAgOiBuICE9PSAwID8gMSA6IDIpO1xuICB9LFxuICAxNzogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgfHwgbiAlIDEwID09IDEgJiYgbiAlIDEwMCAhPSAxMSA/IDAgOiAxKTtcbiAgfSxcbiAgMTg6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAwID8gMCA6IG4gPT0gMSA/IDEgOiAyKTtcbiAgfSxcbiAgMTk6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMCB8fCBuICUgMTAwID4gMSAmJiBuICUgMTAwIDwgMTEgPyAxIDogbiAlIDEwMCA+IDEwICYmIG4gJSAxMDAgPCAyMCA/IDIgOiAzKTtcbiAgfSxcbiAgMjA6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMCB8fCBuICUgMTAwID4gMCAmJiBuICUgMTAwIDwgMjAgPyAxIDogMik7XG4gIH0sXG4gIDIxOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMDAgPT0gMSA/IDEgOiBuICUgMTAwID09IDIgPyAyIDogbiAlIDEwMCA9PSAzIHx8IG4gJSAxMDAgPT0gNCA/IDMgOiAwKTtcbiAgfSxcbiAgMjI6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiAobiA8IDAgfHwgbiA+IDEwKSAmJiBuICUgMTAgPT0gMCA/IDIgOiAzKTtcbiAgfVxufTtcbnZhciBkZXByZWNhdGVkSnNvblZlcnNpb25zID0gWyd2MScsICd2MicsICd2MyddO1xudmFyIHN1ZmZpeGVzT3JkZXIgPSB7XG4gIHplcm86IDAsXG4gIG9uZTogMSxcbiAgdHdvOiAyLFxuICBmZXc6IDMsXG4gIG1hbnk6IDQsXG4gIG90aGVyOiA1XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVSdWxlcygpIHtcbiAgdmFyIHJ1bGVzID0ge307XG4gIHNldHMuZm9yRWFjaChmdW5jdGlvbiAoc2V0KSB7XG4gICAgc2V0LmxuZ3MuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgcnVsZXNbbF0gPSB7XG4gICAgICAgIG51bWJlcnM6IHNldC5ucixcbiAgICAgICAgcGx1cmFsczogX3J1bGVzUGx1cmFsc1R5cGVzW3NldC5mY11cbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcnVsZXM7XG59XG5cbnZhciBQbHVyYWxSZXNvbHZlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1cmFsUmVzb2x2ZXIobGFuZ3VhZ2VVdGlscykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQbHVyYWxSZXNvbHZlcik7XG5cbiAgICB0aGlzLmxhbmd1YWdlVXRpbHMgPSBsYW5ndWFnZVV0aWxzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgncGx1cmFsUmVzb2x2ZXInKTtcblxuICAgIGlmICgoIXRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5SlNPTiB8fCB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPT09ICd2NCcpICYmICh0eXBlb2YgSW50bCA9PT0gJ3VuZGVmaW5lZCcgfHwgIUludGwuUGx1cmFsUnVsZXMpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPSAndjMnO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ1lvdXIgZW52aXJvbm1lbnQgc2VlbXMgbm90IHRvIGJlIEludGwgQVBJIGNvbXBhdGlibGUsIHVzZSBhbiBJbnRsLlBsdXJhbFJ1bGVzIHBvbHlmaWxsLiBXaWxsIGZhbGxiYWNrIHRvIHRoZSBjb21wYXRpYmlsaXR5SlNPTiB2MyBmb3JtYXQgaGFuZGxpbmcuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IGNyZWF0ZVJ1bGVzKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGx1cmFsUmVzb2x2ZXIsIFt7XG4gICAga2V5OiBcImFkZFJ1bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUnVsZShsbmcsIG9iaikge1xuICAgICAgdGhpcy5ydWxlc1tsbmddID0gb2JqO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSdWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGUoY29kZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VJbnRsQXBpKCkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gbmV3IEludGwuUGx1cmFsUnVsZXMoY29kZSwge1xuICAgICAgICAgICAgdHlwZTogb3B0aW9ucy5vcmRpbmFsID8gJ29yZGluYWwnIDogJ2NhcmRpbmFsJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChfdW51c2VkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzW2NvZGVdIHx8IHRoaXMucnVsZXNbdGhpcy5sYW5ndWFnZVV0aWxzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmVlZHNQbHVyYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmVlZHNQbHVyYWwoY29kZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmICh0aGlzLnNob3VsZFVzZUludGxBcGkoKSkge1xuICAgICAgICByZXR1cm4gcnVsZSAmJiBydWxlLnJlc29sdmVkT3B0aW9ucygpLnBsdXJhbENhdGVnb3JpZXMubGVuZ3RoID4gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJ1bGUgJiYgcnVsZS5udW1iZXJzLmxlbmd0aCA+IDE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFBsdXJhbEZvcm1zT2ZLZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGx1cmFsRm9ybXNPZktleShjb2RlLCBrZXkpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHJldHVybiB0aGlzLmdldFN1ZmZpeGVzKGNvZGUsIG9wdGlvbnMpLm1hcChmdW5jdGlvbiAoc3VmZml4KSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChrZXkpLmNvbmNhdChzdWZmaXgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFN1ZmZpeGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN1ZmZpeGVzKGNvZGUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBydWxlID0gdGhpcy5nZXRSdWxlKGNvZGUsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoIXJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VJbnRsQXBpKCkpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUucmVzb2x2ZWRPcHRpb25zKCkucGx1cmFsQ2F0ZWdvcmllcy5zb3J0KGZ1bmN0aW9uIChwbHVyYWxDYXRlZ29yeTEsIHBsdXJhbENhdGVnb3J5Mikge1xuICAgICAgICAgIHJldHVybiBzdWZmaXhlc09yZGVyW3BsdXJhbENhdGVnb3J5MV0gLSBzdWZmaXhlc09yZGVyW3BsdXJhbENhdGVnb3J5Ml07XG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAocGx1cmFsQ2F0ZWdvcnkpIHtcbiAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoX3RoaXMub3B0aW9ucy5wcmVwZW5kKS5jb25jYXQocGx1cmFsQ2F0ZWdvcnkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJ1bGUubnVtYmVycy5tYXAoZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gX3RoaXMuZ2V0U3VmZml4KGNvZGUsIG51bWJlciwgb3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U3VmZml4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN1ZmZpeChjb2RlLCBjb3VudCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChydWxlKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVzZUludGxBcGkoKSkge1xuICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0aGlzLm9wdGlvbnMucHJlcGVuZCkuY29uY2F0KHJ1bGUuc2VsZWN0KGNvdW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdWZmaXhSZXRyb0NvbXBhdGlibGUocnVsZSwgY291bnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZ2dlci53YXJuKFwibm8gcGx1cmFsIHJ1bGUgZm91bmQgZm9yOiBcIi5jb25jYXQoY29kZSkpO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTdWZmaXhSZXRyb0NvbXBhdGlibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3VmZml4UmV0cm9Db21wYXRpYmxlKHJ1bGUsIGNvdW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGlkeCA9IHJ1bGUubm9BYnMgPyBydWxlLnBsdXJhbHMoY291bnQpIDogcnVsZS5wbHVyYWxzKE1hdGguYWJzKGNvdW50KSk7XG4gICAgICB2YXIgc3VmZml4ID0gcnVsZS5udW1iZXJzW2lkeF07XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2ltcGxpZnlQbHVyYWxTdWZmaXggJiYgcnVsZS5udW1iZXJzLmxlbmd0aCA9PT0gMiAmJiBydWxlLm51bWJlcnNbMF0gPT09IDEpIHtcbiAgICAgICAgaWYgKHN1ZmZpeCA9PT0gMikge1xuICAgICAgICAgIHN1ZmZpeCA9ICdwbHVyYWwnO1xuICAgICAgICB9IGVsc2UgaWYgKHN1ZmZpeCA9PT0gMSkge1xuICAgICAgICAgIHN1ZmZpeCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXR1cm5TdWZmaXggPSBmdW5jdGlvbiByZXR1cm5TdWZmaXgoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIub3B0aW9ucy5wcmVwZW5kICYmIHN1ZmZpeC50b1N0cmluZygpID8gX3RoaXMyLm9wdGlvbnMucHJlcGVuZCArIHN1ZmZpeC50b1N0cmluZygpIDogc3VmZml4LnRvU3RyaW5nKCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OID09PSAndjEnKSB7XG4gICAgICAgIGlmIChzdWZmaXggPT09IDEpIHJldHVybiAnJztcbiAgICAgICAgaWYgKHR5cGVvZiBzdWZmaXggPT09ICdudW1iZXInKSByZXR1cm4gXCJfcGx1cmFsX1wiLmNvbmNhdChzdWZmaXgudG9TdHJpbmcoKSk7XG4gICAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OID09PSAndjInKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnNpbXBsaWZ5UGx1cmFsU3VmZml4ICYmIHJ1bGUubnVtYmVycy5sZW5ndGggPT09IDIgJiYgcnVsZS5udW1iZXJzWzBdID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wcmVwZW5kICYmIGlkeC50b1N0cmluZygpID8gdGhpcy5vcHRpb25zLnByZXBlbmQgKyBpZHgudG9TdHJpbmcoKSA6IGlkeC50b1N0cmluZygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaG91bGRVc2VJbnRsQXBpXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFVzZUludGxBcGkoKSB7XG4gICAgICByZXR1cm4gIWRlcHJlY2F0ZWRKc29uVmVyc2lvbnMuaW5jbHVkZXModGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGx1cmFsUmVzb2x2ZXI7XG59KCk7XG5cbmZ1bmN0aW9uIG93bktleXMkMyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQkMyh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzJDMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyQzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgSW50ZXJwb2xhdG9yID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBJbnRlcnBvbGF0b3IoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludGVycG9sYXRvcik7XG5cbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdpbnRlcnBvbGF0b3InKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgdGhpcy5mb3JtYXQgPSBvcHRpb25zLmludGVycG9sYXRpb24gJiYgb3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgdGhpcy5pbml0KG9wdGlvbnMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEludGVycG9sYXRvciwgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgaWYgKCFvcHRpb25zLmludGVycG9sYXRpb24pIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiA9IHtcbiAgICAgICAgZXNjYXBlVmFsdWU6IHRydWVcbiAgICAgIH07XG4gICAgICB2YXIgaU9wdHMgPSBvcHRpb25zLmludGVycG9sYXRpb247XG4gICAgICB0aGlzLmVzY2FwZSA9IGlPcHRzLmVzY2FwZSAhPT0gdW5kZWZpbmVkID8gaU9wdHMuZXNjYXBlIDogZXNjYXBlO1xuICAgICAgdGhpcy5lc2NhcGVWYWx1ZSA9IGlPcHRzLmVzY2FwZVZhbHVlICE9PSB1bmRlZmluZWQgPyBpT3B0cy5lc2NhcGVWYWx1ZSA6IHRydWU7XG4gICAgICB0aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUgPSBpT3B0cy51c2VSYXdWYWx1ZVRvRXNjYXBlICE9PSB1bmRlZmluZWQgPyBpT3B0cy51c2VSYXdWYWx1ZVRvRXNjYXBlIDogZmFsc2U7XG4gICAgICB0aGlzLnByZWZpeCA9IGlPcHRzLnByZWZpeCA/IHJlZ2V4RXNjYXBlKGlPcHRzLnByZWZpeCkgOiBpT3B0cy5wcmVmaXhFc2NhcGVkIHx8ICd7eyc7XG4gICAgICB0aGlzLnN1ZmZpeCA9IGlPcHRzLnN1ZmZpeCA/IHJlZ2V4RXNjYXBlKGlPcHRzLnN1ZmZpeCkgOiBpT3B0cy5zdWZmaXhFc2NhcGVkIHx8ICd9fSc7XG4gICAgICB0aGlzLmZvcm1hdFNlcGFyYXRvciA9IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA/IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA6IGlPcHRzLmZvcm1hdFNlcGFyYXRvciB8fCAnLCc7XG4gICAgICB0aGlzLnVuZXNjYXBlUHJlZml4ID0gaU9wdHMudW5lc2NhcGVTdWZmaXggPyAnJyA6IGlPcHRzLnVuZXNjYXBlUHJlZml4IHx8ICctJztcbiAgICAgIHRoaXMudW5lc2NhcGVTdWZmaXggPSB0aGlzLnVuZXNjYXBlUHJlZml4ID8gJycgOiBpT3B0cy51bmVzY2FwZVN1ZmZpeCB8fCAnJztcbiAgICAgIHRoaXMubmVzdGluZ1ByZWZpeCA9IGlPcHRzLm5lc3RpbmdQcmVmaXggPyByZWdleEVzY2FwZShpT3B0cy5uZXN0aW5nUHJlZml4KSA6IGlPcHRzLm5lc3RpbmdQcmVmaXhFc2NhcGVkIHx8IHJlZ2V4RXNjYXBlKCckdCgnKTtcbiAgICAgIHRoaXMubmVzdGluZ1N1ZmZpeCA9IGlPcHRzLm5lc3RpbmdTdWZmaXggPyByZWdleEVzY2FwZShpT3B0cy5uZXN0aW5nU3VmZml4KSA6IGlPcHRzLm5lc3RpbmdTdWZmaXhFc2NhcGVkIHx8IHJlZ2V4RXNjYXBlKCcpJyk7XG4gICAgICB0aGlzLm5lc3RpbmdPcHRpb25zU2VwYXJhdG9yID0gaU9wdHMubmVzdGluZ09wdGlvbnNTZXBhcmF0b3IgPyBpT3B0cy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvciA6IGlPcHRzLm5lc3RpbmdPcHRpb25zU2VwYXJhdG9yIHx8ICcsJztcbiAgICAgIHRoaXMubWF4UmVwbGFjZXMgPSBpT3B0cy5tYXhSZXBsYWNlcyA/IGlPcHRzLm1heFJlcGxhY2VzIDogMTAwMDtcbiAgICAgIHRoaXMuYWx3YXlzRm9ybWF0ID0gaU9wdHMuYWx3YXlzRm9ybWF0ICE9PSB1bmRlZmluZWQgPyBpT3B0cy5hbHdheXNGb3JtYXQgOiBmYWxzZTtcbiAgICAgIHRoaXMucmVzZXRSZWdFeHAoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zKSB0aGlzLmluaXQodGhpcy5vcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRSZWdFeHBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRSZWdFeHAoKSB7XG4gICAgICB2YXIgcmVnZXhwU3RyID0gXCJcIi5jb25jYXQodGhpcy5wcmVmaXgsIFwiKC4rPylcIikuY29uY2F0KHRoaXMuc3VmZml4KTtcbiAgICAgIHRoaXMucmVnZXhwID0gbmV3IFJlZ0V4cChyZWdleHBTdHIsICdnJyk7XG4gICAgICB2YXIgcmVnZXhwVW5lc2NhcGVTdHIgPSBcIlwiLmNvbmNhdCh0aGlzLnByZWZpeCkuY29uY2F0KHRoaXMudW5lc2NhcGVQcmVmaXgsIFwiKC4rPylcIikuY29uY2F0KHRoaXMudW5lc2NhcGVTdWZmaXgpLmNvbmNhdCh0aGlzLnN1ZmZpeCk7XG4gICAgICB0aGlzLnJlZ2V4cFVuZXNjYXBlID0gbmV3IFJlZ0V4cChyZWdleHBVbmVzY2FwZVN0ciwgJ2cnKTtcbiAgICAgIHZhciBuZXN0aW5nUmVnZXhwU3RyID0gXCJcIi5jb25jYXQodGhpcy5uZXN0aW5nUHJlZml4LCBcIiguKz8pXCIpLmNvbmNhdCh0aGlzLm5lc3RpbmdTdWZmaXgpO1xuICAgICAgdGhpcy5uZXN0aW5nUmVnZXhwID0gbmV3IFJlZ0V4cChuZXN0aW5nUmVnZXhwU3RyLCAnZycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbnRlcnBvbGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdHIsIGRhdGEsIGxuZywgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG1hdGNoO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgdmFyIHJlcGxhY2VzO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uICYmIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmRlZmF1bHRWYXJpYWJsZXMgfHwge307XG5cbiAgICAgIGZ1bmN0aW9uIHJlZ2V4U2FmZSh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5yZXBsYWNlKC9cXCQvZywgJyQkJCQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhhbmRsZUZvcm1hdCA9IGZ1bmN0aW9uIGhhbmRsZUZvcm1hdChrZXkpIHtcbiAgICAgICAgaWYgKGtleS5pbmRleE9mKF90aGlzLmZvcm1hdFNlcGFyYXRvcikgPCAwKSB7XG4gICAgICAgICAgdmFyIHBhdGggPSBnZXRQYXRoV2l0aERlZmF1bHRzKGRhdGEsIGRlZmF1bHREYXRhLCBrZXkpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5hbHdheXNGb3JtYXQgPyBfdGhpcy5mb3JtYXQocGF0aCwgdW5kZWZpbmVkLCBsbmcsIF9vYmplY3RTcHJlYWQkMyhfb2JqZWN0U3ByZWFkJDMoX29iamVjdFNwcmVhZCQzKHt9LCBvcHRpb25zKSwgZGF0YSksIHt9LCB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0aW9ua2V5OiBrZXlcbiAgICAgICAgICB9KSkgOiBwYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHAgPSBrZXkuc3BsaXQoX3RoaXMuZm9ybWF0U2VwYXJhdG9yKTtcbiAgICAgICAgdmFyIGsgPSBwLnNoaWZ0KCkudHJpbSgpO1xuICAgICAgICB2YXIgZiA9IHAuam9pbihfdGhpcy5mb3JtYXRTZXBhcmF0b3IpLnRyaW0oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZvcm1hdChnZXRQYXRoV2l0aERlZmF1bHRzKGRhdGEsIGRlZmF1bHREYXRhLCBrKSwgZiwgbG5nLCBfb2JqZWN0U3ByZWFkJDMoX29iamVjdFNwcmVhZCQzKF9vYmplY3RTcHJlYWQkMyh7fSwgb3B0aW9ucyksIGRhdGEpLCB7fSwge1xuICAgICAgICAgIGludGVycG9sYXRpb25rZXk6IGtcbiAgICAgICAgfSkpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldFJlZ0V4cCgpO1xuICAgICAgdmFyIG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5taXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIgfHwgdGhpcy5vcHRpb25zLm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcjtcbiAgICAgIHZhciBza2lwT25WYXJpYWJsZXMgPSBvcHRpb25zICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbiAmJiBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzIDogdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uc2tpcE9uVmFyaWFibGVzO1xuICAgICAgdmFyIHRvZG9zID0gW3tcbiAgICAgICAgcmVnZXg6IHRoaXMucmVnZXhwVW5lc2NhcGUsXG4gICAgICAgIHNhZmVWYWx1ZTogZnVuY3Rpb24gc2FmZVZhbHVlKHZhbCkge1xuICAgICAgICAgIHJldHVybiByZWdleFNhZmUodmFsKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICByZWdleDogdGhpcy5yZWdleHAsXG4gICAgICAgIHNhZmVWYWx1ZTogZnVuY3Rpb24gc2FmZVZhbHVlKHZhbCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5lc2NhcGVWYWx1ZSA/IHJlZ2V4U2FmZShfdGhpcy5lc2NhcGUodmFsKSkgOiByZWdleFNhZmUodmFsKTtcbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgICB0b2Rvcy5mb3JFYWNoKGZ1bmN0aW9uICh0b2RvKSB7XG4gICAgICAgIHJlcGxhY2VzID0gMDtcblxuICAgICAgICB3aGlsZSAobWF0Y2ggPSB0b2RvLnJlZ2V4LmV4ZWMoc3RyKSkge1xuICAgICAgICAgIHZhciBtYXRjaGVkVmFyID0gbWF0Y2hbMV0udHJpbSgpO1xuICAgICAgICAgIHZhbHVlID0gaGFuZGxlRm9ybWF0KG1hdGNoZWRWYXIpO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHZhciB0ZW1wID0gbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyKHN0ciwgbWF0Y2gsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICB2YWx1ZSA9IHR5cGVvZiB0ZW1wID09PSAnc3RyaW5nJyA/IHRlbXAgOiAnJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KG1hdGNoZWRWYXIpKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNraXBPblZhcmlhYmxlcykge1xuICAgICAgICAgICAgICB2YWx1ZSA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF90aGlzLmxvZ2dlci53YXJuKFwibWlzc2VkIHRvIHBhc3MgaW4gdmFyaWFibGUgXCIuY29uY2F0KG1hdGNoZWRWYXIsIFwiIGZvciBpbnRlcnBvbGF0aW5nIFwiKS5jb25jYXQoc3RyKSk7XG5cbiAgICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgIV90aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gbWFrZVN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNhZmVWYWx1ZSA9IHRvZG8uc2FmZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShtYXRjaFswXSwgc2FmZVZhbHVlKTtcblxuICAgICAgICAgIGlmIChza2lwT25WYXJpYWJsZXMpIHtcbiAgICAgICAgICAgIHRvZG8ucmVnZXgubGFzdEluZGV4ICs9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgIHRvZG8ucmVnZXgubGFzdEluZGV4IC09IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9kby5yZWdleC5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlcGxhY2VzKys7XG5cbiAgICAgICAgICBpZiAocmVwbGFjZXMgPj0gX3RoaXMubWF4UmVwbGFjZXMpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJuZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5lc3Qoc3RyLCBmYykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHZhciBtYXRjaDtcbiAgICAgIHZhciB2YWx1ZTtcblxuICAgICAgdmFyIGNsb25lZE9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkJDMoe30sIG9wdGlvbnMpO1xuXG4gICAgICBjbG9uZWRPcHRpb25zLmFwcGx5UG9zdFByb2Nlc3NvciA9IGZhbHNlO1xuICAgICAgZGVsZXRlIGNsb25lZE9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVIYXNPcHRpb25zKGtleSwgaW5oZXJpdGVkT3B0aW9ucykge1xuICAgICAgICB2YXIgc2VwID0gdGhpcy5uZXN0aW5nT3B0aW9uc1NlcGFyYXRvcjtcbiAgICAgICAgaWYgKGtleS5pbmRleE9mKHNlcCkgPCAwKSByZXR1cm4ga2V5O1xuICAgICAgICB2YXIgYyA9IGtleS5zcGxpdChuZXcgUmVnRXhwKFwiXCIuY29uY2F0KHNlcCwgXCJbIF0qe1wiKSkpO1xuICAgICAgICB2YXIgb3B0aW9uc1N0cmluZyA9IFwie1wiLmNvbmNhdChjWzFdKTtcbiAgICAgICAga2V5ID0gY1swXTtcbiAgICAgICAgb3B0aW9uc1N0cmluZyA9IHRoaXMuaW50ZXJwb2xhdGUob3B0aW9uc1N0cmluZywgY2xvbmVkT3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnNTdHJpbmcgPSBvcHRpb25zU3RyaW5nLnJlcGxhY2UoLycvZywgJ1wiJyk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbG9uZWRPcHRpb25zID0gSlNPTi5wYXJzZShvcHRpb25zU3RyaW5nKTtcbiAgICAgICAgICBpZiAoaW5oZXJpdGVkT3B0aW9ucykgY2xvbmVkT3B0aW9ucyA9IF9vYmplY3RTcHJlYWQkMyhfb2JqZWN0U3ByZWFkJDMoe30sIGluaGVyaXRlZE9wdGlvbnMpLCBjbG9uZWRPcHRpb25zKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJmYWlsZWQgcGFyc2luZyBvcHRpb25zIHN0cmluZyBpbiBuZXN0aW5nIGZvciBrZXkgXCIuY29uY2F0KGtleSksIGUpO1xuICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChrZXkpLmNvbmNhdChzZXApLmNvbmNhdChvcHRpb25zU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBjbG9uZWRPcHRpb25zLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKG1hdGNoID0gdGhpcy5uZXN0aW5nUmVnZXhwLmV4ZWMoc3RyKSkge1xuICAgICAgICB2YXIgZm9ybWF0dGVycyA9IFtdO1xuICAgICAgICB2YXIgZG9SZWR1Y2UgPSBmYWxzZTtcblxuICAgICAgICBpZiAobWF0Y2hbMF0uaW5kZXhPZih0aGlzLmZvcm1hdFNlcGFyYXRvcikgIT09IC0xICYmICEvey4qfS8udGVzdChtYXRjaFsxXSkpIHtcbiAgICAgICAgICB2YXIgciA9IG1hdGNoWzFdLnNwbGl0KHRoaXMuZm9ybWF0U2VwYXJhdG9yKS5tYXAoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLnRyaW0oKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBtYXRjaFsxXSA9IHIuc2hpZnQoKTtcbiAgICAgICAgICBmb3JtYXR0ZXJzID0gcjtcbiAgICAgICAgICBkb1JlZHVjZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSA9IGZjKGhhbmRsZUhhc09wdGlvbnMuY2FsbCh0aGlzLCBtYXRjaFsxXS50cmltKCksIGNsb25lZE9wdGlvbnMpLCBjbG9uZWRPcHRpb25zKTtcbiAgICAgICAgaWYgKHZhbHVlICYmIG1hdGNoWzBdID09PSBzdHIgJiYgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgdmFsdWUgPSBtYWtlU3RyaW5nKHZhbHVlKTtcblxuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcIm1pc3NlZCB0byByZXNvbHZlIFwiLmNvbmNhdChtYXRjaFsxXSwgXCIgZm9yIG5lc3RpbmcgXCIpLmNvbmNhdChzdHIpKTtcbiAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvUmVkdWNlKSB7XG4gICAgICAgICAgdmFsdWUgPSBmb3JtYXR0ZXJzLnJlZHVjZShmdW5jdGlvbiAodiwgZikge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5mb3JtYXQodiwgZiwgb3B0aW9ucy5sbmcsIF9vYmplY3RTcHJlYWQkMyhfb2JqZWN0U3ByZWFkJDMoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgICAgICAgICAgICBpbnRlcnBvbGF0aW9ua2V5OiBtYXRjaFsxXS50cmltKClcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9LCB2YWx1ZS50cmltKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHZhbHVlKTtcbiAgICAgICAgdGhpcy5yZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSW50ZXJwb2xhdG9yO1xufSgpO1xuXG5mdW5jdGlvbiBvd25LZXlzJDQob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHsgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyB9IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkJDQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyQ0KE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMkNChPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gcGFyc2VGb3JtYXRTdHIoZm9ybWF0U3RyKSB7XG4gIHZhciBmb3JtYXROYW1lID0gZm9ybWF0U3RyLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICB2YXIgZm9ybWF0T3B0aW9ucyA9IHt9O1xuXG4gIGlmIChmb3JtYXRTdHIuaW5kZXhPZignKCcpID4gLTEpIHtcbiAgICB2YXIgcCA9IGZvcm1hdFN0ci5zcGxpdCgnKCcpO1xuICAgIGZvcm1hdE5hbWUgPSBwWzBdLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIHZhciBvcHRTdHIgPSBwWzFdLnN1YnN0cmluZygwLCBwWzFdLmxlbmd0aCAtIDEpO1xuXG4gICAgaWYgKGZvcm1hdE5hbWUgPT09ICdjdXJyZW5jeScgJiYgb3B0U3RyLmluZGV4T2YoJzonKSA8IDApIHtcbiAgICAgIGlmICghZm9ybWF0T3B0aW9ucy5jdXJyZW5jeSkgZm9ybWF0T3B0aW9ucy5jdXJyZW5jeSA9IG9wdFN0ci50cmltKCk7XG4gICAgfSBlbHNlIGlmIChmb3JtYXROYW1lID09PSAncmVsYXRpdmV0aW1lJyAmJiBvcHRTdHIuaW5kZXhPZignOicpIDwgMCkge1xuICAgICAgaWYgKCFmb3JtYXRPcHRpb25zLnJhbmdlKSBmb3JtYXRPcHRpb25zLnJhbmdlID0gb3B0U3RyLnRyaW0oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9wdHMgPSBvcHRTdHIuc3BsaXQoJzsnKTtcbiAgICAgIG9wdHMuZm9yRWFjaChmdW5jdGlvbiAob3B0KSB7XG4gICAgICAgIGlmICghb3B0KSByZXR1cm47XG5cbiAgICAgICAgdmFyIF9vcHQkc3BsaXQgPSBvcHQuc3BsaXQoJzonKSxcbiAgICAgICAgICAgIF9vcHQkc3BsaXQyID0gX3RvQXJyYXkoX29wdCRzcGxpdCksXG4gICAgICAgICAgICBrZXkgPSBfb3B0JHNwbGl0MlswXSxcbiAgICAgICAgICAgIHJlc3QgPSBfb3B0JHNwbGl0Mi5zbGljZSgxKTtcblxuICAgICAgICB2YXIgdmFsID0gcmVzdC5qb2luKCc6JykudHJpbSgpLnJlcGxhY2UoL14nK3wnKyQvZywgJycpO1xuICAgICAgICBpZiAoIWZvcm1hdE9wdGlvbnNba2V5LnRyaW0oKV0pIGZvcm1hdE9wdGlvbnNba2V5LnRyaW0oKV0gPSB2YWw7XG4gICAgICAgIGlmICh2YWwgPT09ICdmYWxzZScpIGZvcm1hdE9wdGlvbnNba2V5LnRyaW0oKV0gPSBmYWxzZTtcbiAgICAgICAgaWYgKHZhbCA9PT0gJ3RydWUnKSBmb3JtYXRPcHRpb25zW2tleS50cmltKCldID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpc05hTih2YWwpKSBmb3JtYXRPcHRpb25zW2tleS50cmltKCldID0gcGFyc2VJbnQodmFsLCAxMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdE5hbWU6IGZvcm1hdE5hbWUsXG4gICAgZm9ybWF0T3B0aW9uczogZm9ybWF0T3B0aW9uc1xuICB9O1xufVxuXG52YXIgRm9ybWF0dGVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGb3JtYXR0ZXIoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm1hdHRlcik7XG5cbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdmb3JtYXR0ZXInKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZm9ybWF0cyA9IHtcbiAgICAgIG51bWJlcjogZnVuY3Rpb24gbnVtYmVyKHZhbCwgbG5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG5nLCBvcHRpb25zKS5mb3JtYXQodmFsKTtcbiAgICAgIH0sXG4gICAgICBjdXJyZW5jeTogZnVuY3Rpb24gY3VycmVuY3kodmFsLCBsbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdChsbmcsIF9vYmplY3RTcHJlYWQkNChfb2JqZWN0U3ByZWFkJDQoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgICAgICAgIHN0eWxlOiAnY3VycmVuY3knXG4gICAgICAgIH0pKS5mb3JtYXQodmFsKTtcbiAgICAgIH0sXG4gICAgICBkYXRldGltZTogZnVuY3Rpb24gZGF0ZXRpbWUodmFsLCBsbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxuZywgX29iamVjdFNwcmVhZCQ0KHt9LCBvcHRpb25zKSkuZm9ybWF0KHZhbCk7XG4gICAgICB9LFxuICAgICAgcmVsYXRpdmV0aW1lOiBmdW5jdGlvbiByZWxhdGl2ZXRpbWUodmFsLCBsbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdChsbmcsIF9vYmplY3RTcHJlYWQkNCh7fSwgb3B0aW9ucykpLmZvcm1hdCh2YWwsIG9wdGlvbnMucmFuZ2UgfHwgJ2RheScpO1xuICAgICAgfSxcbiAgICAgIGxpc3Q6IGZ1bmN0aW9uIGxpc3QodmFsLCBsbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLkxpc3RGb3JtYXQobG5nLCBfb2JqZWN0U3ByZWFkJDQoe30sIG9wdGlvbnMpKS5mb3JtYXQodmFsKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuaW5pdChvcHRpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGb3JtYXR0ZXIsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChzZXJ2aWNlcykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge31cbiAgICAgIH07XG4gICAgICB2YXIgaU9wdHMgPSBvcHRpb25zLmludGVycG9sYXRpb247XG4gICAgICB0aGlzLmZvcm1hdFNlcGFyYXRvciA9IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA/IGlPcHRzLmZvcm1hdFNlcGFyYXRvciA6IGlPcHRzLmZvcm1hdFNlcGFyYXRvciB8fCAnLCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQobmFtZSwgZmMpIHtcbiAgICAgIHRoaXMuZm9ybWF0c1tuYW1lLnRvTG93ZXJDYXNlKCkudHJpbSgpXSA9IGZjO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JtYXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KHZhbHVlLCBfZm9ybWF0LCBsbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBmb3JtYXRzID0gX2Zvcm1hdC5zcGxpdCh0aGlzLmZvcm1hdFNlcGFyYXRvcik7XG5cbiAgICAgIHZhciByZXN1bHQgPSBmb3JtYXRzLnJlZHVjZShmdW5jdGlvbiAobWVtLCBmKSB7XG4gICAgICAgIHZhciBfcGFyc2VGb3JtYXRTdHIgPSBwYXJzZUZvcm1hdFN0cihmKSxcbiAgICAgICAgICAgIGZvcm1hdE5hbWUgPSBfcGFyc2VGb3JtYXRTdHIuZm9ybWF0TmFtZSxcbiAgICAgICAgICAgIGZvcm1hdE9wdGlvbnMgPSBfcGFyc2VGb3JtYXRTdHIuZm9ybWF0T3B0aW9ucztcblxuICAgICAgICBpZiAoX3RoaXMuZm9ybWF0c1tmb3JtYXROYW1lXSkge1xuICAgICAgICAgIHZhciBmb3JtYXR0ZWQgPSBtZW07XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHZhbE9wdGlvbnMgPSBvcHRpb25zICYmIG9wdGlvbnMuZm9ybWF0UGFyYW1zICYmIG9wdGlvbnMuZm9ybWF0UGFyYW1zW29wdGlvbnMuaW50ZXJwb2xhdGlvbmtleV0gfHwge307XG4gICAgICAgICAgICB2YXIgbCA9IHZhbE9wdGlvbnMubG9jYWxlIHx8IHZhbE9wdGlvbnMubG5nIHx8IG9wdGlvbnMubG9jYWxlIHx8IG9wdGlvbnMubG5nIHx8IGxuZztcbiAgICAgICAgICAgIGZvcm1hdHRlZCA9IF90aGlzLmZvcm1hdHNbZm9ybWF0TmFtZV0obWVtLCBsLCBfb2JqZWN0U3ByZWFkJDQoX29iamVjdFNwcmVhZCQ0KF9vYmplY3RTcHJlYWQkNCh7fSwgZm9ybWF0T3B0aW9ucyksIG9wdGlvbnMpLCB2YWxPcHRpb25zKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzLmxvZ2dlci53YXJuKGVycm9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmxvZ2dlci53YXJuKFwidGhlcmUgd2FzIG5vIGZvcm1hdCBmdW5jdGlvbiBmb3IgXCIuY29uY2F0KGZvcm1hdE5hbWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZW07XG4gICAgICB9LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGb3JtYXR0ZXI7XG59KCk7XG5cbmZ1bmN0aW9uIG93bktleXMkNShvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQkNSh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzJDUoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyQ1KE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIkMihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQyKCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQyKCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gcmVtb3ZlUGVuZGluZyhxLCBuYW1lKSB7XG4gIGlmIChxLnBlbmRpbmdbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSBxLnBlbmRpbmdbbmFtZV07XG4gICAgcS5wZW5kaW5nQ291bnQtLTtcbiAgfVxufVxuXG52YXIgQ29ubmVjdG9yID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKENvbm5lY3RvciwgX0V2ZW50RW1pdHRlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlciQyKENvbm5lY3Rvcik7XG5cbiAgZnVuY3Rpb24gQ29ubmVjdG9yKGJhY2tlbmQsIHN0b3JlLCBzZXJ2aWNlcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0b3IpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcblxuICAgIGlmIChpc0lFMTApIHtcbiAgICAgIEV2ZW50RW1pdHRlci5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB9XG5cbiAgICBfdGhpcy5iYWNrZW5kID0gYmFja2VuZDtcbiAgICBfdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIF90aGlzLnNlcnZpY2VzID0gc2VydmljZXM7XG4gICAgX3RoaXMubGFuZ3VhZ2VVdGlscyA9IHNlcnZpY2VzLmxhbmd1YWdlVXRpbHM7XG4gICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgX3RoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2JhY2tlbmRDb25uZWN0b3InKTtcbiAgICBfdGhpcy53YWl0aW5nUmVhZHMgPSBbXTtcbiAgICBfdGhpcy5tYXhQYXJhbGxlbFJlYWRzID0gb3B0aW9ucy5tYXhQYXJhbGxlbFJlYWRzIHx8IDEwO1xuICAgIF90aGlzLnJlYWRpbmdDYWxscyA9IDA7XG4gICAgX3RoaXMubWF4UmV0cmllcyA9IG9wdGlvbnMubWF4UmV0cmllcyA+PSAwID8gb3B0aW9ucy5tYXhSZXRyaWVzIDogNTtcbiAgICBfdGhpcy5yZXRyeVRpbWVvdXQgPSBvcHRpb25zLnJldHJ5VGltZW91dCA+PSAxID8gb3B0aW9ucy5yZXRyeVRpbWVvdXQgOiAzNTA7XG4gICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICBfdGhpcy5xdWV1ZSA9IFtdO1xuXG4gICAgaWYgKF90aGlzLmJhY2tlbmQgJiYgX3RoaXMuYmFja2VuZC5pbml0KSB7XG4gICAgICBfdGhpcy5iYWNrZW5kLmluaXQoc2VydmljZXMsIG9wdGlvbnMuYmFja2VuZCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbm5lY3RvciwgW3tcbiAgICBrZXk6IFwicXVldWVMb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHF1ZXVlTG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHRvTG9hZCA9IHt9O1xuICAgICAgdmFyIHBlbmRpbmcgPSB7fTtcbiAgICAgIHZhciB0b0xvYWRMYW5ndWFnZXMgPSB7fTtcbiAgICAgIHZhciB0b0xvYWROYW1lc3BhY2VzID0ge307XG4gICAgICBsYW5ndWFnZXMuZm9yRWFjaChmdW5jdGlvbiAobG5nKSB7XG4gICAgICAgIHZhciBoYXNBbGxOYW1lc3BhY2VzID0gdHJ1ZTtcbiAgICAgICAgbmFtZXNwYWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChucykge1xuICAgICAgICAgIHZhciBuYW1lID0gXCJcIi5jb25jYXQobG5nLCBcInxcIikuY29uY2F0KG5zKTtcblxuICAgICAgICAgIGlmICghb3B0aW9ucy5yZWxvYWQgJiYgX3RoaXMyLnN0b3JlLmhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpKSB7XG4gICAgICAgICAgICBfdGhpczIuc3RhdGVbbmFtZV0gPSAyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMyLnN0YXRlW25hbWVdIDwgMCkgOyBlbHNlIGlmIChfdGhpczIuc3RhdGVbbmFtZV0gPT09IDEpIHtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nW25hbWVdID09PSB1bmRlZmluZWQpIHBlbmRpbmdbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczIuc3RhdGVbbmFtZV0gPSAxO1xuICAgICAgICAgICAgaGFzQWxsTmFtZXNwYWNlcyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBlbmRpbmdbbmFtZV0gPT09IHVuZGVmaW5lZCkgcGVuZGluZ1tuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICBpZiAodG9Mb2FkW25hbWVdID09PSB1bmRlZmluZWQpIHRvTG9hZFtuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICBpZiAodG9Mb2FkTmFtZXNwYWNlc1tuc10gPT09IHVuZGVmaW5lZCkgdG9Mb2FkTmFtZXNwYWNlc1tuc10gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaGFzQWxsTmFtZXNwYWNlcykgdG9Mb2FkTGFuZ3VhZ2VzW2xuZ10gPSB0cnVlO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyh0b0xvYWQpLmxlbmd0aCB8fCBPYmplY3Qua2V5cyhwZW5kaW5nKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKHtcbiAgICAgICAgICBwZW5kaW5nOiBwZW5kaW5nLFxuICAgICAgICAgIHBlbmRpbmdDb3VudDogT2JqZWN0LmtleXMocGVuZGluZykubGVuZ3RoLFxuICAgICAgICAgIGxvYWRlZDoge30sXG4gICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvTG9hZDogT2JqZWN0LmtleXModG9Mb2FkKSxcbiAgICAgICAgcGVuZGluZzogT2JqZWN0LmtleXMocGVuZGluZyksXG4gICAgICAgIHRvTG9hZExhbmd1YWdlczogT2JqZWN0LmtleXModG9Mb2FkTGFuZ3VhZ2VzKSxcbiAgICAgICAgdG9Mb2FkTmFtZXNwYWNlczogT2JqZWN0LmtleXModG9Mb2FkTmFtZXNwYWNlcylcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkZWQobmFtZSwgZXJyLCBkYXRhKSB7XG4gICAgICB2YXIgcyA9IG5hbWUuc3BsaXQoJ3wnKTtcbiAgICAgIHZhciBsbmcgPSBzWzBdO1xuICAgICAgdmFyIG5zID0gc1sxXTtcbiAgICAgIGlmIChlcnIpIHRoaXMuZW1pdCgnZmFpbGVkTG9hZGluZycsIGxuZywgbnMsIGVycik7XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHRoaXMuc3RvcmUuYWRkUmVzb3VyY2VCdW5kbGUobG5nLCBucywgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhdGVbbmFtZV0gPSBlcnIgPyAtMSA6IDI7XG4gICAgICB2YXIgbG9hZGVkID0ge307XG4gICAgICB0aGlzLnF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKHEpIHtcbiAgICAgICAgcHVzaFBhdGgocS5sb2FkZWQsIFtsbmddLCBucyk7XG4gICAgICAgIHJlbW92ZVBlbmRpbmcocSwgbmFtZSk7XG4gICAgICAgIGlmIChlcnIpIHEuZXJyb3JzLnB1c2goZXJyKTtcblxuICAgICAgICBpZiAocS5wZW5kaW5nQ291bnQgPT09IDAgJiYgIXEuZG9uZSkge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHEubG9hZGVkKS5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICBpZiAoIWxvYWRlZFtsXSkgbG9hZGVkW2xdID0ge307XG4gICAgICAgICAgICB2YXIgbG9hZGVkS2V5cyA9IHEubG9hZGVkW2xdO1xuXG4gICAgICAgICAgICBpZiAobG9hZGVkS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbG9hZGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChucykge1xuICAgICAgICAgICAgICAgIGlmIChsb2FkZWRbbF1bbnNdID09PSB1bmRlZmluZWQpIGxvYWRlZFtsXVtuc10gPSB0cnVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBxLmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHEuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgcS5jYWxsYmFjayhxLmVycm9ycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHEuY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KCdsb2FkZWQnLCBsb2FkZWQpO1xuICAgICAgdGhpcy5xdWV1ZSA9IHRoaXMucXVldWUuZmlsdGVyKGZ1bmN0aW9uIChxKSB7XG4gICAgICAgIHJldHVybiAhcS5kb25lO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZChsbmcsIG5zLCBmY05hbWUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJpZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gICAgICB2YXIgd2FpdCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogdGhpcy5yZXRyeVRpbWVvdXQ7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmICghbG5nLmxlbmd0aCkgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHt9KTtcblxuICAgICAgaWYgKHRoaXMucmVhZGluZ0NhbGxzID49IHRoaXMubWF4UGFyYWxsZWxSZWFkcykge1xuICAgICAgICB0aGlzLndhaXRpbmdSZWFkcy5wdXNoKHtcbiAgICAgICAgICBsbmc6IGxuZyxcbiAgICAgICAgICBuczogbnMsXG4gICAgICAgICAgZmNOYW1lOiBmY05hbWUsXG4gICAgICAgICAgdHJpZWQ6IHRyaWVkLFxuICAgICAgICAgIHdhaXQ6IHdhaXQsXG4gICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVhZGluZ0NhbGxzKys7XG4gICAgICByZXR1cm4gdGhpcy5iYWNrZW5kW2ZjTmFtZV0obG5nLCBucywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICBfdGhpczMucmVhZGluZ0NhbGxzLS07XG5cbiAgICAgICAgaWYgKF90aGlzMy53YWl0aW5nUmVhZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gX3RoaXMzLndhaXRpbmdSZWFkcy5zaGlmdCgpO1xuXG4gICAgICAgICAgX3RoaXMzLnJlYWQobmV4dC5sbmcsIG5leHQubnMsIG5leHQuZmNOYW1lLCBuZXh0LnRyaWVkLCBuZXh0LndhaXQsIG5leHQuY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVyciAmJiBkYXRhICYmIHRyaWVkIDwgX3RoaXMzLm1heFJldHJpZXMpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMy5yZWFkLmNhbGwoX3RoaXMzLCBsbmcsIG5zLCBmY05hbWUsIHRyaWVkICsgMSwgd2FpdCAqIDIsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9LCB3YWl0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhlcnIsIGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInByZXBhcmVMb2FkaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcykge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoIXRoaXMuYmFja2VuZCkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdObyBiYWNrZW5kIHdhcyBhZGRlZCB2aWEgaTE4bmV4dC51c2UuIFdpbGwgbm90IGxvYWQgcmVzb3VyY2VzLicpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXMgPT09ICdzdHJpbmcnKSBsYW5ndWFnZXMgPSB0aGlzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KGxhbmd1YWdlcyk7XG4gICAgICBpZiAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnKSBuYW1lc3BhY2VzID0gW25hbWVzcGFjZXNdO1xuICAgICAgdmFyIHRvTG9hZCA9IHRoaXMucXVldWVMb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgb3B0aW9ucywgY2FsbGJhY2spO1xuXG4gICAgICBpZiAoIXRvTG9hZC50b0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIGlmICghdG9Mb2FkLnBlbmRpbmcubGVuZ3RoKSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdG9Mb2FkLnRvTG9hZC5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIF90aGlzNC5sb2FkT25lKG5hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcywge30sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbG9hZChsYW5ndWFnZXMsIG5hbWVzcGFjZXMsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcywge1xuICAgICAgICByZWxvYWQ6IHRydWVcbiAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZE9uZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkT25lKG5hbWUpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgcHJlZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgICAgIHZhciBzID0gbmFtZS5zcGxpdCgnfCcpO1xuICAgICAgdmFyIGxuZyA9IHNbMF07XG4gICAgICB2YXIgbnMgPSBzWzFdO1xuICAgICAgdGhpcy5yZWFkKGxuZywgbnMsICdyZWFkJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgICAgaWYgKGVycikgX3RoaXM1LmxvZ2dlci53YXJuKFwiXCIuY29uY2F0KHByZWZpeCwgXCJsb2FkaW5nIG5hbWVzcGFjZSBcIikuY29uY2F0KG5zLCBcIiBmb3IgbGFuZ3VhZ2UgXCIpLmNvbmNhdChsbmcsIFwiIGZhaWxlZFwiKSwgZXJyKTtcbiAgICAgICAgaWYgKCFlcnIgJiYgZGF0YSkgX3RoaXM1LmxvZ2dlci5sb2coXCJcIi5jb25jYXQocHJlZml4LCBcImxvYWRlZCBuYW1lc3BhY2UgXCIpLmNvbmNhdChucywgXCIgZm9yIGxhbmd1YWdlIFwiKS5jb25jYXQobG5nKSwgZGF0YSk7XG5cbiAgICAgICAgX3RoaXM1LmxvYWRlZChuYW1lLCBlcnIsIGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNhdmVNaXNzaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVNaXNzaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUsIGlzVXBkYXRlKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDoge307XG5cbiAgICAgIGlmICh0aGlzLnNlcnZpY2VzLnV0aWxzICYmIHRoaXMuc2VydmljZXMudXRpbHMuaGFzTG9hZGVkTmFtZXNwYWNlICYmICF0aGlzLnNlcnZpY2VzLnV0aWxzLmhhc0xvYWRlZE5hbWVzcGFjZShuYW1lc3BhY2UpKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJkaWQgbm90IHNhdmUga2V5IFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIgYXMgdGhlIG5hbWVzcGFjZSBcXFwiXCIpLmNvbmNhdChuYW1lc3BhY2UsIFwiXFxcIiB3YXMgbm90IHlldCBsb2FkZWRcIiksICdUaGlzIG1lYW5zIHNvbWV0aGluZyBJUyBXUk9ORyBpbiB5b3VyIHNldHVwLiBZb3UgYWNjZXNzIHRoZSB0IGZ1bmN0aW9uIGJlZm9yZSBpMThuZXh0LmluaXQgLyBpMThuZXh0LmxvYWROYW1lc3BhY2UgLyBpMThuZXh0LmNoYW5nZUxhbmd1YWdlIHdhcyBkb25lLiBXYWl0IGZvciB0aGUgY2FsbGJhY2sgb3IgUHJvbWlzZSB0byByZXNvbHZlIGJlZm9yZSBhY2Nlc3NpbmcgaXQhISEnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwga2V5ID09PSBudWxsIHx8IGtleSA9PT0gJycpIHJldHVybjtcblxuICAgICAgaWYgKHRoaXMuYmFja2VuZCAmJiB0aGlzLmJhY2tlbmQuY3JlYXRlKSB7XG4gICAgICAgIHRoaXMuYmFja2VuZC5jcmVhdGUobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSwgbnVsbCwgX29iamVjdFNwcmVhZCQ1KF9vYmplY3RTcHJlYWQkNSh7fSwgb3B0aW9ucyksIHt9LCB7XG4gICAgICAgICAgaXNVcGRhdGU6IGlzVXBkYXRlXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFsYW5ndWFnZXMgfHwgIWxhbmd1YWdlc1swXSkgcmV0dXJuO1xuICAgICAgdGhpcy5zdG9yZS5hZGRSZXNvdXJjZShsYW5ndWFnZXNbMF0sIG5hbWVzcGFjZSwga2V5LCBmYWxsYmFja1ZhbHVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29ubmVjdG9yO1xufShFdmVudEVtaXR0ZXIpO1xuXG5mdW5jdGlvbiBnZXQoKSB7XG4gIHJldHVybiB7XG4gICAgZGVidWc6IGZhbHNlLFxuICAgIGluaXRJbW1lZGlhdGU6IHRydWUsXG4gICAgbnM6IFsndHJhbnNsYXRpb24nXSxcbiAgICBkZWZhdWx0TlM6IFsndHJhbnNsYXRpb24nXSxcbiAgICBmYWxsYmFja0xuZzogWydkZXYnXSxcbiAgICBmYWxsYmFja05TOiBmYWxzZSxcbiAgICBzdXBwb3J0ZWRMbmdzOiBmYWxzZSxcbiAgICBub25FeHBsaWNpdFN1cHBvcnRlZExuZ3M6IGZhbHNlLFxuICAgIGxvYWQ6ICdhbGwnLFxuICAgIHByZWxvYWQ6IGZhbHNlLFxuICAgIHNpbXBsaWZ5UGx1cmFsU3VmZml4OiB0cnVlLFxuICAgIGtleVNlcGFyYXRvcjogJy4nLFxuICAgIG5zU2VwYXJhdG9yOiAnOicsXG4gICAgcGx1cmFsU2VwYXJhdG9yOiAnXycsXG4gICAgY29udGV4dFNlcGFyYXRvcjogJ18nLFxuICAgIHBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzOiBmYWxzZSxcbiAgICBzYXZlTWlzc2luZzogZmFsc2UsXG4gICAgdXBkYXRlTWlzc2luZzogZmFsc2UsXG4gICAgc2F2ZU1pc3NpbmdUbzogJ2ZhbGxiYWNrJyxcbiAgICBzYXZlTWlzc2luZ1BsdXJhbHM6IHRydWUsXG4gICAgbWlzc2luZ0tleUhhbmRsZXI6IGZhbHNlLFxuICAgIG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcjogZmFsc2UsXG4gICAgcG9zdFByb2Nlc3M6IGZhbHNlLFxuICAgIHBvc3RQcm9jZXNzUGFzc1Jlc29sdmVkOiBmYWxzZSxcbiAgICByZXR1cm5OdWxsOiB0cnVlLFxuICAgIHJldHVybkVtcHR5U3RyaW5nOiB0cnVlLFxuICAgIHJldHVybk9iamVjdHM6IGZhbHNlLFxuICAgIGpvaW5BcnJheXM6IGZhbHNlLFxuICAgIHJldHVybmVkT2JqZWN0SGFuZGxlcjogZmFsc2UsXG4gICAgcGFyc2VNaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsXG4gICAgYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5OiBmYWxzZSxcbiAgICBhcHBlbmROYW1lc3BhY2VUb0NJTW9kZTogZmFsc2UsXG4gICAgb3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZShhcmdzKSB7XG4gICAgICB2YXIgcmV0ID0ge307XG4gICAgICBpZiAoX3R5cGVvZihhcmdzWzFdKSA9PT0gJ29iamVjdCcpIHJldCA9IGFyZ3NbMV07XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnKSByZXQuZGVmYXVsdFZhbHVlID0gYXJnc1sxXTtcbiAgICAgIGlmICh0eXBlb2YgYXJnc1syXSA9PT0gJ3N0cmluZycpIHJldC50RGVzY3JpcHRpb24gPSBhcmdzWzJdO1xuXG4gICAgICBpZiAoX3R5cGVvZihhcmdzWzJdKSA9PT0gJ29iamVjdCcgfHwgX3R5cGVvZihhcmdzWzNdKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzWzNdIHx8IGFyZ3NbMl07XG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldFtrZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuICAgIGludGVycG9sYXRpb246IHtcbiAgICAgIGVzY2FwZVZhbHVlOiB0cnVlLFxuICAgICAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIF9mb3JtYXQsIGxuZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LFxuICAgICAgcHJlZml4OiAne3snLFxuICAgICAgc3VmZml4OiAnfX0nLFxuICAgICAgZm9ybWF0U2VwYXJhdG9yOiAnLCcsXG4gICAgICB1bmVzY2FwZVByZWZpeDogJy0nLFxuICAgICAgbmVzdGluZ1ByZWZpeDogJyR0KCcsXG4gICAgICBuZXN0aW5nU3VmZml4OiAnKScsXG4gICAgICBuZXN0aW5nT3B0aW9uc1NlcGFyYXRvcjogJywnLFxuICAgICAgbWF4UmVwbGFjZXM6IDEwMDAsXG4gICAgICBza2lwT25WYXJpYWJsZXM6IHRydWVcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLm5zID09PSAnc3RyaW5nJykgb3B0aW9ucy5ucyA9IFtvcHRpb25zLm5zXTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrTG5nID09PSAnc3RyaW5nJykgb3B0aW9ucy5mYWxsYmFja0xuZyA9IFtvcHRpb25zLmZhbGxiYWNrTG5nXTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrTlMgPT09ICdzdHJpbmcnKSBvcHRpb25zLmZhbGxiYWNrTlMgPSBbb3B0aW9ucy5mYWxsYmFja05TXTtcblxuICBpZiAob3B0aW9ucy5zdXBwb3J0ZWRMbmdzICYmIG9wdGlvbnMuc3VwcG9ydGVkTG5ncy5pbmRleE9mKCdjaW1vZGUnKSA8IDApIHtcbiAgICBvcHRpb25zLnN1cHBvcnRlZExuZ3MgPSBvcHRpb25zLnN1cHBvcnRlZExuZ3MuY29uY2F0KFsnY2ltb2RlJ10pO1xuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIG93bktleXMkNihvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQkNih0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzJDYoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyQ2KE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIkMyhEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQzKCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQzKCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGJpbmRNZW1iZXJGdW5jdGlvbnMoaW5zdCkge1xuICB2YXIgbWVtcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnN0KSk7XG4gIG1lbXMuZm9yRWFjaChmdW5jdGlvbiAobWVtKSB7XG4gICAgaWYgKHR5cGVvZiBpbnN0W21lbV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGluc3RbbWVtXSA9IGluc3RbbWVtXS5iaW5kKGluc3QpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBJMThuID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKEkxOG4sIF9FdmVudEVtaXR0ZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIkMyhJMThuKTtcblxuICBmdW5jdGlvbiBJMThuKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJMThuKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7XG5cbiAgICBpZiAoaXNJRTEwKSB7XG4gICAgICBFdmVudEVtaXR0ZXIuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgfVxuXG4gICAgX3RoaXMub3B0aW9ucyA9IHRyYW5zZm9ybU9wdGlvbnMob3B0aW9ucyk7XG4gICAgX3RoaXMuc2VydmljZXMgPSB7fTtcbiAgICBfdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyO1xuICAgIF90aGlzLm1vZHVsZXMgPSB7XG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuICAgIGJpbmRNZW1iZXJGdW5jdGlvbnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuXG4gICAgaWYgKGNhbGxiYWNrICYmICFfdGhpcy5pc0luaXRpYWxpemVkICYmICFvcHRpb25zLmlzQ2xvbmUpIHtcbiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5pbml0SW1tZWRpYXRlKSB7XG4gICAgICAgIF90aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgICAgfVxuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuaW5pdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSTE4biwgW3tcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy5kZWZhdWx0TlMgJiYgb3B0aW9ucy5kZWZhdWx0TlMgIT09IGZhbHNlICYmIG9wdGlvbnMubnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm5zID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdE5TID0gb3B0aW9ucy5ucztcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm5zLmluZGV4T2YoJ3RyYW5zbGF0aW9uJykgPCAwKSB7XG4gICAgICAgICAgb3B0aW9ucy5kZWZhdWx0TlMgPSBvcHRpb25zLm5zWzBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWZPcHRzID0gZ2V0KCk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkJDYoX29iamVjdFNwcmVhZCQ2KF9vYmplY3RTcHJlYWQkNih7fSwgZGVmT3B0cyksIHRoaXMub3B0aW9ucyksIHRyYW5zZm9ybU9wdGlvbnMob3B0aW9ucykpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgIT09ICd2MScpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24gPSBfb2JqZWN0U3ByZWFkJDYoX29iamVjdFNwcmVhZCQ2KHt9LCBkZWZPcHRzLmludGVycG9sYXRpb24pLCB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy51c2VyRGVmaW5lZEtleVNlcGFyYXRvciA9IG9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5uc1NlcGFyYXRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy51c2VyRGVmaW5lZE5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY3JlYXRlQ2xhc3NPbkRlbWFuZChDbGFzc09yT2JqZWN0KSB7XG4gICAgICAgIGlmICghQ2xhc3NPck9iamVjdCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgQ2xhc3NPck9iamVjdCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG5ldyBDbGFzc09yT2JqZWN0KCk7XG4gICAgICAgIHJldHVybiBDbGFzc09yT2JqZWN0O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5pc0Nsb25lKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZHVsZXMubG9nZ2VyKSB7XG4gICAgICAgICAgYmFzZUxvZ2dlci5pbml0KGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmxvZ2dlciksIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmFzZUxvZ2dlci5pbml0KG51bGwsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZm9ybWF0dGVyO1xuXG4gICAgICAgIGlmICh0aGlzLm1vZHVsZXMuZm9ybWF0dGVyKSB7XG4gICAgICAgICAgZm9ybWF0dGVyID0gdGhpcy5tb2R1bGVzLmZvcm1hdHRlcjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgSW50bCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBmb3JtYXR0ZXIgPSBGb3JtYXR0ZXI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbHUgPSBuZXcgTGFuZ3VhZ2VVdGlsKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBuZXcgUmVzb3VyY2VTdG9yZSh0aGlzLm9wdGlvbnMucmVzb3VyY2VzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB2YXIgcyA9IHRoaXMuc2VydmljZXM7XG4gICAgICAgIHMubG9nZ2VyID0gYmFzZUxvZ2dlcjtcbiAgICAgICAgcy5yZXNvdXJjZVN0b3JlID0gdGhpcy5zdG9yZTtcbiAgICAgICAgcy5sYW5ndWFnZVV0aWxzID0gbHU7XG4gICAgICAgIHMucGx1cmFsUmVzb2x2ZXIgPSBuZXcgUGx1cmFsUmVzb2x2ZXIobHUsIHtcbiAgICAgICAgICBwcmVwZW5kOiB0aGlzLm9wdGlvbnMucGx1cmFsU2VwYXJhdG9yLFxuICAgICAgICAgIGNvbXBhdGliaWxpdHlKU09OOiB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04sXG4gICAgICAgICAgc2ltcGxpZnlQbHVyYWxTdWZmaXg6IHRoaXMub3B0aW9ucy5zaW1wbGlmeVBsdXJhbFN1ZmZpeFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZm9ybWF0dGVyICYmICghdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZm9ybWF0IHx8IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdCA9PT0gZGVmT3B0cy5pbnRlcnBvbGF0aW9uLmZvcm1hdCkpIHtcbiAgICAgICAgICBzLmZvcm1hdHRlciA9IGNyZWF0ZUNsYXNzT25EZW1hbmQoZm9ybWF0dGVyKTtcbiAgICAgICAgICBzLmZvcm1hdHRlci5pbml0KHMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZm9ybWF0ID0gcy5mb3JtYXR0ZXIuZm9ybWF0LmJpbmQocy5mb3JtYXR0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcy5pbnRlcnBvbGF0b3IgPSBuZXcgSW50ZXJwb2xhdG9yKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHMudXRpbHMgPSB7XG4gICAgICAgICAgaGFzTG9hZGVkTmFtZXNwYWNlOiB0aGlzLmhhc0xvYWRlZE5hbWVzcGFjZS5iaW5kKHRoaXMpXG4gICAgICAgIH07XG4gICAgICAgIHMuYmFja2VuZENvbm5lY3RvciA9IG5ldyBDb25uZWN0b3IoY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMuYmFja2VuZCksIHMucmVzb3VyY2VTdG9yZSwgcywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgcy5iYWNrZW5kQ29ubmVjdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMyLmVtaXQuYXBwbHkoX3RoaXMyLCBbZXZlbnRdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLm1vZHVsZXMubGFuZ3VhZ2VEZXRlY3Rvcikge1xuICAgICAgICAgIHMubGFuZ3VhZ2VEZXRlY3RvciA9IGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IpO1xuICAgICAgICAgIHMubGFuZ3VhZ2VEZXRlY3Rvci5pbml0KHMsIHRoaXMub3B0aW9ucy5kZXRlY3Rpb24sIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tb2R1bGVzLmkxOG5Gb3JtYXQpIHtcbiAgICAgICAgICBzLmkxOG5Gb3JtYXQgPSBjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5pMThuRm9ybWF0KTtcbiAgICAgICAgICBpZiAocy5pMThuRm9ybWF0LmluaXQpIHMuaTE4bkZvcm1hdC5pbml0KHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmFuc2xhdG9yID0gbmV3IFRyYW5zbGF0b3IodGhpcy5zZXJ2aWNlcywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgdGhpcy50cmFuc2xhdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMyLmVtaXQuYXBwbHkoX3RoaXMyLCBbZXZlbnRdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1vZHVsZXMuZXh0ZXJuYWwuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICAgIGlmIChtLmluaXQpIG0uaW5pdChfdGhpczIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5mb3JtYXQgPSB0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQ7XG4gICAgICBpZiAoIWNhbGxiYWNrKSBjYWxsYmFjayA9IG5vb3A7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcgJiYgIXRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvciAmJiAhdGhpcy5vcHRpb25zLmxuZykge1xuICAgICAgICB2YXIgY29kZXMgPSB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuZ2V0RmFsbGJhY2tDb2Rlcyh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcpO1xuICAgICAgICBpZiAoY29kZXMubGVuZ3RoID4gMCAmJiBjb2Rlc1swXSAhPT0gJ2RldicpIHRoaXMub3B0aW9ucy5sbmcgPSBjb2Rlc1swXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IgJiYgIXRoaXMub3B0aW9ucy5sbmcpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybignaW5pdDogbm8gbGFuZ3VhZ2VEZXRlY3RvciBpcyB1c2VkIGFuZCBubyBsbmcgaXMgZGVmaW5lZCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcmVBcGkgPSBbJ2dldFJlc291cmNlJywgJ2hhc1Jlc291cmNlQnVuZGxlJywgJ2dldFJlc291cmNlQnVuZGxlJywgJ2dldERhdGFCeUxhbmd1YWdlJ107XG4gICAgICBzdG9yZUFwaS5mb3JFYWNoKGZ1bmN0aW9uIChmY05hbWUpIHtcbiAgICAgICAgX3RoaXMyW2ZjTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIF90aGlzMiRzdG9yZTtcblxuICAgICAgICAgIHJldHVybiAoX3RoaXMyJHN0b3JlID0gX3RoaXMyLnN0b3JlKVtmY05hbWVdLmFwcGx5KF90aGlzMiRzdG9yZSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHN0b3JlQXBpQ2hhaW5lZCA9IFsnYWRkUmVzb3VyY2UnLCAnYWRkUmVzb3VyY2VzJywgJ2FkZFJlc291cmNlQnVuZGxlJywgJ3JlbW92ZVJlc291cmNlQnVuZGxlJ107XG4gICAgICBzdG9yZUFwaUNoYWluZWQuZm9yRWFjaChmdW5jdGlvbiAoZmNOYW1lKSB7XG4gICAgICAgIF90aGlzMltmY05hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBfdGhpczIkc3RvcmUyO1xuXG4gICAgICAgICAgKF90aGlzMiRzdG9yZTIgPSBfdGhpczIuc3RvcmUpW2ZjTmFtZV0uYXBwbHkoX3RoaXMyJHN0b3JlMiwgYXJndW1lbnRzKTtcblxuICAgICAgICAgIHJldHVybiBfdGhpczI7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG5cbiAgICAgIHZhciBsb2FkID0gZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgICAgdmFyIGZpbmlzaCA9IGZ1bmN0aW9uIGZpbmlzaChlcnIsIHQpIHtcbiAgICAgICAgICBpZiAoX3RoaXMyLmlzSW5pdGlhbGl6ZWQgJiYgIV90aGlzMi5pbml0aWFsaXplZFN0b3JlT25jZSkgX3RoaXMyLmxvZ2dlci53YXJuKCdpbml0OiBpMThuZXh0IGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQuIFlvdSBzaG91bGQgY2FsbCBpbml0IGp1c3Qgb25jZSEnKTtcbiAgICAgICAgICBfdGhpczIuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgaWYgKCFfdGhpczIub3B0aW9ucy5pc0Nsb25lKSBfdGhpczIubG9nZ2VyLmxvZygnaW5pdGlhbGl6ZWQnLCBfdGhpczIub3B0aW9ucyk7XG5cbiAgICAgICAgICBfdGhpczIuZW1pdCgnaW5pdGlhbGl6ZWQnLCBfdGhpczIub3B0aW9ucyk7XG5cbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHQpO1xuICAgICAgICAgIGNhbGxiYWNrKGVyciwgdCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKF90aGlzMi5sYW5ndWFnZXMgJiYgX3RoaXMyLm9wdGlvbnMuY29tcGF0aWJpbGl0eUFQSSAhPT0gJ3YxJyAmJiAhX3RoaXMyLmlzSW5pdGlhbGl6ZWQpIHJldHVybiBmaW5pc2gobnVsbCwgX3RoaXMyLnQuYmluZChfdGhpczIpKTtcblxuICAgICAgICBfdGhpczIuY2hhbmdlTGFuZ3VhZ2UoX3RoaXMyLm9wdGlvbnMubG5nLCBmaW5pc2gpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZXNvdXJjZXMgfHwgIXRoaXMub3B0aW9ucy5pbml0SW1tZWRpYXRlKSB7XG4gICAgICAgIGxvYWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFRpbWVvdXQobG9hZCwgMCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFJlc291cmNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkUmVzb3VyY2VzKGxhbmd1YWdlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBub29wO1xuICAgICAgdmFyIHVzZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgdmFyIHVzZWRMbmcgPSB0eXBlb2YgbGFuZ3VhZ2UgPT09ICdzdHJpbmcnID8gbGFuZ3VhZ2UgOiB0aGlzLmxhbmd1YWdlO1xuICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZSA9PT0gJ2Z1bmN0aW9uJykgdXNlZENhbGxiYWNrID0gbGFuZ3VhZ2U7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnJlc291cmNlcyB8fCB0aGlzLm9wdGlvbnMucGFydGlhbEJ1bmRsZWRMYW5ndWFnZXMpIHtcbiAgICAgICAgaWYgKHVzZWRMbmcgJiYgdXNlZExuZy50b0xvd2VyQ2FzZSgpID09PSAnY2ltb2RlJykgcmV0dXJuIHVzZWRDYWxsYmFjaygpO1xuICAgICAgICB2YXIgdG9Mb2FkID0gW107XG5cbiAgICAgICAgdmFyIGFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChsbmcpIHtcbiAgICAgICAgICBpZiAoIWxuZykgcmV0dXJuO1xuXG4gICAgICAgICAgdmFyIGxuZ3MgPSBfdGhpczMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkobG5nKTtcblxuICAgICAgICAgIGxuZ3MuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgaWYgKHRvTG9hZC5pbmRleE9mKGwpIDwgMCkgdG9Mb2FkLnB1c2gobCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCF1c2VkTG5nKSB7XG4gICAgICAgICAgdmFyIGZhbGxiYWNrcyA9IHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRGYWxsYmFja0NvZGVzKHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyk7XG4gICAgICAgICAgZmFsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBlbmQobCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXBwZW5kKHVzZWRMbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmVsb2FkKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLnByZWxvYWQuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGVuZChsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5sb2FkKHRvTG9hZCwgdGhpcy5vcHRpb25zLm5zLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmICghZSAmJiAhX3RoaXMzLnJlc29sdmVkTGFuZ3VhZ2UgJiYgX3RoaXMzLmxhbmd1YWdlKSBfdGhpczMuc2V0UmVzb2x2ZWRMYW5ndWFnZShfdGhpczMubGFuZ3VhZ2UpO1xuICAgICAgICAgIHVzZWRDYWxsYmFjayhlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1c2VkQ2FsbGJhY2sobnVsbCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbG9hZFJlc291cmNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWxvYWRSZXNvdXJjZXMobG5ncywgbnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgICAgaWYgKCFsbmdzKSBsbmdzID0gdGhpcy5sYW5ndWFnZXM7XG4gICAgICBpZiAoIW5zKSBucyA9IHRoaXMub3B0aW9ucy5ucztcbiAgICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gbm9vcDtcbiAgICAgIHRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5yZWxvYWQobG5ncywgbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVmZXJyZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1c2UobW9kdWxlKSB7XG4gICAgICBpZiAoIW1vZHVsZSkgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHBhc3NpbmcgYW4gdW5kZWZpbmVkIG1vZHVsZSEgUGxlYXNlIGNoZWNrIHRoZSBvYmplY3QgeW91IGFyZSBwYXNzaW5nIHRvIGkxOG5leHQudXNlKCknKTtcbiAgICAgIGlmICghbW9kdWxlLnR5cGUpIHRocm93IG5ldyBFcnJvcignWW91IGFyZSBwYXNzaW5nIGEgd3JvbmcgbW9kdWxlISBQbGVhc2UgY2hlY2sgdGhlIG9iamVjdCB5b3UgYXJlIHBhc3NpbmcgdG8gaTE4bmV4dC51c2UoKScpO1xuXG4gICAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdiYWNrZW5kJykge1xuICAgICAgICB0aGlzLm1vZHVsZXMuYmFja2VuZCA9IG1vZHVsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZHVsZS50eXBlID09PSAnbG9nZ2VyJyB8fCBtb2R1bGUubG9nICYmIG1vZHVsZS53YXJuICYmIG1vZHVsZS5lcnJvcikge1xuICAgICAgICB0aGlzLm1vZHVsZXMubG9nZ2VyID0gbW9kdWxlO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdsYW5ndWFnZURldGVjdG9yJykge1xuICAgICAgICB0aGlzLm1vZHVsZXMubGFuZ3VhZ2VEZXRlY3RvciA9IG1vZHVsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZHVsZS50eXBlID09PSAnaTE4bkZvcm1hdCcpIHtcbiAgICAgICAgdGhpcy5tb2R1bGVzLmkxOG5Gb3JtYXQgPSBtb2R1bGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ3Bvc3RQcm9jZXNzb3InKSB7XG4gICAgICAgIHBvc3RQcm9jZXNzb3IuYWRkUG9zdFByb2Nlc3Nvcihtb2R1bGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdmb3JtYXR0ZXInKSB7XG4gICAgICAgIHRoaXMubW9kdWxlcy5mb3JtYXR0ZXIgPSBtb2R1bGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJzNyZFBhcnR5Jykge1xuICAgICAgICB0aGlzLm1vZHVsZXMuZXh0ZXJuYWwucHVzaChtb2R1bGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0UmVzb2x2ZWRMYW5ndWFnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSZXNvbHZlZExhbmd1YWdlKGwpIHtcbiAgICAgIGlmICghbCB8fCAhdGhpcy5sYW5ndWFnZXMpIHJldHVybjtcbiAgICAgIGlmIChbJ2NpbW9kZScsICdkZXYnXS5pbmRleE9mKGwpID4gLTEpIHJldHVybjtcblxuICAgICAgZm9yICh2YXIgbGkgPSAwOyBsaSA8IHRoaXMubGFuZ3VhZ2VzLmxlbmd0aDsgbGkrKykge1xuICAgICAgICB2YXIgbG5nSW5MbmdzID0gdGhpcy5sYW5ndWFnZXNbbGldO1xuICAgICAgICBpZiAoWydjaW1vZGUnLCAnZGV2J10uaW5kZXhPZihsbmdJbkxuZ3MpID4gLTEpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmICh0aGlzLnN0b3JlLmhhc0xhbmd1YWdlU29tZVRyYW5zbGF0aW9ucyhsbmdJbkxuZ3MpKSB7XG4gICAgICAgICAgdGhpcy5yZXNvbHZlZExhbmd1YWdlID0gbG5nSW5MbmdzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNoYW5nZUxhbmd1YWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZUxhbmd1YWdlKGxuZywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB0aGlzLmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvID0gbG5nO1xuICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgIHRoaXMuZW1pdCgnbGFuZ3VhZ2VDaGFuZ2luZycsIGxuZyk7XG5cbiAgICAgIHZhciBzZXRMbmdQcm9wcyA9IGZ1bmN0aW9uIHNldExuZ1Byb3BzKGwpIHtcbiAgICAgICAgX3RoaXM0Lmxhbmd1YWdlID0gbDtcbiAgICAgICAgX3RoaXM0Lmxhbmd1YWdlcyA9IF90aGlzNC5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShsKTtcbiAgICAgICAgX3RoaXM0LnJlc29sdmVkTGFuZ3VhZ2UgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgX3RoaXM0LnNldFJlc29sdmVkTGFuZ3VhZ2UobCk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZG9uZSA9IGZ1bmN0aW9uIGRvbmUoZXJyLCBsKSB7XG4gICAgICAgIGlmIChsKSB7XG4gICAgICAgICAgc2V0TG5nUHJvcHMobCk7XG5cbiAgICAgICAgICBfdGhpczQudHJhbnNsYXRvci5jaGFuZ2VMYW5ndWFnZShsKTtcblxuICAgICAgICAgIF90aGlzNC5pc0xhbmd1YWdlQ2hhbmdpbmdUbyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIF90aGlzNC5lbWl0KCdsYW5ndWFnZUNoYW5nZWQnLCBsKTtcblxuICAgICAgICAgIF90aGlzNC5sb2dnZXIubG9nKCdsYW5ndWFnZUNoYW5nZWQnLCBsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczQuaXNMYW5ndWFnZUNoYW5naW5nVG8gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM0LnQuYXBwbHkoX3RoaXM0LCBhcmd1bWVudHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM0LnQuYXBwbHkoX3RoaXM0LCBhcmd1bWVudHMpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBzZXRMbmcgPSBmdW5jdGlvbiBzZXRMbmcobG5ncykge1xuICAgICAgICBpZiAoIWxuZyAmJiAhbG5ncyAmJiBfdGhpczQuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvcikgbG5ncyA9IFtdO1xuICAgICAgICB2YXIgbCA9IHR5cGVvZiBsbmdzID09PSAnc3RyaW5nJyA/IGxuZ3MgOiBfdGhpczQuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRCZXN0TWF0Y2hGcm9tQ29kZXMobG5ncyk7XG5cbiAgICAgICAgaWYgKGwpIHtcbiAgICAgICAgICBpZiAoIV90aGlzNC5sYW5ndWFnZSkge1xuICAgICAgICAgICAgc2V0TG5nUHJvcHMobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFfdGhpczQudHJhbnNsYXRvci5sYW5ndWFnZSkgX3RoaXM0LnRyYW5zbGF0b3IuY2hhbmdlTGFuZ3VhZ2UobCk7XG4gICAgICAgICAgaWYgKF90aGlzNC5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yKSBfdGhpczQuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5jYWNoZVVzZXJMYW5ndWFnZShsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNC5sb2FkUmVzb3VyY2VzKGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBkb25lKGVyciwgbCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKCFsbmcgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmICF0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuYXN5bmMpIHtcbiAgICAgICAgc2V0TG5nKHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5kZXRlY3QoKSk7XG4gICAgICB9IGVsc2UgaWYgKCFsbmcgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5hc3luYykge1xuICAgICAgICB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuZGV0ZWN0KHNldExuZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRMbmcobG5nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZmVycmVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRGaXhlZFRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rml4ZWRUKGxuZywgbnMsIGtleVByZWZpeCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciBmaXhlZFQgPSBmdW5jdGlvbiBmaXhlZFQoa2V5LCBvcHRzKSB7XG4gICAgICAgIHZhciBvcHRpb25zO1xuXG4gICAgICAgIGlmIChfdHlwZW9mKG9wdHMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuMyA+IDIgPyBfbGVuMyAtIDIgOiAwKSwgX2tleTMgPSAyOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgICAgICByZXN0W19rZXkzIC0gMl0gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9wdGlvbnMgPSBfdGhpczUub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcihba2V5LCBvcHRzXS5jb25jYXQocmVzdCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkJDYoe30sIG9wdHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5sbmcgPSBvcHRpb25zLmxuZyB8fCBmaXhlZFQubG5nO1xuICAgICAgICBvcHRpb25zLmxuZ3MgPSBvcHRpb25zLmxuZ3MgfHwgZml4ZWRULmxuZ3M7XG4gICAgICAgIG9wdGlvbnMubnMgPSBvcHRpb25zLm5zIHx8IGZpeGVkVC5ucztcbiAgICAgICAgb3B0aW9ucy5rZXlQcmVmaXggPSBvcHRpb25zLmtleVByZWZpeCB8fCBrZXlQcmVmaXggfHwgZml4ZWRULmtleVByZWZpeDtcbiAgICAgICAgdmFyIGtleVNlcGFyYXRvciA9IF90aGlzNS5vcHRpb25zLmtleVNlcGFyYXRvciB8fCAnLic7XG4gICAgICAgIHZhciByZXN1bHRLZXkgPSBvcHRpb25zLmtleVByZWZpeCA/IFwiXCIuY29uY2F0KG9wdGlvbnMua2V5UHJlZml4KS5jb25jYXQoa2V5U2VwYXJhdG9yKS5jb25jYXQoa2V5KSA6IGtleTtcbiAgICAgICAgcmV0dXJuIF90aGlzNS50KHJlc3VsdEtleSwgb3B0aW9ucyk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodHlwZW9mIGxuZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZml4ZWRULmxuZyA9IGxuZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpeGVkVC5sbmdzID0gbG5nO1xuICAgICAgfVxuXG4gICAgICBmaXhlZFQubnMgPSBucztcbiAgICAgIGZpeGVkVC5rZXlQcmVmaXggPSBrZXlQcmVmaXg7XG4gICAgICByZXR1cm4gZml4ZWRUO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHQoKSB7XG4gICAgICB2YXIgX3RoaXMkdHJhbnNsYXRvcjtcblxuICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRvciAmJiAoX3RoaXMkdHJhbnNsYXRvciA9IHRoaXMudHJhbnNsYXRvcikudHJhbnNsYXRlLmFwcGx5KF90aGlzJHRyYW5zbGF0b3IsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4aXN0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleGlzdHMoKSB7XG4gICAgICB2YXIgX3RoaXMkdHJhbnNsYXRvcjI7XG5cbiAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0b3IgJiYgKF90aGlzJHRyYW5zbGF0b3IyID0gdGhpcy50cmFuc2xhdG9yKS5leGlzdHMuYXBwbHkoX3RoaXMkdHJhbnNsYXRvcjIsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldERlZmF1bHROYW1lc3BhY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGVmYXVsdE5hbWVzcGFjZShucykge1xuICAgICAgdGhpcy5vcHRpb25zLmRlZmF1bHROUyA9IG5zO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoYXNMb2FkZWROYW1lc3BhY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzTG9hZGVkTmFtZXNwYWNlKG5zKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdoYXNMb2FkZWROYW1lc3BhY2U6IGkxOG5leHQgd2FzIG5vdCBpbml0aWFsaXplZCcsIHRoaXMubGFuZ3VhZ2VzKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMubGFuZ3VhZ2VzIHx8ICF0aGlzLmxhbmd1YWdlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybignaGFzTG9hZGVkTmFtZXNwYWNlOiBpMThuLmxhbmd1YWdlcyB3ZXJlIHVuZGVmaW5lZCBvciBlbXB0eScsIHRoaXMubGFuZ3VhZ2VzKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbG5nID0gdGhpcy5yZXNvbHZlZExhbmd1YWdlIHx8IHRoaXMubGFuZ3VhZ2VzWzBdO1xuICAgICAgdmFyIGZhbGxiYWNrTG5nID0gdGhpcy5vcHRpb25zID8gdGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nIDogZmFsc2U7XG4gICAgICB2YXIgbGFzdExuZyA9IHRoaXMubGFuZ3VhZ2VzW3RoaXMubGFuZ3VhZ2VzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxuZy50b0xvd2VyQ2FzZSgpID09PSAnY2ltb2RlJykgcmV0dXJuIHRydWU7XG5cbiAgICAgIHZhciBsb2FkTm90UGVuZGluZyA9IGZ1bmN0aW9uIGxvYWROb3RQZW5kaW5nKGwsIG4pIHtcbiAgICAgICAgdmFyIGxvYWRTdGF0ZSA9IF90aGlzNi5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLnN0YXRlW1wiXCIuY29uY2F0KGwsIFwifFwiKS5jb25jYXQobildO1xuXG4gICAgICAgIHJldHVybiBsb2FkU3RhdGUgPT09IC0xIHx8IGxvYWRTdGF0ZSA9PT0gMjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRpb25zLnByZWNoZWNrKSB7XG4gICAgICAgIHZhciBwcmVSZXN1bHQgPSBvcHRpb25zLnByZWNoZWNrKHRoaXMsIGxvYWROb3RQZW5kaW5nKTtcbiAgICAgICAgaWYgKHByZVJlc3VsdCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcHJlUmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoIXRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5iYWNrZW5kIHx8IHRoaXMub3B0aW9ucy5yZXNvdXJjZXMgJiYgIXRoaXMub3B0aW9ucy5wYXJ0aWFsQnVuZGxlZExhbmd1YWdlcykgcmV0dXJuIHRydWU7XG4gICAgICBpZiAobG9hZE5vdFBlbmRpbmcobG5nLCBucykgJiYgKCFmYWxsYmFja0xuZyB8fCBsb2FkTm90UGVuZGluZyhsYXN0TG5nLCBucykpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZE5hbWVzcGFjZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZE5hbWVzcGFjZXMobnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubnMpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG5zID09PSAnc3RyaW5nJykgbnMgPSBbbnNdO1xuICAgICAgbnMuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgICAgICBpZiAoX3RoaXM3Lm9wdGlvbnMubnMuaW5kZXhPZihuKSA8IDApIF90aGlzNy5vcHRpb25zLm5zLnB1c2gobik7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubG9hZFJlc291cmNlcyhmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVmZXJyZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRMYW5ndWFnZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZExhbmd1YWdlcyhsbmdzLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgIGlmICh0eXBlb2YgbG5ncyA9PT0gJ3N0cmluZycpIGxuZ3MgPSBbbG5nc107XG4gICAgICB2YXIgcHJlbG9hZGVkID0gdGhpcy5vcHRpb25zLnByZWxvYWQgfHwgW107XG4gICAgICB2YXIgbmV3TG5ncyA9IGxuZ3MuZmlsdGVyKGZ1bmN0aW9uIChsbmcpIHtcbiAgICAgICAgcmV0dXJuIHByZWxvYWRlZC5pbmRleE9mKGxuZykgPCAwO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghbmV3TG5ncy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub3B0aW9ucy5wcmVsb2FkID0gcHJlbG9hZGVkLmNvbmNhdChuZXdMbmdzKTtcbiAgICAgIHRoaXMubG9hZFJlc291cmNlcyhmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVmZXJyZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRpclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXIobG5nKSB7XG4gICAgICBpZiAoIWxuZykgbG5nID0gdGhpcy5yZXNvbHZlZExhbmd1YWdlIHx8ICh0aGlzLmxhbmd1YWdlcyAmJiB0aGlzLmxhbmd1YWdlcy5sZW5ndGggPiAwID8gdGhpcy5sYW5ndWFnZXNbMF0gOiB0aGlzLmxhbmd1YWdlKTtcbiAgICAgIGlmICghbG5nKSByZXR1cm4gJ3J0bCc7XG4gICAgICB2YXIgcnRsTG5ncyA9IFsnYXInLCAnc2h1JywgJ3NxcicsICdzc2gnLCAneGFhJywgJ3loZCcsICd5dWQnLCAnYWFvJywgJ2FiaCcsICdhYnYnLCAnYWNtJywgJ2FjcScsICdhY3cnLCAnYWN4JywgJ2FjeScsICdhZGYnLCAnYWRzJywgJ2FlYicsICdhZWMnLCAnYWZiJywgJ2FqcCcsICdhcGMnLCAnYXBkJywgJ2FyYicsICdhcnEnLCAnYXJzJywgJ2FyeScsICdhcnonLCAnYXV6JywgJ2F2bCcsICdheWgnLCAnYXlsJywgJ2F5bicsICdheXAnLCAnYmJ6JywgJ3BnYScsICdoZScsICdpdycsICdwcycsICdwYnQnLCAncGJ1JywgJ3BzdCcsICdwcnAnLCAncHJkJywgJ3VnJywgJ3VyJywgJ3lkZCcsICd5ZHMnLCAneWloJywgJ2ppJywgJ3lpJywgJ2hibycsICdtZW4nLCAneG1uJywgJ2ZhJywgJ2pwcicsICdwZW8nLCAncGVzJywgJ3BycycsICdkdicsICdzYW0nLCAnY2tiJ107XG4gICAgICByZXR1cm4gcnRsTG5ncy5pbmRleE9mKHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShsbmcpKSA+IC0xIHx8IGxuZy50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJy1hcmFiJykgPiAxID8gJ3J0bCcgOiAnbHRyJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xvbmVJbnN0YW5jZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZUluc3RhbmNlKCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbm9vcDtcblxuICAgICAgdmFyIG1lcmdlZE9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkJDYoX29iamVjdFNwcmVhZCQ2KF9vYmplY3RTcHJlYWQkNih7fSwgdGhpcy5vcHRpb25zKSwgb3B0aW9ucyksIHtcbiAgICAgICAgaXNDbG9uZTogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBjbG9uZSA9IG5ldyBJMThuKG1lcmdlZE9wdGlvbnMpO1xuICAgICAgdmFyIG1lbWJlcnNUb0NvcHkgPSBbJ3N0b3JlJywgJ3NlcnZpY2VzJywgJ2xhbmd1YWdlJ107XG4gICAgICBtZW1iZXJzVG9Db3B5LmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgY2xvbmVbbV0gPSBfdGhpczhbbV07XG4gICAgICB9KTtcbiAgICAgIGNsb25lLnNlcnZpY2VzID0gX29iamVjdFNwcmVhZCQ2KHt9LCB0aGlzLnNlcnZpY2VzKTtcbiAgICAgIGNsb25lLnNlcnZpY2VzLnV0aWxzID0ge1xuICAgICAgICBoYXNMb2FkZWROYW1lc3BhY2U6IGNsb25lLmhhc0xvYWRlZE5hbWVzcGFjZS5iaW5kKGNsb25lKVxuICAgICAgfTtcbiAgICAgIGNsb25lLnRyYW5zbGF0b3IgPSBuZXcgVHJhbnNsYXRvcihjbG9uZS5zZXJ2aWNlcywgY2xvbmUub3B0aW9ucyk7XG4gICAgICBjbG9uZS50cmFuc2xhdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCA+IDEgPyBfbGVuNCAtIDEgOiAwKSwgX2tleTQgPSAxOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsb25lLmVtaXQuYXBwbHkoY2xvbmUsIFtldmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgIH0pO1xuICAgICAgY2xvbmUuaW5pdChtZXJnZWRPcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICBjbG9uZS50cmFuc2xhdG9yLm9wdGlvbnMgPSBjbG9uZS5vcHRpb25zO1xuICAgICAgY2xvbmUudHJhbnNsYXRvci5iYWNrZW5kQ29ubmVjdG9yLnNlcnZpY2VzLnV0aWxzID0ge1xuICAgICAgICBoYXNMb2FkZWROYW1lc3BhY2U6IGNsb25lLmhhc0xvYWRlZE5hbWVzcGFjZS5iaW5kKGNsb25lKVxuICAgICAgfTtcbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9KU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgICAgc3RvcmU6IHRoaXMuc3RvcmUsXG4gICAgICAgIGxhbmd1YWdlOiB0aGlzLmxhbmd1YWdlLFxuICAgICAgICBsYW5ndWFnZXM6IHRoaXMubGFuZ3VhZ2VzLFxuICAgICAgICByZXNvbHZlZExhbmd1YWdlOiB0aGlzLnJlc29sdmVkTGFuZ3VhZ2VcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEkxOG47XG59KEV2ZW50RW1pdHRlcik7XG5cbl9kZWZpbmVQcm9wZXJ0eShJMThuLCBcImNyZWF0ZUluc3RhbmNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG5ldyBJMThuKG9wdGlvbnMsIGNhbGxiYWNrKTtcbn0pO1xuXG52YXIgaW5zdGFuY2UgPSBJMThuLmNyZWF0ZUluc3RhbmNlKCk7XG5pbnN0YW5jZS5jcmVhdGVJbnN0YW5jZSA9IEkxOG4uY3JlYXRlSW5zdGFuY2U7XG5cbnZhciBjcmVhdGVJbnN0YW5jZSA9IGluc3RhbmNlLmNyZWF0ZUluc3RhbmNlO1xudmFyIGluaXQgPSBpbnN0YW5jZS5pbml0O1xudmFyIGxvYWRSZXNvdXJjZXMgPSBpbnN0YW5jZS5sb2FkUmVzb3VyY2VzO1xudmFyIHJlbG9hZFJlc291cmNlcyA9IGluc3RhbmNlLnJlbG9hZFJlc291cmNlcztcbnZhciB1c2UgPSBpbnN0YW5jZS51c2U7XG52YXIgY2hhbmdlTGFuZ3VhZ2UgPSBpbnN0YW5jZS5jaGFuZ2VMYW5ndWFnZTtcbnZhciBnZXRGaXhlZFQgPSBpbnN0YW5jZS5nZXRGaXhlZFQ7XG52YXIgdCA9IGluc3RhbmNlLnQ7XG52YXIgZXhpc3RzID0gaW5zdGFuY2UuZXhpc3RzO1xudmFyIHNldERlZmF1bHROYW1lc3BhY2UgPSBpbnN0YW5jZS5zZXREZWZhdWx0TmFtZXNwYWNlO1xudmFyIGhhc0xvYWRlZE5hbWVzcGFjZSA9IGluc3RhbmNlLmhhc0xvYWRlZE5hbWVzcGFjZTtcbnZhciBsb2FkTmFtZXNwYWNlcyA9IGluc3RhbmNlLmxvYWROYW1lc3BhY2VzO1xudmFyIGxvYWRMYW5ndWFnZXMgPSBpbnN0YW5jZS5sb2FkTGFuZ3VhZ2VzO1xuXG5leHBvcnQgZGVmYXVsdCBpbnN0YW5jZTtcbmV4cG9ydCB7IGNoYW5nZUxhbmd1YWdlLCBjcmVhdGVJbnN0YW5jZSwgZXhpc3RzLCBnZXRGaXhlZFQsIGhhc0xvYWRlZE5hbWVzcGFjZSwgaW5pdCwgbG9hZExhbmd1YWdlcywgbG9hZE5hbWVzcGFjZXMsIGxvYWRSZXNvdXJjZXMsIHJlbG9hZFJlc291cmNlcywgc2V0RGVmYXVsdE5hbWVzcGFjZSwgdCwgdXNlIH07XG4iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9BcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDInO1xuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbSBSZWFjdDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3NoYXJlZC9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlLmpzXG4gKlxuICogRG8gbm90IHJlcXVpcmUgdGhpcyBtb2R1bGUgZGlyZWN0bHkhIFVzZSBub3JtYWwgdGhyb3cgZXJyb3IgY2FsbHMuIFRoZXNlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuICogZHVyaW5nIGJ1aWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBcIk1pbmlmaWVkIFJlZHV4IGVycm9yICNcIiArIGNvZGUgKyBcIjsgdmlzaXQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvRXJyb3JzP2NvZGU9XCIgKyBjb2RlICsgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgXCIgKyAndXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gJztcbn1cblxuLy8gSW5saW5lZCB2ZXJzaW9uIG9mIHRoZSBgc3ltYm9sLW9ic2VydmFibGVgIHBvbHlmaWxsXG52YXIgJCRvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG59KSgpO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLy8gSW5saW5lZCAvIHNob3J0ZW5lZCB2ZXJzaW9uIG9mIGBraW5kT2ZgIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQva2luZC1vZlxuZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgaWYgKHZhbCA9PT0gdm9pZCAwKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuICdhcnJheSc7XG4gIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgaWYgKGlzRXJyb3IodmFsKSkgcmV0dXJuICdlcnJvcic7XG4gIHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBjdG9yTmFtZSh2YWwpO1xuXG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9IC8vIG90aGVyXG5cblxuICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xufVxuXG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC50b0RhdGVTdHJpbmcgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuc2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24ga2luZE9mKHZhbCkge1xuICB2YXIgdHlwZU9mVmFsID0gdHlwZW9mIHZhbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHR5cGVPZlZhbCA9IG1pbmlLaW5kT2YodmFsKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiAqKldlIHJlY29tbWVuZCB1c2luZyB0aGUgYGNvbmZpZ3VyZVN0b3JlYCBtZXRob2RcbiAqIG9mIHRoZSBgQHJlZHV4anMvdG9vbGtpdGAgcGFja2FnZSoqLCB3aGljaCByZXBsYWNlcyBgY3JlYXRlU3RvcmVgLlxuICpcbiAqIFJlZHV4IFRvb2xraXQgaXMgb3VyIHJlY29tbWVuZGVkIGFwcHJvYWNoIGZvciB3cml0aW5nIFJlZHV4IGxvZ2ljIHRvZGF5LFxuICogaW5jbHVkaW5nIHN0b3JlIHNldHVwLCByZWR1Y2VycywgZGF0YSBmZXRjaGluZywgYW5kIG1vcmUuXG4gKlxuICogKipGb3IgbW9yZSBkZXRhaWxzLCBwbGVhc2UgcmVhZCB0aGlzIFJlZHV4IGRvY3MgcGFnZToqKlxuICogKipodHRwczovL3JlZHV4LmpzLm9yZy9pbnRyb2R1Y3Rpb24vd2h5LXJ0ay1pcy1yZWR1eC10b2RheSoqXG4gKlxuICogYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIFJlZHV4IFRvb2xraXQgaXMgYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBgY3JlYXRlU3RvcmVgIHRoYXRcbiAqIHNpbXBsaWZpZXMgc2V0dXAgYW5kIGhlbHBzIGF2b2lkIGNvbW1vbiBidWdzLlxuICpcbiAqIFlvdSBzaG91bGQgbm90IGJlIHVzaW5nIHRoZSBgcmVkdXhgIGNvcmUgcGFja2FnZSBieSBpdHNlbGYgdG9kYXksIGV4Y2VwdCBmb3IgbGVhcm5pbmcgcHVycG9zZXMuXG4gKiBUaGUgYGNyZWF0ZVN0b3JlYCBtZXRob2QgZnJvbSB0aGUgY29yZSBgcmVkdXhgIHBhY2thZ2Ugd2lsbCBub3QgYmUgcmVtb3ZlZCwgYnV0IHdlIGVuY291cmFnZVxuICogYWxsIHVzZXJzIHRvIG1pZ3JhdGUgdG8gdXNpbmcgUmVkdXggVG9vbGtpdCBmb3IgYWxsIFJlZHV4IGNvZGUuXG4gKlxuICogSWYgeW91IHdhbnQgdG8gdXNlIGBjcmVhdGVTdG9yZWAgd2l0aG91dCB0aGlzIHZpc3VhbCBkZXByZWNhdGlvbiB3YXJuaW5nLCB1c2VcbiAqIHRoZSBgbGVnYWN5X2NyZWF0ZVN0b3JlYCBpbXBvcnQgaW5zdGVhZDpcbiAqXG4gKiBgaW1wb3J0IHsgbGVnYWN5X2NyZWF0ZVN0b3JlIGFzIGNyZWF0ZVN0b3JlfSBmcm9tICdyZWR1eCdgXG4gKlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKlxuICogKipXZSByZWNvbW1lbmQgdXNpbmcgYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIHRoZVxuICogYEByZWR1eGpzL3Rvb2xraXRgIHBhY2thZ2UqKiwgd2hpY2ggcmVwbGFjZXMgYGNyZWF0ZVN0b3JlYDpcbiAqICoqaHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL3doeS1ydGstaXMtcmVkdXgtdG9kYXkqKlxuICpcbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG52YXIgbGVnYWN5X2NyZWF0ZVN0b3JlID0gY3JlYXRlU3RvcmU7XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlLCBsZWdhY3lfY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCBpMThuIGZyb20gJ2kxOG5leHQnO1xuaW1wb3J0IHsgaW5pdFJlYWN0STE4bmV4dCB9IGZyb20gJ3JlYWN0LWkxOG5leHQnO1xuaW1wb3J0IHRyYW5zbGF0aW9uRU4gZnJvbSAnLi9sb2NhbGVzL2VuL2VuLmpzb24nO1xuaW1wb3J0IHRyYW5zbGF0aW9uQVIgZnJvbSAnLi9sb2NhbGVzL2FyL2FyLmpzb24nO1xuXG5pMThuLnVzZShpbml0UmVhY3RJMThuZXh0KS5pbml0KHtcbiAgbG5nOiAnZW4nLFxuICBmYWxsYmFja0xuZzogJ2VuJyxcbiAgcmVzb3VyY2VzOiB7XG4gICAgZW46IHtcbiAgICAgIHRyYW5zbGF0aW9uOiB0cmFuc2xhdGlvbkVOLFxuICAgIH0sXG4gICAgYXI6IHtcbiAgICAgIHRyYW5zbGF0aW9uOiB0cmFuc2xhdGlvbkFSLFxuICAgIH0sXG4gIH0sXG4gIGludGVycG9sYXRpb246IHtcbiAgICBlc2NhcGVWYWx1ZTogZmFsc2UsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaTE4bjtcbiIsIi8qKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIHBvdGVudGlhbCBcImV4dHJhIGFyZ3VtZW50XCIgdmFsdWUgdG8gYmUgaW5qZWN0ZWQgbGF0ZXIsXHJcbiAqIGFuZCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSB0aHVuayBtaWRkbGV3YXJlIHRoYXQgdXNlcyB0aGF0IHZhbHVlXHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgLy8gU3RhbmRhcmQgUmVkdXggbWlkZGxld2FyZSBkZWZpbml0aW9uIHBhdHRlcm46XG4gIC8vIFNlZTogaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjd3JpdGluZy1jdXN0b20tbWlkZGxld2FyZVxuICB2YXIgbWlkZGxld2FyZSA9IGZ1bmN0aW9uIG1pZGRsZXdhcmUoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIC8vIFRoZSB0aHVuayBtaWRkbGV3YXJlIGxvb2tzIGZvciBhbnkgZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgdG8gYHN0b3JlLmRpc3BhdGNoYC5cbiAgICAgICAgLy8gSWYgdGhpcyBcImFjdGlvblwiIGlzIHJlYWxseSBhIGZ1bmN0aW9uLCBjYWxsIGl0IGFuZCByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBJbmplY3QgdGhlIHN0b3JlJ3MgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBtZXRob2RzLCBhcyB3ZWxsIGFzIGFueSBcImV4dHJhIGFyZ1wiXG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcGFzcyB0aGUgYWN0aW9uIGRvd24gdGhlIG1pZGRsZXdhcmUgY2hhaW4gYXMgdXN1YWxcblxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIG1pZGRsZXdhcmU7XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpOyAvLyBBdHRhY2ggdGhlIGZhY3RvcnkgZnVuY3Rpb24gc28gdXNlcnMgY2FuIGNyZWF0ZSBhIGN1c3RvbWl6ZWQgdmVyc2lvblxuLy8gd2l0aCB3aGF0ZXZlciBcImV4dHJhIGFyZ1wiIHRoZXkgd2FudCB0byBpbmplY3QgaW50byB0aGVpciB0aHVua3NcblxudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQge1xuICBBY3Rpb25UeXBlcyxcbiAgRGF0YSxcbiAgRGF0YVN0YXRlLFxuICBGaWx0ZXIsXG4gIEZpbHRlckFjdGlvblR5cGVzLFxuICBGaWx0ZXJUeXBlLFxuICBUb2dnbGVHcmFwaFR5cGVzLFxufSBmcm9tICdAdHlwZXMnO1xuaW1wb3J0IHsgZmlsdGVyQ2FtcHMsIGZpbHRlclNjaG9vbHMgfSBmcm9tICdAdXRpbHMnO1xuaW1wb3J0IHsgQW55QWN0aW9uIH0gZnJvbSAncmVkdXgnO1xuXG5jb25zdCBpbml0aWFsRmlsdGVyVmFsdWU6IEZpbHRlciA9IHtcbiAgZGF0YTogW10sXG4gIGZpbHRlclZhbHVlOiAnJyxcbn07XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogRGF0YVN0YXRlID0ge1xuICBkYXRhOiBbXSxcbiAgW0ZpbHRlclR5cGUuQ09VTlRSWV9GSUxURVJdOiBpbml0aWFsRmlsdGVyVmFsdWUsXG4gIFtGaWx0ZXJUeXBlLkNBTVBfRklMVEVSXTogaW5pdGlhbEZpbHRlclZhbHVlLFxuICBbRmlsdGVyVHlwZS5TQ0hPT0xfRklMVEVSXTogaW5pdGlhbEZpbHRlclZhbHVlLFxuICBsb2FkZWQ6IGZhbHNlLFxuICBoaWRkZW5HcmFwaHM6IFtdLFxufTtcblxuZXhwb3J0IGNvbnN0IGRhdGFSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IEFueUFjdGlvbik6IERhdGFTdGF0ZSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFjdGlvblR5cGVzLkdFVF9EQVRBOiB7XG4gICAgICBjb25zdCBkYXRhOiBEYXRhW10gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGNvbnN0IGRlZmF1bHRDb3VudHJ5RmlsdGVyOiBGaWx0ZXIgPSB7XG4gICAgICAgIGRhdGE6IEFycmF5LmZyb20obmV3IFNldChkYXRhLm1hcCgoZSkgPT4gZS5jb3VudHJ5KSkpLFxuICAgICAgICBmaWx0ZXJWYWx1ZTogZGF0YVswXS5jb3VudHJ5LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZGVmYXVsdENhbXBGaWx0ZXI6IEZpbHRlciA9IGZpbHRlckNhbXBzKGRhdGEsIHtcbiAgICAgICAgY291bnRyeTogZGVmYXVsdENvdW50cnlGaWx0ZXIuZmlsdGVyVmFsdWUsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZGVmYXVsdFNjaG9vbEZpbHRlcjogRmlsdGVyID0gZmlsdGVyU2Nob29scyhkYXRhLCB7XG4gICAgICAgIGNvdW50cnk6IGRlZmF1bHRDb3VudHJ5RmlsdGVyLmZpbHRlclZhbHVlLFxuICAgICAgICBjYW1wOiBkZWZhdWx0Q2FtcEZpbHRlci5maWx0ZXJWYWx1ZSxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBsb2FkZWQ6IHRydWUsXG4gICAgICAgIFtGaWx0ZXJUeXBlLkNPVU5UUllfRklMVEVSXTogZGVmYXVsdENvdW50cnlGaWx0ZXIsXG4gICAgICAgIFtGaWx0ZXJUeXBlLkNBTVBfRklMVEVSXTogZGVmYXVsdENhbXBGaWx0ZXIsXG4gICAgICAgIFtGaWx0ZXJUeXBlLlNDSE9PTF9GSUxURVJdOiBkZWZhdWx0U2Nob29sRmlsdGVyLFxuICAgICAgICBoaWRkZW5HcmFwaHM6IFtdLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIEZpbHRlckFjdGlvblR5cGVzLkNIQU5HRV9DT1VOVFJZOiB7XG4gICAgICBjb25zdCBjdXJyZW50Q2FtcFZhbHVlID0gc3RhdGVbRmlsdGVyVHlwZS5DQU1QX0ZJTFRFUl0uZmlsdGVyVmFsdWU7XG4gICAgICBjb25zdCBjdXJyZW50U2Nob29sID0gc3RhdGVbRmlsdGVyVHlwZS5TQ0hPT0xfRklMVEVSXS5maWx0ZXJWYWx1ZTtcbiAgICAgIGNvbnN0IGNvdW50cnlGaWx0ZXIgPSB7IC4uLnN0YXRlLkNPVU5UUllfRklMVEVSLCBmaWx0ZXJWYWx1ZTogYWN0aW9uLnBheWxvYWQgfTtcbiAgICAgIGNvbnN0IGNhbXBGaWx0ZXIgPSBmaWx0ZXJDYW1wcyhcbiAgICAgICAgc3RhdGUuZGF0YSxcbiAgICAgICAgeyBjb3VudHJ5OiBjb3VudHJ5RmlsdGVyLmZpbHRlclZhbHVlIH0sXG4gICAgICAgIGN1cnJlbnRDYW1wVmFsdWUsXG4gICAgICApO1xuICAgICAgY29uc3Qgc2Nob29sRmlsdGVyID0gZmlsdGVyU2Nob29scyhcbiAgICAgICAgc3RhdGUuZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGNvdW50cnk6IGNvdW50cnlGaWx0ZXIuZmlsdGVyVmFsdWUsXG4gICAgICAgICAgY2FtcDogY2FtcEZpbHRlci5maWx0ZXJWYWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVudFNjaG9vbCxcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBbRmlsdGVyVHlwZS5DT1VOVFJZX0ZJTFRFUl06IGNvdW50cnlGaWx0ZXIsXG4gICAgICAgIFtGaWx0ZXJUeXBlLkNBTVBfRklMVEVSXTogY2FtcEZpbHRlcixcbiAgICAgICAgW0ZpbHRlclR5cGUuU0NIT09MX0ZJTFRFUl06IHNjaG9vbEZpbHRlcixcbiAgICAgICAgaGlkZGVuR3JhcGhzOiBbXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSBGaWx0ZXJBY3Rpb25UeXBlcy5DSEFOR0VfQ0FNUDoge1xuICAgICAgY29uc3QgY3VycmVudFNjaG9vbFZhbHVlID0gc3RhdGVbRmlsdGVyVHlwZS5TQ0hPT0xfRklMVEVSXS5maWx0ZXJWYWx1ZTtcbiAgICAgIGNvbnN0IGNhbXBGaWx0ZXIgPSB7IC4uLnN0YXRlW0ZpbHRlclR5cGUuQ0FNUF9GSUxURVJdLCBmaWx0ZXJWYWx1ZTogYWN0aW9uLnBheWxvYWQgfTtcbiAgICAgIGNvbnN0IHNjaG9vbEZpbHRlciA9IGZpbHRlclNjaG9vbHMoXG4gICAgICAgIHN0YXRlLmRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBjb3VudHJ5OiBzdGF0ZVtGaWx0ZXJUeXBlLkNPVU5UUllfRklMVEVSXS5maWx0ZXJWYWx1ZSxcbiAgICAgICAgICBjYW1wOiBjYW1wRmlsdGVyLmZpbHRlclZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICBjdXJyZW50U2Nob29sVmFsdWUsXG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgW0ZpbHRlclR5cGUuQ0FNUF9GSUxURVJdOiBjYW1wRmlsdGVyLFxuICAgICAgICBbRmlsdGVyVHlwZS5TQ0hPT0xfRklMVEVSXTogc2Nob29sRmlsdGVyLFxuICAgICAgICBoaWRkZW5HcmFwaHM6IFtdLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIEZpbHRlckFjdGlvblR5cGVzLkNIQU5HRV9TQ0hPT0w6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBbRmlsdGVyVHlwZS5TQ0hPT0xfRklMVEVSXToge1xuICAgICAgICAgIC4uLnN0YXRlW0ZpbHRlclR5cGUuU0NIT09MX0ZJTFRFUl0sXG4gICAgICAgICAgZmlsdGVyVmFsdWU6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICB9LFxuICAgICAgICBoaWRkZW5HcmFwaHM6IFtdLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIFRvZ2dsZUdyYXBoVHlwZXMuU0hPV19HUkFQSDoge1xuICAgICAgY29uc3QgaGlkZGVuR3JhcGhzID0gc3RhdGUuaGlkZGVuR3JhcGhzLmZpbHRlcigoZ3JhcGgpID0+IGdyYXBoICE9IGFjdGlvbi5wYXlsb2FkKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBoaWRkZW5HcmFwaHMsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgVG9nZ2xlR3JhcGhUeXBlcy5ISURFX0dSQVBIOiB7XG4gICAgICBjb25zdCBoaWRkZW5HcmFwaHMgPSBbLi4uc3RhdGUuaGlkZGVuR3JhcGhzLCBhY3Rpb24ucGF5bG9hZF07XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgaGlkZGVuR3JhcGhzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcbiAgfVxufTtcbiIsImltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IGRhdGFSZWR1Y2VyIH0gZnJvbSAnLi9kYXRhUmVkdWNlcic7XG5leHBvcnQgY29uc3Qgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoeyBkYXRhOiBkYXRhUmVkdWNlciB9KTtcbiIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuaW1wb3J0IHsgcm9vdFJlZHVjZXIgfSBmcm9tICcuL3JlZHVjZXJzL3Jvb3RSZWR1Y2VyJztcblxuZXhwb3J0IGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIGFwcGx5TWlkZGxld2FyZSh0aHVuaykpO1xuXG4vLyBJbmZlciB0aGUgYFJvb3RTdGF0ZWAgYW5kIGBBcHBEaXNwYXRjaGAgdHlwZXMgZnJvbSB0aGUgc3RvcmUgaXRzZWxmXG5leHBvcnQgdHlwZSBSb290U3RhdGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBzdG9yZS5nZXRTdGF0ZT47XG4vLyBJbmZlcnJlZCB0eXBlOiB7cG9zdHM6IFBvc3RzU3RhdGUsIGNvbW1lbnRzOiBDb21tZW50c1N0YXRlLCB1c2VyczogVXNlcnNTdGF0ZX1cbmV4cG9ydCB0eXBlIEFwcERpc3BhdGNoID0gdHlwZW9mIHN0b3JlLmRpc3BhdGNoO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBBcHAgZnJvbSAnYXBwJztcbmltcG9ydCAnLi9pMThuJztcbmltcG9ydCAnc3R5bGVzL3N0eWxlcy5zY3NzJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuL3JlZHV4L3N0b3JlJztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuUmVhY3RET00ucmVuZGVyKFxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICA8QnJvd3NlclJvdXRlciBiYXNlbmFtZT17cHJvY2Vzcy5lbnYuUFVCTElDX1VSTH0+XG4gICAgICA8QXBwIC8+XG4gICAgPC9Ccm93c2VyUm91dGVyPlxuICA8L1Byb3ZpZGVyPixcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSxcbik7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZVN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKHtcbiAgc3RvcmUsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICBzZXJ2ZXJTdGF0ZVxufSkge1xuICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHJldHVybiB7XG4gICAgICBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbixcbiAgICAgIGdldFNlcnZlclN0YXRlOiBzZXJ2ZXJTdGF0ZSA/ICgpID0+IHNlcnZlclN0YXRlIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzZXJ2ZXJTdGF0ZV0pO1xuICBjb25zdCBwcmV2aW91c1N0YXRlID0gdXNlTWVtbygoKSA9PiBzdG9yZS5nZXRTdGF0ZSgpLCBbc3RvcmVdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc3Vic2NyaXB0aW9uXG4gICAgfSA9IGNvbnRleHRWYWx1ZTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gdW5kZWZpbmVkO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgY29uc3QgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7IC8vIEB0cy1pZ25vcmUgJ0FueUFjdGlvbicgaXMgYXNzaWduYWJsZSB0byB0aGUgY29uc3RyYWludCBvZiB0eXBlICdBJywgYnV0ICdBJyBjb3VsZCBiZSBpbnN0YW50aWF0ZWQgd2l0aCBhIGRpZmZlcmVudCBzdWJ0eXBlXG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiaW1wb3J0IHsgTWFpblBhZ2UgfSBmcm9tICdwYWdlcy9tYWluUGFnZS9tYWluUGFnZSc7XG5pbXBvcnQgeyBQb2ludFBhZ2UgfSBmcm9tICdwYWdlcy9wb2ludHBhZ2UvcG9pbnRQYWdlJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvdXRlcywgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuY29uc3QgQXBwID0gKCk6IEpTWC5FbGVtZW50ID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFJvdXRlcz5cbiAgICAgICAgPFJvdXRlIHBhdGg9Jy8nIGVsZW1lbnQ9ezxNYWluUGFnZSAvPn0gLz5cbiAgICAgICAgPFJvdXRlIHBhdGg9J3BvaW50Lzpjb3VudHJ5LzpjYW1wLzpzY2hvb2wvOm1vbnRoJyBlbGVtZW50PXs8UG9pbnRQYWdlIC8+fSAvPlxuICAgICAgPC9Sb3V0ZXM+XG4gICAgPC8+XG4gICk7XG59O1xuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIl0sIm5hbWVzIjpbInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJuYW1lIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJndW1lbnRzIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZGVmaW5lUHJvcGVydHkiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwiY29uY2F0IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJpIiwia2V5IiwiZGVzY3JpcHRvciIsImUiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwiVHlwZUVycm9yIiwiYXNzaWduIiwidGVzdDEiLCJTdHJpbmciLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsIm1hcCIsIm4iLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJlcnIiLCJzaG91bGRVc2VOYXRpdmUiLCJ0YXJnZXQiLCJzb3VyY2UiLCJmcm9tIiwic3ltYm9scyIsInRvIiwicyIsImNhbGwiLCJhYSIsIm0iLCJyIiwieSIsImEiLCJiIiwiYyIsImVuY29kZVVSSUNvbXBvbmVudCIsIkVycm9yIiwiYmEiLCJTZXQiLCJjYSIsImRhIiwiZWEiLCJhZGQiLCJmYSIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhhIiwiaWEiLCJqYSIsImthIiwiQiIsImQiLCJmIiwiZyIsInRoaXMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsIkQiLCJ0b0xvd2VyQ2FzZSIsIm9hIiwicGEiLCJ0b1VwcGVyQ2FzZSIsInFhIiwic2xpY2UiLCJtYSIsImlzTmFOIiwibmEiLCJ0ZXN0IiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInJlcGxhY2UiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIlN5bWJvbCIsImZvciIsIkUiLCJNYSIsIkthIiwiaXRlcmF0b3IiLCJMYSIsIk5hIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiayIsImgiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwidmFsdWUiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImViIiwiY2hpbGRyZW4iLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsIkFycmF5IiwiaXNBcnJheSIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwidG9TdHJpbmciLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJwYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwiaXMiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsInB1c2giLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSYiIsImwiLCJhcHBseSIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIk1hcCIsIm9jIiwicGMiLCJxYyIsInJjIiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsInNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwidGMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJzaGlmdCIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiTWF0aCIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImlkIiwiYmluZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJkYXRhIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlFkIiwiY29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm5vZGUiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsIk1lIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsIk9lIiwiY29udGVudEVkaXRhYmxlIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIlliIiwiaW5zdGFuY2UiLCJsaXN0ZW5lciIsIkciLCIkZSIsImhhcyIsImFmIiwiYmYiLCJyYW5kb20iLCJjZiIsImRmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJOYiIsIngiLCJ3IiwieiIsInUiLCJxIiwidCIsInYiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsIkoiLCJLIiwiUSIsIkwiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJzZXRUaW1lb3V0IiwicGYiLCJjbGVhclRpbWVvdXQiLCJxZiIsInJmIiwic2YiLCJwcmV2aW91c1NpYmxpbmciLCJ0ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiY2hpbGQiLCJ6ZiIsIkFmIiwiQmYiLCJjdXJyZW50IiwiSCIsIkkiLCJDZiIsIk0iLCJOIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiUWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlJmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiU2YiLCJUZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiVWYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlZmIiwiV2YiLCJYZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiWWYiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJPIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwiY29udGV4dCIsIm9ic2VydmVkQml0cyIsIm5leHQiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiQWciLCJCZyIsIkNnIiwiQSIsInAiLCJDIiwiRGciLCJFZyIsIkZnIiwiQ29tcG9uZW50IiwicmVmcyIsIkdnIiwiS2ciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJIZyIsIklnIiwiSmciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIk1nIiwic3RhdGUiLCJ1cGRhdGVyIiwiTmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJPZyIsInByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0Iiwic2libGluZyIsImluZGV4IiwiVGciLCJVZyIsIm1vZGUiLCJlbGVtZW50VHlwZSIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiZG9uZSIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiUCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJ3aCIsInhoIiwiUiIsIlMiLCJUIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwidXNlU3RhdGUiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVzZUVmZmVjdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJjcmVhdGUiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJSZWFjdEN1cnJlbnRPd25lciIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJWIiwiSGkiLCJJaSIsIlciLCJKaSIsIktpIiwiTGkiLCJNaSIsIm1lc3NhZ2UiLCJOaSIsImNvbnNvbGUiLCJlcnJvciIsIk9pIiwiV2Vha01hcCIsIlBpIiwiZWxlbWVudCIsIlFpIiwiUmkiLCJTaSIsImNvbXBvbmVudERpZENhdGNoIiwiVGkiLCJjb21wb25lbnRTdGFjayIsIlVpIiwiV2Vha1NldCIsIlZpIiwiV2kiLCJYaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiWWkiLCJaaSIsIiRpIiwiZm9jdXMiLCJhaiIsImRpc3BsYXkiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjaiIsImRqIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaWoiLCJqaiIsImtqIiwibGoiLCJ0aGVuIiwibWoiLCJuaiIsImNlaWwiLCJvaiIsInBqIiwiWCIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJJbmZpbml0eSIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsIldqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsIm1pbiIsImV4dGVuZCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJYaiIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybSIsIlZqIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiYmMiLCJjYyIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiY2hlY2tEQ0UiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmbG9vciIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInBvcCIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsImluc3QiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIiwiaGFzVmFsdWUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX3BhdGgiLCJ4bWxucyIsImJhdGNoIiwiZ2V0QmF0Y2giLCJyZWZFcXVhbGl0eSIsImNyZWF0ZVNlbGVjdG9ySG9vayIsInVzZVJlZHV4Q29udGV4dCIsInNlbGVjdG9yIiwiZXF1YWxpdHlGbiIsInN0b3JlIiwic3Vic2NyaXB0aW9uIiwiZ2V0U2VydmVyU3RhdGUiLCJzZWxlY3RlZFN0YXRlIiwiYWRkTmVzdGVkU3ViIiwiZ2V0U3RhdGUiLCJ1c2VTZWxlY3RvciIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJjcmVhdGVTdG9yZUhvb2siLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsInVzZURpc3BhdGNoIiwiZm4iLCJuZXdCYXRjaCIsImluaXRpYWxpemVDb25uZWN0IiwidXNlQXBwRGlzcGF0Y2giLCJ1c2VBcHBTZWxlY3RvciIsImFwaVVSTCIsImZldGNoRGF0YSIsImZldGNoIiwiTW9udGhzIiwiVGhlbWUiLCJMYW5ndWFnZXMiLCJEaXJlY3Rpb25zIiwiRmlsdGVyQWN0aW9uVHlwZXMiLCJBY3Rpb25UeXBlcyIsIlRvZ2dsZUdyYXBoVHlwZXMiLCJGaWx0ZXJUeXBlIiwiU2hvd0FsbFNjaG9vbHMiLCJEcm9wZG93biIsImxhYmVsIiwiZmlsdGVyTmFtZSIsIm9wZW4iLCJzZXRPcGVuIiwiZmlsdGVyVmFsdWUiLCJoYW5kbGVDbGlja091dHNpZGUiLCJoYW5kbGVDaGFuZ2UiLCJpdGVtIiwiZmlsdGVyQWN0aW9uVHlwZSIsIkNBTVBfRklMVEVSIiwiQ0hBTkdFX0NBTVAiLCJDT1VOVFJZX0ZJTFRFUiIsIkNIQU5HRV9DT1VOVFJZIiwiU0NIT09MX0ZJTFRFUiIsIkNIQU5HRV9TQ0hPT0wiLCJjaGFuZ2VGaWx0ZXIiLCJjbGFzc05hbWUiLCJfYXJyYXlXaXRoSG9sZXMiLCJhcnIiLCJfYXJyYXlMaWtlVG9BcnJheSIsImxlbiIsImFycjIiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJvIiwibWluTGVuIiwiX25vbkl0ZXJhYmxlUmVzdCIsIl9zbGljZWRUb0FycmF5IiwiX2kiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJ3cml0YWJsZSIsIl9jbGFzc0NhbGxDaGVjayIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJtYXRjaEh0bWxFbnRpdHkiLCJodG1sRW50aXRpZXMiLCJ1bmVzY2FwZUh0bWxFbnRpdHkiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJmaWx0ZXIiLCJzeW0iLCJfb2JqZWN0U3ByZWFkIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJpMThuSW5zdGFuY2UiLCJkZWZhdWx0T3B0aW9ucyIsImJpbmRJMThuIiwiYmluZEkxOG5TdG9yZSIsInRyYW5zRW1wdHlOb2RlVmFsdWUiLCJ0cmFuc1N1cHBvcnRCYXNpY0h0bWxOb2RlcyIsInRyYW5zV3JhcFRleHROb2RlcyIsInRyYW5zS2VlcEJhc2ljSHRtbE5vZGVzRm9yIiwidXNlU3VzcGVuc2UiLCJ1bmVzY2FwZSIsIkkxOG5Db250ZXh0IiwiZ2V0RGVmYXVsdHMiLCJSZXBvcnROYW1lc3BhY2VzIiwidXNlZE5hbWVzcGFjZXMiLCJuYW1lc3BhY2VzIiwiX3RoaXMiLCJucyIsImdldEkxOG4iLCJpbml0UmVhY3RJMThuZXh0IiwiaW5pdCIsInNldERlZmF1bHRzIiwicmVhY3QiLCJzZXRJMThuIiwid2FybiIsIl9jb25zb2xlIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiYWxyZWFkeVdhcm5lZCIsIndhcm5PbmNlIiwiX2xlbjIiLCJfa2V5MiIsImxvYWROYW1lc3BhY2VzIiwiaTE4biIsImlzSW5pdGlhbGl6ZWQiLCJvbiIsImluaXRpYWxpemVkIiwib2ZmIiwib2xkSTE4bmV4dEhhc0xvYWRlZE5hbWVzcGFjZSIsImxuZyIsImxhbmd1YWdlcyIsImZhbGxiYWNrTG5nIiwibGFzdExuZyIsImxvYWROb3RQZW5kaW5nIiwibG9hZFN0YXRlIiwic2VydmljZXMiLCJiYWNrZW5kQ29ubmVjdG9yIiwiYmFja2VuZCIsImlzTGFuZ3VhZ2VDaGFuZ2luZ1RvIiwiaGFzUmVzb3VyY2VCdW5kbGUiLCJyZXNvdXJjZXMiLCJwYXJ0aWFsQnVuZGxlZExhbmd1YWdlcyIsImhhc0xvYWRlZE5hbWVzcGFjZSIsImlzTmV3ZXJJMThuZXh0IiwiaWdub3JlSlNPTlN0cnVjdHVyZSIsInByZWNoZWNrIiwiQWN0aW9uIiwidXNlUHJldmlvdXMiLCJpZ25vcmUiLCJ1c2VUcmFuc2xhdGlvbiIsImkxOG5Gcm9tUHJvcHMiLCJfcmVmIiwiaTE4bkZyb21Db250ZXh0IiwiZGVmYXVsdE5TRnJvbUNvbnRleHQiLCJkZWZhdWx0TlMiLCJyZXBvcnROYW1lc3BhY2VzIiwibm90UmVhZHlUIiwicmV0Tm90UmVhZHkiLCJyZWFkeSIsIndhaXQiLCJpMThuT3B0aW9ucyIsImtleVByZWZpeCIsImFkZFVzZWROYW1lc3BhY2VzIiwiaW5pdGlhbGl6ZWRTdG9yZU9uY2UiLCJldmVyeSIsImdldFQiLCJnZXRGaXhlZFQiLCJuc01vZGUiLCJfdXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwic2V0VCIsImpvaW5lZE5TIiwicHJldmlvdXNKb2luZWROUyIsImJvdW5kUmVzZXQiLCJpc0luaXRpYWwiLCJyZXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIkJlZm9yZVVubG9hZEV2ZW50VHlwZSIsInByb21wdEJlZm9yZVVubG9hZCIsImNyZWF0ZUV2ZW50cyIsImhhbmRsZXJzIiwiaGFuZGxlciIsImFyZyIsImNyZWF0ZVBhdGgiLCJfcmVmJHBhdGhuYW1lIiwicGF0aG5hbWUiLCJfcmVmJHNlYXJjaCIsIl9yZWYkaGFzaCIsImhhc2giLCJwYXJzZVBhdGgiLCJwYXRoIiwicGFyc2VkUGF0aCIsImhhc2hJbmRleCIsInN1YnN0ciIsInNlYXJjaEluZGV4IiwiTmF2aWdhdGlvbkNvbnRleHQiLCJMb2NhdGlvbkNvbnRleHQiLCJSb3V0ZUNvbnRleHQiLCJvdXRsZXQiLCJtYXRjaGVzIiwiaW52YXJpYW50IiwiY29uZCIsIm1hdGNoUm91dGVzIiwicm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzb3J0Iiwic2NvcmUiLCJjb21wYXJlSW5kZXhlcyIsInJvdXRlc01ldGEiLCJjaGlsZHJlbkluZGV4IiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaFJvdXRlQnJhbmNoIiwicGFyZW50c01ldGEiLCJwYXJlbnRQYXRoIiwicm91dGUiLCJyZWxhdGl2ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwic3RhcnRzV2l0aCIsImpvaW5QYXRocyIsImNvbXB1dGVTY29yZSIsInBhcmFtUmUiLCJpc1NwbGF0Iiwic2VnbWVudHMiLCJpbml0aWFsU2NvcmUiLCJzb21lIiwicmVkdWNlIiwic2VnbWVudCIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJyZW1haW5pbmdQYXRobmFtZSIsIm1hdGNoUGF0aCIsInBhcmFtcyIsInBhdGhuYW1lQmFzZSIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwicGF0dGVybiIsIm1hdGNoZXIiLCJwYXJhbU5hbWVzIiwicmVnZXhwU291cmNlIiwiXyIsInBhcmFtTmFtZSIsImVuZHNXaXRoIiwiUmVnRXhwIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwic3BsYXRWYWx1ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInNhZmVseURlY29kZVVSSUNvbXBvbmVudCIsInJlc29sdmVUbyIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJsb2NhdGlvblBhdGhuYW1lIiwidG9QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwicmVzb2x2ZVBhdGgiLCJuZXh0Q2hhciIsInBhdGhzIiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwibmF2aWdhdG9yIiwicm91dGVQYXRobmFtZXNKc29uIiwiYWN0aXZlUmVmIiwibmF2aWdhdGUiLCJnbyIsInBhcnNlIiwiUm91dGUiLCJfcHJvcHMiLCJfcmVmMyIsImJhc2VuYW1lUHJvcCIsImxvY2F0aW9uUHJvcCIsIm5hdmlnYXRpb25UeXBlIiwiUG9wIiwic3RhdGljIiwic3RhdGljUHJvcCIsIm5hdmlnYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsIlJvdXRlcyIsIl9yZWY0IiwicGFyZW50TWF0Y2hlcyIsInJvdXRlTWF0Y2giLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwiX3BhcnNlZExvY2F0aW9uQXJnJHBhIiwicGFyc2VkTG9jYXRpb25BcmciLCJyZWR1Y2VSaWdodCIsIl9yZW5kZXJNYXRjaGVzIiwidXNlUm91dGVzIiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwiTGluayIsInJlbG9hZERvY3VtZW50IiwicmVzdCIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImpvaW5lZFBhdGhuYW1lIiwiZ2V0VG9QYXRobmFtZSIsImVuZHNXaXRoU2xhc2giLCJjcmVhdGVIcmVmIiwidXNlSHJlZiIsImludGVybmFsT25DbGljayIsIl90ZW1wIiwicmVwbGFjZVByb3AiLCJpc01vZGlmaWVkRXZlbnQiLCJ1c2VMaW5rQ2xpY2tIYW5kbGVyIiwiTG9nbyIsIkxlc3NvbnNGaWx0ZXJzIiwibm9vcCIsInVpZCIsImlzTnVsbE9yVW5kZWYiLCJpc09iamVjdCIsImlzTnVtYmVyRmluaXRlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJmaW5pdGVPckRlZmF1bHQiLCJ2YWx1ZU9yRGVmYXVsdCIsInRvRGltZW5zaW9uIiwiZGltZW5zaW9uIiwicGFyc2VGbG9hdCIsInRoaXNBcmciLCJlYWNoIiwibG9vcGFibGUiLCJyZXZlcnNlIiwiX2VsZW1lbnRzRXF1YWwiLCJhMCIsImExIiwiaWxlbiIsInYwIiwidjEiLCJkYXRhc2V0SW5kZXgiLCJjbG9uZSQxIiwia2xlbiIsImlzVmFsaWRLZXkiLCJfbWVyZ2VyIiwidHZhbCIsInN2YWwiLCJtZXJnZSIsInNvdXJjZXMiLCJtZXJnZXIiLCJtZXJnZUlmIiwiX21lcmdlcklmIiwia2V5UmVzb2x2ZXJzIiwicmVzb2x2ZU9iamVjdEtleSIsInJlc29sdmVyIiwicGFydHMiLCJ0bXAiLCJwYXJ0IiwiX3NwbGl0S2V5IiwiX2dldEtleVJlc29sdmVyIiwiX2NhcGl0YWxpemUiLCJzdHIiLCJkZWZpbmVkIiwiaXNGdW5jdGlvbiIsInNldHNFcXVhbCIsIlBJIiwiVEFVIiwiUElUQVUiLCJJTkZJTklUWSIsIlBPU0lUSVZFX0lORklOSVRZIiwiUkFEX1BFUl9ERUciLCJIQUxGX1BJIiwiUVVBUlRFUl9QSSIsIlRXT19USElSRFNfUEkiLCJsb2cxMCIsInNpZ24iLCJuaWNlTnVtIiwicm91bmRlZFJhbmdlIiwicm91bmQiLCJhbG1vc3RFcXVhbHMiLCJuaWNlUmFuZ2UiLCJwb3ciLCJmcmFjdGlvbiIsImlzTnVtYmVyIiwiZXBzaWxvbiIsImFicyIsIl9zZXRNaW5BbmRNYXhCeUtleSIsImFycmF5IiwicHJvcGVydHkiLCJtYXgiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJjZW50cmVQb2ludCIsImFuZ2xlUG9pbnQiLCJkaXN0YW5jZUZyb21YQ2VudGVyIiwiZGlzdGFuY2VGcm9tWUNlbnRlciIsInJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciIsInNxcnQiLCJhbmdsZSIsImF0YW4yIiwiZGlzdGFuY2UiLCJkaXN0YW5jZUJldHdlZW5Qb2ludHMiLCJwdDEiLCJwdDIiLCJfYW5nbGVEaWZmIiwiX25vcm1hbGl6ZUFuZ2xlIiwiX2FuZ2xlQmV0d2VlbiIsInNhbWVBbmdsZUlzRnVsbENpcmNsZSIsImFuZ2xlVG9TdGFydCIsImFuZ2xlVG9FbmQiLCJzdGFydFRvQW5nbGUiLCJlbmRUb0FuZ2xlIiwiX2xpbWl0VmFsdWUiLCJfaXNCZXR3ZWVuIiwiX2xvb2t1cCIsInRhYmxlIiwiY21wIiwibWlkIiwibG8iLCJfbG9va3VwQnlLZXkiLCJfcmxvb2t1cEJ5S2V5IiwiYXJyYXlFdmVudHMiLCJ1bmxpc3RlbkFycmF5RXZlbnRzIiwic3R1YiIsIl9jaGFydGpzIiwic3BsaWNlIiwiX2FycmF5VW5pcXVlIiwiaXRlbXMiLCJyZXF1ZXN0QW5pbUZyYW1lIiwidGhyb3R0bGVkIiwidXBkYXRlRm4iLCJ1cGRhdGVBcmdzIiwidGlja2luZyIsIl90b0xlZnRSaWdodENlbnRlciIsImFsaWduIiwiX2FsaWduU3RhcnRFbmQiLCJfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyIsInBvaW50cyIsImFuaW1hdGlvbnNEaXNhYmxlZCIsInBvaW50Q291bnQiLCJfc29ydGVkIiwiaVNjYWxlIiwiX3BhcnNlZCIsImF4aXMiLCJtaW5EZWZpbmVkIiwibWF4RGVmaW5lZCIsImdldFVzZXJCb3VuZHMiLCJnZXRQaXhlbEZvclZhbHVlIiwiX3NjYWxlUmFuZ2VzQ2hhbmdlZCIsInhTY2FsZSIsInlTY2FsZSIsIl9zY2FsZVJhbmdlcyIsIm5ld1JhbmdlcyIsInhtaW4iLCJ4bWF4IiwieW1pbiIsInltYXgiLCJjaGFuZ2VkIiwiYXRFZGdlIiwiZWxhc3RpY0luIiwic2luIiwiZWxhc3RpY091dCIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiY29zIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJsaW0iLCJwMmIiLCJuMmIiLCJiMm4iLCJuMnAiLCJtYXAkMSIsImhleCIsImgxIiwiaDIiLCJlcSIsIkhVRV9SRSIsImhzbDJyZ2JuIiwiaHN2MnJnYm4iLCJod2IycmdibiIsInJnYiIsInJnYjJoc2wiLCJodWVWYWx1ZSIsImNhbGxuIiwiaHNsMnJnYiIsImh1ZSIsIm5hbWVzJDEiLCJPaWNlWGUiLCJhbnRpcXVld0V0ZSIsImFxdWEiLCJhcXVhbWFyUmUiLCJhenVZIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5LZWRPbW9uZCIsIlhldmlUZXQiLCJiUHduIiwiYnVybHl3b29kIiwiY2FNdFhlIiwiS2FydFl1c2UiLCJLb2NUYXRlIiwiY1NPIiwiY1NuZmxvd2VyWGUiLCJjU25zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJ4WGUiLCJ4Y3lhbiIsInhnVE1uUGQiLCJ4V2F5IiwieGdZRiIsInhnWXkiLCJ4a2hha2kiLCJ4bWFnRnRhIiwieFRpdmVnWUYiLCJ4U2FuZ2UiLCJ4U2NFZCIsInhZZCIsInhzT21vbiIsInhzSGdZRiIsInhVWGUiLCJ4VVdheSIsInhVZ1l5IiwieFFlIiwieHZpVGV0IiwiZEFwcFJrIiwiZEFwc2t5WGUiLCJkaW1XYXkiLCJkaW1nWXkiLCJkb2RnZXJYZSIsImZpWWJyaWNrIiwiZmxTT3dFdGUiLCJmb1lzdFdBbiIsImZ1S3NpYSIsImdhUnNiU28iLCJnaG9zdHdFdGUiLCJnVGQiLCJnVE1uUGQiLCJXYXkiLCJnWUYiLCJnWUZMdyIsImdZeSIsImhvbmV5TXciLCJob3RwUmsiLCJSZGlhbllkIiwiUmRpZ28iLCJpdlN5Iiwia2hha2kiLCJsYXZGTXIiLCJsYXZGTXJYc2giLCJsYXduZ1lGIiwiTm1vbmNFZmZvbiIsIlpYZSIsIlpjU08iLCJaY3lhbiIsIlpnVE1uUGRMdyIsIlpXYXkiLCJaZ1lGIiwiWmdZeSIsIlpwUmsiLCJac09tb24iLCJac0hnWUYiLCJac2t5WGUiLCJaVVdheSIsIlpVZ1l5IiwiWnN0QWxYZSIsIlpMdyIsImxpbWUiLCJsaW1lZ1lGIiwibFJGIiwibWFnRnRhIiwibWFQb24iLCJWYXF1YW1hclJlIiwiVlhlIiwiVlNjRWQiLCJWcHVycE4iLCJWc0hnWUYiLCJWVVhlIiwiVnNwclJnZ1lGIiwiVlFlIiwiVnZpVGV0WWQiLCJtaWRuaWdodFhlIiwibVJ0Y1lhbSIsIm1pc3R5UHNlIiwibW9jY2FzUiIsIm5hdmFqb3dFdGUiLCJuYXZ5IiwiVGRsYWNlIiwiVGl2ZSIsIlRpdmVkQmIiLCJTYW5nZSIsIlNhbmdlWWQiLCJTY0VkIiwicE9lZ1RNblBkIiwicE9lZ1lGIiwicE9lUWUiLCJwT2V2aVRldFlkIiwicGFwYXlhd0VwIiwicEhLcHVmZiIsInBlcnUiLCJwUmsiLCJwbHVtIiwicG93TXJYZSIsInB1cnBOIiwiWWJlY2NhcHVycE4iLCJQc3licm93biIsIlB5T1hlIiwic2FkZE5iUHduIiwic09tb24iLCJzYW5keWJQd24iLCJzSGdZRiIsInNIc2hlbGwiLCJzaUZuYSIsInNpbHZlciIsInNreVhlIiwiVVhlIiwiVVdheSIsIlVnWXkiLCJzbm93Iiwic3ByUmdnWUYiLCJzdEFsWGUiLCJ0YW4iLCJ0ZU8iLCJ0RXN0TiIsInRvbWF0byIsInZpVGV0IiwiSkh0Iiwid0V0ZSIsIndFdGVzbW9rZSIsIkx3IiwiTHdnWUYiLCJuYW1lcyIsIlJHQl9SRSIsIm1vZEhTTCIsInJhdGlvIiwiY2xvbmUiLCJwcm90byIsImZyb21PYmplY3QiLCJmdW5jdGlvblBhcnNlIiwiZXhlYyIsInJnYlBhcnNlIiwicDEiLCJwMiIsImh3YjJyZ2IiLCJoc3YycmdiIiwiaHVlUGFyc2UiLCJDb2xvciIsInVucGFja2VkIiwidGtleXMiLCJqIiwicGFyc2VJbnQiLCJ1bnBhY2siLCJ0cmFuc3BhcmVudCIsIm5hbWVQYXJzZSIsIl9yZ2IiLCJfdmFsaWQiLCJ2YWxpZCIsInJnYlN0cmluZyIsImhleFN0cmluZyIsImlzU2hvcnQiLCJhbHBoYSIsImhzbFN0cmluZyIsIm1peCIsIndlaWdodCIsImMxIiwiYzIiLCJ3MiIsIncxIiwiaW50ZXJwb2xhdGUiLCJyZ2IxIiwicmdiMiIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsInJvdGF0ZSIsImRlZyIsImluZGV4X2VzbSIsImlzUGF0dGVybk9yR3JhZGllbnQiLCJnZXRIb3ZlckNvbG9yIiwib3ZlcnJpZGVzIiwiZGVzY3JpcHRvcnMiLCJnZXRTY29wZSQxIiwicm9vdCIsInNjb3BlIiwidmFsdWVzIiwiZGVmYXVsdHMiLCJfZGVzY3JpcHRvcnMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImRhdGFzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImNoYXJ0IiwicGxhdGZvcm0iLCJnZXREZXZpY2VQaXhlbFJhdGlvIiwiZWxlbWVudHMiLCJldmVudHMiLCJmb250IiwiZmFtaWx5IiwiaG92ZXIiLCJob3ZlckJhY2tncm91bmRDb2xvciIsImN0eCIsImhvdmVyQm9yZGVyQ29sb3IiLCJob3ZlckNvbG9yIiwiaW5kZXhBeGlzIiwiaW50ZXJhY3Rpb24iLCJpbnRlcnNlY3QiLCJpbmNsdWRlSW52aXNpYmxlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsIm9uSG92ZXIiLCJwYXJzaW5nIiwicGx1Z2lucyIsInJlc3BvbnNpdmUiLCJzY2FsZSIsInNjYWxlcyIsInNob3dMaW5lIiwiZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3AiLCJkZXNjcmliZSIsIm92ZXJyaWRlIiwidGFyZ2V0U2NvcGUiLCJ0YXJnZXROYW1lIiwic2NvcGVPYmplY3QiLCJ0YXJnZXRTY29wZU9iamVjdCIsInByaXZhdGVOYW1lIiwibG9jYWwiLCJfc2NyaXB0YWJsZSIsIl9pbmRleGFibGUiLCJfZmFsbGJhY2siLCJfbWVhc3VyZVRleHQiLCJsb25nZXN0Iiwic3RyaW5nIiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJfbG9uZ2VzdFRleHQiLCJhcnJheU9mVGhpbmdzIiwiY2FjaGUiLCJnYXJiYWdlQ29sbGVjdCIsInNhdmUiLCJqbGVuIiwidGhpbmciLCJuZXN0ZWRUaGluZyIsInJlc3RvcmUiLCJnY0xlbiIsIl9hbGlnblBpeGVsIiwicGl4ZWwiLCJjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyIsImhhbGZXaWR0aCIsImNsZWFyQ2FudmFzIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsInJlc2V0VHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwiZHJhd1BvaW50IiwiZHJhd1BvaW50TGVnZW5kIiwieE9mZnNldCIsInlPZmZzZXQiLCJjb3JuZXJSYWRpdXMiLCJwb2ludFN0eWxlIiwicm90YXRpb24iLCJyYWRpdXMiLCJyYWQiLCJ0cmFuc2xhdGUiLCJkcmF3SW1hZ2UiLCJiZWdpblBhdGgiLCJlbGxpcHNlIiwiYXJjIiwiY2xvc2VQYXRoIiwibW92ZVRvIiwibGluZVRvIiwiU1FSVDFfMiIsInJlY3QiLCJmaWxsIiwiYm9yZGVyV2lkdGgiLCJzdHJva2UiLCJfaXNQb2ludEluQXJlYSIsInBvaW50IiwibWFyZ2luIiwicmlnaHQiLCJib3R0b20iLCJjbGlwQXJlYSIsImNsaXAiLCJ1bmNsaXBBcmVhIiwiX3N0ZXBwZWRMaW5lVG8iLCJwcmV2aW91cyIsImZsaXAiLCJtaWRwb2ludCIsIl9iZXppZXJDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsImNwMXgiLCJjcDJ4IiwiY3AxeSIsImNwMnkiLCJyZW5kZXJUZXh0Iiwib3B0cyIsImxpbmVzIiwic3Ryb2tlQ29sb3IiLCJsaW5lIiwidHJhbnNsYXRpb24iLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJzZXRSZW5kZXJPcHRzIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJzdHJva2VUZXh0IiwibWF4V2lkdGgiLCJmaWxsVGV4dCIsImRlY29yYXRlVGV4dCIsInN0cmlrZXRocm91Z2giLCJ1bmRlcmxpbmUiLCJtZXRyaWNzIiwiYWN0dWFsQm91bmRpbmdCb3hMZWZ0IiwiYWN0dWFsQm91bmRpbmdCb3hSaWdodCIsImFjdHVhbEJvdW5kaW5nQm94QXNjZW50IiwiYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IiwieURlY29yYXRpb24iLCJkZWNvcmF0aW9uV2lkdGgiLCJhZGRSb3VuZGVkUmVjdFBhdGgiLCJ0b3BMZWZ0IiwiYm90dG9tTGVmdCIsImJvdHRvbVJpZ2h0IiwidG9wUmlnaHQiLCJMSU5FX0hFSUdIVCIsIkZPTlRfU1RZTEUiLCJ0b0xpbmVIZWlnaHQiLCJfcmVhZFZhbHVlVG9Qcm9wcyIsIm9ialByb3BzIiwicmVhZCIsInByb3AiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwidG9Gb250U3RyaW5nIiwiaW5wdXRzIiwiaW5mbyIsImNhY2hlYWJsZSIsInBhcmVudENvbnRleHQiLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJnZXRUYXJnZXQiLCJfcmVzb2x2ZSIsInRvU3RyaW5nVGFnIiwiX2NhY2hlYWJsZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9nZXRUYXJnZXQiLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJfY2FjaGVkIiwicHJveHkiLCJwcmVmaXgiLCJyZWFkS2V5IiwibmVlZHNTdWJSZXNvbHZlciIsImNyZWF0ZVN1YlJlc29sdmVyIiwiX3Jlc29sdmVXaXRoUHJlZml4ZXMiLCJnZXRLZXlzRnJvbUFsbFNjb3BlcyIsImluY2x1ZGVzIiwic3RvcmFnZSIsIl9zdG9yYWdlIiwiX2F0dGFjaENvbnRleHQiLCJzdWJQcm94eSIsImRlc2NyaXB0b3JEZWZhdWx0cyIsIl9wcm94eSIsIl9zdWJQcm94eSIsIl9zdGFjayIsInNldENvbnRleHQiLCJyZWNlaXZlciIsImlzU2NyaXB0YWJsZSIsIl9yZXNvbHZlU2NyaXB0YWJsZSIsImlzSW5kZXhhYmxlIiwiX3Jlc29sdmVBcnJheSIsIl9yZXNvbHZlV2l0aENvbnRleHQiLCJhbGxLZXlzIiwic2NyaXB0YWJsZSIsImluZGV4YWJsZSIsIl9hbGxLZXlzIiwicmVzb2x2ZUZhbGxiYWNrIiwiZ2V0U2NvcGUiLCJwYXJlbnQiLCJhZGRTY29wZXMiLCJwYXJlbnRTY29wZXMiLCJwYXJlbnRGYWxsYmFjayIsImFsbFNjb3BlcyIsImFkZFNjb3Blc0Zyb21LZXkiLCJzdWJHZXRUYXJnZXQiLCJyZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMiLCJfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUiLCJfcGFyc2luZyIsInBhcnNlZCIsIkVQU0lMT04iLCJnZXRQb2ludCIsInNraXAiLCJnZXRWYWx1ZUF4aXMiLCJzcGxpbmVDdXJ2ZSIsImZpcnN0UG9pbnQiLCJtaWRkbGVQb2ludCIsImFmdGVyUG9pbnQiLCJkMDEiLCJkMTIiLCJzMDEiLCJzMTIiLCJjYXBDb250cm9sUG9pbnQiLCJwdCIsIl91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIiwibG9vcCIsImNvbnRyb2xQb2ludHMiLCJzcGFuR2FwcyIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJ2YWx1ZUF4aXMiLCJwb2ludHNMZW4iLCJkZWx0YUsiLCJtSyIsInBvaW50QmVmb3JlIiwicG9pbnRDdXJyZW50IiwicG9pbnRBZnRlciIsInNsb3BlRGVsdGEiLCJhbHBoYUsiLCJiZXRhSyIsInRhdUsiLCJzcXVhcmVkTWFnbml0dWRlIiwibW9ub3RvbmVBZGp1c3QiLCJkZWx0YSIsImlQaXhlbCIsInZQaXhlbCIsIm1vbm90b25lQ29tcHV0ZSIsInNwbGluZUN1cnZlTW9ub3RvbmUiLCJwcmV2IiwidGVuc2lvbiIsImNhcEJlemllclBvaW50cyIsImluQXJlYSIsImluQXJlYVByZXYiLCJpbkFyZWFOZXh0IiwiX2lzRG9tU3VwcG9ydGVkIiwiX2dldFBhcmVudE5vZGUiLCJkb21Ob2RlIiwiaG9zdCIsInBhcnNlTWF4U3R5bGUiLCJzdHlsZVZhbHVlIiwicGFyZW50UHJvcGVydHkiLCJ2YWx1ZUluUGl4ZWxzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9uZWRTdHlsZSIsInN0eWxlcyIsInN1ZmZpeCIsInJlc3VsdCIsInBvcyIsImdldFJlbGF0aXZlUG9zaXRpb24iLCJldnQiLCJib3JkZXJCb3giLCJib3hTaXppbmciLCJwYWRkaW5ncyIsImJvcmRlcnMiLCJib3giLCJvZmZzZXRYIiwib2Zmc2V0WSIsInNoYWRvd1Jvb3QiLCJ1c2VPZmZzZXRQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXRDYW52YXNQb3NpdGlvbiIsInJvdW5kMSIsInJldGluYVNjYWxlIiwiZm9yY2VSYXRpbyIsImZvcmNlU3R5bGUiLCJwaXhlbFJhdGlvIiwiZGV2aWNlSGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJzZXRUcmFuc2Zvcm0iLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZVN1cHBvcnRlZCIsInJlYWRVc2VkU2l6ZSIsImVsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldFN0eWxlIiwiX3BvaW50SW5MaW5lIiwiX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIiwiX2JlemllckludGVycG9sYXRpb24iLCJjcDEiLCJjcDIiLCJpbnRsQ2FjaGUiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJjYWNoZUtleSIsImZvcm1hdHRlciIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJnZXROdW1iZXJGb3JtYXQiLCJmb3JtYXQiLCJnZXRSdGxBZGFwdGVyIiwicnRsIiwicmVjdFgiLCJzZXRXaWR0aCIsInhQbHVzIiwibGVmdEZvckx0ciIsIml0ZW1XaWR0aCIsImdldFJpZ2h0VG9MZWZ0QWRhcHRlciIsIl9pdGVtV2lkdGgiLCJvdmVycmlkZVRleHREaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJvcmlnaW5hbCIsImdldFByb3BlcnR5UHJpb3JpdHkiLCJwcmV2VGV4dERpcmVjdGlvbiIsInJlc3RvcmVUZXh0RGlyZWN0aW9uIiwicHJvcGVydHlGbiIsImJldHdlZW4iLCJub3JtYWxpemUiLCJub3JtYWxpemVTZWdtZW50IiwiX2JvdW5kU2VnbWVudCIsImJvdW5kcyIsInN0YXJ0Qm91bmQiLCJlbmRCb3VuZCIsImdldFNlZ21lbnQiLCJwcmV2VmFsdWUiLCJpbnNpZGUiLCJzdWJTdGFydCIsInJlYWRTdHlsZSIsImJvcmRlckNhcFN0eWxlIiwiYm9yZGVyRGFzaCIsImJvcmRlckRhc2hPZmZzZXQiLCJib3JkZXJKb2luU3R5bGUiLCJzdHlsZUNoYW5nZWQiLCJwcmV2U3R5bGUiLCJhbmltYXRvciIsIl9yZXF1ZXN0IiwiX2NoYXJ0cyIsIl9ydW5uaW5nIiwiX2xhc3REYXRlIiwiX25vdGlmeSIsImFuaW1zIiwiY2FsbGJhY2tzIiwibnVtU3RlcHMiLCJkdXJhdGlvbiIsImluaXRpYWwiLCJjdXJyZW50U3RlcCIsIl9yZWZyZXNoIiwiX3VwZGF0ZSIsInJlbWFpbmluZyIsInJ1bm5pbmciLCJkcmF3IiwiX2FjdGl2ZSIsIl90b3RhbCIsInRpY2siLCJfZ2V0QW5pbXMiLCJjaGFydHMiLCJjb21wbGV0ZSIsInByb2dyZXNzIiwibGlzdGVuIiwiYWNjIiwiY3VyIiwiX2R1cmF0aW9uIiwic3RvcCIsImNhbmNlbCIsInJlbW92ZSIsImludGVycG9sYXRvcnMiLCJib29sZWFuIiwiZmFjdG9yIiwiYzAiLCJBbmltYXRpb24iLCJjZmciLCJjdXJyZW50VmFsdWUiLCJfZm4iLCJfZWFzaW5nIiwiZWFzaW5nIiwiX3N0YXJ0IiwiX2xvb3AiLCJfdGFyZ2V0IiwiX3Byb3AiLCJfZnJvbSIsIl90byIsIl9wcm9taXNlcyIsImFjdGl2ZSIsInVwZGF0ZSIsImVsYXBzZWQiLCJyZW1haW4iLCJwcm9taXNlcyIsInJlcyIsInJlaiIsInJlc29sdmVkIiwibWV0aG9kIiwiYW5pbWF0aW9uT3B0aW9ucyIsImNvbG9ycyIsInByb3BlcnRpZXMiLCJudW1iZXJzIiwicmVzaXplIiwic2hvdyIsImFuaW1hdGlvbnMiLCJ2aXNpYmxlIiwiaGlkZSIsIkFuaW1hdGlvbnMiLCJjb25maWciLCJfY2hhcnQiLCJfcHJvcGVydGllcyIsImNvbmZpZ3VyZSIsImFuaW1hdGVkUHJvcHMiLCJvcHRpb24iLCJfYW5pbWF0ZU9wdGlvbnMiLCJuZXdPcHRpb25zIiwiJHNoYXJlZCIsIiRhbmltYXRpb25zIiwicmVzb2x2ZVRhcmdldE9wdGlvbnMiLCJfY3JlYXRlQW5pbWF0aW9ucyIsImFuaW0iLCJhbGwiLCJhd2FpdEFsbCIsInNjYWxlQ2xpcCIsImFsbG93ZWRPdmVyZmxvdyIsImdldFNvcnRlZERhdGFzZXRJbmRpY2VzIiwiZmlsdGVyVmlzaWJsZSIsIm1ldGFzZXRzIiwiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsImFwcGx5U3RhY2siLCJkc0luZGV4Iiwic2luZ2xlTW9kZSIsIm90aGVyVmFsdWUiLCJpc1N0YWNrZWQiLCJzdGFja2VkIiwiZ2V0T3JDcmVhdGVTdGFjayIsInN0YWNrcyIsInN0YWNrS2V5IiwiaW5kZXhWYWx1ZSIsInN1YlN0YWNrIiwiZ2V0TGFzdEluZGV4SW5TdGFjayIsInZTY2FsZSIsInBvc2l0aXZlIiwiZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMiLCJ1cGRhdGVTdGFja3MiLCJjb250cm9sbGVyIiwiX2NhY2hlZE1ldGEiLCJfc3RhY2tzIiwiaUF4aXMiLCJ2QXhpcyIsImluZGV4U2NhbGUiLCJ2YWx1ZVNjYWxlIiwiZ2V0U3RhY2tLZXkiLCJfdG9wIiwiX2JvdHRvbSIsImdldEZpcnN0U2NhbGVJZCIsImNsZWFyU3RhY2tzIiwiaXNEaXJlY3RVcGRhdGVNb2RlIiwiY2xvbmVJZk5vdFNoYXJlZCIsImNhY2hlZCIsIkRhdGFzZXRDb250cm9sbGVyIiwiX2N0eCIsIl9jYWNoZWREYXRhT3B0cyIsImdldE1ldGEiLCJfdHlwZSIsIl9kYXRhIiwiX29iamVjdERhdGEiLCJfc2hhcmVkT3B0aW9ucyIsIl9kcmF3U3RhcnQiLCJfZHJhd0NvdW50IiwiZW5hYmxlT3B0aW9uU2hhcmluZyIsInN1cHBvcnRzRGVjaW1hdGlvbiIsIiRjb250ZXh0IiwiX3N5bmNMaXN0IiwiaW5pdGlhbGl6ZSIsImxpbmtTY2FsZXMiLCJfc3RhY2tlZCIsImFkZEVsZW1lbnRzIiwidXBkYXRlSW5kZXgiLCJkYXRhc2V0IiwiZ2V0RGF0YXNldCIsImNob29zZUlkIiwieGlkIiwieEF4aXNJRCIsInlpZCIsInlBeGlzSUQiLCJyaWQiLCJyQXhpc0lEIiwiaWlkIiwiaUF4aXNJRCIsInZpZCIsInZBeGlzSUQiLCJnZXRTY2FsZUZvcklkIiwiclNjYWxlIiwiZ2V0RGF0YXNldE1ldGEiLCJzY2FsZUlEIiwiX2dldE90aGVyU2NhbGUiLCJyZXNldCIsIl9kZXN0cm95IiwiX2RhdGFDaGVjayIsImFkYXRhIiwiY29udmVydE9iamVjdERhdGFUb0FycmF5IiwiaXNFeHRlbnNpYmxlIiwiZGF0YXNldEVsZW1lbnRUeXBlIiwiYnVpbGRPclVwZGF0ZUVsZW1lbnRzIiwicmVzZXROZXdFbGVtZW50cyIsInN0YWNrQ2hhbmdlZCIsIm9sZFN0YWNrZWQiLCJfcmVzeW5jRWxlbWVudHMiLCJzY29wZUtleXMiLCJkYXRhc2V0U2NvcGVLZXlzIiwiZ2V0T3B0aW9uU2NvcGVzIiwiY3JlYXRlUmVzb2x2ZXIiLCJzb3J0ZWQiLCJwYXJzZUFycmF5RGF0YSIsInBhcnNlT2JqZWN0RGF0YSIsInBhcnNlUHJpbWl0aXZlRGF0YSIsImlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2IiwibGFiZWxzIiwiZ2V0TGFiZWxzIiwic2luZ2xlU2NhbGUiLCJ4QXhpc0tleSIsInlBeGlzS2V5IiwiZ2V0UGFyc2VkIiwiZ2V0RGF0YUVsZW1lbnQiLCJ1cGRhdGVSYW5nZUZyb21QYXJzZWQiLCJwYXJzZWRWYWx1ZSIsIk5hTiIsImdldE1pbk1heCIsImNhblN0YWNrIiwib3RoZXJTY2FsZSIsImhpZGRlbiIsImNyZWF0ZVN0YWNrIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJvdGhlck1pbiIsIm90aGVyTWF4IiwiX3NraXAiLCJnZXRBbGxQYXJzZWRWYWx1ZXMiLCJnZXRNYXhPdmVyZmxvdyIsImdldExhYmVsQW5kVmFsdWUiLCJnZXRMYWJlbEZvclZhbHVlIiwiX2NsaXAiLCJ0b0NsaXAiLCJkZWZhdWx0Q2xpcCIsImNoYXJ0QXJlYSIsInJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMiLCJyZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zIiwiZGF0YUluZGV4IiwicmF3IiwiY3JlYXRlRGF0YUNvbnRleHQiLCJjcmVhdGVEYXRhc2V0Q29udGV4dCIsIl9yZXNvbHZlRWxlbWVudE9wdGlvbnMiLCJkYXRhRWxlbWVudFR5cGUiLCJzaGFyaW5nIiwiZGF0YXNldEVsZW1lbnRTY29wZUtleXMiLCJyZXNvbHZlTmFtZWRPcHRpb25zIiwiZnJlZXplIiwiX3Jlc29sdmVBbmltYXRpb25zIiwiZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyIsImdldFNoYXJlZE9wdGlvbnMiLCJpbmNsdWRlT3B0aW9ucyIsInNoYXJlZE9wdGlvbnMiLCJfYW5pbWF0aW9uc0Rpc2FibGVkIiwiX2dldFNoYXJlZE9wdGlvbnMiLCJmaXJzdE9wdHMiLCJwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyIsInVwZGF0ZVNoYXJlZE9wdGlvbnMiLCJ1cGRhdGVFbGVtZW50IiwiX3NldFN0eWxlIiwicmVtb3ZlSG92ZXJTdHlsZSIsInNldEhvdmVyU3R5bGUiLCJfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUiLCJfc2V0RGF0YXNldEhvdmVyU3R5bGUiLCJhcmcxIiwiYXJnMiIsIm51bU1ldGEiLCJudW1EYXRhIiwiX2luc2VydEVsZW1lbnRzIiwiX3JlbW92ZUVsZW1lbnRzIiwibW92ZSIsInVwZGF0ZUVsZW1lbnRzIiwicmVtb3ZlZCIsIl9zeW5jIiwiX2RhdGFDaGFuZ2VzIiwiX29uRGF0YVB1c2giLCJfb25EYXRhUG9wIiwiX29uRGF0YVNoaWZ0IiwiX29uRGF0YVNwbGljZSIsIm5ld0NvdW50IiwiX29uRGF0YVVuc2hpZnQiLCJjb21wdXRlTWluU2FtcGxlU2l6ZSIsIl9jYWNoZSIsIiRiYXIiLCJ2aXNpYmxlTWV0YXMiLCJnZXRBbGxTY2FsZVZhbHVlcyIsImN1cnIiLCJfbGVuZ3RoIiwidXBkYXRlTWluQW5kUHJldiIsInRpY2tzIiwiZ2V0UGl4ZWxGb3JUaWNrIiwicGFyc2VWYWx1ZSIsImVudHJ5Iiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiYmFyU3RhcnQiLCJiYXJFbmQiLCJfY3VzdG9tIiwicGFyc2VGbG9hdEJhciIsInBhcnNlQXJyYXlPclByaW1pdGl2ZSIsImlzRmxvYXRCYXIiLCJjdXN0b20iLCJzZXRCb3JkZXJTa2lwcGVkIiwiZWRnZSIsImJvcmRlclNraXBwZWQiLCJob3Jpem9udGFsIiwiYm9yZGVyUHJvcHMiLCJlbmFibGVCb3JkZXJSYWRpdXMiLCJwYXJzZUVkZ2UiLCJvcmlnIiwidjIiLCJzdGFydEVuZCIsInNldEluZmxhdGVBbW91bnQiLCJpbmZsYXRlQW1vdW50IiwiaUF4aXNLZXkiLCJ2QXhpc0tleSIsInN1cGVyIiwiYmFycyIsImdldEJhc2VQaXhlbCIsImlzSG9yaXpvbnRhbCIsInJ1bGVyIiwiX2dldFJ1bGVyIiwidnBpeGVscyIsImhlYWQiLCJfY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMiLCJpcGl4ZWxzIiwiX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzIiwiY2VudGVyIiwiX2dldFN0YWNrcyIsImdyb3VwZWQiLCJza2lwTnVsbCIsIl9nZXRTdGFja0NvdW50IiwiX2dldFN0YWNrSW5kZXgiLCJwaXhlbHMiLCJiYXJUaGlja25lc3MiLCJfc3RhcnRQaXhlbCIsIl9lbmRQaXhlbCIsInN0YWNrQ291bnQiLCJjYXRlZ29yeVBlcmNlbnRhZ2UiLCJiYXJQZXJjZW50YWdlIiwiYmFzZVZhbHVlIiwibWluQmFyTGVuZ3RoIiwiYWN0dWFsQmFzZSIsImZsb2F0aW5nIiwiZ2V0RGF0YVZpc2liaWxpdHkiLCJiYXJTaWduIiwic3RhcnRQaXhlbCIsImdldFBpeGVsRm9yRGVjaW1hbCIsImVuZFBpeGVsIiwiaGFsZkdyaWQiLCJnZXRMaW5lV2lkdGhGb3JWYWx1ZSIsIm1heEJhclRoaWNrbmVzcyIsInBlcmNlbnQiLCJjaHVuayIsImNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMiLCJ0aGlja25lc3MiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJzdGFja0luZGV4IiwicmVjdHMiLCJfaW5kZXhfIiwiZ3JpZCIsIl92YWx1ZV8iLCJiZWdpbkF0WmVybyIsInRvb2x0aXAiLCJ0aXRsZSIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJnZXR0ZXIiLCJfZ2V0Um90YXRpb24iLCJfZ2V0Q2lyY3VtZmVyZW5jZSIsImNpcmN1bWZlcmVuY2UiLCJfZ2V0Um90YXRpb25FeHRlbnRzIiwiaXNEYXRhc2V0VmlzaWJsZSIsImFyY3MiLCJzcGFjaW5nIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJnZXRNYXhPZmZzZXQiLCJtYXhTaXplIiwiY3V0b3V0IiwiY2hhcnRXZWlnaHQiLCJfZ2V0UmluZ1dlaWdodCIsInJhdGlvWCIsInJhdGlvWSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwiY2FsY01heCIsImNhbGNNaW4iLCJtYXhYIiwibWF4WSIsIm1pblgiLCJtaW5ZIiwiZ2V0UmF0aW9BbmRPZmZzZXQiLCJtYXhIZWlnaHQiLCJtYXhSYWRpdXMiLCJyYWRpdXNMZW5ndGgiLCJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJfZ2V0UmluZ1dlaWdodE9mZnNldCIsIl9jaXJjdW1mZXJlbmNlIiwiYW5pbWF0ZVJvdGF0ZSIsImNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UiLCJhbmltYXRpb25PcHRzIiwiY2VudGVyWCIsImNlbnRlclkiLCJhbmltYXRlU2NhbGUiLCJtZXRhRGF0YSIsImJvcmRlckFsaWduIiwiaG92ZXJCb3JkZXJXaWR0aCIsImhvdmVyT2Zmc2V0IiwicmluZ1dlaWdodE9mZnNldCIsImFzcGVjdFJhdGlvIiwibGVnZW5kIiwiZ2VuZXJhdGVMYWJlbHMiLCJsZWdlbmRJdGVtIiwidG9nZ2xlRGF0YVZpc2liaWxpdHkiLCJ0b29sdGlwSXRlbSIsImRhdGFMYWJlbCIsImZvcm1hdHRlZFZhbHVlIiwiTGluZUNvbnRyb2xsZXIiLCJfZGF0YXNldCIsIl9kYXRhc2V0SW5kZXgiLCJfZGVjaW1hdGVkIiwiYW5pbWF0ZWQiLCJtYXhHYXBMZW5ndGgiLCJkaXJlY3RVcGRhdGUiLCJwcmV2UGFyc2VkIiwibnVsbERhdGEiLCJib3JkZXIiLCJsYXN0UG9pbnQiLCJ1cGRhdGVDb250cm9sUG9pbnRzIiwiX3VwZGF0ZVJhZGl1cyIsIm1pblNpemUiLCJjdXRvdXRQZXJjZW50YWdlIiwiZ2V0VmlzaWJsZURhdGFzZXRDb3VudCIsInhDZW50ZXIiLCJ5Q2VudGVyIiwiZGF0YXNldFN0YXJ0QW5nbGUiLCJnZXRJbmRleEFuZ2xlIiwiZGVmYXVsdEFuZ2xlIiwiY291bnRWaXNpYmxlRWxlbWVudHMiLCJfY29tcHV0ZUFuZ2xlIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJhbmdsZUxpbmVzIiwiY2lyY3VsYXIiLCJwb2ludExhYmVscyIsIl9mdWxsTG9vcCIsInBvaW50UG9zaXRpb24iLCJnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUiLCJ0b29sdGlwUG9zaXRpb24iLCJ1c2VGaW5hbFBvc2l0aW9uIiwiZ2V0UHJvcHMiLCJmaW5hbCIsImRlZmF1bHRSb3V0ZXMiLCJmb3JtYXR0ZXJzIiwibnVtZXJpYyIsInRpY2tWYWx1ZSIsIm5vdGF0aW9uIiwibWF4VGljayIsImNhbGN1bGF0ZURlbHRhIiwibG9nRGVsdGEiLCJudW1EZWNpbWFsIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwibG9nYXJpdGhtaWMiLCJUaWNrcyIsIm5ld1RpY2tzIiwibWFqb3JTdGFydCIsIm1ham9yRW5kIiwiZ3JhY2UiLCJkcmF3Qm9yZGVyIiwiZHJhd09uQ2hhcnRBcmVhIiwiZHJhd1RpY2tzIiwidGlja0xlbmd0aCIsInRpY2tXaWR0aCIsInRpY2tDb2xvciIsInBhZGRpbmciLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwibWlycm9yIiwidGV4dFN0cm9rZVdpZHRoIiwidGV4dFN0cm9rZUNvbG9yIiwiYXV0b1NraXAiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsIm1pbm9yIiwibWFqb3IiLCJjcm9zc0FsaWduIiwic2hvd0xhYmVsQmFja2Ryb3AiLCJiYWNrZHJvcENvbG9yIiwiYmFja2Ryb3BQYWRkaW5nIiwib2Zmc2V0RnJvbUVkZ2UiLCJzYW1wbGUiLCJudW1JdGVtcyIsImluY3JlbWVudCIsImdldFBpeGVsRm9yR3JpZExpbmUiLCJvZmZzZXRHcmlkTGluZXMiLCJ2YWxpZEluZGV4IiwibGluZVZhbHVlIiwiZ2V0VGlja01hcmtMZW5ndGgiLCJnZXRUaXRsZUhlaWdodCIsInRpdGxlQWxpZ24iLCJwb3NpdGlvbiIsInJldmVyc2VBbGlnbiIsIlNjYWxlIiwiX21hcmdpbnMiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwibGFiZWxSb3RhdGlvbiIsIl9yYW5nZSIsIl9ncmlkTGluZUl0ZW1zIiwiX2xhYmVsSXRlbXMiLCJfbGFiZWxTaXplcyIsIl9tYXhMZW5ndGgiLCJfbG9uZ2VzdFRleHRDYWNoZSIsIl9yZXZlcnNlUGl4ZWxzIiwiX3VzZXJNYXgiLCJfdXNlck1pbiIsIl9zdWdnZXN0ZWRNYXgiLCJfc3VnZ2VzdGVkTWluIiwiX3RpY2tzTGVuZ3RoIiwiX2JvcmRlclZhbHVlIiwiX2RhdGFMaW1pdHNDYWNoZWQiLCJzdWdnZXN0ZWRNaW4iLCJzdWdnZXN0ZWRNYXgiLCJtZXRhcyIsImdldFBhZGRpbmciLCJnZXRUaWNrcyIsInhMYWJlbHMiLCJ5TGFiZWxzIiwiYmVmb3JlTGF5b3V0IiwiYmVmb3JlVXBkYXRlIiwibWFyZ2lucyIsInRpY2tPcHRzIiwic2FtcGxlU2l6ZSIsImJlZm9yZVNldERpbWVuc2lvbnMiLCJzZXREaW1lbnNpb25zIiwiYWZ0ZXJTZXREaW1lbnNpb25zIiwiYmVmb3JlRGF0YUxpbWl0cyIsImRldGVybWluZURhdGFMaW1pdHMiLCJhZnRlckRhdGFMaW1pdHMiLCJtaW5tYXgiLCJjaGFuZ2UiLCJrZWVwWmVybyIsIl9hZGRHcmFjZSIsImJlZm9yZUJ1aWxkVGlja3MiLCJidWlsZFRpY2tzIiwiYWZ0ZXJCdWlsZFRpY2tzIiwic2FtcGxpbmdFbmFibGVkIiwiX2NvbnZlcnRUaWNrc1RvTGFiZWxzIiwiYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImNhbGN1bGF0ZUxhYmVsUm90YXRpb24iLCJhZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24iLCJ0aWNrc0xpbWl0IiwibWF4VGlja3NMaW1pdCIsIl90aWNrU2l6ZSIsIm1heFNjYWxlIiwibWF4Q2hhcnQiLCJkZXRlcm1pbmVNYXhUaWNrcyIsIm1ham9ySW5kaWNlcyIsImVuYWJsZWQiLCJnZXRNYWpvckluZGljZXMiLCJudW1NYWpvckluZGljZXMiLCJmaXJzdCIsInNraXBNYWpvcnMiLCJldmVuTWFqb3JTcGFjaW5nIiwiZGlmZiIsImdldEV2ZW5TcGFjaW5nIiwiZmFjdG9ycyIsIl9mYWN0b3JpemUiLCJjYWxjdWxhdGVTcGFjaW5nIiwiYXZnTWFqb3JTcGFjaW5nIiwiYWZ0ZXJBdXRvU2tpcCIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJyZXZlcnNlUGl4ZWxzIiwiX2FsaWduVG9QaXhlbHMiLCJhbGlnblRvUGl4ZWxzIiwiX2NhbGxIb29rcyIsIm5vdGlmeVBsdWdpbnMiLCJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJnZW5lcmF0ZVRpY2tMYWJlbHMiLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsIm51bVRpY2tzIiwibWF4TGFiZWxEaWFnb25hbCIsIl9pc1Zpc2libGUiLCJsYWJlbFNpemVzIiwiX2dldExhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwid2lkZXN0IiwibWF4TGFiZWxIZWlnaHQiLCJoaWdoZXN0IiwiYXNpbiIsInRpdGxlT3B0cyIsImdyaWRPcHRzIiwidGl0bGVIZWlnaHQiLCJ0aWNrUGFkZGluZyIsImFuZ2xlUmFkaWFucyIsImxhYmVsSGVpZ2h0IiwibGFiZWxXaWR0aCIsIl9jYWxjdWxhdGVQYWRkaW5nIiwiX2hhbmRsZU1hcmdpbnMiLCJpc1JvdGF0ZWQiLCJsYWJlbHNCZWxvd1RpY2tzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFJpZ2h0IiwiaXNGdWxsU2l6ZSIsImZ1bGxTaXplIiwiX2NvbXB1dGVMYWJlbFNpemVzIiwiY2FjaGVzIiwid2lkdGhzIiwiaGVpZ2h0cyIsInRpY2tGb250IiwiZm9udFN0cmluZyIsIm5lc3RlZExhYmVsIiwid2lkZXN0TGFiZWxTaXplIiwiaGlnaGVzdExhYmVsU2l6ZSIsIl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zIiwidmFsdWVBdCIsImlkeCIsImdldFZhbHVlRm9yUGl4ZWwiLCJkZWNpbWFsIiwiZ2V0RGVjaW1hbEZvclBpeGVsIiwiZ2V0QmFzZVZhbHVlIiwiY3JlYXRlVGlja0NvbnRleHQiLCJvcHRpb25UaWNrcyIsInJvdCIsIl9jb21wdXRlR3JpZExpbmVJdGVtcyIsInRpY2tzTGVuZ3RoIiwidGwiLCJib3JkZXJPcHRzIiwiYXhpc1dpZHRoIiwiYXhpc0hhbGZXaWR0aCIsImFsaWduQm9yZGVyVmFsdWUiLCJib3JkZXJWYWx1ZSIsImFsaWduZWRMaW5lVmFsdWUiLCJ0eDEiLCJ0eTEiLCJ0eDIiLCJ0eTIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInBvc2l0aW9uQXhpc0lEIiwibGltaXQiLCJzdGVwIiwib3B0c0F0SW5kZXgiLCJsaW5lQ29sb3IiLCJ0aWNrQm9yZGVyRGFzaCIsInRpY2tCb3JkZXJEYXNoT2Zmc2V0IiwiX2NvbXB1dGVMYWJlbEl0ZW1zIiwidGlja0FuZFBhZGRpbmciLCJoVGlja0FuZFBhZGRpbmciLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwiX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQiLCJfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCIsImhhbGZDb3VudCIsImJhY2tkcm9wIiwidGlja1RleHRBbGlnbiIsImxhYmVsUGFkZGluZyIsIl9jb21wdXRlTGFiZWxBcmVhIiwiZHJhd0JhY2tncm91bmQiLCJmaWxsUmVjdCIsImZpbmRJbmRleCIsImRyYXdHcmlkIiwiZHJhd0xpbmUiLCJzZXRMaW5lRGFzaCIsImxpbmVEYXNoT2Zmc2V0IiwibGFzdExpbmVXaWR0aCIsImRyYXdMYWJlbHMiLCJkcmF3VGl0bGUiLCJ0aXRsZVgiLCJ0aXRsZVkiLCJ0aXRsZUFyZ3MiLCJfbGF5ZXJzIiwidHoiLCJneiIsImdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMiLCJheGlzSUQiLCJfbWF4RGlnaXRzIiwiZm9udFNpemUiLCJUeXBlZFJlZ2lzdHJ5IiwiaXNGb3JUeXBlIiwiaXNQcm90b3R5cGVPZiIsInJlZ2lzdGVyIiwicGFyZW50U2NvcGUiLCJpc0lDaGFydENvbXBvbmVudCIsIml0ZW1EZWZhdWx0cyIsInByb3BlcnR5UGFydHMiLCJzb3VyY2VOYW1lIiwic291cmNlU2NvcGUiLCJyb3V0ZURlZmF1bHRzIiwicmVnaXN0ZXJEZWZhdWx0cyIsInVucmVnaXN0ZXIiLCJyZWdpc3RyeSIsImNvbnRyb2xsZXJzIiwiX3R5cGVkUmVnaXN0cmllcyIsIl9lYWNoIiwiYWRkQ29udHJvbGxlcnMiLCJhZGRQbHVnaW5zIiwiYWRkU2NhbGVzIiwiZ2V0Q29udHJvbGxlciIsIl9nZXQiLCJnZXRFbGVtZW50IiwiZ2V0UGx1Z2luIiwiZ2V0U2NhbGUiLCJyZW1vdmVDb250cm9sbGVycyIsInJlbW92ZUVsZW1lbnRzIiwicmVtb3ZlUGx1Z2lucyIsInJlbW92ZVNjYWxlcyIsInR5cGVkUmVnaXN0cnkiLCJyZWciLCJfZ2V0UmVnaXN0cnlGb3JUeXBlIiwiX2V4ZWMiLCJpdGVtUmVnIiwiY2FtZWxNZXRob2QiLCJEYXRlQWRhcHRlciIsImNoYXJ0T3B0aW9ucyIsImZvcm1hdHMiLCJ0aW1lc3RhbXAiLCJhbW91bnQiLCJ1bml0Iiwic3RhcnRPZiIsIndlZWtkYXkiLCJlbmRPZiIsIm1lbWJlcnMiLCJhZGFwdGVycyIsIl9kYXRlIiwiYmluYXJ5U2VhcmNoIiwibWV0YXNldCIsImxvb2t1cE1ldGhvZCIsImdldFJhbmdlIiwiZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zIiwiZ2V0SW50ZXJzZWN0SXRlbXMiLCJpc1BvaW50SW5BcmVhIiwiaW5SYW5nZSIsImdldE5lYXJlc3RJdGVtcyIsImRpc3RhbmNlTWV0cmljIiwidXNlWCIsInVzZVkiLCJnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMiLCJtaW5EaXN0YW5jZSIsImdldENlbnRlclBvaW50IiwiZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zIiwiZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zIiwiZ2V0QXhpc0l0ZW1zIiwicmFuZ2VNZXRob2QiLCJpbnRlcnNlY3RzSXRlbSIsIkludGVyYWN0aW9uIiwibW9kZXMiLCJuZWFyZXN0IiwiU1RBVElDX1BPU0lUSU9OUyIsImZpbHRlckJ5UG9zaXRpb24iLCJmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMiLCJzb3J0QnlXZWlnaHQiLCJnZXRDb21iaW5lZE1heCIsIm1heFBhZGRpbmciLCJ1cGRhdGVNYXhQYWRkaW5nIiwiYm94UGFkZGluZyIsInVwZGF0ZURpbXMiLCJsYXlvdXQiLCJuZXdXaWR0aCIsIm91dGVyV2lkdGgiLCJuZXdIZWlnaHQiLCJvdXRlckhlaWdodCIsIndpZHRoQ2hhbmdlZCIsImhlaWdodENoYW5nZWQiLCJzYW1lIiwib3RoZXIiLCJnZXRNYXJnaW5zIiwibWFyZ2luRm9yUG9zaXRpb25zIiwiZml0Qm94ZXMiLCJib3hlcyIsInJlZml0Qm94ZXMiLCJyZWZpdCIsInNldEJveERpbXMiLCJwbGFjZUJveGVzIiwidXNlclBhZGRpbmciLCJwbGFjZWQiLCJzdGFja1dlaWdodCIsImF1dG9QYWRkaW5nIiwibGF5b3V0cyIsImFkZEJveCIsInJlbW92ZUJveCIsImxheW91dEl0ZW0iLCJtaW5QYWRkaW5nIiwiYXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJsYXlvdXRCb3hlcyIsIndyYXBCb3hlcyIsIndyYXAiLCJjZW50ZXJIb3Jpem9udGFsIiwiY2VudGVyVmVydGljYWwiLCJsZWZ0QW5kVG9wIiwicmlnaHRBbmRCb3R0b20iLCJ2ZXJ0aWNhbCIsImJ1aWxkTGF5b3V0Qm94ZXMiLCJ2ZXJ0aWNhbEJveGVzIiwiaG9yaXpvbnRhbEJveGVzIiwidmlzaWJsZVZlcnRpY2FsQm94Q291bnQiLCJ2Qm94TWF4V2lkdGgiLCJoQm94TWF4SGVpZ2h0IiwiYnVpbGRTdGFja3MiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiaGFuZGxlTWF4UGFkZGluZyIsIkJhc2VQbGF0Zm9ybSIsImFjcXVpcmVDb250ZXh0IiwicmVsZWFzZUNvbnRleHQiLCJnZXRNYXhpbXVtU2l6ZSIsImlzQXR0YWNoZWQiLCJ1cGRhdGVDb25maWciLCJCYXNpY1BsYXRmb3JtIiwiRVZFTlRfVFlQRVMiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwicG9pbnRlcmxlYXZlIiwicG9pbnRlcm91dCIsImlzTnVsbE9yRW1wdHkiLCJldmVudExpc3RlbmVyT3B0aW9ucyIsInJlbW92ZUxpc3RlbmVyIiwibm9kZUxpc3RDb250YWlucyIsIm5vZGVMaXN0IiwiY3JlYXRlQXR0YWNoT2JzZXJ2ZXIiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwidHJpZ2dlciIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImNyZWF0ZURldGFjaE9ic2VydmVyIiwiZHJwTGlzdGVuaW5nQ2hhcnRzIiwib2xkRGV2aWNlUGl4ZWxSYXRpbyIsIm9uV2luZG93UmVzaXplIiwiZHByIiwiY3JlYXRlUmVzaXplT2JzZXJ2ZXIiLCJjb250YWluZXIiLCJjbGllbnRXaWR0aCIsIlJlc2l6ZU9ic2VydmVyIiwiY29udGVudFJlY3QiLCJsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsInJlbGVhc2VPYnNlcnZlciIsImRpc2Nvbm5lY3QiLCJ1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzIiwiY3JlYXRlUHJveHlBbmRMaXN0ZW4iLCJuYXRpdmUiLCJmcm9tTmF0aXZlRXZlbnQiLCJhZGRMaXN0ZW5lciIsIkRvbVBsYXRmb3JtIiwicmVuZGVySGVpZ2h0IiwiZ2V0QXR0cmlidXRlIiwicmVuZGVyV2lkdGgiLCJkaXNwbGF5V2lkdGgiLCJkaXNwbGF5SGVpZ2h0IiwiaW5pdENhbnZhcyIsInByb3hpZXMiLCIkcHJveGllcyIsImF0dGFjaCIsImRldGFjaCIsImJiV2lkdGgiLCJiYkhlaWdodCIsImNvbnRhaW5lclNpemUiLCJjb250YWluZXJTdHlsZSIsImNvbnRhaW5lckJvcmRlciIsImNvbnRhaW5lclBhZGRpbmciLCJjbGllbnRIZWlnaHQiLCJnZXRDb250YWluZXJTaXplIiwiaXNDb25uZWN0ZWQiLCJQbHVnaW5TZXJ2aWNlIiwiaG9vayIsIl9jcmVhdGVEZXNjcmlwdG9ycyIsInBsdWdpbiIsImludmFsaWRhdGUiLCJfb2xkQ2FjaGUiLCJfbm90aWZ5U3RhdGVDaGFuZ2VzIiwibG9jYWxJZHMiLCJhbGxQbHVnaW5zIiwiZ2V0T3B0cyIsInBsdWdpbk9wdHMiLCJjcmVhdGVEZXNjcmlwdG9ycyIsInByZXZpb3VzRGVzY3JpcHRvcnMiLCJwbHVnaW5TY29wZUtleXMiLCJnZXRJbmRleEF4aXMiLCJkYXRhc2V0RGVmYXVsdHMiLCJkZXRlcm1pbmVBeGlzIiwic2NhbGVPcHRpb25zIiwiaW5pdE9wdGlvbnMiLCJjaGFydERlZmF1bHRzIiwiY29uZmlnU2NhbGVzIiwiY2hhcnRJbmRleEF4aXMiLCJmaXJzdElEcyIsInNjYWxlQ29uZiIsImRlZmF1bHRJZCIsImdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMiLCJkZWZhdWx0U2NhbGVPcHRpb25zIiwiZGVmYXVsdElEIiwiZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRCIsIm1lcmdlU2NhbGVDb25maWciLCJpbml0RGF0YSIsImtleUNhY2hlIiwia2V5c0NhY2hlZCIsImNhY2hlZEtleXMiLCJnZW5lcmF0ZSIsImFkZElmRm91bmQiLCJDb25maWciLCJfY29uZmlnIiwiaW5pdENvbmZpZyIsIl9zY29wZUNhY2hlIiwiX3Jlc29sdmVyQ2FjaGUiLCJjbGVhckNhY2hlIiwiY2xlYXIiLCJkYXRhc2V0VHlwZSIsImFkZGl0aW9uYWxPcHRpb25TY29wZXMiLCJfY2FjaGVkU2NvcGVzIiwibWFpblNjb3BlIiwicmVzZXRDYWNoZSIsImtleUxpc3RzIiwiY2hhcnRPcHRpb25TY29wZXMiLCJzdWJQcmVmaXhlcyIsImdldFJlc29sdmVyIiwiaGFzRnVuY3Rpb24iLCJuZWVkQ29udGV4dCIsInJlc29sdmVyQ2FjaGUiLCJLTk9XTl9QT1NJVElPTlMiLCJwb3NpdGlvbklzSG9yaXpvbnRhbCIsImNvbXBhcmUyTGV2ZWwiLCJsMSIsImwyIiwib25BbmltYXRpb25zQ29tcGxldGUiLCJvbkNvbXBsZXRlIiwib25BbmltYXRpb25Qcm9ncmVzcyIsIm9uUHJvZ3Jlc3MiLCJnZXRDYW52YXMiLCJnZXRFbGVtZW50QnlJZCIsImluc3RhbmNlcyIsImdldENoYXJ0IiwibW92ZU51bWVyaWNLZXlzIiwiaW50S2V5IiwiQ2hhcnQiLCJ1c2VyQ29uZmlnIiwiaW5pdGlhbENhbnZhcyIsImV4aXN0aW5nQ2hhcnQiLCJPZmZzY3JlZW5DYW52YXMiLCJfZGV0ZWN0UGxhdGZvcm0iLCJfb3B0aW9ucyIsIl9hc3BlY3RSYXRpbyIsIl9tZXRhc2V0cyIsIl9sYXN0RXZlbnQiLCJfbGlzdGVuZXJzIiwiX3Jlc3BvbnNpdmVMaXN0ZW5lcnMiLCJfc29ydGVkTWV0YXNldHMiLCJfcGx1Z2lucyIsIl9oaWRkZW5JbmRpY2VzIiwiYXR0YWNoZWQiLCJfZG9SZXNpemUiLCJ0aW1lb3V0IiwiZGVib3VuY2UiLCJyZXNpemVEZWxheSIsIl9pbml0aWFsaXplIiwiYmluZEV2ZW50cyIsIl9yZXNpemVCZWZvcmVEcmF3IiwiX3Jlc2l6ZSIsIm5ld1NpemUiLCJuZXdSYXRpbyIsIm9uUmVzaXplIiwiZW5zdXJlU2NhbGVzSGF2ZUlEcyIsImF4aXNPcHRpb25zIiwiYnVpbGRPclVwZGF0ZVNjYWxlcyIsInNjYWxlT3B0cyIsInVwZGF0ZWQiLCJpc1JhZGlhbCIsImRwb3NpdGlvbiIsImR0eXBlIiwic2NhbGVUeXBlIiwiaGFzVXBkYXRlZCIsIl91cGRhdGVNZXRhc2V0cyIsIl9kZXN0cm95RGF0YXNldE1ldGEiLCJfcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMiLCJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCJuZXdDb250cm9sbGVycyIsIkNvbnRyb2xsZXJDbGFzcyIsIl9yZXNldEVsZW1lbnRzIiwiYW5pbXNEaXNhYmxlZCIsIl91cGRhdGVTY2FsZXMiLCJfY2hlY2tFdmVudEJpbmRpbmdzIiwiX3VwZGF0ZUhpZGRlbkluZGljZXMiLCJfbWluUGFkZGluZyIsIl91cGRhdGVMYXlvdXQiLCJfdXBkYXRlRGF0YXNldHMiLCJfZXZlbnRIYW5kbGVyIiwiX3VwZGF0ZUhvdmVyU3R5bGVzIiwiZXhpc3RpbmdFdmVudHMiLCJuZXdFdmVudHMiLCJ1bmJpbmRFdmVudHMiLCJjaGFuZ2VzIiwiX2dldFVuaWZvcm1EYXRhQ2hhbmdlcyIsImRhdGFzZXRDb3VudCIsIm1ha2VTZXQiLCJjaGFuZ2VTZXQiLCJub0FyZWEiLCJfaWR4IiwiX3VwZGF0ZURhdGFzZXQiLCJsYXllcnMiLCJfZHJhd0RhdGFzZXRzIiwiX2RyYXdEYXRhc2V0IiwidXNlQ2xpcCIsImdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUiLCJzZXREYXRhc2V0VmlzaWJpbGl0eSIsIl91cGRhdGVWaXNpYmlsaXR5IiwiX3N0b3AiLCJ0b0Jhc2U2NEltYWdlIiwidG9EYXRhVVJMIiwiYmluZFVzZXJFdmVudHMiLCJiaW5kUmVzcG9uc2l2ZUV2ZW50cyIsIl9hZGQiLCJfcmVtb3ZlIiwiZGV0YWNoZWQiLCJ1cGRhdGVIb3ZlclN0eWxlIiwiZ2V0QWN0aXZlRWxlbWVudHMiLCJzZXRBY3RpdmVFbGVtZW50cyIsImFjdGl2ZUVsZW1lbnRzIiwibGFzdEFjdGl2ZSIsInJlcGxheSIsImhvdmVyT3B0aW9ucyIsImRlYWN0aXZhdGVkIiwiYWN0aXZhdGVkIiwiaW5DaGFydEFyZWEiLCJldmVudEZpbHRlciIsIl9oYW5kbGVFdmVudCIsIl9nZXRBY3RpdmVFbGVtZW50cyIsImlzQ2xpY2siLCJfaXNDbGlja0V2ZW50IiwibGFzdEV2ZW50IiwiZGV0ZXJtaW5lTGFzdEV2ZW50IiwiaW52YWxpZGF0ZVBsdWdpbnMiLCJjbGlwQXJjIiwicGl4ZWxNYXJnaW4iLCJhbmdsZU1hcmdpbiIsInJUaGV0YVRvWFkiLCJ0aGV0YSIsInBhdGhBcmMiLCJpbm5lclIiLCJzcGFjaW5nT2Zmc2V0IiwiYXZOb2dTcGFjaW5nUmFkaXVzIiwiYW5nbGVPZmZzZXQiLCJvdXRlclN0YXJ0Iiwib3V0ZXJFbmQiLCJpbm5lclN0YXJ0IiwiaW5uZXJFbmQiLCJhbmdsZURlbHRhIiwiYm9yZGVyUmFkaXVzIiwiaGFsZlRoaWNrbmVzcyIsImlubmVyTGltaXQiLCJjb21wdXRlT3V0ZXJMaW1pdCIsIm91dGVyQXJjTGltaXQiLCJwYXJzZUJvcmRlclJhZGl1cyQxIiwib3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzIiwib3V0ZXJFbmRBZGp1c3RlZFJhZGl1cyIsIm91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlIiwib3V0ZXJFbmRBZGp1c3RlZEFuZ2xlIiwiaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzIiwiaW5uZXJFbmRBZGp1c3RlZFJhZGl1cyIsImlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlIiwiaW5uZXJFbmRBZGp1c3RlZEFuZ2xlIiwicENlbnRlciIsInA0IiwicDgiLCJvdXRlclN0YXJ0WCIsIm91dGVyU3RhcnRZIiwib3V0ZXJFbmRYIiwib3V0ZXJFbmRZIiwiQXJjRWxlbWVudCIsImZ1bGxDaXJjbGVzIiwiY2hhcnRYIiwiY2hhcnRZIiwickFkanVzdCIsImJldHdlZW5BbmdsZXMiLCJ3aXRoaW5SYWRpdXMiLCJoYWxmQW5nbGUiLCJoYWxmUmFkaXVzIiwicmFkaXVzT2Zmc2V0IiwiZHJhd0FyYyIsImlubmVyIiwibGluZUpvaW4iLCJkcmF3RnVsbENpcmNsZUJvcmRlcnMiLCJzZXRTdHlsZSIsImxpbmVDYXAiLCJwYXRoVmFycyIsInBhcmFtc1N0YXJ0IiwicGFyYW1zRW5kIiwic2VnbWVudFN0YXJ0Iiwic2VnbWVudEVuZCIsIm91dHNpZGUiLCJwYXRoU2VnbWVudCIsImxpbmVNZXRob2QiLCJzdGVwcGVkIiwiZ2V0TGluZU1ldGhvZCIsImZhc3RQYXRoU2VnbWVudCIsInByZXZYIiwibGFzdFkiLCJhdmdYIiwiY291bnRYIiwicG9pbnRJbmRleCIsImRyYXdYIiwidHJ1bmNYIiwiX2dldFNlZ21lbnRNZXRob2QiLCJ1c2VQYXRoMkQiLCJQYXRoMkQiLCJMaW5lRWxlbWVudCIsIl9wb2ludHMiLCJfc2VnbWVudHMiLCJfcG9pbnRzVXBkYXRlZCIsInNlZ21lbnRPcHRpb25zIiwiZmluZFN0YXJ0QW5kRW5kIiwiY2hhcnRDb250ZXh0IiwiYmFzZVN0eWxlIiwiYWRkU3R5bGUiLCJzdCIsImRpciIsInAwIiwicDBEYXRhSW5kZXgiLCJwMURhdGFJbmRleCIsImRvU3BsaXRCeVN0eWxlcyIsInNwbGl0QnlTdHlsZXMiLCJzb2xpZFNlZ21lbnRzIiwiX2NvbXB1dGVTZWdtZW50cyIsInN1YiIsIl9ib3VuZFNlZ21lbnRzIiwiX2ludGVycG9sYXRlIiwiX2dldEludGVycG9sYXRpb25NZXRob2QiLCJpbnRlcnBvbGF0ZWQiLCJzZWdtZW50TWV0aG9kIiwic3Ryb2tlUGF0aFdpdGhDYWNoZSIsInN0cm9rZVBhdGhEaXJlY3QiLCJpblJhbmdlJDEiLCJoaXRSYWRpdXMiLCJQb2ludEVsZW1lbnQiLCJtb3VzZVgiLCJtb3VzZVkiLCJpblhSYW5nZSIsImluWVJhbmdlIiwiaG92ZXJSYWRpdXMiLCJnZXRCYXJCb3VuZHMiLCJiYXIiLCJoYWxmIiwic2tpcE9yTGltaXQiLCJza2lwWCIsInNraXBZIiwiYWRkTm9ybWFsUmVjdFBhdGgiLCJpbmZsYXRlUmVjdCIsInJlZlJlY3QiLCJCYXJFbGVtZW50Iiwib3V0ZXIiLCJtYXhXIiwibWF4SCIsInBhcnNlQm9yZGVyV2lkdGgiLCJtYXhSIiwiZW5hYmxlQm9yZGVyIiwicGFyc2VCb3JkZXJSYWRpdXMiLCJib3VuZGluZ1JlY3RzIiwiYWRkUmVjdFBhdGgiLCJnZXRCb3hTaXplIiwibGFiZWxPcHRzIiwiYm94SGVpZ2h0IiwiYm94V2lkdGgiLCJ1c2VQb2ludFN0eWxlIiwicG9pbnRTdHlsZVdpZHRoIiwiaXRlbUhlaWdodCIsIkxlZ2VuZCIsIl9hZGRlZCIsImxlZ2VuZEhpdEJveGVzIiwiX2hvdmVyZWRJdGVtIiwiZG91Z2hudXRNb2RlIiwibGVnZW5kSXRlbXMiLCJjb2x1bW5TaXplcyIsImxpbmVXaWR0aHMiLCJidWlsZExhYmVscyIsImxhYmVsRm9udCIsIl9jb21wdXRlVGl0bGVIZWlnaHQiLCJfZml0Um93cyIsIl9maXRDb2xzIiwiaGl0Ym94ZXMiLCJ0b3RhbEhlaWdodCIsInJvdyIsImhlaWdodExpbWl0IiwidG90YWxXaWR0aCIsImN1cnJlbnRDb2xXaWR0aCIsImN1cnJlbnRDb2xIZWlnaHQiLCJhZGp1c3RIaXRCb3hlcyIsInJ0bEhlbHBlciIsImhpdGJveCIsIl9kcmF3IiwiZGVmYXVsdENvbG9yIiwiZm9udENvbG9yIiwiaGFsZkZvbnRTaXplIiwiY3Vyc29yIiwidGV4dERpcmVjdGlvbiIsImxpbmVEYXNoIiwiZHJhd09wdGlvbnMiLCJTUVJUMiIsInlCb3hUb3AiLCJ4Qm94TGVmdCIsImRyYXdMZWdlbmRCb3giLCJfdGV4dFgiLCJ0aXRsZUZvbnQiLCJ0aXRsZVBhZGRpbmciLCJ0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSIsIl9nZXRMZWdlbmRJdGVtQXQiLCJoaXRCb3giLCJoYW5kbGVFdmVudCIsIm9uTGVhdmUiLCJpc0xpc3RlbmVkIiwiaG92ZXJlZEl0ZW0iLCJzYW1lSXRlbSIsInBsdWdpbl9sZWdlbmQiLCJfZWxlbWVudCIsIl9hcmdzIiwiYWZ0ZXJFdmVudCIsIlRpdGxlIiwiX3BhZGRpbmciLCJ0ZXh0U2l6ZSIsIl9kcmF3QXJncyIsImZvbnRPcHRzIiwicGx1Z2luX3RpdGxlIiwidGl0bGVCbG9jayIsImNyZWF0ZVRpdGxlIiwicG9zaXRpb25lcnMiLCJhdmVyYWdlIiwiZXZlbnRQb3NpdGlvbiIsIm5lYXJlc3RFbGVtZW50IiwidHAiLCJwdXNoT3JDb25jYXQiLCJ0b1B1c2giLCJzcGxpdE5ld2xpbmVzIiwiY3JlYXRlVG9vbHRpcEl0ZW0iLCJnZXRUb29sdGlwU2l6ZSIsImZvb3RlciIsImJvZHlGb250IiwiZm9vdGVyRm9udCIsInRpdGxlTGluZUNvdW50IiwiZm9vdGVyTGluZUNvdW50IiwiYm9keUxpbmVJdGVtQ291bnQiLCJjb21iaW5lZEJvZHlMZW5ndGgiLCJib2R5SXRlbSIsImJlZm9yZSIsImFmdGVyIiwiYmVmb3JlQm9keSIsImFmdGVyQm9keSIsInRpdGxlU3BhY2luZyIsInRpdGxlTWFyZ2luQm90dG9tIiwiZGlzcGxheUNvbG9ycyIsImJvZHlTcGFjaW5nIiwiZm9vdGVyTWFyZ2luVG9wIiwiZm9vdGVyU3BhY2luZyIsIndpZHRoUGFkZGluZyIsIm1heExpbmVXaWR0aCIsImRldGVybWluZVhBbGlnbiIsInlBbGlnbiIsImNoYXJ0V2lkdGgiLCJ4QWxpZ24iLCJjYXJldCIsImNhcmV0U2l6ZSIsImNhcmV0UGFkZGluZyIsImRvZXNOb3RGaXRXaXRoQWxpZ24iLCJkZXRlcm1pbmVBbGlnbm1lbnQiLCJkZXRlcm1pbmVZQWxpZ24iLCJnZXRCYWNrZ3JvdW5kUG9pbnQiLCJhbGlnbm1lbnQiLCJwYWRkaW5nQW5kU2l6ZSIsImFsaWduWCIsImFsaWduWSIsImdldEFsaWduZWRYIiwiZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMiLCJvdmVycmlkZUNhbGxiYWNrcyIsIlRvb2x0aXAiLCJfZXZlbnRQb3NpdGlvbiIsIl9zaXplIiwiX2NhY2hlZEFuaW1hdGlvbnMiLCJfdG9vbHRpcEl0ZW1zIiwiZGF0YVBvaW50cyIsImNhcmV0WCIsImNhcmV0WSIsImxhYmVsQ29sb3JzIiwibGFiZWxQb2ludFN0eWxlcyIsImxhYmVsVGV4dENvbG9ycyIsInRvb2x0aXBJdGVtcyIsImdldFRpdGxlIiwiYmVmb3JlVGl0bGUiLCJhZnRlclRpdGxlIiwiZ2V0QmVmb3JlQm9keSIsImdldEJvZHkiLCJib2R5SXRlbXMiLCJzY29wZWQiLCJiZWZvcmVMYWJlbCIsImFmdGVyTGFiZWwiLCJnZXRBZnRlckJvZHkiLCJnZXRGb290ZXIiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsIl9jcmVhdGVJdGVtcyIsIml0ZW1Tb3J0IiwibGFiZWxDb2xvciIsImxhYmVsUG9pbnRTdHlsZSIsImxhYmVsVGV4dENvbG9yIiwicG9zaXRpb25BbmRTaXplIiwiYmFja2dyb3VuZFBvaW50IiwiZXh0ZXJuYWwiLCJkcmF3Q2FyZXQiLCJ0b29sdGlwUG9pbnQiLCJjYXJldFBvc2l0aW9uIiwiZ2V0Q2FyZXRQb3NpdGlvbiIsIngzIiwieTMiLCJwdFgiLCJwdFkiLCJ0aXRsZUNvbG9yIiwiX2RyYXdDb2xvckJveCIsImNvbG9yWCIsInJ0bENvbG9yWCIsInlPZmZTZXQiLCJjb2xvclkiLCJtdWx0aUtleUJhY2tncm91bmQiLCJvdXRlclgiLCJpbm5lclgiLCJzdHJva2VSZWN0IiwiZHJhd0JvZHkiLCJib2R5QWxpZ24iLCJib2R5TGluZUhlaWdodCIsInhMaW5lUGFkZGluZyIsImZpbGxMaW5lT2ZUZXh0IiwiYm9keUFsaWduRm9yQ2FsY3VsYXRpb24iLCJ0ZXh0Q29sb3IiLCJib2R5Q29sb3IiLCJkcmF3Rm9vdGVyIiwiZm9vdGVyQWxpZ24iLCJmb290ZXJDb2xvciIsInRvb2x0aXBTaXplIiwicXVhZHJhdGljQ3VydmVUbyIsIl91cGRhdGVBbmltYXRpb25UYXJnZXQiLCJhbmltWCIsImFuaW1ZIiwiX3dpbGxSZW5kZXIiLCJoYXNUb29sdGlwQ29udGVudCIsImdsb2JhbEFscGhhIiwicG9zaXRpb25DaGFuZ2VkIiwiX3Bvc2l0aW9uQ2hhbmdlZCIsIl9pZ25vcmVSZXBsYXlFdmVudHMiLCJwbHVnaW5fdG9vbHRpcCIsImFmdGVySW5pdCIsImFmdGVyRHJhdyIsImxhYmVsQ291bnQiLCJDYXRlZ29yeVNjYWxlIiwiX3N0YXJ0VmFsdWUiLCJfdmFsdWVSYW5nZSIsIl9hZGRlZExhYmVscyIsImFkZGVkIiwiYWRkZWRMYWJlbHMiLCJhZGRJZlN0cmluZyIsImxhc3RJbmRleE9mIiwiZmluZE9yQWRkTGFiZWwiLCJyZWxhdGl2ZUxhYmVsU2l6ZSIsIm1pblNwYWNpbmciLCJMaW5lYXJTY2FsZUJhc2UiLCJfZW5kVmFsdWUiLCJoYW5kbGVUaWNrUmFuZ2VPcHRpb25zIiwic2V0TWluIiwic2V0TWF4IiwibWluU2lnbiIsIm1heFNpZ24iLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsImdldFRpY2tMaW1pdCIsIm1heFRpY2tzIiwic3RlcFNpemUiLCJjb21wdXRlVGlja0xpbWl0IiwiZ2VuZXJhdGlvbk9wdGlvbnMiLCJkYXRhUmFuZ2UiLCJwcmVjaXNpb24iLCJtYXhEaWdpdHMiLCJpbmNsdWRlQm91bmRzIiwibWF4U3BhY2VzIiwicm1pbiIsInJtYXgiLCJjb3VudERlZmluZWQiLCJuaWNlTWluIiwibmljZU1heCIsIm51bVNwYWNlcyIsInJvdW5kZWQiLCJhbG1vc3RXaG9sZSIsImRlY2ltYWxQbGFjZXMiLCJnZW5lcmF0ZVRpY2tzJDEiLCJMaW5lYXJTY2FsZSIsImlzTWFqb3IiLCJ0aWNrVmFsIiwiTG9nYXJpdGhtaWNTY2FsZSIsIl96ZXJvIiwiZXhwIiwiZW5kRXhwIiwiZW5kU2lnbmlmaWNhbmQiLCJzaWduaWZpY2FuZCIsImxhc3RUaWNrIiwiZ2VuZXJhdGVUaWNrcyIsImdldFRpY2tCYWNrZHJvcEhlaWdodCIsImRldGVybWluZUxpbWl0cyIsInVwZGF0ZUxpbWl0cyIsImxpbWl0cyIsImhMaW1pdHMiLCJ2TGltaXRzIiwiZ2V0VGV4dEFsaWduRm9yQW5nbGUiLCJ5Rm9yQW5nbGUiLCJwYXRoUmFkaXVzTGluZSIsImdldFBvaW50UG9zaXRpb24iLCJSYWRpYWxMaW5lYXJTY2FsZSIsImRyYXdpbmdBcmVhIiwiX3BvaW50TGFiZWxzIiwiX3BvaW50TGFiZWxJdGVtcyIsInZhbHVlQ291bnQiLCJwb2ludExhYmVsT3B0cyIsImFkZGl0aW9uYWxBbmdsZSIsImNlbnRlclBvaW50TGFiZWxzIiwiZ2V0UG9pbnRMYWJlbENvbnRleHQiLCJwbEZvbnQiLCJzZXRDZW50ZXJQb2ludCIsImV4dHJhIiwib3V0ZXJEaXN0YW5jZSIsInBvaW50TGFiZWxQb3NpdGlvbiIsImJ1aWxkUG9pbnRMYWJlbEl0ZW1zIiwiZml0V2l0aFBvaW50TGFiZWxzIiwibGVmdE1vdmVtZW50IiwicmlnaHRNb3ZlbWVudCIsInRvcE1vdmVtZW50IiwiYm90dG9tTW92ZW1lbnQiLCJzY2FsaW5nRmFjdG9yIiwiZ2V0VmFsdWVGb3JEaXN0YW5jZUZyb21DZW50ZXIiLCJzY2FsZWREaXN0YW5jZSIsInBvaW50TGFiZWwiLCJjcmVhdGVQb2ludExhYmVsQ29udGV4dCIsImRpc3RhbmNlRnJvbUNlbnRlciIsImdldEJhc2VQb3NpdGlvbiIsImdldFBvaW50TGFiZWxQb3NpdGlvbiIsImJhY2tkcm9wTGVmdCIsImJhY2tkcm9wVG9wIiwiYmFja2Ryb3BXaWR0aCIsImJhY2tkcm9wSGVpZ2h0IiwiZHJhd1BvaW50TGFiZWxzIiwiZ3JpZExpbmVPcHRzIiwiZHJhd1JhZGl1c0xpbmUiLCJhbmltYXRlIiwiSU5URVJWQUxTIiwibWlsbGlzZWNvbmQiLCJjb21tb24iLCJzdGVwcyIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJkYXkiLCJxdWFydGVyIiwieWVhciIsIlVOSVRTIiwic29ydGVyIiwiYWRhcHRlciIsIl9hZGFwdGVyIiwicGFyc2VyIiwiaXNvV2Vla2RheSIsIl9wYXJzZU9wdHMiLCJkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzIiwibWluVW5pdCIsImNhcGFjaXR5IiwiaW50ZXJ2YWwiLCJhZGRUaWNrIiwidGltZXN0YW1wcyIsInRpY2tzRnJvbVRpbWVzdGFtcHMiLCJtYWpvclVuaXQiLCJzZXRNYWpvclRpY2tzIiwiVGltZVNjYWxlIiwiX3VuaXQiLCJfbWFqb3JVbml0IiwiX29mZnNldHMiLCJfbm9ybWFsaXplZCIsImRpc3BsYXlGb3JtYXRzIiwibm9ybWFsaXplZCIsIl9hcHBseUJvdW5kcyIsIl9nZXRMYWJlbEJvdW5kcyIsImdldExhYmVsVGltZXN0YW1wcyIsInRpbWVPcHRzIiwiX2dlbmVyYXRlIiwiX2ZpbHRlckJldHdlZW4iLCJfZ2V0TGFiZWxDYXBhY2l0eSIsImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiaW5pdE9mZnNldHMiLCJvZmZzZXRBZnRlckF1dG9za2lwIiwiZ2V0RGVjaW1hbEZvclZhbHVlIiwiaGFzV2Vla2RheSIsImdldERhdGFUaW1lc3RhbXBzIiwidG9vbHRpcEZvcm1hdCIsIl90aWNrRm9ybWF0RnVuY3Rpb24iLCJtaW5vckZvcm1hdCIsIm1ham9yRm9ybWF0Iiwib2Zmc2V0cyIsIl9nZXRMYWJlbFNpemUiLCJ0aWNrc09wdHMiLCJ0aWNrTGFiZWxXaWR0aCIsImNvc1JvdGF0aW9uIiwic2luUm90YXRpb24iLCJ0aWNrRm9udFNpemUiLCJleGFtcGxlVGltZSIsImV4YW1wbGVMYWJlbCIsInByZXZTb3VyY2UiLCJuZXh0U291cmNlIiwicHJldlRhcmdldCIsIm5leHRUYXJnZXQiLCJzcGFuIiwiVGltZVNlcmllc1NjYWxlIiwiX3RhYmxlIiwiX21pblBvcyIsIl90YWJsZVJhbmdlIiwiX2dldFRpbWVzdGFtcHNGb3JUYWJsZSIsImJ1aWxkTG9va3VwVGFibGUiLCJkZWZhdWx0RGF0YXNldElkS2V5IiwicmVmb3J3YXJkUmVmIiwic2V0TGFiZWxzIiwiY3VycmVudERhdGEiLCJuZXh0TGFiZWxzIiwic2V0RGF0YXNldHMiLCJuZXh0RGF0YXNldHMiLCJkYXRhc2V0SWRLZXkiLCJhZGRlZERhdGFzZXRzIiwibmV4dERhdGFzZXQiLCJjdXJyZW50RGF0YXNldCIsImZpbmQiLCJjbG9uZURhdGEiLCJuZXh0RGF0YSIsIkNoYXJ0Q29tcG9uZW50IiwicmVkcmF3IiwiZmFsbGJhY2tDb250ZW50IiwidXBkYXRlTW9kZSIsImNhbnZhc1JlZiIsImNoYXJ0UmVmIiwicmVuZGVyQ2hhcnQiLCJkZXN0cm95Q2hhcnQiLCJuZXh0T3B0aW9ucyIsInJvbGUiLCJjcmVhdGVUeXBlZENoYXJ0IiwicmVnaXN0ZXJhYmxlcyIsIkxpbmUiLCJzY2hvb2xHcmFwaCIsImNoYXJ0Q29sb3JzIiwiaGlkZGVuR3JhcGhzIiwiY291bnRyeUZpbHRlciIsImNhbXBGaWx0ZXIiLCJoaWRkZW5DaGFydHMiLCJzb3J0QnlNb250aCIsInBvaW50UmFkaXVzIiwicG9pbnRIb3ZlclJhZGl1cyIsImNvbnZlcnREYXRhVG9NYXRjaENoYXJ0SlMiLCJwcmludEVsZW1lbnRBdEV2ZW50IiwiZ2V0RWxlbWVudEF0RXZlbnQiLCJMZXNzb25zTGVnZW5kcyIsImZpbHRlcmVkT3V0cHV0IiwiTGVnZW5kSW5mbyIsInBsYWNlTmFtZSIsImNhbXBOYW1lIiwidG90YWxMZXNzb25zIiwiU2Nob29sc0xlZ2VuZCIsInNjaG9vbHNNYXAiLCJzY2hvb2xMZXNzb25zIiwiU2Nob29sQ2FyZCIsInNjaG9vbE5hbWUiLCJsZXNzb25zQ291bnQiLCJzaG93R3JhcGgiLCJISURFX0dSQVBIIiwiU0hPV19HUkFQSCIsImdyYXBoTmFtZSIsInRvZ2dsZUdyYXBoQWN0aW9uIiwidG9nZ2xlR3JhcGgiLCJiYWNrZ3JvdW5kIiwic2Nob29sRGF0YSIsImxlc3NvbnMiLCJjb252ZXJNYXBUb0FycmF5Iiwic2Nob29sIiwiTG9hZGluZ1NwaW5uZXIiLCJMb2FkaW5nU2NyZWVuIiwiZmlsdGVyU2Nob29scyIsImNvdW50cnkiLCJjYW1wIiwiZmlsdGVyZWREYXRhIiwiZmlsdGVyQ2FtcHMiLCJDaGFydENvbnRhaW5lciIsInNjaG9vbEZpbHRlciIsInNjaG9vbE1hcCIsInByZXZpb3VzVmFsdWUiLCJzY2hvb2xHcmFwaFBvaW50cyIsImZpbHRlckRhdGEiLCJzd2l0Y2hMYW5ndWFnZSIsImxhbmciLCJBUiIsIlJUTCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJjaGFuZ2VMYW5ndWFnZSIsImNvbnRyb2xSVExTdHlsZXNoZWV0IiwiTFRSIiwiRU4iLCJsaW5rcyIsInN0eWxlU2hlZXQiLCJyZWwiLCJMYW5ndWFnZVN3aXRjaGVyIiwiY3VycmVudExhbmciLCJnZXRJdGVtIiwidXNlTGFuZ3VhZ2VTd2l0Y2hlciIsIl9wYXRoMiIsIl9wYXRoMyIsInZpZXdCb3giLCJlbmFibGVCYWNrZ3JvdW5kIiwieG1sU3BhY2UiLCJjeCIsImN5IiwiVGhlbWVTd2l0Y2hlciIsInByZWZlcnNEYXJrU2NoZW1lIiwiY3VycmVudFRoZW1lIiwicHJlZmVycmVkVGhlbWUiLCJtYXRjaE1lZGlhIiwiREFSSyIsIkxJR0hUIiwidGhlbWUiLCJzZXRUaGVtZSIsImljb24iLCJjbGFzc0xpc3QiLCJuZXh0VGhlbWUiLCJ0b2dnbGUiLCJIZWFkZXIiLCJ1c2VGZXRjaERhdGEiLCJsb2FkZWQiLCJqc29uIiwiR0VUX0RBVEEiLCJnZXREYXRhU3VjY2VzcyIsIk1haW5QYWdlIiwiUG9pbnRQYWdlIiwidXNlUGFyYW1zIiwiaXRlbURhdGEiLCJ1c2VHZXRQb2ludERhdGEiLCJub3RGb3VuZCIsIm91dHB1dCIsIl90eXBlb2YiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX3NldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9nZXRQcm90b3R5cGVPZiIsImNvbnNvbGVMb2dnZXIiLCJiYXNlTG9nZ2VyIiwiTG9nZ2VyIiwiY29uY3JldGVMb2dnZXIiLCJsb2dnZXIiLCJkZWJ1ZyIsImJvb2wiLCJmb3J3YXJkIiwiX2xlbjMiLCJfa2V5MyIsIl9sZW40IiwiX2tleTQiLCJsdmwiLCJkZWJ1Z09ubHkiLCJtb2R1bGVOYW1lIiwiRXZlbnRFbWl0dGVyIiwib2JzZXJ2ZXJzIiwiY2xvbmVkIiwiX2Nsb25lZCIsImRlZmVyIiwicHJvbWlzZSIsInJlamVjdCIsIm1ha2VTdHJpbmciLCJjb3B5IiwiZ2V0TGFzdE9mUGF0aCIsIkVtcHR5IiwiY2xlYW5LZXkiLCJjYW5Ob3RUcmF2ZXJzZURlZXBlciIsInNldFBhdGgiLCJuZXdWYWx1ZSIsIl9nZXRMYXN0T2ZQYXRoIiwiZ2V0UGF0aCIsIl9nZXRMYXN0T2ZQYXRoMyIsImdldFBhdGhXaXRoRGVmYXVsdHMiLCJkZWZhdWx0RGF0YSIsImRlZXBFeHRlbmQiLCJvdmVyd3JpdGUiLCJyZWdleEVzY2FwZSIsIl9lbnRpdHlNYXAiLCJpc0lFMTAiLCJ1c2VyQWdlbnREYXRhIiwidXNlckFnZW50IiwiY2hhcnMiLCJvd25LZXlzJDEiLCJfb2JqZWN0U3ByZWFkJDEiLCJkZWVwRmluZCIsImtleVNlcGFyYXRvciIsImpvaW5lZFBhdGgiLCJSZXNvdXJjZVN0b3JlIiwiX0V2ZW50RW1pdHRlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX3N1cGVyIiwic2hhbSIsIkJvb2xlYW4iLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJzaWxlbnQiLCJhZGROYW1lc3BhY2VzIiwiZW1pdCIsImFkZFJlc291cmNlIiwiZGVlcCIsInBhY2siLCJyZW1vdmVOYW1lc3BhY2VzIiwiZ2V0UmVzb3VyY2UiLCJjb21wYXRpYmlsaXR5QVBJIiwiZ2V0RGF0YUJ5TGFuZ3VhZ2UiLCJwb3N0UHJvY2Vzc29yIiwicHJvY2Vzc29ycyIsImFkZFBvc3RQcm9jZXNzb3IiLCJoYW5kbGUiLCJ0cmFuc2xhdG9yIiwicHJvY2Vzc29yIiwicHJvY2VzcyIsIm93bktleXMkMiIsIl9vYmplY3RTcHJlYWQkMiIsImNoZWNrZWRMb2FkZWRGb3IiLCJUcmFuc2xhdG9yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxIiwibGFuZ3VhZ2UiLCJpbnRlcnBvbGF0aW9uIiwibnNTZXBhcmF0b3IiLCJ3b3VsZENoZWNrRm9yTnNJbktleSIsInNlZW1zTmF0dXJhbExhbmd1YWdlIiwidXNlckRlZmluZWRLZXlTZXBhcmF0b3IiLCJ1c2VyRGVmaW5lZE5zU2VwYXJhdG9yIiwicG9zc2libGVDaGFycyIsIm1hdGNoZWQiLCJsb29rc0xpa2VPYmplY3RQYXRoIiwiaW50ZXJwb2xhdG9yIiwibmVzdGluZ1JlZ2V4cCIsImxhc3RLZXkiLCJfdGhpczIiLCJvdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlciIsInJldHVybkRldGFpbHMiLCJfdGhpcyRleHRyYWN0RnJvbUtleSIsImV4dHJhY3RGcm9tS2V5IiwibmFtZXNwYWNlIiwiYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUiLCJyZXNVc2VkS2V5IiwidXNlZEtleSIsInJlc0V4YWN0VXNlZEtleSIsImV4YWN0VXNlZEtleSIsInJlc1R5cGUiLCJub09iamVjdCIsImpvaW5BcnJheXMiLCJoYW5kbGVBc09iamVjdEluSTE4bkZvcm1hdCIsImkxOG5Gb3JtYXQiLCJoYW5kbGVBc09iamVjdCIsInJldHVybk9iamVjdHMiLCJyZXR1cm5lZE9iamVjdEhhbmRsZXIiLCJyZXNUeXBlSXNBcnJheSIsIm5ld0tleVRvVXNlIiwiZGVlcEtleSIsImV4dGVuZFRyYW5zbGF0aW9uIiwidXNlZERlZmF1bHQiLCJuZWVkc1BsdXJhbEhhbmRsaW5nIiwiaGFzRGVmYXVsdFZhbHVlIiwiZGVmYXVsdFZhbHVlU3VmZml4IiwicGx1cmFsUmVzb2x2ZXIiLCJnZXRTdWZmaXgiLCJpc1ZhbGlkTG9va3VwIiwibWlzc2luZ0tleU5vVmFsdWVGYWxsYmFja1RvS2V5IiwicmVzRm9yTWlzc2luZyIsInVwZGF0ZU1pc3NpbmciLCJsbmdzIiwiZmFsbGJhY2tMbmdzIiwibGFuZ3VhZ2VVdGlscyIsImdldEZhbGxiYWNrQ29kZXMiLCJzYXZlTWlzc2luZ1RvIiwidG9SZXNvbHZlSGllcmFyY2h5Iiwic2VuZCIsInNwZWNpZmljRGVmYXVsdFZhbHVlIiwiZGVmYXVsdEZvck1pc3NpbmciLCJtaXNzaW5nS2V5SGFuZGxlciIsInNhdmVNaXNzaW5nIiwic2F2ZU1pc3NpbmdQbHVyYWxzIiwiZ2V0U3VmZml4ZXMiLCJhcHBlbmROYW1lc3BhY2VUb01pc3NpbmdLZXkiLCJwYXJzZU1pc3NpbmdLZXlIYW5kbGVyIiwiX3RoaXMzIiwiZGVmYXVsdFZhcmlhYmxlcyIsInVzZWRMbmciLCJ1c2VkTlMiLCJza2lwSW50ZXJwb2xhdGlvbiIsIm5lc3RCZWYiLCJza2lwT25WYXJpYWJsZXMiLCJuZXN0IiwicG9zdFByb2Nlc3MiLCJwb3N0UHJvY2Vzc29yTmFtZXMiLCJhcHBseVBvc3RQcm9jZXNzb3IiLCJwb3N0UHJvY2Vzc1Bhc3NSZXNvbHZlZCIsImkxOG5SZXNvbHZlZCIsImZvdW5kIiwiX3RoaXM0IiwiZXh0cmFjdGVkIiwiZmFsbGJhY2tOUyIsIm5lZWRzWmVyb1N1ZmZpeExvb2t1cCIsIm9yZGluYWwiLCJzaG91bGRVc2VJbnRsQXBpIiwibmVlZHNDb250ZXh0SGFuZGxpbmciLCJjb2RlcyIsInV0aWxzIiwicG9zc2libGVLZXkiLCJmaW5hbEtleXMiLCJhZGRMb29rdXBLZXlzIiwicGx1cmFsU3VmZml4IiwiemVyb1N1ZmZpeCIsInBsdXJhbFNlcGFyYXRvciIsImNvbnRleHRLZXkiLCJjb250ZXh0U2VwYXJhdG9yIiwicmV0dXJuTnVsbCIsInJldHVybkVtcHR5U3RyaW5nIiwicmVzb3VyY2VTdG9yZSIsImNhcGl0YWxpemUiLCJMYW5ndWFnZVV0aWwiLCJzdXBwb3J0ZWRMbmdzIiwiZm9ybWF0TGFuZ3VhZ2VDb2RlIiwic3BlY2lhbENhc2VzIiwibG93ZXJDYXNlTG5nIiwiY2xlYW5Db2RlIiwibG9hZCIsIm5vbkV4cGxpY2l0U3VwcG9ydGVkTG5ncyIsImdldExhbmd1YWdlUGFydEZyb21Db2RlIiwiY2xlYW5lZExuZyIsImlzU3VwcG9ydGVkQ29kZSIsImxuZ09ubHkiLCJzdXBwb3J0ZWRMbmciLCJmYWxsYmFja3MiLCJnZXRTY3JpcHRQYXJ0RnJvbUNvZGUiLCJmYWxsYmFja0NvZGUiLCJmYWxsYmFja0NvZGVzIiwiYWRkQ29kZSIsInNldHMiLCJuciIsIl9ydWxlc1BsdXJhbHNUeXBlcyIsImRlcHJlY2F0ZWRKc29uVmVyc2lvbnMiLCJzdWZmaXhlc09yZGVyIiwiemVybyIsIm9uZSIsInR3byIsImZldyIsIm1hbnkiLCJjcmVhdGVSdWxlcyIsInJ1bGVzIiwicGx1cmFscyIsIlBsdXJhbFJlc29sdmVyIiwiY29tcGF0aWJpbGl0eUpTT04iLCJQbHVyYWxSdWxlcyIsIl91bnVzZWQiLCJydWxlIiwiZ2V0UnVsZSIsInJlc29sdmVkT3B0aW9ucyIsInBsdXJhbENhdGVnb3JpZXMiLCJwbHVyYWxDYXRlZ29yeTEiLCJwbHVyYWxDYXRlZ29yeTIiLCJwbHVyYWxDYXRlZ29yeSIsInByZXBlbmQiLCJzZWxlY3QiLCJnZXRTdWZmaXhSZXRyb0NvbXBhdGlibGUiLCJub0FicyIsInNpbXBsaWZ5UGx1cmFsU3VmZml4IiwicmV0dXJuU3VmZml4Iiwib3duS2V5cyQzIiwiX29iamVjdFNwcmVhZCQzIiwiSW50ZXJwb2xhdG9yIiwiZXNjYXBlVmFsdWUiLCJpT3B0cyIsInVzZVJhd1ZhbHVlVG9Fc2NhcGUiLCJwcmVmaXhFc2NhcGVkIiwic3VmZml4RXNjYXBlZCIsImZvcm1hdFNlcGFyYXRvciIsInVuZXNjYXBlUHJlZml4IiwidW5lc2NhcGVTdWZmaXgiLCJuZXN0aW5nUHJlZml4IiwibmVzdGluZ1ByZWZpeEVzY2FwZWQiLCJuZXN0aW5nU3VmZml4IiwibmVzdGluZ1N1ZmZpeEVzY2FwZWQiLCJuZXN0aW5nT3B0aW9uc1NlcGFyYXRvciIsIm1heFJlcGxhY2VzIiwiYWx3YXlzRm9ybWF0IiwicmVzZXRSZWdFeHAiLCJyZWdleHBTdHIiLCJyZWdleHAiLCJyZWdleHBVbmVzY2FwZVN0ciIsInJlZ2V4cFVuZXNjYXBlIiwibmVzdGluZ1JlZ2V4cFN0ciIsInJlcGxhY2VzIiwicmVnZXhTYWZlIiwiaGFuZGxlRm9ybWF0IiwiaW50ZXJwb2xhdGlvbmtleSIsIm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciIsInJlZ2V4Iiwic2FmZVZhbHVlIiwidG9kbyIsIm1hdGNoZWRWYXIiLCJ0ZW1wIiwibGFzdEluZGV4IiwiY2xvbmVkT3B0aW9ucyIsImhhbmRsZUhhc09wdGlvbnMiLCJpbmhlcml0ZWRPcHRpb25zIiwic2VwIiwib3B0aW9uc1N0cmluZyIsImRvUmVkdWNlIiwiZWxlbSIsIm93bktleXMkNCIsIl9vYmplY3RTcHJlYWQkNCIsIkZvcm1hdHRlciIsImN1cnJlbmN5IiwiRGF0ZVRpbWVGb3JtYXQiLCJyZWxhdGl2ZXRpbWUiLCJSZWxhdGl2ZVRpbWVGb3JtYXQiLCJsaXN0IiwiTGlzdEZvcm1hdCIsIl9mb3JtYXQiLCJtZW0iLCJfcGFyc2VGb3JtYXRTdHIiLCJmb3JtYXRTdHIiLCJmb3JtYXROYW1lIiwiZm9ybWF0T3B0aW9ucyIsIm9wdFN0ciIsIm9wdCIsIl9vcHQkc3BsaXQyIiwiaXRlciIsInBhcnNlRm9ybWF0U3RyIiwiZm9ybWF0dGVkIiwidmFsT3B0aW9ucyIsImZvcm1hdFBhcmFtcyIsIm93bktleXMkNSIsIl9vYmplY3RTcHJlYWQkNSIsIkNvbm5lY3RvciIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QkMiIsIndhaXRpbmdSZWFkcyIsIm1heFBhcmFsbGVsUmVhZHMiLCJyZWFkaW5nQ2FsbHMiLCJtYXhSZXRyaWVzIiwicmV0cnlUaW1lb3V0IiwidG9Mb2FkIiwidG9Mb2FkTGFuZ3VhZ2VzIiwidG9Mb2FkTmFtZXNwYWNlcyIsImhhc0FsbE5hbWVzcGFjZXMiLCJyZWxvYWQiLCJwZW5kaW5nQ291bnQiLCJlcnJvcnMiLCJhZGRSZXNvdXJjZUJ1bmRsZSIsIl9nZXRMYXN0T2ZQYXRoMiIsInJlbW92ZVBlbmRpbmciLCJsb2FkZWRLZXlzIiwiZmNOYW1lIiwidHJpZWQiLCJxdWV1ZUxvYWQiLCJsb2FkT25lIiwicHJlcGFyZUxvYWRpbmciLCJfdGhpczUiLCJmYWxsYmFja1ZhbHVlIiwiaXNVcGRhdGUiLCJpbml0SW1tZWRpYXRlIiwicHJlbG9hZCIsInREZXNjcmlwdGlvbiIsInRyYW5zZm9ybU9wdGlvbnMiLCJvd25LZXlzJDYiLCJfb2JqZWN0U3ByZWFkJDYiLCJiaW5kTWVtYmVyRnVuY3Rpb25zIiwiSTE4biIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QkMyIsIm1vZHVsZXMiLCJpc0Nsb25lIiwiZGVmT3B0cyIsImNyZWF0ZUNsYXNzT25EZW1hbmQiLCJDbGFzc09yT2JqZWN0IiwibHUiLCJsYW5ndWFnZURldGVjdG9yIiwiZGV0ZWN0aW9uIiwic3RvcmVBcGkiLCJfdGhpczIkc3RvcmUiLCJzdG9yZUFwaUNoYWluZWQiLCJfdGhpczIkc3RvcmUyIiwiZGVmZXJyZWQiLCJmaW5pc2giLCJ1c2VkQ2FsbGJhY2siLCJhcHBlbmQiLCJyZXNvbHZlZExhbmd1YWdlIiwic2V0UmVzb2x2ZWRMYW5ndWFnZSIsImxuZ0luTG5ncyIsImhhc0xhbmd1YWdlU29tZVRyYW5zbGF0aW9ucyIsInNldExuZ1Byb3BzIiwic2V0TG5nIiwiZ2V0QmVzdE1hdGNoRnJvbUNvZGVzIiwiY2FjaGVVc2VyTGFuZ3VhZ2UiLCJsb2FkUmVzb3VyY2VzIiwiYXN5bmMiLCJkZXRlY3QiLCJmaXhlZFQiLCJyZXN1bHRLZXkiLCJfdGhpcyR0cmFuc2xhdG9yIiwiX3RoaXMkdHJhbnNsYXRvcjIiLCJleGlzdHMiLCJfdGhpczYiLCJwcmVSZXN1bHQiLCJfdGhpczciLCJwcmVsb2FkZWQiLCJuZXdMbmdzIiwiX3RoaXM4IiwibWVyZ2VkT3B0aW9ucyIsIm1lbWJlcnNUb0NvcHkiLCJjcmVhdGVJbnN0YW5jZSIsInJlbG9hZFJlc291cmNlcyIsInVzZSIsInNldERlZmF1bHROYW1lc3BhY2UiLCJsb2FkTGFuZ3VhZ2VzIiwiX29iamVjdFNwcmVhZDIiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiZW4iLCJhciIsInRyYW5zbGF0aW9uQVIiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJjb21wb3NlIiwiZnVuY3MiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImluaXRpYWxGaWx0ZXJWYWx1ZSIsImluaXRpYWxTdGF0ZSIsInJvb3RSZWR1Y2VyIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsInJlZHVjZXIiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImNvbWJpbmVSZWR1Y2VycyIsImRlZmF1bHRDb3VudHJ5RmlsdGVyIiwiZGVmYXVsdENhbXBGaWx0ZXIiLCJkZWZhdWx0U2Nob29sRmlsdGVyIiwiY3VycmVudENhbXBWYWx1ZSIsImN1cnJlbnRTY2hvb2wiLCJjdXJyZW50U2Nob29sVmFsdWUiLCJncmFwaCIsImNyZWF0ZVN0b3JlIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiaXNTdWJzY3JpYmVkIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZVN0YXRlIiwidW5zdWJzY3JpYmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJhcHBseU1pZGRsZXdhcmUiLCJzZXJ2ZXJTdGF0ZSIsImNvbnRleHRWYWx1ZSIsInBhcmVudFN1YiIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJvblN0YXRlQ2hhbmdlIiwidHJ5U3Vic2NyaWJlIiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwibm90aWZ5TmVzdGVkU3VicyIsInRyeVVuc3Vic2NyaWJlIiwiZ2V0TGlzdGVuZXJzIiwicHJldmlvdXNTdGF0ZSIsIkNvbnRleHQiLCJoaXN0b3J5UmVmIiwiX29wdGlvbnMkd2luZG93IiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJnZXRJbmRleEFuZExvY2F0aW9uIiwiX3dpbmRvdyRsb2NhdGlvbiIsInVzciIsImJsb2NrZWRQb3BUeCIsImJsb2NrZXJzIiwibmV4dEFjdGlvbiIsIl9nZXRJbmRleEFuZExvY2F0aW9uIiwibmV4dEluZGV4IiwibmV4dExvY2F0aW9uIiwicmV0cnkiLCJhcHBseVR4IiwiX2dldEluZGV4QW5kTG9jYXRpb24yIiwiZ2V0TmV4dExvY2F0aW9uIiwiZ2V0SGlzdG9yeVN0YXRlQW5kVXJsIiwiYWxsb3dUeCIsIl9nZXRJbmRleEFuZExvY2F0aW9uMyIsInJlcGxhY2VTdGF0ZSIsIlB1c2giLCJfZ2V0SGlzdG9yeVN0YXRlQW5kVXIiLCJoaXN0b3J5U3RhdGUiLCJwdXNoU3RhdGUiLCJSZXBsYWNlIiwiX2dldEhpc3RvcnlTdGF0ZUFuZFVyMiIsImJhY2siLCJibG9jayIsImJsb2NrZXIiLCJ1bmJsb2NrIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJlbnYiLCJQVUJMSUNfVVJMIl0sInNvdXJjZVJvb3QiOiIifQ==