/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={679:(t,e,n)=>{var i=n(864),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(t){return i.isMemo(t)?a:s[t.$$typeof]||r}s[i.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[i.Memo]=a;var c=Object.defineProperty,u=Object.getOwnPropertyNames,h=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,p=Object.prototype;t.exports=function t(e,n,i){if("string"!=typeof n){if(p){var r=f(n);r&&r!==p&&t(e,r,i)}var a=u(n);h&&(a=a.concat(h(n)));for(var s=l(e),g=l(n),m=0;m<a.length;++m){var b=a[m];if(!(o[b]||i&&i[b]||g&&g[b]||s&&s[b])){var y=d(n,b);try{c(e,b,y)}catch(t){}}}}return e}},418:t=>{var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function r(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(t){i[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var a,s,l=r(t),c=1;c<arguments.length;c++){for(var u in a=Object(arguments[c]))n.call(a,u)&&(l[u]=a[u]);if(e){s=e(a);for(var h=0;h<s.length;h++)i.call(a,s[h])&&(l[s[h]]=a[s[h]])}}return l}},448:(t,e,n)=>{var i=n(294),r=n(418),o=n(840);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!i)throw Error(a(227));var s=new Set,l={};function c(t,e){u(t,e),u(t+"Capture",e)}function u(t,e){for(l[t]=e,t=0;t<e.length;t++)s.add(e[t])}var h=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,p={},g={};function m(t,e,n,i,r,o,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=o,this.removeEmptyString=a}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){b[t]=new m(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];b[e]=new m(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){b[t]=new m(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){b[t]=new m(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){b[t]=new m(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){b[t]=new m(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){b[t]=new m(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){b[t]=new m(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){b[t]=new m(t,5,!1,t.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(t){return t[1].toUpperCase()}function x(t,e,n,i){var r=b.hasOwnProperty(e)?b[e]:null;(null!==r?0===r.type:!i&&2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))||(function(t,e,n,i){if(null==e||function(t,e,n,i){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,r,i)&&(n=null),i||null===r?function(t){return!!f.call(g,t)||!f.call(p,t)&&(d.test(t)?g[t]=!0:(p[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):r.mustUseProperty?t[r.propertyName]=null===n?3!==r.type&&"":n:(e=r.attributeName,i=r.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,i?t.setAttributeNS(i,e,n):t.setAttribute(e,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!1,!1)})),b.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!0,!0)}));var w=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_=60103,k=60106,S=60107,E=60108,O=60114,C=60109,P=60110,M=60112,L=60113,R=60120,T=60115,N=60116,D=60121,A=60128,I=60129,j=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var z=Symbol.for;_=z("react.element"),k=z("react.portal"),S=z("react.fragment"),E=z("react.strict_mode"),O=z("react.profiler"),C=z("react.provider"),P=z("react.context"),M=z("react.forward_ref"),L=z("react.suspense"),R=z("react.suspense_list"),T=z("react.memo"),N=z("react.lazy"),D=z("react.block"),z("react.scope"),A=z("react.opaque.id"),I=z("react.debug_trace_mode"),j=z("react.offscreen"),F=z("react.legacy_hidden")}var V,B="function"==typeof Symbol&&Symbol.iterator;function H(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=B&&t[B]||t["@@iterator"])?t:null}function W(t){if(void 0===V)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);V=e&&e[1]||""}return"\n"+V+t}var U=!1;function $(t,e){if(!t||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var i=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){i=t}t.call(e.prototype)}else{try{throw Error()}catch(t){i=t}t()}}catch(t){if(t&&i&&"string"==typeof t.stack){for(var r=t.stack.split("\n"),o=i.stack.split("\n"),a=r.length-1,s=o.length-1;1<=a&&0<=s&&r[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(r[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||r[a]!==o[s])return"\n"+r[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{U=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?W(t):""}function Y(t){switch(t.tag){case 5:return W(t.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return $(t.type,!1);case 11:return $(t.type.render,!1);case 22:return $(t.type._render,!1);case 1:return $(t.type,!0);default:return""}}function K(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case S:return"Fragment";case k:return"Portal";case O:return"Profiler";case E:return"StrictMode";case L:return"Suspense";case R:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case P:return(t.displayName||"Context")+".Consumer";case C:return(t._context.displayName||"Context")+".Provider";case M:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case T:return K(t.type);case D:return K(t._render);case N:e=t._payload,t=t._init;try{return K(t(e))}catch(t){}}return null}function q(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function G(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function Q(t){t._valueTracker||(t._valueTracker=function(t){var e=G(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),i=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,o=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return r.call(this)},set:function(t){i=""+t,o.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(t){i=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function X(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),i="";return t&&(i=G(t)?t.checked?"true":"false":t.value),(t=i)!==n&&(e.setValue(t),!0)}function J(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function Z(t,e){var n=e.checked;return r({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function tt(t,e){var n=null==e.defaultValue?"":e.defaultValue,i=null!=e.checked?e.checked:e.defaultChecked;n=q(null!=e.value?e.value:n),t._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function et(t,e){null!=(e=e.checked)&&x(t,"checked",e,!1)}function nt(t,e){et(t,e);var n=q(e.value),i=e.type;if(null!=n)"number"===i?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===i||"reset"===i)return void t.removeAttribute("value");e.hasOwnProperty("value")?rt(t,e.type,n):e.hasOwnProperty("defaultValue")&&rt(t,e.type,q(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function it(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var i=e.type;if(!("submit"!==i&&"reset"!==i||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function rt(t,e,n){"number"===e&&J(t.ownerDocument)===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function ot(t,e){return t=r({children:void 0},e),(e=function(t){var e="";return i.Children.forEach(t,(function(t){null!=t&&(e+=t)})),e}(e.children))&&(t.children=e),t}function at(t,e,n,i){if(t=t.options,e){e={};for(var r=0;r<n.length;r++)e["$"+n[r]]=!0;for(n=0;n<t.length;n++)r=e.hasOwnProperty("$"+t[n].value),t[n].selected!==r&&(t[n].selected=r),r&&i&&(t[n].defaultSelected=!0)}else{for(n=""+q(n),e=null,r=0;r<t.length;r++){if(t[r].value===n)return t[r].selected=!0,void(i&&(t[r].defaultSelected=!0));null!==e||t[r].disabled||(e=t[r])}null!==e&&(e.selected=!0)}}function st(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(a(91));return r({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function lt(t,e){var n=e.value;if(null==n){if(n=e.children,e=e.defaultValue,null!=n){if(null!=e)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}e=n}null==e&&(e=""),n=e}t._wrapperState={initialValue:q(n)}}function ct(t,e){var n=q(e.value),i=q(e.defaultValue);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&t.defaultValue!==n&&(t.defaultValue=n)),null!=i&&(t.defaultValue=""+i)}function ut(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}var ht="http://www.w3.org/1999/xhtml";function dt(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ft(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?dt(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var pt,gt,mt=(gt=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((pt=pt||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=pt.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,i){MSApp.execUnsafeLocalFunction((function(){return gt(t,e)}))}:gt);function bt(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var yt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},vt=["Webkit","ms","Moz","O"];function xt(t,e,n){return null==e||"boolean"==typeof e||""===e?"":n||"number"!=typeof e||0===e||yt.hasOwnProperty(t)&&yt[t]?(""+e).trim():e+"px"}function wt(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var i=0===n.indexOf("--"),r=xt(n,e[n],i);"float"===n&&(n="cssFloat"),i?t.setProperty(n,r):t[n]=r}}Object.keys(yt).forEach((function(t){vt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),yt[e]=yt[t]}))}));var _t=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function kt(t,e){if(e){if(_t[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(a(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(a(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(a(62))}}function St(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Et(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var Ot=null,Ct=null,Pt=null;function Mt(t){if(t=er(t)){if("function"!=typeof Ot)throw Error(a(280));var e=t.stateNode;e&&(e=ir(e),Ot(t.stateNode,t.type,e))}}function Lt(t){Ct?Pt?Pt.push(t):Pt=[t]:Ct=t}function Rt(){if(Ct){var t=Ct,e=Pt;if(Pt=Ct=null,Mt(t),e)for(t=0;t<e.length;t++)Mt(e[t])}}function Tt(t,e){return t(e)}function Nt(t,e,n,i,r){return t(e,n,i,r)}function Dt(){}var At=Tt,It=!1,jt=!1;function Ft(){null===Ct&&null===Pt||(Dt(),Rt())}function zt(t,e){var n=t.stateNode;if(null===n)return null;var i=ir(n);if(null===i)return null;n=i[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!i;break t;default:t=!1}if(t)return null;if(n&&"function"!=typeof n)throw Error(a(231,e,typeof n));return n}var Vt=!1;if(h)try{var Bt={};Object.defineProperty(Bt,"passive",{get:function(){Vt=!0}}),window.addEventListener("test",Bt,Bt),window.removeEventListener("test",Bt,Bt)}catch(gt){Vt=!1}function Ht(t,e,n,i,r,o,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(t){this.onError(t)}}var Wt=!1,Ut=null,$t=!1,Yt=null,Kt={onError:function(t){Wt=!0,Ut=t}};function qt(t,e,n,i,r,o,a,s,l){Wt=!1,Ut=null,Ht.apply(Kt,arguments)}function Gt(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(n=e.return),t=e.return}while(t)}return 3===e.tag?n:null}function Qt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function Xt(t){if(Gt(t)!==t)throw Error(a(188))}function Jt(t,e){for(var n=t.alternate;null!==e;){if(e===t||e===n)return!0;e=e.return}return!1}var Zt,te,ee,ne,ie=!1,re=[],oe=null,ae=null,se=null,le=new Map,ce=new Map,ue=[],he="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function de(t,e,n,i,r){return{blockedOn:t,domEventName:e,eventSystemFlags:16|n,nativeEvent:r,targetContainers:[i]}}function fe(t,e){switch(t){case"focusin":case"focusout":oe=null;break;case"dragenter":case"dragleave":ae=null;break;case"mouseover":case"mouseout":se=null;break;case"pointerover":case"pointerout":le.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ce.delete(e.pointerId)}}function pe(t,e,n,i,r,o){return null===t||t.nativeEvent!==o?(t=de(e,n,i,r,o),null!==e&&null!==(e=er(e))&&te(e),t):(t.eventSystemFlags|=i,e=t.targetContainers,null!==r&&-1===e.indexOf(r)&&e.push(r),t)}function ge(t){var e=tr(t.target);if(null!==e){var n=Gt(e);if(null!==n)if(13===(e=n.tag)){if(null!==(e=Qt(n)))return t.blockedOn=e,void ne(t.lanePriority,(function(){o.unstable_runWithPriority(t.priority,(function(){ee(n)}))}))}else if(3===e&&n.stateNode.hydrate)return void(t.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}t.blockedOn=null}function me(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var n=Xe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n)return null!==(e=er(n))&&te(e),t.blockedOn=n,!1;e.shift()}return!0}function be(t,e,n){me(t)&&n.delete(e)}function ye(){for(ie=!1;0<re.length;){var t=re[0];if(null!==t.blockedOn){null!==(t=er(t.blockedOn))&&Zt(t);break}for(var e=t.targetContainers;0<e.length;){var n=Xe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n){t.blockedOn=n;break}e.shift()}null===t.blockedOn&&re.shift()}null!==oe&&me(oe)&&(oe=null),null!==ae&&me(ae)&&(ae=null),null!==se&&me(se)&&(se=null),le.forEach(be),ce.forEach(be)}function ve(t,e){t.blockedOn===e&&(t.blockedOn=null,ie||(ie=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,ye)))}function xe(t){function e(e){return ve(e,t)}if(0<re.length){ve(re[0],t);for(var n=1;n<re.length;n++){var i=re[n];i.blockedOn===t&&(i.blockedOn=null)}}for(null!==oe&&ve(oe,t),null!==ae&&ve(ae,t),null!==se&&ve(se,t),le.forEach(e),ce.forEach(e),n=0;n<ue.length;n++)(i=ue[n]).blockedOn===t&&(i.blockedOn=null);for(;0<ue.length&&null===(n=ue[0]).blockedOn;)ge(n),null===n.blockedOn&&ue.shift()}function we(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var _e={animationend:we("Animation","AnimationEnd"),animationiteration:we("Animation","AnimationIteration"),animationstart:we("Animation","AnimationStart"),transitionend:we("Transition","TransitionEnd")},ke={},Se={};function Ee(t){if(ke[t])return ke[t];if(!_e[t])return t;var e,n=_e[t];for(e in n)if(n.hasOwnProperty(e)&&e in Se)return ke[t]=n[e];return t}h&&(Se=document.createElement("div").style,"AnimationEvent"in window||(delete _e.animationend.animation,delete _e.animationiteration.animation,delete _e.animationstart.animation),"TransitionEvent"in window||delete _e.transitionend.transition);var Oe=Ee("animationend"),Ce=Ee("animationiteration"),Pe=Ee("animationstart"),Me=Ee("transitionend"),Le=new Map,Re=new Map,Te=["abort","abort",Oe,"animationEnd",Ce,"animationIteration",Pe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Me,"transitionEnd","waiting","waiting"];function Ne(t,e){for(var n=0;n<t.length;n+=2){var i=t[n],r=t[n+1];r="on"+(r[0].toUpperCase()+r.slice(1)),Re.set(i,e),Le.set(i,r),c(r,[i])}}(0,o.unstable_now)();var De=8;function Ae(t){if(0!=(1&t))return De=15,1;if(0!=(2&t))return De=14,2;if(0!=(4&t))return De=13,4;var e=24&t;return 0!==e?(De=12,e):0!=(32&t)?(De=11,32):0!=(e=192&t)?(De=10,e):0!=(256&t)?(De=9,256):0!=(e=3584&t)?(De=8,e):0!=(4096&t)?(De=7,4096):0!=(e=4186112&t)?(De=6,e):0!=(e=62914560&t)?(De=5,e):67108864&t?(De=4,67108864):0!=(134217728&t)?(De=3,134217728):0!=(e=805306368&t)?(De=2,e):0!=(1073741824&t)?(De=1,1073741824):(De=8,t)}function Ie(t,e){var n=t.pendingLanes;if(0===n)return De=0;var i=0,r=0,o=t.expiredLanes,a=t.suspendedLanes,s=t.pingedLanes;if(0!==o)i=o,r=De=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(i=Ae(l),r=De):0!=(s&=o)&&(i=Ae(s),r=De)}else 0!=(o=n&~a)?(i=Ae(o),r=De):0!==s&&(i=Ae(s),r=De);if(0===i)return 0;if(i=n&((0>(i=31-He(i))?0:1<<i)<<1)-1,0!==e&&e!==i&&0==(e&a)){if(Ae(e),r<=De)return e;De=r}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=i;0<e;)r=1<<(n=31-He(e)),i|=t[n],e&=~r;return i}function je(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function Fe(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=ze(24&~e))?Fe(10,e):t;case 10:return 0===(t=ze(192&~e))?Fe(8,e):t;case 8:return 0===(t=ze(3584&~e))&&0===(t=ze(4186112&~e))&&(t=512),t;case 2:return 0===(e=ze(805306368&~e))&&(e=268435456),e}throw Error(a(358,t))}function ze(t){return t&-t}function Ve(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function Be(t,e,n){t.pendingLanes|=e;var i=e-1;t.suspendedLanes&=i,t.pingedLanes&=i,(t=t.eventTimes)[e=31-He(e)]=n}var He=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(We(t)/Ue|0)|0},We=Math.log,Ue=Math.LN2,$e=o.unstable_UserBlockingPriority,Ye=o.unstable_runWithPriority,Ke=!0;function qe(t,e,n,i){It||Dt();var r=Qe,o=It;It=!0;try{Nt(r,t,e,n,i)}finally{(It=o)||Ft()}}function Ge(t,e,n,i){Ye($e,Qe.bind(null,t,e,n,i))}function Qe(t,e,n,i){var r;if(Ke)if((r=0==(4&e))&&0<re.length&&-1<he.indexOf(t))t=de(null,t,e,n,i),re.push(t);else{var o=Xe(t,e,n,i);if(null===o)r&&fe(t,i);else{if(r){if(-1<he.indexOf(t))return t=de(o,t,e,n,i),void re.push(t);if(function(t,e,n,i,r){switch(e){case"focusin":return oe=pe(oe,t,e,n,i,r),!0;case"dragenter":return ae=pe(ae,t,e,n,i,r),!0;case"mouseover":return se=pe(se,t,e,n,i,r),!0;case"pointerover":var o=r.pointerId;return le.set(o,pe(le.get(o)||null,t,e,n,i,r)),!0;case"gotpointercapture":return o=r.pointerId,ce.set(o,pe(ce.get(o)||null,t,e,n,i,r)),!0}return!1}(o,t,e,n,i))return;fe(t,i)}Ni(t,e,i,null,n)}}}function Xe(t,e,n,i){var r=Et(i);if(null!==(r=tr(r))){var o=Gt(r);if(null===o)r=null;else{var a=o.tag;if(13===a){if(null!==(r=Qt(o)))return r;r=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return Ni(t,e,i,r,n),null}var Je=null,Ze=null,tn=null;function en(){if(tn)return tn;var t,e,n=Ze,i=n.length,r="value"in Je?Je.value:Je.textContent,o=r.length;for(t=0;t<i&&n[t]===r[t];t++);var a=i-t;for(e=1;e<=a&&n[i-e]===r[o-e];e++);return tn=r.slice(t,1<e?1-e:void 0)}function nn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function rn(){return!0}function on(){return!1}function an(t){function e(e,n,i,r,o){for(var a in this._reactName=e,this._targetInst=i,this.type=n,this.nativeEvent=r,this.target=o,this.currentTarget=null,t)t.hasOwnProperty(a)&&(e=t[a],this[a]=e?e(r):r[a]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?rn:on,this.isPropagationStopped=on,this}return r(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),e}var sn,ln,cn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},hn=an(un),dn=r({},un,{view:0,detail:0}),fn=an(dn),pn=r({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==cn&&(cn&&"mousemove"===t.type?(sn=t.screenX-cn.screenX,ln=t.screenY-cn.screenY):ln=sn=0,cn=t),sn)},movementY:function(t){return"movementY"in t?t.movementY:ln}}),gn=an(pn),mn=an(r({},pn,{dataTransfer:0})),bn=an(r({},dn,{relatedTarget:0})),yn=an(r({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=r({},un,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),xn=an(vn),wn=an(r({},un,{data:0})),_n={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Sn[t])&&!!e[t]}function On(){return En}var Cn=r({},dn,{key:function(t){if(t.key){var e=_n[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=nn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?kn[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(t){return"keypress"===t.type?nn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?nn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),Pn=an(Cn),Mn=an(r({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ln=an(r({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Rn=an(r({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=r({},pn,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=an(Tn),Dn=[9,13,27,32],An=h&&"CompositionEvent"in window,In=null;h&&"documentMode"in document&&(In=document.documentMode);var jn=h&&"TextEvent"in window&&!In,Fn=h&&(!An||In&&8<In&&11>=In),zn=String.fromCharCode(32),Vn=!1;function Bn(t,e){switch(t){case"keyup":return-1!==Dn.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Wn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Un[t.type]:"textarea"===e}function Yn(t,e,n,i){Lt(i),0<(e=Ai(e,"onChange")).length&&(n=new hn("onChange","change",null,n,i),t.push({event:n,listeners:e}))}var Kn=null,qn=null;function Gn(t){Ci(t,0)}function Qn(t){if(X(nr(t)))return t}function Xn(t,e){if("change"===t)return e}var Jn=!1;if(h){var Zn;if(h){var ti="oninput"in document;if(!ti){var ei=document.createElement("div");ei.setAttribute("oninput","return;"),ti="function"==typeof ei.oninput}Zn=ti}else Zn=!1;Jn=Zn&&(!document.documentMode||9<document.documentMode)}function ni(){Kn&&(Kn.detachEvent("onpropertychange",ii),qn=Kn=null)}function ii(t){if("value"===t.propertyName&&Qn(qn)){var e=[];if(Yn(e,qn,t,Et(t)),t=Gn,It)t(e);else{It=!0;try{Tt(t,e)}finally{It=!1,Ft()}}}}function ri(t,e,n){"focusin"===t?(ni(),qn=n,(Kn=e).attachEvent("onpropertychange",ii)):"focusout"===t&&ni()}function oi(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Qn(qn)}function ai(t,e){if("click"===t)return Qn(e)}function si(t,e){if("input"===t||"change"===t)return Qn(e)}var li="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},ci=Object.prototype.hasOwnProperty;function ui(t,e){if(li(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++)if(!ci.call(e,n[i])||!li(t[n[i]],e[n[i]]))return!1;return!0}function hi(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function di(t,e){var n,i=hi(t);for(t=0;i;){if(3===i.nodeType){if(n=t+i.textContent.length,t<=e&&n>=e)return{node:i,offset:e-t};t=n}t:{for(;i;){if(i.nextSibling){i=i.nextSibling;break t}i=i.parentNode}i=void 0}i=hi(i)}}function fi(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?fi(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function pi(){for(var t=window,e=J();e instanceof t.HTMLIFrameElement;){try{var n="string"==typeof e.contentWindow.location.href}catch(t){n=!1}if(!n)break;e=J((t=e.contentWindow).document)}return e}function gi(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var mi=h&&"documentMode"in document&&11>=document.documentMode,bi=null,yi=null,vi=null,xi=!1;function wi(t,e,n){var i=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;xi||null==bi||bi!==J(i)||(i="selectionStart"in(i=bi)&&gi(i)?{start:i.selectionStart,end:i.selectionEnd}:{anchorNode:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset},vi&&ui(vi,i)||(vi=i,0<(i=Ai(yi,"onSelect")).length&&(e=new hn("onSelect","select",null,e,n),t.push({event:e,listeners:i}),e.target=bi)))}Ne("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ne("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ne(Te,2);for(var _i="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),ki=0;ki<_i.length;ki++)Re.set(_i[ki],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Si="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ei=new Set("cancel close invalid load scroll toggle".split(" ").concat(Si));function Oi(t,e,n){var i=t.type||"unknown-event";t.currentTarget=n,function(t,e,n,i,r,o,s,l,c){if(qt.apply(this,arguments),Wt){if(!Wt)throw Error(a(198));var u=Ut;Wt=!1,Ut=null,$t||($t=!0,Yt=u)}}(i,e,void 0,t),t.currentTarget=null}function Ci(t,e){e=0!=(4&e);for(var n=0;n<t.length;n++){var i=t[n],r=i.event;i=i.listeners;t:{var o=void 0;if(e)for(var a=i.length-1;0<=a;a--){var s=i[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&r.isPropagationStopped())break t;Oi(r,s,c),o=l}else for(a=0;a<i.length;a++){if(l=(s=i[a]).instance,c=s.currentTarget,s=s.listener,l!==o&&r.isPropagationStopped())break t;Oi(r,s,c),o=l}}}if($t)throw t=Yt,$t=!1,Yt=null,t}function Pi(t,e){var n=rr(e),i=t+"__bubble";n.has(i)||(Ti(e,t,2,!1),n.add(i))}var Mi="_reactListening"+Math.random().toString(36).slice(2);function Li(t){t[Mi]||(t[Mi]=!0,s.forEach((function(e){Ei.has(e)||Ri(e,!1,t,null),Ri(e,!0,t,null)})))}function Ri(t,e,n,i){var r=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===t&&9!==n.nodeType&&(o=n.ownerDocument),null!==i&&!e&&Ei.has(t)){if("scroll"!==t)return;r|=2,o=i}var a=rr(o),s=t+"__"+(e?"capture":"bubble");a.has(s)||(e&&(r|=4),Ti(o,t,r,e),a.add(s))}function Ti(t,e,n,i){var r=Re.get(e);switch(void 0===r?2:r){case 0:r=qe;break;case 1:r=Ge;break;default:r=Qe}n=r.bind(null,e,n,t),r=void 0,!Vt||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(r=!0),i?void 0!==r?t.addEventListener(e,n,{capture:!0,passive:r}):t.addEventListener(e,n,!0):void 0!==r?t.addEventListener(e,n,{passive:r}):t.addEventListener(e,n,!1)}function Ni(t,e,n,i,r){var o=i;if(0==(1&e)&&0==(2&e)&&null!==i)t:for(;;){if(null===i)return;var a=i.tag;if(3===a||4===a){var s=i.stateNode.containerInfo;if(s===r||8===s.nodeType&&s.parentNode===r)break;if(4===a)for(a=i.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===r||8===l.nodeType&&l.parentNode===r))return;a=a.return}for(;null!==s;){if(null===(a=tr(s)))return;if(5===(l=a.tag)||6===l){i=o=a;continue t}s=s.parentNode}}i=i.return}!function(t,e,n){if(jt)return t();jt=!0;try{At(t,e,n)}finally{jt=!1,Ft()}}((function(){var i=o,r=Et(n),a=[];t:{var s=Le.get(t);if(void 0!==s){var l=hn,c=t;switch(t){case"keypress":if(0===nn(n))break t;case"keydown":case"keyup":l=Pn;break;case"focusin":c="focus",l=bn;break;case"focusout":c="blur",l=bn;break;case"beforeblur":case"afterblur":l=bn;break;case"click":if(2===n.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Ln;break;case Oe:case Ce:case Pe:l=yn;break;case Me:l=Rn;break;case"scroll":l=fn;break;case"wheel":l=Nn;break;case"copy":case"cut":case"paste":l=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Mn}var u=0!=(4&e),h=!u&&"scroll"===t,d=u?null!==s?s+"Capture":null:s;u=[];for(var f,p=i;null!==p;){var g=(f=p).stateNode;if(5===f.tag&&null!==g&&(f=g,null!==d&&null!=(g=zt(p,d))&&u.push(Di(p,g,f))),h)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,r),a.push({event:s,listeners:u}))}}if(0==(7&e)){if(l="mouseout"===t||"pointerout"===t,(!(s="mouseover"===t||"pointerover"===t)||0!=(16&e)||!(c=n.relatedTarget||n.fromElement)||!tr(c)&&!c[Ji])&&(l||s)&&(s=r.window===r?r:(s=r.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=i,null!==(c=(c=n.relatedTarget||n.toElement)?tr(c):null)&&(c!==(h=Gt(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=i),l!==c)){if(u=gn,g="onMouseLeave",d="onMouseEnter",p="mouse","pointerout"!==t&&"pointerover"!==t||(u=Mn,g="onPointerLeave",d="onPointerEnter",p="pointer"),h=null==l?s:nr(l),f=null==c?s:nr(c),(s=new u(g,p+"leave",l,n,r)).target=h,s.relatedTarget=f,g=null,tr(r)===i&&((u=new u(d,p+"enter",c,n,r)).target=f,u.relatedTarget=h,g=u),h=g,l&&c)t:{for(d=c,p=0,f=u=l;f;f=Ii(f))p++;for(f=0,g=d;g;g=Ii(g))f++;for(;0<p-f;)u=Ii(u),p--;for(;0<f-p;)d=Ii(d),f--;for(;p--;){if(u===d||null!==d&&u===d.alternate)break t;u=Ii(u),d=Ii(d)}u=null}else u=null;null!==l&&ji(a,s,l,u,!1),null!==c&&null!==h&&ji(a,h,c,u,!0)}if("select"===(l=(s=i?nr(i):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Xn;else if($n(s))if(Jn)m=si;else{m=oi;var b=ri}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=ai);switch(m&&(m=m(t,i))?Yn(a,m,n,r):(b&&b(t,s,i),"focusout"===t&&(b=s._wrapperState)&&b.controlled&&"number"===s.type&&rt(s,"number",s.value)),b=i?nr(i):window,t){case"focusin":($n(b)||"true"===b.contentEditable)&&(bi=b,yi=i,vi=null);break;case"focusout":vi=yi=bi=null;break;case"mousedown":xi=!0;break;case"contextmenu":case"mouseup":case"dragend":xi=!1,wi(a,n,r);break;case"selectionchange":if(mi)break;case"keydown":case"keyup":wi(a,n,r)}var y;if(An)t:{switch(t){case"compositionstart":var v="onCompositionStart";break t;case"compositionend":v="onCompositionEnd";break t;case"compositionupdate":v="onCompositionUpdate";break t}v=void 0}else Wn?Bn(t,n)&&(v="onCompositionEnd"):"keydown"===t&&229===n.keyCode&&(v="onCompositionStart");v&&(Fn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==v?"onCompositionEnd"===v&&Wn&&(y=en()):(Ze="value"in(Je=r)?Je.value:Je.textContent,Wn=!0)),0<(b=Ai(i,v)).length&&(v=new wn(v,t,null,n,r),a.push({event:v,listeners:b}),(y||null!==(y=Hn(n)))&&(v.data=y))),(y=jn?function(t,e){switch(t){case"compositionend":return Hn(e);case"keypress":return 32!==e.which?null:(Vn=!0,zn);case"textInput":return(t=e.data)===zn&&Vn?null:t;default:return null}}(t,n):function(t,e){if(Wn)return"compositionend"===t||!An&&Bn(t,e)?(t=en(),tn=Ze=Je=null,Wn=!1,t):null;switch(t){case"paste":default:return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Fn&&"ko"!==e.locale?null:e.data}}(t,n))&&0<(i=Ai(i,"onBeforeInput")).length&&(r=new wn("onBeforeInput","beforeinput",null,n,r),a.push({event:r,listeners:i}),r.data=y)}Ci(a,e)}))}function Di(t,e,n){return{instance:t,listener:e,currentTarget:n}}function Ai(t,e){for(var n=e+"Capture",i=[];null!==t;){var r=t,o=r.stateNode;5===r.tag&&null!==o&&(r=o,null!=(o=zt(t,n))&&i.unshift(Di(t,o,r)),null!=(o=zt(t,e))&&i.push(Di(t,o,r))),t=t.return}return i}function Ii(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function ji(t,e,n,i,r){for(var o=e._reactName,a=[];null!==n&&n!==i;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===i)break;5===s.tag&&null!==c&&(s=c,r?null!=(l=zt(n,o))&&a.unshift(Di(n,l,s)):r||null!=(l=zt(n,o))&&a.push(Di(n,l,s))),n=n.return}0!==a.length&&t.push({event:e,listeners:a})}function Fi(){}var zi=null,Vi=null;function Bi(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Hi(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var Wi="function"==typeof setTimeout?setTimeout:void 0,Ui="function"==typeof clearTimeout?clearTimeout:void 0;function $i(t){(1===t.nodeType||9===t.nodeType&&null!=(t=t.body))&&(t.textContent="")}function Yi(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function Ki(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var n=t.data;if("$"===n||"$!"===n||"$?"===n){if(0===e)return t;e--}else"/$"===n&&e++}t=t.previousSibling}return null}var qi=0,Gi=Math.random().toString(36).slice(2),Qi="__reactFiber$"+Gi,Xi="__reactProps$"+Gi,Ji="__reactContainer$"+Gi,Zi="__reactEvents$"+Gi;function tr(t){var e=t[Qi];if(e)return e;for(var n=t.parentNode;n;){if(e=n[Ji]||n[Qi]){if(n=e.alternate,null!==e.child||null!==n&&null!==n.child)for(t=Ki(t);null!==t;){if(n=t[Qi])return n;t=Ki(t)}return e}n=(t=n).parentNode}return null}function er(t){return!(t=t[Qi]||t[Ji])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function nr(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(a(33))}function ir(t){return t[Xi]||null}function rr(t){var e=t[Zi];return void 0===e&&(e=t[Zi]=new Set),e}var or=[],ar=-1;function sr(t){return{current:t}}function lr(t){0>ar||(t.current=or[ar],or[ar]=null,ar--)}function cr(t,e){ar++,or[ar]=t.current,t.current=e}var ur={},hr=sr(ur),dr=sr(!1),fr=ur;function pr(t,e){var n=t.type.contextTypes;if(!n)return ur;var i=t.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===e)return i.__reactInternalMemoizedMaskedChildContext;var r,o={};for(r in n)o[r]=e[r];return i&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function gr(t){return null!=t.childContextTypes}function mr(){lr(dr),lr(hr)}function br(t,e,n){if(hr.current!==ur)throw Error(a(168));cr(hr,e),cr(dr,n)}function yr(t,e,n){var i=t.stateNode;if(t=e.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var o in i=i.getChildContext())if(!(o in t))throw Error(a(108,K(e)||"Unknown",o));return r({},n,i)}function vr(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||ur,fr=hr.current,cr(hr,t),cr(dr,dr.current),!0}function xr(t,e,n){var i=t.stateNode;if(!i)throw Error(a(169));n?(t=yr(t,e,fr),i.__reactInternalMemoizedMergedChildContext=t,lr(dr),lr(hr),cr(hr,t)):lr(dr),cr(dr,n)}var wr=null,_r=null,kr=o.unstable_runWithPriority,Sr=o.unstable_scheduleCallback,Er=o.unstable_cancelCallback,Or=o.unstable_shouldYield,Cr=o.unstable_requestPaint,Pr=o.unstable_now,Mr=o.unstable_getCurrentPriorityLevel,Lr=o.unstable_ImmediatePriority,Rr=o.unstable_UserBlockingPriority,Tr=o.unstable_NormalPriority,Nr=o.unstable_LowPriority,Dr=o.unstable_IdlePriority,Ar={},Ir=void 0!==Cr?Cr:function(){},jr=null,Fr=null,zr=!1,Vr=Pr(),Br=1e4>Vr?Pr:function(){return Pr()-Vr};function Hr(){switch(Mr()){case Lr:return 99;case Rr:return 98;case Tr:return 97;case Nr:return 96;case Dr:return 95;default:throw Error(a(332))}}function Wr(t){switch(t){case 99:return Lr;case 98:return Rr;case 97:return Tr;case 96:return Nr;case 95:return Dr;default:throw Error(a(332))}}function Ur(t,e){return t=Wr(t),kr(t,e)}function $r(t,e,n){return t=Wr(t),Sr(t,e,n)}function Yr(){if(null!==Fr){var t=Fr;Fr=null,Er(t)}Kr()}function Kr(){if(!zr&&null!==jr){zr=!0;var t=0;try{var e=jr;Ur(99,(function(){for(;t<e.length;t++){var n=e[t];do{n=n(!0)}while(null!==n)}})),jr=null}catch(e){throw null!==jr&&(jr=jr.slice(t+1)),Sr(Lr,Yr),e}finally{zr=!1}}}var qr=w.ReactCurrentBatchConfig;function Gr(t,e){if(t&&t.defaultProps){for(var n in e=r({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}return e}var Qr=sr(null),Xr=null,Jr=null,Zr=null;function to(){Zr=Jr=Xr=null}function eo(t){var e=Qr.current;lr(Qr),t.type._context._currentValue=e}function no(t,e){for(;null!==t;){var n=t.alternate;if((t.childLanes&e)===e){if(null===n||(n.childLanes&e)===e)break;n.childLanes|=e}else t.childLanes|=e,null!==n&&(n.childLanes|=e);t=t.return}}function io(t,e){Xr=t,Zr=Jr=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Aa=!0),t.firstContext=null)}function ro(t,e){if(Zr!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(Zr=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Jr){if(null===Xr)throw Error(a(308));Jr=e,Xr.dependencies={lanes:0,firstContext:e,responders:null}}else Jr=Jr.next=e;return t._currentValue}var oo=!1;function ao(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function so(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function lo(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function co(t,e){if(null!==(t=t.updateQueue)){var n=(t=t.shared).pending;null===n?e.next=e:(e.next=n.next,n.next=e),t.pending=e}}function uo(t,e){var n=t.updateQueue,i=t.alternate;if(null!==i&&n===(i=i.updateQueue)){var r=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?r=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?r=o=e:o=o.next=e}else r=o=e;return n={baseState:i.baseState,firstBaseUpdate:r,lastBaseUpdate:o,shared:i.shared,effects:i.effects},void(t.updateQueue=n)}null===(t=n.lastBaseUpdate)?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function ho(t,e,n,i){var o=t.updateQueue;oo=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===s?a=u:s.next=u,s=c;var h=t.alternate;if(null!==h){var d=(h=h.updateQueue).lastBaseUpdate;d!==s&&(null===d?h.firstBaseUpdate=u:d.next=u,h.lastBaseUpdate=c)}}if(null!==a){for(d=o.baseState,s=0,h=u=c=null;;){l=a.lane;var f=a.eventTime;if((i&l)===l){null!==h&&(h=h.next={eventTime:f,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});t:{var p=t,g=a;switch(l=e,f=n,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(f,d,l);break t}d=p;break t;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(f,d,l):p))break t;d=r({},d,l);break t;case 2:oo=!0}}null!==a.callback&&(t.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else f={eventTime:f,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===h?(u=h=f,c=d):h=h.next=f,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===h&&(c=d),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=h,js|=s,t.lanes=s,t.memoizedState=d}}function fo(t,e,n){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var i=t[e],r=i.callback;if(null!==r){if(i.callback=null,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var po=(new i.Component).refs;function go(t,e,n,i){n=null==(n=n(i,e=t.memoizedState))?e:r({},e,n),t.memoizedState=n,0===t.lanes&&(t.updateQueue.baseState=n)}var mo={isMounted:function(t){return!!(t=t._reactInternals)&&Gt(t)===t},enqueueSetState:function(t,e,n){t=t._reactInternals;var i=ll(),r=cl(t),o=lo(i,r);o.payload=e,null!=n&&(o.callback=n),co(t,o),ul(t,r,i)},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var i=ll(),r=cl(t),o=lo(i,r);o.tag=1,o.payload=e,null!=n&&(o.callback=n),co(t,o),ul(t,r,i)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=ll(),i=cl(t),r=lo(n,i);r.tag=2,null!=e&&(r.callback=e),co(t,r),ul(t,i,n)}};function bo(t,e,n,i,r,o,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(i,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&ui(n,i)&&ui(r,o))}function yo(t,e,n){var i=!1,r=ur,o=e.contextType;return"object"==typeof o&&null!==o?o=ro(o):(r=gr(e)?fr:hr.current,o=(i=null!=(i=e.contextTypes))?pr(t,r):ur),e=new e(n,o),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=mo,t.stateNode=e,e._reactInternals=t,i&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,t.__reactInternalMemoizedMaskedChildContext=o),e}function vo(t,e,n,i){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,i),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,i),e.state!==t&&mo.enqueueReplaceState(e,e.state,null)}function xo(t,e,n,i){var r=t.stateNode;r.props=n,r.state=t.memoizedState,r.refs=po,ao(t);var o=e.contextType;"object"==typeof o&&null!==o?r.context=ro(o):(o=gr(e)?fr:hr.current,r.context=pr(t,o)),ho(t,n,r,i),r.state=t.memoizedState,"function"==typeof(o=e.getDerivedStateFromProps)&&(go(t,e,o,n),r.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(e=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),e!==r.state&&mo.enqueueReplaceState(r,r.state,null),ho(t,n,r,i),r.state=t.memoizedState),"function"==typeof r.componentDidMount&&(t.flags|=4)}var wo=Array.isArray;function _o(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var i=n.stateNode}if(!i)throw Error(a(147,t));var r=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===r?e.ref:(e=function(t){var e=i.refs;e===po&&(e=i.refs={}),null===t?delete e[r]:e[r]=t},e._stringRef=r,e)}if("string"!=typeof t)throw Error(a(284));if(!n._owner)throw Error(a(290,t))}return t}function ko(t,e){if("textarea"!==t.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function So(t){function e(e,n){if(t){var i=e.lastEffect;null!==i?(i.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,i){if(!t)return null;for(;null!==i;)e(n,i),i=i.sibling;return null}function i(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function r(t,e){return(t=Bl(t,e)).index=0,t.sibling=null,t}function o(e,n,i){return e.index=i,t?null!==(i=e.alternate)?(i=i.index)<n?(e.flags=2,n):i:(e.flags=2,n):n}function s(e){return t&&null===e.alternate&&(e.flags=2),e}function l(t,e,n,i){return null===e||6!==e.tag?((e=$l(n,t.mode,i)).return=t,e):((e=r(e,n)).return=t,e)}function c(t,e,n,i){return null!==e&&e.elementType===n.type?((i=r(e,n.props)).ref=_o(t,e,n),i.return=t,i):((i=Hl(n.type,n.key,n.props,null,t.mode,i)).ref=_o(t,e,n),i.return=t,i)}function u(t,e,n,i){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Yl(n,t.mode,i)).return=t,e):((e=r(e,n.children||[])).return=t,e)}function h(t,e,n,i,o){return null===e||7!==e.tag?((e=Wl(n,t.mode,i,o)).return=t,e):((e=r(e,n)).return=t,e)}function d(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=$l(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case _:return(n=Hl(e.type,e.key,e.props,null,t.mode,n)).ref=_o(t,null,e),n.return=t,n;case k:return(e=Yl(e,t.mode,n)).return=t,e}if(wo(e)||H(e))return(e=Wl(e,t.mode,n,null)).return=t,e;ko(t,e)}return null}function f(t,e,n,i){var r=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:l(t,e,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case _:return n.key===r?n.type===S?h(t,e,n.props.children,i,r):c(t,e,n,i):null;case k:return n.key===r?u(t,e,n,i):null}if(wo(n)||H(n))return null!==r?null:h(t,e,n,i,null);ko(t,n)}return null}function p(t,e,n,i,r){if("string"==typeof i||"number"==typeof i)return l(e,t=t.get(n)||null,""+i,r);if("object"==typeof i&&null!==i){switch(i.$$typeof){case _:return t=t.get(null===i.key?n:i.key)||null,i.type===S?h(e,t,i.props.children,r,i.key):c(e,t,i,r);case k:return u(e,t=t.get(null===i.key?n:i.key)||null,i,r)}if(wo(i)||H(i))return h(e,t=t.get(n)||null,i,r,null);ko(e,i)}return null}function g(r,a,s,l){for(var c=null,u=null,h=a,g=a=0,m=null;null!==h&&g<s.length;g++){h.index>g?(m=h,h=null):m=h.sibling;var b=f(r,h,s[g],l);if(null===b){null===h&&(h=m);break}t&&h&&null===b.alternate&&e(r,h),a=o(b,a,g),null===u?c=b:u.sibling=b,u=b,h=m}if(g===s.length)return n(r,h),c;if(null===h){for(;g<s.length;g++)null!==(h=d(r,s[g],l))&&(a=o(h,a,g),null===u?c=h:u.sibling=h,u=h);return c}for(h=i(r,h);g<s.length;g++)null!==(m=p(h,r,g,s[g],l))&&(t&&null!==m.alternate&&h.delete(null===m.key?g:m.key),a=o(m,a,g),null===u?c=m:u.sibling=m,u=m);return t&&h.forEach((function(t){return e(r,t)})),c}function m(r,s,l,c){var u=H(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var h=u=null,g=s,m=s=0,b=null,y=l.next();null!==g&&!y.done;m++,y=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var v=f(r,g,y.value,c);if(null===v){null===g&&(g=b);break}t&&g&&null===v.alternate&&e(r,g),s=o(v,s,m),null===h?u=v:h.sibling=v,h=v,g=b}if(y.done)return n(r,g),u;if(null===g){for(;!y.done;m++,y=l.next())null!==(y=d(r,y.value,c))&&(s=o(y,s,m),null===h?u=y:h.sibling=y,h=y);return u}for(g=i(r,g);!y.done;m++,y=l.next())null!==(y=p(g,r,m,y.value,c))&&(t&&null!==y.alternate&&g.delete(null===y.key?m:y.key),s=o(y,s,m),null===h?u=y:h.sibling=y,h=y);return t&&g.forEach((function(t){return e(r,t)})),u}return function(t,i,o,l){var c="object"==typeof o&&null!==o&&o.type===S&&null===o.key;c&&(o=o.props.children);var u="object"==typeof o&&null!==o;if(u)switch(o.$$typeof){case _:t:{for(u=o.key,c=i;null!==c;){if(c.key===u){if(7===c.tag){if(o.type===S){n(t,c.sibling),(i=r(c,o.props.children)).return=t,t=i;break t}}else if(c.elementType===o.type){n(t,c.sibling),(i=r(c,o.props)).ref=_o(t,c,o),i.return=t,t=i;break t}n(t,c);break}e(t,c),c=c.sibling}o.type===S?((i=Wl(o.props.children,t.mode,l,o.key)).return=t,t=i):((l=Hl(o.type,o.key,o.props,null,t.mode,l)).ref=_o(t,i,o),l.return=t,t=l)}return s(t);case k:t:{for(c=o.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===o.containerInfo&&i.stateNode.implementation===o.implementation){n(t,i.sibling),(i=r(i,o.children||[])).return=t,t=i;break t}n(t,i);break}e(t,i),i=i.sibling}(i=Yl(o,t.mode,l)).return=t,t=i}return s(t)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==i&&6===i.tag?(n(t,i.sibling),(i=r(i,o)).return=t,t=i):(n(t,i),(i=$l(o,t.mode,l)).return=t,t=i),s(t);if(wo(o))return g(t,i,o,l);if(H(o))return m(t,i,o,l);if(u&&ko(t,o),void 0===o&&!c)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,K(t.type)||"Component"))}return n(t,i)}}var Eo=So(!0),Oo=So(!1),Co={},Po=sr(Co),Mo=sr(Co),Lo=sr(Co);function Ro(t){if(t===Co)throw Error(a(174));return t}function To(t,e){switch(cr(Lo,e),cr(Mo,t),cr(Po,Co),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:ft(null,"");break;default:e=ft(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}lr(Po),cr(Po,e)}function No(){lr(Po),lr(Mo),lr(Lo)}function Do(t){Ro(Lo.current);var e=Ro(Po.current),n=ft(e,t.type);e!==n&&(cr(Mo,t),cr(Po,n))}function Ao(t){Mo.current===t&&(lr(Po),lr(Mo))}var Io=sr(0);function jo(t){for(var e=t;null!==e;){if(13===e.tag){var n=e.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Fo=null,zo=null,Vo=!1;function Bo(t,e){var n=zl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function Ho(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);default:return!1}}function Wo(t){if(Vo){var e=zo;if(e){var n=e;if(!Ho(t,e)){if(!(e=Yi(n.nextSibling))||!Ho(t,e))return t.flags=-1025&t.flags|2,Vo=!1,void(Fo=t);Bo(Fo,n)}Fo=t,zo=Yi(e.firstChild)}else t.flags=-1025&t.flags|2,Vo=!1,Fo=t}}function Uo(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;Fo=t}function $o(t){if(t!==Fo)return!1;if(!Vo)return Uo(t),Vo=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Hi(e,t.memoizedProps))for(e=zo;e;)Bo(t,e),e=Yi(e.nextSibling);if(Uo(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var n=t.data;if("/$"===n){if(0===e){zo=Yi(t.nextSibling);break t}e--}else"$"!==n&&"$!"!==n&&"$?"!==n||e++}t=t.nextSibling}zo=null}}else zo=Fo?Yi(t.stateNode.nextSibling):null;return!0}function Yo(){zo=Fo=null,Vo=!1}var Ko=[];function qo(){for(var t=0;t<Ko.length;t++)Ko[t]._workInProgressVersionPrimary=null;Ko.length=0}var Go=w.ReactCurrentDispatcher,Qo=w.ReactCurrentBatchConfig,Xo=0,Jo=null,Zo=null,ta=null,ea=!1,na=!1;function ia(){throw Error(a(321))}function ra(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!li(t[n],e[n]))return!1;return!0}function oa(t,e,n,i,r,o){if(Xo=o,Jo=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Go.current=null===t||null===t.memoizedState?Ra:Ta,t=n(i,r),na){o=0;do{if(na=!1,!(25>o))throw Error(a(301));o+=1,ta=Zo=null,e.updateQueue=null,Go.current=Na,t=n(i,r)}while(na)}if(Go.current=La,e=null!==Zo&&null!==Zo.next,Xo=0,ta=Zo=Jo=null,ea=!1,e)throw Error(a(300));return t}function aa(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Jo.memoizedState=ta=t:ta=ta.next=t,ta}function sa(){if(null===Zo){var t=Jo.alternate;t=null!==t?t.memoizedState:null}else t=Zo.next;var e=null===ta?Jo.memoizedState:ta.next;if(null!==e)ta=e,Zo=t;else{if(null===t)throw Error(a(310));t={memoizedState:(Zo=t).memoizedState,baseState:Zo.baseState,baseQueue:Zo.baseQueue,queue:Zo.queue,next:null},null===ta?Jo.memoizedState=ta=t:ta=ta.next=t}return ta}function la(t,e){return"function"==typeof e?e(t):e}function ca(t){var e=sa(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var i=Zo,r=i.baseQueue,o=n.pending;if(null!==o){if(null!==r){var s=r.next;r.next=o.next,o.next=s}i.baseQueue=r=o,n.pending=null}if(null!==r){r=r.next,i=i.baseState;var l=s=o=null,c=r;do{var u=c.lane;if((Xo&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),i=c.eagerReducer===t?c.eagerState:t(i,c.action);else{var h={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(s=l=h,o=i):l=l.next=h,Jo.lanes|=u,js|=u}c=c.next}while(null!==c&&c!==r);null===l?o=i:l.next=s,li(i,e.memoizedState)||(Aa=!0),e.memoizedState=i,e.baseState=o,e.baseQueue=l,n.lastRenderedState=i}return[e.memoizedState,n.dispatch]}function ua(t){var e=sa(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var i=n.dispatch,r=n.pending,o=e.memoizedState;if(null!==r){n.pending=null;var s=r=r.next;do{o=t(o,s.action),s=s.next}while(s!==r);li(o,e.memoizedState)||(Aa=!0),e.memoizedState=o,null===e.baseQueue&&(e.baseState=o),n.lastRenderedState=o}return[o,i]}function ha(t,e,n){var i=e._getVersion;i=i(e._source);var r=e._workInProgressVersionPrimary;if(null!==r?t=r===i:(t=t.mutableReadLanes,(t=(Xo&t)===t)&&(e._workInProgressVersionPrimary=i,Ko.push(e))),t)return n(e._source);throw Ko.push(e),Error(a(350))}function da(t,e,n,i){var r=Ms;if(null===r)throw Error(a(349));var o=e._getVersion,s=o(e._source),l=Go.current,c=l.useState((function(){return ha(r,e,n)})),u=c[1],h=c[0];c=ta;var d=t.memoizedState,f=d.refs,p=f.getSnapshot,g=d.source;d=d.subscribe;var m=Jo;return t.memoizedState={refs:f,source:e,subscribe:i},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=u;var t=o(e._source);if(!li(s,t)){t=n(e._source),li(h,t)||(u(t),t=cl(m),r.mutableReadLanes|=t&r.pendingLanes),t=r.mutableReadLanes,r.entangledLanes|=t;for(var i=r.entanglements,a=t;0<a;){var l=31-He(a),c=1<<l;i[l]|=t,a&=~c}}}),[n,e,i]),l.useEffect((function(){return i(e._source,(function(){var t=f.getSnapshot,n=f.setSnapshot;try{n(t(e._source));var i=cl(m);r.mutableReadLanes|=i&r.pendingLanes}catch(t){n((function(){throw t}))}}))}),[e,i]),li(p,n)&&li(g,e)&&li(d,i)||((t={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:h}).dispatch=u=Ma.bind(null,Jo,t),c.queue=t,c.baseQueue=null,h=ha(r,e,n),c.memoizedState=c.baseState=h),h}function fa(t,e,n){return da(sa(),t,e,n)}function pa(t){var e=aa();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:t}).dispatch=Ma.bind(null,Jo,t),[e.memoizedState,t]}function ga(t,e,n,i){return t={tag:t,create:e,destroy:n,deps:i,next:null},null===(e=Jo.updateQueue)?(e={lastEffect:null},Jo.updateQueue=e,e.lastEffect=t.next=t):null===(n=e.lastEffect)?e.lastEffect=t.next=t:(i=n.next,n.next=t,t.next=i,e.lastEffect=t),t}function ma(t){return t={current:t},aa().memoizedState=t}function ba(){return sa().memoizedState}function ya(t,e,n,i){var r=aa();Jo.flags|=t,r.memoizedState=ga(1|e,n,void 0,void 0===i?null:i)}function va(t,e,n,i){var r=sa();i=void 0===i?null:i;var o=void 0;if(null!==Zo){var a=Zo.memoizedState;if(o=a.destroy,null!==i&&ra(i,a.deps))return void ga(e,n,o,i)}Jo.flags|=t,r.memoizedState=ga(1|e,n,o,i)}function xa(t,e){return ya(516,4,t,e)}function wa(t,e){return va(516,4,t,e)}function _a(t,e){return va(4,2,t,e)}function ka(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Sa(t,e,n){return n=null!=n?n.concat([t]):null,va(4,2,ka.bind(null,e,t),n)}function Ea(){}function Oa(t,e){var n=sa();e=void 0===e?null:e;var i=n.memoizedState;return null!==i&&null!==e&&ra(e,i[1])?i[0]:(n.memoizedState=[t,e],t)}function Ca(t,e){var n=sa();e=void 0===e?null:e;var i=n.memoizedState;return null!==i&&null!==e&&ra(e,i[1])?i[0]:(t=t(),n.memoizedState=[t,e],t)}function Pa(t,e){var n=Hr();Ur(98>n?98:n,(function(){t(!0)})),Ur(97<n?97:n,(function(){var n=Qo.transition;Qo.transition=1;try{t(!1),e()}finally{Qo.transition=n}}))}function Ma(t,e,n){var i=ll(),r=cl(t),o={lane:r,action:n,eagerReducer:null,eagerState:null,next:null},a=e.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),e.pending=o,a=t.alternate,t===Jo||null!==a&&a===Jo)na=ea=!0;else{if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var s=e.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,li(l,s))return}catch(t){}ul(t,r,i)}}var La={readContext:ro,useCallback:ia,useContext:ia,useEffect:ia,useImperativeHandle:ia,useLayoutEffect:ia,useMemo:ia,useReducer:ia,useRef:ia,useState:ia,useDebugValue:ia,useDeferredValue:ia,useTransition:ia,useMutableSource:ia,useOpaqueIdentifier:ia,unstable_isNewReconciler:!1},Ra={readContext:ro,useCallback:function(t,e){return aa().memoizedState=[t,void 0===e?null:e],t},useContext:ro,useEffect:xa,useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,ya(4,2,ka.bind(null,e,t),n)},useLayoutEffect:function(t,e){return ya(4,2,t,e)},useMemo:function(t,e){var n=aa();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var i=aa();return e=void 0!==n?n(e):e,i.memoizedState=i.baseState=e,t=(t=i.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=Ma.bind(null,Jo,t),[i.memoizedState,t]},useRef:ma,useState:pa,useDebugValue:Ea,useDeferredValue:function(t){var e=pa(t),n=e[0],i=e[1];return xa((function(){var e=Qo.transition;Qo.transition=1;try{i(t)}finally{Qo.transition=e}}),[t]),n},useTransition:function(){var t=pa(!1),e=t[0];return ma(t=Pa.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,n){var i=aa();return i.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:n},da(i,t,e,n)},useOpaqueIdentifier:function(){if(Vo){var t=!1,e=function(t){return{$$typeof:A,toString:t,valueOf:t}}((function(){throw t||(t=!0,n("r:"+(qi++).toString(36))),Error(a(355))})),n=pa(e)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,ga(5,(function(){n("r:"+(qi++).toString(36))}),void 0,null)),e}return pa(e="r:"+(qi++).toString(36)),e},unstable_isNewReconciler:!1},Ta={readContext:ro,useCallback:Oa,useContext:ro,useEffect:wa,useImperativeHandle:Sa,useLayoutEffect:_a,useMemo:Ca,useReducer:ca,useRef:ba,useState:function(){return ca(la)},useDebugValue:Ea,useDeferredValue:function(t){var e=ca(la),n=e[0],i=e[1];return wa((function(){var e=Qo.transition;Qo.transition=1;try{i(t)}finally{Qo.transition=e}}),[t]),n},useTransition:function(){var t=ca(la)[0];return[ba().current,t]},useMutableSource:fa,useOpaqueIdentifier:function(){return ca(la)[0]},unstable_isNewReconciler:!1},Na={readContext:ro,useCallback:Oa,useContext:ro,useEffect:wa,useImperativeHandle:Sa,useLayoutEffect:_a,useMemo:Ca,useReducer:ua,useRef:ba,useState:function(){return ua(la)},useDebugValue:Ea,useDeferredValue:function(t){var e=ua(la),n=e[0],i=e[1];return wa((function(){var e=Qo.transition;Qo.transition=1;try{i(t)}finally{Qo.transition=e}}),[t]),n},useTransition:function(){var t=ua(la)[0];return[ba().current,t]},useMutableSource:fa,useOpaqueIdentifier:function(){return ua(la)[0]},unstable_isNewReconciler:!1},Da=w.ReactCurrentOwner,Aa=!1;function Ia(t,e,n,i){e.child=null===t?Oo(e,null,n,i):Eo(e,t.child,n,i)}function ja(t,e,n,i,r){n=n.render;var o=e.ref;return io(e,r),i=oa(t,e,n,i,o,r),null===t||Aa?(e.flags|=1,Ia(t,e,i,r),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~r,es(t,e,r))}function Fa(t,e,n,i,r,o){if(null===t){var a=n.type;return"function"!=typeof a||Vl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=Hl(n.type,null,i,e,e.mode,o)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,za(t,e,a,i,r,o))}return a=t.child,0==(r&o)&&(r=a.memoizedProps,(n=null!==(n=n.compare)?n:ui)(r,i)&&t.ref===e.ref)?es(t,e,o):(e.flags|=1,(t=Bl(a,i)).ref=e.ref,t.return=e,e.child=t)}function za(t,e,n,i,r,o){if(null!==t&&ui(t.memoizedProps,i)&&t.ref===e.ref){if(Aa=!1,0==(o&r))return e.lanes=t.lanes,es(t,e,o);0!=(16384&t.flags)&&(Aa=!0)}return Ha(t,e,n,i,o)}function Va(t,e,n){var i=e.pendingProps,r=i.children,o=null!==t?t.memoizedState:null;if("hidden"===i.mode||"unstable-defer-without-hiding"===i.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},bl(0,n);else{if(0==(1073741824&n))return t=null!==o?o.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},bl(0,t),null;e.memoizedState={baseLanes:0},bl(0,null!==o?o.baseLanes:n)}else null!==o?(i=o.baseLanes|n,e.memoizedState=null):i=n,bl(0,i);return Ia(t,e,r,n),e.child}function Ba(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.flags|=128)}function Ha(t,e,n,i,r){var o=gr(n)?fr:hr.current;return o=pr(e,o),io(e,r),n=oa(t,e,n,i,o,r),null===t||Aa?(e.flags|=1,Ia(t,e,n,r),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~r,es(t,e,r))}function Wa(t,e,n,i,r){if(gr(n)){var o=!0;vr(e)}else o=!1;if(io(e,r),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),yo(e,n,i),xo(e,n,i,r),i=!0;else if(null===t){var a=e.stateNode,s=e.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?ro(c):pr(e,c=gr(n)?fr:hr.current);var u=n.getDerivedStateFromProps,h="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;h||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==i||l!==c)&&vo(e,a,i,c),oo=!1;var d=e.memoizedState;a.state=d,ho(e,i,a,r),l=e.memoizedState,s!==i||d!==l||dr.current||oo?("function"==typeof u&&(go(e,n,u,i),l=e.memoizedState),(s=oo||bo(e,n,s,i,d,l,c))?(h||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=i,e.memoizedState=l),a.props=i,a.state=l,a.context=c,i=s):("function"==typeof a.componentDidMount&&(e.flags|=4),i=!1)}else{a=e.stateNode,so(t,e),s=e.memoizedProps,c=e.type===e.elementType?s:Gr(e.type,s),a.props=c,h=e.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?ro(l):pr(e,l=gr(n)?fr:hr.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==h||d!==l)&&vo(e,a,i,l),oo=!1,d=e.memoizedState,a.state=d,ho(e,i,a,r);var p=e.memoizedState;s!==h||d!==p||dr.current||oo?("function"==typeof f&&(go(e,n,f,i),p=e.memoizedState),(c=oo||bo(e,n,c,i,d,p,l))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(i,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(i,p,l)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=256),e.memoizedProps=i,e.memoizedState=p),a.props=i,a.state=p,a.context=l,i=c):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=256),i=!1)}return Ua(t,e,n,i,o,r)}function Ua(t,e,n,i,r,o){Ba(t,e);var a=0!=(64&e.flags);if(!i&&!a)return r&&xr(e,n,!1),es(t,e,o);i=e.stateNode,Da.current=e;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return e.flags|=1,null!==t&&a?(e.child=Eo(e,t.child,null,o),e.child=Eo(e,null,s,o)):Ia(t,e,s,o),e.memoizedState=i.state,r&&xr(e,n,!0),e.child}function $a(t){var e=t.stateNode;e.pendingContext?br(0,e.pendingContext,e.pendingContext!==e.context):e.context&&br(0,e.context,!1),To(t,e.containerInfo)}var Ya,Ka,qa,Ga={dehydrated:null,retryLane:0};function Qa(t,e,n){var i,r=e.pendingProps,o=Io.current,a=!1;return(i=0!=(64&e.flags))||(i=(null===t||null!==t.memoizedState)&&0!=(2&o)),i?(a=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===r.fallback||!0===r.unstable_avoidThisFallback||(o|=1),cr(Io,1&o),null===t?(void 0!==r.fallback&&Wo(e),t=r.children,o=r.fallback,a?(t=Xa(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ga,t):"number"==typeof r.unstable_expectedLoadTime?(t=Xa(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ga,e.lanes=33554432,t):((n=Ul({mode:"visible",children:t},e.mode,n,null)).return=e,e.child=n)):(t.memoizedState,a?(r=function(t,e,n,i,r){var o=e.mode,a=t.child;t=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&e.child!==a?((n=e.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(e.firstEffect=n.firstEffect,e.lastEffect=a,a.nextEffect=null):e.firstEffect=e.lastEffect=null):n=Bl(a,s),null!==t?i=Bl(t,i):(i=Wl(i,o,r,null)).flags|=2,i.return=e,n.return=e,n.sibling=i,e.child=n,i}(t,e,r.children,r.fallback,n),a=e.child,o=t.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=t.childLanes&~n,e.memoizedState=Ga,r):(n=function(t,e,n,i){var r=t.child;return t=r.sibling,n=Bl(r,{mode:"visible",children:n}),0==(2&e.mode)&&(n.lanes=i),n.return=e,n.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=n}(t,e,r.children,n),e.memoizedState=null,n))}function Xa(t,e,n,i){var r=t.mode,o=t.child;return e={mode:"hidden",children:e},0==(2&r)&&null!==o?(o.childLanes=0,o.pendingProps=e):o=Ul(e,r,0,null),n=Wl(n,r,i,null),o.return=t,n.return=t,o.sibling=n,t.child=o,n}function Ja(t,e){t.lanes|=e;var n=t.alternate;null!==n&&(n.lanes|=e),no(t.return,e)}function Za(t,e,n,i,r,o){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:r,lastEffect:o}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=i,a.tail=n,a.tailMode=r,a.lastEffect=o)}function ts(t,e,n){var i=e.pendingProps,r=i.revealOrder,o=i.tail;if(Ia(t,e,i.children,n),0!=(2&(i=Io.current)))i=1&i|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&Ja(t,n);else if(19===t.tag)Ja(t,n);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}i&=1}if(cr(Io,i),0==(2&e.mode))e.memoizedState=null;else switch(r){case"forwards":for(n=e.child,r=null;null!==n;)null!==(t=n.alternate)&&null===jo(t)&&(r=n),n=n.sibling;null===(n=r)?(r=e.child,e.child=null):(r=n.sibling,n.sibling=null),Za(e,!1,r,n,o,e.lastEffect);break;case"backwards":for(n=null,r=e.child,e.child=null;null!==r;){if(null!==(t=r.alternate)&&null===jo(t)){e.child=r;break}t=r.sibling,r.sibling=n,n=r,r=t}Za(e,!0,n,null,o,e.lastEffect);break;case"together":Za(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function es(t,e,n){if(null!==t&&(e.dependencies=t.dependencies),js|=e.lanes,0!=(n&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(n=Bl(t=e.child,t.pendingProps),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Bl(t,t.pendingProps)).return=e;n.sibling=null}return e.child}return null}function ns(t,e){if(!Vo)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;null!==e;)null!==e.alternate&&(n=e),e=e.sibling;null===n?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var i=null;null!==n;)null!==n.alternate&&(i=n),n=n.sibling;null===i?e||null===t.tail?t.tail=null:t.tail.sibling=null:i.sibling=null}}function is(t,e,n){var i=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return gr(e.type)&&mr(),null;case 3:return No(),lr(dr),lr(hr),qo(),(i=e.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),null!==t&&null!==t.child||($o(e)?e.flags|=4:i.hydrate||(e.flags|=256)),null;case 5:Ao(e);var o=Ro(Lo.current);if(n=e.type,null!==t&&null!=e.stateNode)Ka(t,e,n,i),t.ref!==e.ref&&(e.flags|=128);else{if(!i){if(null===e.stateNode)throw Error(a(166));return null}if(t=Ro(Po.current),$o(e)){i=e.stateNode,n=e.type;var s=e.memoizedProps;switch(i[Qi]=e,i[Xi]=s,n){case"dialog":Pi("cancel",i),Pi("close",i);break;case"iframe":case"object":case"embed":Pi("load",i);break;case"video":case"audio":for(t=0;t<Si.length;t++)Pi(Si[t],i);break;case"source":Pi("error",i);break;case"img":case"image":case"link":Pi("error",i),Pi("load",i);break;case"details":Pi("toggle",i);break;case"input":tt(i,s),Pi("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!s.multiple},Pi("invalid",i);break;case"textarea":lt(i,s),Pi("invalid",i)}for(var c in kt(n,s),t=null,s)s.hasOwnProperty(c)&&(o=s[c],"children"===c?"string"==typeof o?i.textContent!==o&&(t=["children",o]):"number"==typeof o&&i.textContent!==""+o&&(t=["children",""+o]):l.hasOwnProperty(c)&&null!=o&&"onScroll"===c&&Pi("scroll",i));switch(n){case"input":Q(i),it(i,s,!0);break;case"textarea":Q(i),ut(i);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(i.onclick=Fi)}i=t,e.updateQueue=i,null!==i&&(e.flags|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,t===ht&&(t=dt(n)),t===ht?"script"===n?((t=c.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof i.is?t=c.createElement(n,{is:i.is}):(t=c.createElement(n),"select"===n&&(c=t,i.multiple?c.multiple=!0:i.size&&(c.size=i.size))):t=c.createElementNS(t,n),t[Qi]=e,t[Xi]=i,Ya(t,e),e.stateNode=t,c=St(n,i),n){case"dialog":Pi("cancel",t),Pi("close",t),o=i;break;case"iframe":case"object":case"embed":Pi("load",t),o=i;break;case"video":case"audio":for(o=0;o<Si.length;o++)Pi(Si[o],t);o=i;break;case"source":Pi("error",t),o=i;break;case"img":case"image":case"link":Pi("error",t),Pi("load",t),o=i;break;case"details":Pi("toggle",t),o=i;break;case"input":tt(t,i),o=Z(t,i),Pi("invalid",t);break;case"option":o=ot(t,i);break;case"select":t._wrapperState={wasMultiple:!!i.multiple},o=r({},i,{value:void 0}),Pi("invalid",t);break;case"textarea":lt(t,i),o=st(t,i),Pi("invalid",t);break;default:o=i}kt(n,o);var u=o;for(s in u)if(u.hasOwnProperty(s)){var h=u[s];"style"===s?wt(t,h):"dangerouslySetInnerHTML"===s?null!=(h=h?h.__html:void 0)&&mt(t,h):"children"===s?"string"==typeof h?("textarea"!==n||""!==h)&&bt(t,h):"number"==typeof h&&bt(t,""+h):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=h&&"onScroll"===s&&Pi("scroll",t):null!=h&&x(t,s,h,c))}switch(n){case"input":Q(t),it(t,i,!1);break;case"textarea":Q(t),ut(t);break;case"option":null!=i.value&&t.setAttribute("value",""+q(i.value));break;case"select":t.multiple=!!i.multiple,null!=(s=i.value)?at(t,!!i.multiple,s,!1):null!=i.defaultValue&&at(t,!!i.multiple,i.defaultValue,!0);break;default:"function"==typeof o.onClick&&(t.onclick=Fi)}Bi(n,i)&&(e.flags|=4)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)qa(0,e,t.memoizedProps,i);else{if("string"!=typeof i&&null===e.stateNode)throw Error(a(166));n=Ro(Lo.current),Ro(Po.current),$o(e)?(i=e.stateNode,n=e.memoizedProps,i[Qi]=e,i.nodeValue!==n&&(e.flags|=4)):((i=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[Qi]=e,e.stateNode=i)}return null;case 13:return lr(Io),i=e.memoizedState,0!=(64&e.flags)?(e.lanes=n,e):(i=null!==i,n=!1,null===t?void 0!==e.memoizedProps.fallback&&$o(e):n=null!==t.memoizedState,i&&!n&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?0===Ds&&(Ds=3):(0!==Ds&&3!==Ds||(Ds=4),null===Ms||0==(134217727&js)&&0==(134217727&Fs)||pl(Ms,Rs))),(i||n)&&(e.flags|=4),null);case 4:return No(),null===t&&Li(e.stateNode.containerInfo),null;case 10:return eo(e),null;case 19:if(lr(Io),null===(i=e.memoizedState))return null;if(s=0!=(64&e.flags),null===(c=i.rendering))if(s)ns(i,!1);else{if(0!==Ds||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(c=jo(t))){for(e.flags|=64,ns(i,!1),null!==(s=c.updateQueue)&&(e.updateQueue=s,e.flags|=4),null===i.lastEffect&&(e.firstEffect=null),e.lastEffect=i.lastEffect,i=n,n=e.child;null!==n;)t=i,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=t,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,t=c.dependencies,s.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return cr(Io,1&Io.current|2),e.child}t=t.sibling}null!==i.tail&&Br()>Hs&&(e.flags|=64,s=!0,ns(i,!1),e.lanes=33554432)}else{if(!s)if(null!==(t=jo(c))){if(e.flags|=64,s=!0,null!==(n=t.updateQueue)&&(e.updateQueue=n,e.flags|=4),ns(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!Vo)return null!==(e=e.lastEffect=i.lastEffect)&&(e.nextEffect=null),null}else 2*Br()-i.renderingStartTime>Hs&&1073741824!==n&&(e.flags|=64,s=!0,ns(i,!1),e.lanes=33554432);i.isBackwards?(c.sibling=e.child,e.child=c):(null!==(n=i.last)?n.sibling=c:e.child=c,i.last=c)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.lastEffect=e.lastEffect,i.renderingStartTime=Br(),n.sibling=null,e=Io.current,cr(Io,s?1&e|2:1&e),n):null;case 23:case 24:return yl(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==i.mode&&(e.flags|=4),null}throw Error(a(156,e.tag))}function rs(t){switch(t.tag){case 1:gr(t.type)&&mr();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(No(),lr(dr),lr(hr),qo(),0!=(64&(e=t.flags)))throw Error(a(285));return t.flags=-4097&e|64,t;case 5:return Ao(t),null;case 13:return lr(Io),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return lr(Io),null;case 4:return No(),null;case 10:return eo(t),null;case 23:case 24:return yl(),null;default:return null}}function os(t,e){try{var n="",i=e;do{n+=Y(i),i=i.return}while(i);var r=n}catch(t){r="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:r}}function as(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}Ya=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)t.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ka=function(t,e,n,i){var o=t.memoizedProps;if(o!==i){t=e.stateNode,Ro(Po.current);var a,s=null;switch(n){case"input":o=Z(t,o),i=Z(t,i),s=[];break;case"option":o=ot(t,o),i=ot(t,i),s=[];break;case"select":o=r({},o,{value:void 0}),i=r({},i,{value:void 0}),s=[];break;case"textarea":o=st(t,o),i=st(t,i),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof i.onClick&&(t.onclick=Fi)}for(h in kt(n,i),n=null,o)if(!i.hasOwnProperty(h)&&o.hasOwnProperty(h)&&null!=o[h])if("style"===h){var c=o[h];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(l.hasOwnProperty(h)?s||(s=[]):(s=s||[]).push(h,null));for(h in i){var u=i[h];if(c=null!=o?o[h]:void 0,i.hasOwnProperty(h)&&u!==c&&(null!=u||null!=c))if("style"===h)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(s||(s=[]),s.push(h,n)),n=u;else"dangerouslySetInnerHTML"===h?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(s=s||[]).push(h,u)):"children"===h?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(h,""+u):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(l.hasOwnProperty(h)?(null!=u&&"onScroll"===h&&Pi("scroll",t),s||c===u||(s=[])):"object"==typeof u&&null!==u&&u.$$typeof===A?u.toString():(s=s||[]).push(h,u))}n&&(s=s||[]).push("style",n);var h=s;(e.updateQueue=h)&&(e.flags|=4)}},qa=function(t,e,n,i){n!==i&&(e.flags|=4)};var ss="function"==typeof WeakMap?WeakMap:Map;function ls(t,e,n){(n=lo(-1,n)).tag=3,n.payload={element:null};var i=e.value;return n.callback=function(){Ys||(Ys=!0,Ks=i),as(0,e)},n}function cs(t,e,n){(n=lo(-1,n)).tag=3;var i=t.type.getDerivedStateFromError;if("function"==typeof i){var r=e.value;n.payload=function(){return as(0,e),i(r)}}var o=t.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof i&&(null===qs?qs=new Set([this]):qs.add(this),as(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),n}var us="function"==typeof WeakSet?WeakSet:Set;function hs(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){Al(t,e)}else e.current=null}function ds(t,e){switch(e.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&e.flags&&null!==t){var n=t.memoizedProps,i=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?n:Gr(e.type,n),i),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(256&e.flags&&$i(e.stateNode.containerInfo))}throw Error(a(163))}function fs(t,e,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var i=t.create;t.destroy=i()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var r=t;i=r.next,0!=(4&(r=r.tag))&&0!=(1&r)&&(Tl(n,t),Rl(n,t)),t=i}while(t!==e)}return;case 1:return t=n.stateNode,4&n.flags&&(null===e?t.componentDidMount():(i=n.elementType===n.type?e.memoizedProps:Gr(n.type,e.memoizedProps),t.componentDidUpdate(i,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=n.updateQueue)&&fo(n,e,t));case 3:if(null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}fo(n,e,t)}return;case 5:return t=n.stateNode,void(null===e&&4&n.flags&&Bi(n.type,n.memoizedProps)&&t.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xe(n)))))}throw Error(a(163))}function ps(t,e){for(var n=t;;){if(5===n.tag){var i=n.stateNode;if(e)"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{i=n.stateNode;var r=n.memoizedProps.style;r=null!=r&&r.hasOwnProperty("display")?r.display:null,i.style.display=xt("display",r)}}else if(6===n.tag)n.stateNode.nodeValue=e?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===t)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function gs(t,e){if(_r&&"function"==typeof _r.onCommitFiberUnmount)try{_r.onCommitFiberUnmount(wr,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var n=t=t.next;do{var i=n,r=i.destroy;if(i=i.tag,void 0!==r)if(0!=(4&i))Tl(e,n);else{i=e;try{r()}catch(t){Al(i,t)}}n=n.next}while(n!==t)}break;case 1:if(hs(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Al(e,t)}break;case 5:hs(e);break;case 4:ws(t,e)}}function ms(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function bs(t){return 5===t.tag||3===t.tag||4===t.tag}function ys(t){t:{for(var e=t.return;null!==e;){if(bs(e))break t;e=e.return}throw Error(a(160))}var n=e;switch(e=n.stateNode,n.tag){case 5:var i=!1;break;case 3:case 4:e=e.containerInfo,i=!0;break;default:throw Error(a(161))}16&n.flags&&(bt(e,""),n.flags&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||bs(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break t}}i?vs(t,n,e):xs(t,n,e)}function vs(t,e,n){var i=t.tag,r=5===i||6===i;if(r)t=r?t.stateNode:t.stateNode.instance,e?8===n.nodeType?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(8===n.nodeType?(e=n.parentNode).insertBefore(t,n):(e=n).appendChild(t),null!=(n=n._reactRootContainer)||null!==e.onclick||(e.onclick=Fi));else if(4!==i&&null!==(t=t.child))for(vs(t,e,n),t=t.sibling;null!==t;)vs(t,e,n),t=t.sibling}function xs(t,e,n){var i=t.tag,r=5===i||6===i;if(r)t=r?t.stateNode:t.stateNode.instance,e?n.insertBefore(t,e):n.appendChild(t);else if(4!==i&&null!==(t=t.child))for(xs(t,e,n),t=t.sibling;null!==t;)xs(t,e,n),t=t.sibling}function ws(t,e){for(var n,i,r=e,o=!1;;){if(!o){o=r.return;t:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:i=!1;break t;case 3:case 4:n=n.containerInfo,i=!0;break t}o=o.return}o=!0}if(5===r.tag||6===r.tag){t:for(var s=t,l=r,c=l;;)if(gs(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break t;for(;null===c.sibling;){if(null===c.return||c.return===l)break t;c=c.return}c.sibling.return=c.return,c=c.sibling}i?(s=n,l=r.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(r.stateNode)}else if(4===r.tag){if(null!==r.child){n=r.stateNode.containerInfo,i=!0,r.child.return=r,r=r.child;continue}}else if(gs(t,r),null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;4===(r=r.return).tag&&(o=!1)}r.sibling.return=r.return,r=r.sibling}}function _s(t,e){switch(e.tag){case 0:case 11:case 14:case 15:case 22:var n=e.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var i=n=n.next;do{3==(3&i.tag)&&(t=i.destroy,i.destroy=void 0,void 0!==t&&t()),i=i.next}while(i!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=e.stateNode)){i=e.memoizedProps;var r=null!==t?t.memoizedProps:i;t=e.type;var o=e.updateQueue;if(e.updateQueue=null,null!==o){for(n[Xi]=i,"input"===t&&"radio"===i.type&&null!=i.name&&et(n,i),St(t,r),e=St(t,i),r=0;r<o.length;r+=2){var s=o[r],l=o[r+1];"style"===s?wt(n,l):"dangerouslySetInnerHTML"===s?mt(n,l):"children"===s?bt(n,l):x(n,s,l,e)}switch(t){case"input":nt(n,i);break;case"textarea":ct(n,i);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!i.multiple,null!=(o=i.value)?at(n,!!i.multiple,o,!1):t!==!!i.multiple&&(null!=i.defaultValue?at(n,!!i.multiple,i.defaultValue,!0):at(n,!!i.multiple,i.multiple?[]:"",!1))}}}return;case 6:if(null===e.stateNode)throw Error(a(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void((n=e.stateNode).hydrate&&(n.hydrate=!1,xe(n.containerInfo)));case 13:return null!==e.memoizedState&&(Bs=Br(),ps(e.child,!0)),void ks(e);case 19:return void ks(e);case 23:case 24:return void ps(e,null!==e.memoizedState)}throw Error(a(163))}function ks(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var n=t.stateNode;null===n&&(n=t.stateNode=new us),e.forEach((function(e){var i=jl.bind(null,t,e);n.has(e)||(n.add(e),e.then(i,i))}))}}function Ss(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var Es=Math.ceil,Os=w.ReactCurrentDispatcher,Cs=w.ReactCurrentOwner,Ps=0,Ms=null,Ls=null,Rs=0,Ts=0,Ns=sr(0),Ds=0,As=null,Is=0,js=0,Fs=0,zs=0,Vs=null,Bs=0,Hs=1/0;function Ws(){Hs=Br()+500}var Us,$s=null,Ys=!1,Ks=null,qs=null,Gs=!1,Qs=null,Xs=90,Js=[],Zs=[],tl=null,el=0,nl=null,il=-1,rl=0,ol=0,al=null,sl=!1;function ll(){return 0!=(48&Ps)?Br():-1!==il?il:il=Br()}function cl(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Hr()?1:2;if(0===rl&&(rl=Is),0!==qr.transition){0!==ol&&(ol=null!==Vs?Vs.pendingLanes:0),t=rl;var e=4186112&~ol;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Hr(),t=Fe(0!=(4&Ps)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),rl)}function ul(t,e,n){if(50<el)throw el=0,nl=null,Error(a(185));if(null===(t=hl(t,e)))return null;Be(t,e,n),t===Ms&&(Fs|=e,4===Ds&&pl(t,Rs));var i=Hr();1===e?0!=(8&Ps)&&0==(48&Ps)?gl(t):(dl(t,n),0===Ps&&(Ws(),Yr())):(0==(4&Ps)||98!==i&&99!==i||(null===tl?tl=new Set([t]):tl.add(t)),dl(t,n)),Vs=t}function hl(t,e){t.lanes|=e;var n=t.alternate;for(null!==n&&(n.lanes|=e),n=t,t=t.return;null!==t;)t.childLanes|=e,null!==(n=t.alternate)&&(n.childLanes|=e),n=t,t=t.return;return 3===n.tag?n.stateNode:null}function dl(t,e){for(var n=t.callbackNode,i=t.suspendedLanes,r=t.pingedLanes,o=t.expirationTimes,s=t.pendingLanes;0<s;){var l=31-He(s),c=1<<l,u=o[l];if(-1===u){if(0==(c&i)||0!=(c&r)){u=e,Ae(c);var h=De;o[l]=10<=h?u+250:6<=h?u+5e3:-1}}else u<=e&&(t.expiredLanes|=c);s&=~c}if(i=Ie(t,t===Ms?Rs:0),e=De,0===i)null!==n&&(n!==Ar&&Er(n),t.callbackNode=null,t.callbackPriority=0);else{if(null!==n){if(t.callbackPriority===e)return;n!==Ar&&Er(n)}15===e?(n=gl.bind(null,t),null===jr?(jr=[n],Fr=Sr(Lr,Kr)):jr.push(n),n=Ar):14===e?n=$r(99,gl.bind(null,t)):(n=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,t))}}(e),n=$r(n,fl.bind(null,t))),t.callbackPriority=e,t.callbackNode=n}}function fl(t){if(il=-1,ol=rl=0,0!=(48&Ps))throw Error(a(327));var e=t.callbackNode;if(Ll()&&t.callbackNode!==e)return null;var n=Ie(t,t===Ms?Rs:0);if(0===n)return null;var i=n,r=Ps;Ps|=16;var o=wl();for(Ms===t&&Rs===i||(Ws(),vl(t,i));;)try{Sl();break}catch(e){xl(t,e)}if(to(),Os.current=o,Ps=r,null!==Ls?i=0:(Ms=null,Rs=0,i=Ds),0!=(Is&Fs))vl(t,0);else if(0!==i){if(2===i&&(Ps|=64,t.hydrate&&(t.hydrate=!1,$i(t.containerInfo)),0!==(n=je(t))&&(i=_l(t,n))),1===i)throw e=As,vl(t,0),pl(t,n),dl(t,Br()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=n,i){case 0:case 1:throw Error(a(345));case 2:case 5:Cl(t);break;case 3:if(pl(t,n),(62914560&n)===n&&10<(i=Bs+500-Br())){if(0!==Ie(t,0))break;if(((r=t.suspendedLanes)&n)!==n){ll(),t.pingedLanes|=t.suspendedLanes&r;break}t.timeoutHandle=Wi(Cl.bind(null,t),i);break}Cl(t);break;case 4:if(pl(t,n),(4186112&n)===n)break;for(i=t.eventTimes,r=-1;0<n;){var s=31-He(n);o=1<<s,(s=i[s])>r&&(r=s),n&=~o}if(n=r,10<(n=(120>(n=Br()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Es(n/1960))-n)){t.timeoutHandle=Wi(Cl.bind(null,t),n);break}Cl(t);break;default:throw Error(a(329))}}return dl(t,Br()),t.callbackNode===e?fl.bind(null,t):null}function pl(t,e){for(e&=~zs,e&=~Fs,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-He(e),i=1<<n;t[n]=-1,e&=~i}}function gl(t){if(0!=(48&Ps))throw Error(a(327));if(Ll(),t===Ms&&0!=(t.expiredLanes&Rs)){var e=Rs,n=_l(t,e);0!=(Is&Fs)&&(n=_l(t,e=Ie(t,e)))}else n=_l(t,e=Ie(t,0));if(0!==t.tag&&2===n&&(Ps|=64,t.hydrate&&(t.hydrate=!1,$i(t.containerInfo)),0!==(e=je(t))&&(n=_l(t,e))),1===n)throw n=As,vl(t,0),pl(t,e),dl(t,Br()),n;return t.finishedWork=t.current.alternate,t.finishedLanes=e,Cl(t),dl(t,Br()),null}function ml(t,e){var n=Ps;Ps|=1;try{return t(e)}finally{0===(Ps=n)&&(Ws(),Yr())}}function bl(t,e){cr(Ns,Ts),Ts|=e,Is|=e}function yl(){Ts=Ns.current,lr(Ns)}function vl(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(-1!==n&&(t.timeoutHandle=-1,Ui(n)),null!==Ls)for(n=Ls.return;null!==n;){var i=n;switch(i.tag){case 1:null!=(i=i.type.childContextTypes)&&mr();break;case 3:No(),lr(dr),lr(hr),qo();break;case 5:Ao(i);break;case 4:No();break;case 13:case 19:lr(Io);break;case 10:eo(i);break;case 23:case 24:yl()}n=n.return}Ms=t,Ls=Bl(t.current,null),Rs=Ts=Is=e,Ds=0,As=null,zs=Fs=js=0}function xl(t,e){for(;;){var n=Ls;try{if(to(),Go.current=La,ea){for(var i=Jo.memoizedState;null!==i;){var r=i.queue;null!==r&&(r.pending=null),i=i.next}ea=!1}if(Xo=0,ta=Zo=Jo=null,na=!1,Cs.current=null,null===n||null===n.return){Ds=1,As=e,Ls=null;break}t:{var o=t,a=n.return,s=n,l=e;if(e=Rs,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.lanes=u.lanes):(s.updateQueue=null,s.memoizedState=null)}var h=0!=(1&Io.current),d=a;do{var f;if(f=13===d.tag){var p=d.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var g=d.memoizedProps;f=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!h)}}if(f){var m=d.updateQueue;if(null===m){var b=new Set;b.add(c),d.updateQueue=b}else m.add(c);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=lo(-1,1);y.tag=2,co(s,y)}s.lanes|=1;break t}l=void 0,s=e;var v=o.pingCache;if(null===v?(v=o.pingCache=new ss,l=new Set,v.set(c,l)):void 0===(l=v.get(c))&&(l=new Set,v.set(c,l)),!l.has(s)){l.add(s);var x=Il.bind(null,o,c,s);c.then(x,x)}d.flags|=4096,d.lanes=e;break t}d=d.return}while(null!==d);l=Error((K(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ds&&(Ds=2),l=os(l,s),d=a;do{switch(d.tag){case 3:o=l,d.flags|=4096,e&=-e,d.lanes|=e,uo(d,ls(0,o,e));break t;case 1:o=l;var w=d.type,_=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===qs||!qs.has(_)))){d.flags|=4096,e&=-e,d.lanes|=e,uo(d,cs(d,o,e));break t}}d=d.return}while(null!==d)}Ol(n)}catch(t){e=t,Ls===n&&null!==n&&(Ls=n=n.return);continue}break}}function wl(){var t=Os.current;return Os.current=La,null===t?La:t}function _l(t,e){var n=Ps;Ps|=16;var i=wl();for(Ms===t&&Rs===e||vl(t,e);;)try{kl();break}catch(e){xl(t,e)}if(to(),Ps=n,Os.current=i,null!==Ls)throw Error(a(261));return Ms=null,Rs=0,Ds}function kl(){for(;null!==Ls;)El(Ls)}function Sl(){for(;null!==Ls&&!Or();)El(Ls)}function El(t){var e=Us(t.alternate,t,Ts);t.memoizedProps=t.pendingProps,null===e?Ol(t):Ls=e,Cs.current=null}function Ol(t){var e=t;do{var n=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(n=is(n,e,Ts)))return void(Ls=n);if(24!==(n=e).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ts)||0==(4&n.mode)){for(var i=0,r=n.child;null!==r;)i|=r.lanes|r.childLanes,r=r.sibling;n.childLanes=i}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(n=rs(e)))return n.flags&=2047,void(Ls=n);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(Ls=e);Ls=e=t}while(null!==e);0===Ds&&(Ds=5)}function Cl(t){var e=Hr();return Ur(99,Pl.bind(null,t,e)),null}function Pl(t,e){do{Ll()}while(null!==Qs);if(0!=(48&Ps))throw Error(a(327));var n=t.finishedWork;if(null===n)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(a(177));t.callbackNode=null;var i=n.lanes|n.childLanes,r=i,o=t.pendingLanes&~r;t.pendingLanes=r,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=r,t.mutableReadLanes&=r,t.entangledLanes&=r,r=t.entanglements;for(var s=t.eventTimes,l=t.expirationTimes;0<o;){var c=31-He(o),u=1<<c;r[c]=0,s[c]=-1,l[c]=-1,o&=~u}if(null!==tl&&0==(24&i)&&tl.has(t)&&tl.delete(t),t===Ms&&(Ls=Ms=null,Rs=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){if(r=Ps,Ps|=32,Cs.current=null,zi=Ke,gi(s=pi())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else t:if(l=(l=s.ownerDocument)&&l.defaultView||window,(u=l.getSelection&&l.getSelection())&&0!==u.rangeCount){l=u.anchorNode,o=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{l.nodeType,c.nodeType}catch(t){l=null;break t}var h=0,d=-1,f=-1,p=0,g=0,m=s,b=null;e:for(;;){for(var y;m!==l||0!==o&&3!==m.nodeType||(d=h+o),m!==c||0!==u&&3!==m.nodeType||(f=h+u),3===m.nodeType&&(h+=m.nodeValue.length),null!==(y=m.firstChild);)b=m,m=y;for(;;){if(m===s)break e;if(b===l&&++p===o&&(d=h),b===c&&++g===u&&(f=h),null!==(y=m.nextSibling))break;b=(m=b).parentNode}m=y}l=-1===d||-1===f?null:{start:d,end:f}}else l=null;l=l||{start:0,end:0}}else l=null;Vi={focusedElem:s,selectionRange:l},Ke=!1,al=null,sl=!1,$s=i;do{try{Ml()}catch(t){if(null===$s)throw Error(a(330));Al($s,t),$s=$s.nextEffect}}while(null!==$s);al=null,$s=i;do{try{for(s=t;null!==$s;){var v=$s.flags;if(16&v&&bt($s.stateNode,""),128&v){var x=$s.alternate;if(null!==x){var w=x.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&v){case 2:ys($s),$s.flags&=-3;break;case 6:ys($s),$s.flags&=-3,_s($s.alternate,$s);break;case 1024:$s.flags&=-1025;break;case 1028:$s.flags&=-1025,_s($s.alternate,$s);break;case 4:_s($s.alternate,$s);break;case 8:ws(s,l=$s);var _=l.alternate;ms(l),null!==_&&ms(_)}$s=$s.nextEffect}}catch(t){if(null===$s)throw Error(a(330));Al($s,t),$s=$s.nextEffect}}while(null!==$s);if(w=Vi,x=pi(),v=w.focusedElem,s=w.selectionRange,x!==v&&v&&v.ownerDocument&&fi(v.ownerDocument.documentElement,v)){null!==s&&gi(v)&&(x=s.start,void 0===(w=s.end)&&(w=x),"selectionStart"in v?(v.selectionStart=x,v.selectionEnd=Math.min(w,v.value.length)):(w=(x=v.ownerDocument||document)&&x.defaultView||window).getSelection&&(w=w.getSelection(),l=v.textContent.length,_=Math.min(s.start,l),s=void 0===s.end?_:Math.min(s.end,l),!w.extend&&_>s&&(l=s,s=_,_=l),l=di(v,_),o=di(v,s),l&&o&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==o.node||w.focusOffset!==o.offset)&&((x=x.createRange()).setStart(l.node,l.offset),w.removeAllRanges(),_>s?(w.addRange(x),w.extend(o.node,o.offset)):(x.setEnd(o.node,o.offset),w.addRange(x))))),x=[];for(w=v;w=w.parentNode;)1===w.nodeType&&x.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<x.length;v++)(w=x[v]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Ke=!!zi,Vi=zi=null,t.current=n,$s=i;do{try{for(v=t;null!==$s;){var k=$s.flags;if(36&k&&fs(v,$s.alternate,$s),128&k){x=void 0;var S=$s.ref;if(null!==S){var E=$s.stateNode;$s.tag,x=E,"function"==typeof S?S(x):S.current=x}}$s=$s.nextEffect}}catch(t){if(null===$s)throw Error(a(330));Al($s,t),$s=$s.nextEffect}}while(null!==$s);$s=null,Ir(),Ps=r}else t.current=n;if(Gs)Gs=!1,Qs=t,Xs=e;else for($s=i;null!==$s;)e=$s.nextEffect,$s.nextEffect=null,8&$s.flags&&((k=$s).sibling=null,k.stateNode=null),$s=e;if(0===(i=t.pendingLanes)&&(qs=null),1===i?t===nl?el++:(el=0,nl=t):el=0,n=n.stateNode,_r&&"function"==typeof _r.onCommitFiberRoot)try{_r.onCommitFiberRoot(wr,n,void 0,64==(64&n.current.flags))}catch(t){}if(dl(t,Br()),Ys)throw Ys=!1,t=Ks,Ks=null,t;return 0!=(8&Ps)||Yr(),null}function Ml(){for(;null!==$s;){var t=$s.alternate;sl||null===al||(0!=(8&$s.flags)?Jt($s,al)&&(sl=!0):13===$s.tag&&Ss(t,$s)&&Jt($s,al)&&(sl=!0));var e=$s.flags;0!=(256&e)&&ds(t,$s),0==(512&e)||Gs||(Gs=!0,$r(97,(function(){return Ll(),null}))),$s=$s.nextEffect}}function Ll(){if(90!==Xs){var t=97<Xs?97:Xs;return Xs=90,Ur(t,Nl)}return!1}function Rl(t,e){Js.push(e,t),Gs||(Gs=!0,$r(97,(function(){return Ll(),null})))}function Tl(t,e){Zs.push(e,t),Gs||(Gs=!0,$r(97,(function(){return Ll(),null})))}function Nl(){if(null===Qs)return!1;var t=Qs;if(Qs=null,0!=(48&Ps))throw Error(a(331));var e=Ps;Ps|=32;var n=Zs;Zs=[];for(var i=0;i<n.length;i+=2){var r=n[i],o=n[i+1],s=r.destroy;if(r.destroy=void 0,"function"==typeof s)try{s()}catch(t){if(null===o)throw Error(a(330));Al(o,t)}}for(n=Js,Js=[],i=0;i<n.length;i+=2){r=n[i],o=n[i+1];try{var l=r.create;r.destroy=l()}catch(t){if(null===o)throw Error(a(330));Al(o,t)}}for(l=t.current.firstEffect;null!==l;)t=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=t;return Ps=e,Yr(),!0}function Dl(t,e,n){co(t,e=ls(0,e=os(n,e),1)),e=ll(),null!==(t=hl(t,1))&&(Be(t,1,e),dl(t,e))}function Al(t,e){if(3===t.tag)Dl(t,t,e);else for(var n=t.return;null!==n;){if(3===n.tag){Dl(n,t,e);break}if(1===n.tag){var i=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===qs||!qs.has(i))){var r=cs(n,t=os(e,t),1);if(co(n,r),r=ll(),null!==(n=hl(n,1)))Be(n,1,r),dl(n,r);else if("function"==typeof i.componentDidCatch&&(null===qs||!qs.has(i)))try{i.componentDidCatch(e,t)}catch(t){}break}}n=n.return}}function Il(t,e,n){var i=t.pingCache;null!==i&&i.delete(e),e=ll(),t.pingedLanes|=t.suspendedLanes&n,Ms===t&&(Rs&n)===n&&(4===Ds||3===Ds&&(62914560&Rs)===Rs&&500>Br()-Bs?vl(t,0):zs|=n),dl(t,e)}function jl(t,e){var n=t.stateNode;null!==n&&n.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Hr()?1:2:(0===rl&&(rl=Is),0===(e=ze(62914560&~rl))&&(e=4194304))),n=ll(),null!==(t=hl(t,e))&&(Be(t,e,n),dl(t,n))}function Fl(t,e,n,i){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zl(t,e,n,i){return new Fl(t,e,n,i)}function Vl(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Bl(t,e){var n=t.alternate;return null===n?((n=zl(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Hl(t,e,n,i,r,o){var s=2;if(i=t,"function"==typeof t)Vl(t)&&(s=1);else if("string"==typeof t)s=5;else t:switch(t){case S:return Wl(n.children,r,o,e);case I:s=8,r|=16;break;case E:s=8,r|=1;break;case O:return(t=zl(12,n,e,8|r)).elementType=O,t.type=O,t.lanes=o,t;case L:return(t=zl(13,n,e,r)).type=L,t.elementType=L,t.lanes=o,t;case R:return(t=zl(19,n,e,r)).elementType=R,t.lanes=o,t;case j:return Ul(n,r,o,e);case F:return(t=zl(24,n,e,r)).elementType=F,t.lanes=o,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case C:s=10;break t;case P:s=9;break t;case M:s=11;break t;case T:s=14;break t;case N:s=16,i=null;break t;case D:s=22;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=zl(s,n,e,r)).elementType=t,e.type=i,e.lanes=o,e}function Wl(t,e,n,i){return(t=zl(7,t,i,e)).lanes=n,t}function Ul(t,e,n,i){return(t=zl(23,t,i,e)).elementType=j,t.lanes=n,t}function $l(t,e,n){return(t=zl(6,t,null,e)).lanes=n,t}function Yl(t,e,n){return(e=zl(4,null!==t.children?t.children:[],t.key,e)).lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Kl(t,e,n){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ve(0),this.expirationTimes=Ve(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ve(0),this.mutableSourceEagerHydrationData=null}function ql(t,e,n,i){var r=e.current,o=ll(),s=cl(r);t:if(n){e:{if(Gt(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break e;case 1:if(gr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(gr(c)){n=yr(n,c,l);break t}}n=l}else n=ur;return null===e.context?e.context=n:e.pendingContext=n,(e=lo(o,s)).payload={element:t},null!==(i=void 0===i?null:i)&&(e.callback=i),co(r,e),ul(r,s,o),s}function Gl(t){return(t=t.current).child?(t.child.tag,t.child.stateNode):null}function Ql(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var n=t.retryLane;t.retryLane=0!==n&&n<e?n:e}}function Xl(t,e){Ql(t,e),(t=t.alternate)&&Ql(t,e)}function Jl(t,e,n){var i=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Kl(t,e,null!=n&&!0===n.hydrate),e=zl(3,null,null,2===e?7:1===e?3:0),n.current=e,e.stateNode=n,ao(e),t[Ji]=n.current,Li(8===t.nodeType?t.parentNode:t),i)for(t=0;t<i.length;t++){var r=(e=i[t])._getVersion;r=r(e._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[e,r]:n.mutableSourceEagerHydrationData.push(e,r)}this._internalRoot=n}function Zl(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function tc(t,e,n,i,r){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof r){var s=r;r=function(){var t=Gl(a);s.call(t)}}ql(e,a,t,r)}else{if(o=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new Jl(t,0,e?{hydrate:!0}:void 0)}(n,i),a=o._internalRoot,"function"==typeof r){var l=r;r=function(){var t=Gl(a);l.call(t)}}!function(t,e){var n=Ps;Ps&=-2,Ps|=8;try{t(e)}finally{0===(Ps=n)&&(Ws(),Yr())}}((function(){ql(e,a,t,r)}))}return Gl(a)}Us=function(t,e,n){var i=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||dr.current)Aa=!0;else{if(0==(n&i)){switch(Aa=!1,e.tag){case 3:$a(e),Yo();break;case 5:Do(e);break;case 1:gr(e.type)&&vr(e);break;case 4:To(e,e.stateNode.containerInfo);break;case 10:i=e.memoizedProps.value;var r=e.type._context;cr(Qr,r._currentValue),r._currentValue=i;break;case 13:if(null!==e.memoizedState)return 0!=(n&e.child.childLanes)?Qa(t,e,n):(cr(Io,1&Io.current),null!==(e=es(t,e,n))?e.sibling:null);cr(Io,1&Io.current);break;case 19:if(i=0!=(n&e.childLanes),0!=(64&t.flags)){if(i)return ts(t,e,n);e.flags|=64}if(null!==(r=e.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),cr(Io,Io.current),i)break;return null;case 23:case 24:return e.lanes=0,Va(t,e,n)}return es(t,e,n)}Aa=0!=(16384&t.flags)}else Aa=!1;switch(e.lanes=0,e.tag){case 2:if(i=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,r=pr(e,hr.current),io(e,n),r=oa(null,e,i,t,r,n),e.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,gr(i)){var o=!0;vr(e)}else o=!1;e.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,ao(e);var s=i.getDerivedStateFromProps;"function"==typeof s&&go(e,i,s,t),r.updater=mo,e.stateNode=r,r._reactInternals=e,xo(e,i,t,n),e=Ua(null,e,i,!0,o,n)}else e.tag=0,Ia(null,e,r,n),e=e.child;return e;case 16:r=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,r=(o=r._init)(r._payload),e.type=r,o=e.tag=function(t){if("function"==typeof t)return Vl(t)?1:0;if(null!=t){if((t=t.$$typeof)===M)return 11;if(t===T)return 14}return 2}(r),t=Gr(r,t),o){case 0:e=Ha(null,e,r,t,n);break t;case 1:e=Wa(null,e,r,t,n);break t;case 11:e=ja(null,e,r,t,n);break t;case 14:e=Fa(null,e,r,Gr(r.type,t),i,n);break t}throw Error(a(306,r,""))}return e;case 0:return i=e.type,r=e.pendingProps,Ha(t,e,i,r=e.elementType===i?r:Gr(i,r),n);case 1:return i=e.type,r=e.pendingProps,Wa(t,e,i,r=e.elementType===i?r:Gr(i,r),n);case 3:if($a(e),i=e.updateQueue,null===t||null===i)throw Error(a(282));if(i=e.pendingProps,r=null!==(r=e.memoizedState)?r.element:null,so(t,e),ho(e,i,null,n),(i=e.memoizedState.element)===r)Yo(),e=es(t,e,n);else{if((o=(r=e.stateNode).hydrate)&&(zo=Yi(e.stateNode.containerInfo.firstChild),Fo=e,o=Vo=!0),o){if(null!=(t=r.mutableSourceEagerHydrationData))for(r=0;r<t.length;r+=2)(o=t[r])._workInProgressVersionPrimary=t[r+1],Ko.push(o);for(n=Oo(e,null,i,n),e.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(t,e,i,n),Yo();e=e.child}return e;case 5:return Do(e),null===t&&Wo(e),i=e.type,r=e.pendingProps,o=null!==t?t.memoizedProps:null,s=r.children,Hi(i,r)?s=null:null!==o&&Hi(i,o)&&(e.flags|=16),Ba(t,e),Ia(t,e,s,n),e.child;case 6:return null===t&&Wo(e),null;case 13:return Qa(t,e,n);case 4:return To(e,e.stateNode.containerInfo),i=e.pendingProps,null===t?e.child=Eo(e,null,i,n):Ia(t,e,i,n),e.child;case 11:return i=e.type,r=e.pendingProps,ja(t,e,i,r=e.elementType===i?r:Gr(i,r),n);case 7:return Ia(t,e,e.pendingProps,n),e.child;case 8:case 12:return Ia(t,e,e.pendingProps.children,n),e.child;case 10:t:{i=e.type._context,r=e.pendingProps,s=e.memoizedProps,o=r.value;var l=e.type._context;if(cr(Qr,l._currentValue),l._currentValue=o,null!==s)if(l=s.value,0==(o=li(l,o)?0:0|("function"==typeof i._calculateChangedBits?i._calculateChangedBits(l,o):1073741823))){if(s.children===r.children&&!dr.current){e=es(t,e,n);break t}}else for(null!==(l=e.child)&&(l.return=e);null!==l;){var c=l.dependencies;if(null!==c){s=l.child;for(var u=c.firstContext;null!==u;){if(u.context===i&&0!=(u.observedBits&o)){1===l.tag&&((u=lo(-1,n&-n)).tag=2,co(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),no(l.return,n),c.lanes|=n;break}u=u.next}}else s=10===l.tag&&l.type===e.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===e){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Ia(t,e,r.children,n),e=e.child}return e;case 9:return r=e.type,i=(o=e.pendingProps).children,io(e,n),i=i(r=ro(r,o.unstable_observedBits)),e.flags|=1,Ia(t,e,i,n),e.child;case 14:return o=Gr(r=e.type,e.pendingProps),Fa(t,e,r,o=Gr(r.type,o),i,n);case 15:return za(t,e,e.type,e.pendingProps,i,n);case 17:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:Gr(i,r),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,gr(i)?(t=!0,vr(e)):t=!1,io(e,n),yo(e,i,r),xo(e,i,r,n),Ua(null,e,i,!0,t,n);case 19:return ts(t,e,n);case 23:case 24:return Va(t,e,n)}throw Error(a(156,e.tag))},Jl.prototype.render=function(t){ql(t,this._internalRoot,null,null)},Jl.prototype.unmount=function(){var t=this._internalRoot,e=t.containerInfo;ql(null,t,null,(function(){e[Ji]=null}))},Zt=function(t){13===t.tag&&(ul(t,4,ll()),Xl(t,4))},te=function(t){13===t.tag&&(ul(t,67108864,ll()),Xl(t,67108864))},ee=function(t){if(13===t.tag){var e=ll(),n=cl(t);ul(t,n,e),Xl(t,n)}},ne=function(t,e){return e()},Ot=function(t,e,n){switch(e){case"input":if(nt(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var i=n[e];if(i!==t&&i.form===t.form){var r=ir(i);if(!r)throw Error(a(90));X(i),nt(i,r)}}}break;case"textarea":ct(t,n);break;case"select":null!=(e=n.value)&&at(t,!!n.multiple,e,!1)}},Tt=ml,Nt=function(t,e,n,i,r){var o=Ps;Ps|=4;try{return Ur(98,t.bind(null,e,n,i,r))}finally{0===(Ps=o)&&(Ws(),Yr())}},Dt=function(){0==(49&Ps)&&(function(){if(null!==tl){var t=tl;tl=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,dl(t,Br())}))}Yr()}(),Ll())},At=function(t,e){var n=Ps;Ps|=2;try{return t(e)}finally{0===(Ps=n)&&(Ws(),Yr())}};var ec={findFiberByHostInstance:tr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},nc={bundleType:ec.bundleType,version:ec.version,rendererPackageName:ec.rendererPackageName,rendererConfig:ec.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=function(t){if(t=function(t){var e=t.alternate;if(!e){if(null===(e=Gt(t)))throw Error(a(188));return e!==t?null:t}for(var n=t,i=e;;){var r=n.return;if(null===r)break;var o=r.alternate;if(null===o){if(null!==(i=r.return)){n=i;continue}break}if(r.child===o.child){for(o=r.child;o;){if(o===n)return Xt(r),t;if(o===i)return Xt(r),e;o=o.sibling}throw Error(a(188))}if(n.return!==i.return)n=r,i=o;else{for(var s=!1,l=r.child;l;){if(l===n){s=!0,n=r,i=o;break}if(l===i){s=!0,i=r,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,i=r;break}if(l===i){s=!0,i=o,n=r;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==i)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?t:e}(t),!t)return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}(t))?null:t.stateNode},findFiberByHostInstance:ec.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{wr=ic.inject(nc),_r=ic}catch(gt){}}e.render=function(t,e,n){if(!Zl(e))throw Error(a(200));return tc(null,t,e,!1,n)},e.unstable_batchedUpdates=ml},935:(t,e,n)=>{!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(448)},921:(t,e)=>{var n="function"==typeof Symbol&&Symbol.for,i=n?Symbol.for("react.element"):60103,r=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,h=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,b=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,v=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function w(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case i:switch(t=t.type){case u:case h:case o:case s:case a:case f:return t;default:switch(t=t&&t.$$typeof){case c:case d:case m:case g:case l:return t;default:return e}}case r:return e}}}function _(t){return w(t)===h}e.AsyncMode=u,e.ConcurrentMode=h,e.ContextConsumer=c,e.ContextProvider=l,e.Element=i,e.ForwardRef=d,e.Fragment=o,e.Lazy=m,e.Memo=g,e.Portal=r,e.Profiler=s,e.StrictMode=a,e.Suspense=f,e.isAsyncMode=function(t){return _(t)||w(t)===u},e.isConcurrentMode=_,e.isContextConsumer=function(t){return w(t)===c},e.isContextProvider=function(t){return w(t)===l},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===i},e.isForwardRef=function(t){return w(t)===d},e.isFragment=function(t){return w(t)===o},e.isLazy=function(t){return w(t)===m},e.isMemo=function(t){return w(t)===g},e.isPortal=function(t){return w(t)===r},e.isProfiler=function(t){return w(t)===s},e.isStrictMode=function(t){return w(t)===a},e.isSuspense=function(t){return w(t)===f},e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===o||t===h||t===s||t===a||t===f||t===p||"object"==typeof t&&null!==t&&(t.$$typeof===m||t.$$typeof===g||t.$$typeof===l||t.$$typeof===c||t.$$typeof===d||t.$$typeof===y||t.$$typeof===v||t.$$typeof===x||t.$$typeof===b)},e.typeOf=w},864:(t,e,n)=>{t.exports=n(921)},359:(t,e)=>{Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},973:(t,e,n)=>{n(359)},408:(t,e,n)=>{var i=n(418),r=60103,o=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,s=60110,l=60112;e.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var h=Symbol.for;r=h("react.element"),o=h("react.portal"),e.Fragment=h("react.fragment"),e.StrictMode=h("react.strict_mode"),e.Profiler=h("react.profiler"),a=h("react.provider"),s=h("react.context"),l=h("react.forward_ref"),e.Suspense=h("react.suspense"),c=h("react.memo"),u=h("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function f(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}function b(){}function y(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(f(85));this.updater.enqueueSetState(this,t,e,"setState")},m.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},b.prototype=m.prototype;var v=y.prototype=new b;v.constructor=y,i(v,m.prototype),v.isPureReactComponent=!0;var x={current:null},w=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function k(t,e,n){var i,o={},a=null,s=null;if(null!=e)for(i in void 0!==e.ref&&(s=e.ref),void 0!==e.key&&(a=""+e.key),e)w.call(e,i)&&!_.hasOwnProperty(i)&&(o[i]=e[i]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(t&&t.defaultProps)for(i in l=t.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:r,type:t,key:a,ref:s,props:o,_owner:x.current}}function S(t){return"object"==typeof t&&null!==t&&t.$$typeof===r}var E=/\/+/g;function O(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function C(t,e,n,i,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case r:case o:l=!0}}if(l)return a=a(l=t),t=""===i?"."+O(l,0):i,Array.isArray(a)?(n="",null!=t&&(n=t.replace(E,"$&/")+"/"),C(a,e,n,"",(function(t){return t}))):null!=a&&(S(a)&&(a=function(t,e){return{$$typeof:r,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+t)),e.push(a)),1;if(l=0,i=""===i?".":i+":",Array.isArray(t))for(var c=0;c<t.length;c++){var u=i+O(s=t[c],c);l+=C(s,e,n,u,a)}else if(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=d&&t[d]||t["@@iterator"])?t:null}(t),"function"==typeof u)for(t=u.call(t),c=0;!(s=t.next()).done;)l+=C(s=s.value,e,n,u=i+O(s,c++),a);else if("object"===s)throw e=""+t,Error(f(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return l}function P(t,e,n){if(null==t)return t;var i=[],r=0;return C(t,i,"","",(function(t){return e.call(n,t,r++)})),i}function M(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var L={current:null};function R(){var t=L.current;if(null===t)throw Error(f(321));return t}var T={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:i};e.Children={map:P,forEach:function(t,e,n){P(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return P(t,(function(){e++})),e},toArray:function(t){return P(t,(function(t){return t}))||[]},only:function(t){if(!S(t))throw Error(f(143));return t}},e.Component=m,e.PureComponent=y,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,e.cloneElement=function(t,e,n){if(null==t)throw Error(f(267,t));var o=i({},t.props),a=t.key,s=t.ref,l=t._owner;if(null!=e){if(void 0!==e.ref&&(s=e.ref,l=x.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var c=t.type.defaultProps;for(u in e)w.call(e,u)&&!_.hasOwnProperty(u)&&(o[u]=void 0===e[u]&&void 0!==c?c[u]:e[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){c=Array(u);for(var h=0;h<u;h++)c[h]=arguments[h+2];o.children=c}return{$$typeof:r,type:t.type,key:a,ref:s,props:o,_owner:l}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:s,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=k,e.createFactory=function(t){var e=k.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:l,render:t}},e.isValidElement=S,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:M}},e.memo=function(t,e){return{$$typeof:c,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return R().useCallback(t,e)},e.useContext=function(t,e){return R().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return R().useEffect(t,e)},e.useImperativeHandle=function(t,e,n){return R().useImperativeHandle(t,e,n)},e.useLayoutEffect=function(t,e){return R().useLayoutEffect(t,e)},e.useMemo=function(t,e){return R().useMemo(t,e)},e.useReducer=function(t,e,n){return R().useReducer(t,e,n)},e.useRef=function(t){return R().useRef(t)},e.useState=function(t){return R().useState(t)},e.version="17.0.2"},294:(t,e,n)=>{t.exports=n(408)},53:(t,e)=>{var n,i,r,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();e.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,h=function(){if(null!==c)try{var t=e.unstable_now();c(!0,t),c=null}catch(t){throw setTimeout(h,0),t}};n=function(t){null!==c?setTimeout(n,0,t):(c=t,setTimeout(h,0))},i=function(t,e){u=setTimeout(t,e)},r=function(){clearTimeout(u)},e.unstable_shouldYield=function(){return!1},o=e.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,b=-1,y=5,v=0;e.unstable_shouldYield=function(){return e.unstable_now()>=v},o=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<t?Math.floor(1e3/t):5};var x=new MessageChannel,w=x.port2;x.port1.onmessage=function(){if(null!==m){var t=e.unstable_now();v=t+y;try{m(!0,t)?w.postMessage(null):(g=!1,m=null)}catch(t){throw w.postMessage(null),t}}else g=!1},n=function(t){m=t,g||(g=!0,w.postMessage(null))},i=function(t,n){b=d((function(){t(e.unstable_now())}),n)},r=function(){f(b),b=-1}}function _(t,e){var n=t.length;t.push(e);t:for(;;){var i=n-1>>>1,r=t[i];if(!(void 0!==r&&0<E(r,e)))break t;t[i]=e,t[n]=r,n=i}}function k(t){return void 0===(t=t[0])?null:t}function S(t){var e=t[0];if(void 0!==e){var n=t.pop();if(n!==e){t[0]=n;t:for(var i=0,r=t.length;i<r;){var o=2*(i+1)-1,a=t[o],s=o+1,l=t[s];if(void 0!==a&&0>E(a,n))void 0!==l&&0>E(l,a)?(t[i]=l,t[s]=n,i=s):(t[i]=a,t[o]=n,i=o);else{if(!(void 0!==l&&0>E(l,n)))break t;t[i]=l,t[s]=n,i=s}}}return e}return null}function E(t,e){var n=t.sortIndex-e.sortIndex;return 0!==n?n:t.id-e.id}var O=[],C=[],P=1,M=null,L=3,R=!1,T=!1,N=!1;function D(t){for(var e=k(C);null!==e;){if(null===e.callback)S(C);else{if(!(e.startTime<=t))break;S(C),e.sortIndex=e.expirationTime,_(O,e)}e=k(C)}}function A(t){if(N=!1,D(t),!T)if(null!==k(O))T=!0,n(I);else{var e=k(C);null!==e&&i(A,e.startTime-t)}}function I(t,n){T=!1,N&&(N=!1,r()),R=!0;var o=L;try{for(D(n),M=k(O);null!==M&&(!(M.expirationTime>n)||t&&!e.unstable_shouldYield());){var a=M.callback;if("function"==typeof a){M.callback=null,L=M.priorityLevel;var s=a(M.expirationTime<=n);n=e.unstable_now(),"function"==typeof s?M.callback=s:M===k(O)&&S(O),D(n)}else S(O);M=k(O)}if(null!==M)var l=!0;else{var c=k(C);null!==c&&i(A,c.startTime-n),l=!1}return l}finally{M=null,L=o,R=!1}}var j=o;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){T||R||(T=!0,n(I))},e.unstable_getCurrentPriorityLevel=function(){return L},e.unstable_getFirstCallbackNode=function(){return k(O)},e.unstable_next=function(t){switch(L){case 1:case 2:case 3:var e=3;break;default:e=L}var n=L;L=e;try{return t()}finally{L=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=j,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=L;L=t;try{return e()}finally{L=n}},e.unstable_scheduleCallback=function(t,o,a){var s=e.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,t){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return t={id:P++,callback:o,priorityLevel:t,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(t.sortIndex=a,_(C,t),null===k(O)&&t===k(C)&&(N?r():N=!0,i(A,a-s))):(t.sortIndex=l,_(O,t),T||R||(T=!0,n(I))),t},e.unstable_wrapCallback=function(t){var e=L;return function(){var n=L;L=e;try{return t.apply(this,arguments)}finally{L=n}}}},840:(t,e,n)=>{t.exports=n(53)},250:(t,e,n)=>{var i=n(294),r="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},o=i.useState,a=i.useEffect,s=i.useLayoutEffect,l=i.useDebugValue;function c(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!r(t,n)}catch(t){return!0}}var u="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(t,e){return e()}:function(t,e){var n=e(),i=o({inst:{value:n,getSnapshot:e}}),r=i[0].inst,u=i[1];return s((function(){r.value=n,r.getSnapshot=e,c(r)&&u({inst:r})}),[t,n,e]),a((function(){return c(r)&&u({inst:r}),t((function(){c(r)&&u({inst:r})}))}),[t]),l(n),n};e.useSyncExternalStore=void 0!==i.useSyncExternalStore?i.useSyncExternalStore:u},139:(t,e,n)=>{var i=n(294),r=n(688),o="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},a=r.useSyncExternalStore,s=i.useRef,l=i.useEffect,c=i.useMemo,u=i.useDebugValue;e.useSyncExternalStoreWithSelector=function(t,e,n,i,r){var h=s(null);if(null===h.current){var d={hasValue:!1,value:null};h.current=d}else d=h.current;h=c((function(){function t(t){if(!l){if(l=!0,a=t,t=i(t),void 0!==r&&d.hasValue){var e=d.value;if(r(e,t))return s=e}return s=t}if(e=s,o(a,t))return e;var n=i(t);return void 0!==r&&r(e,n)?e:(a=t,s=n)}var a,s,l=!1,c=void 0===n?null:n;return[function(){return t(e())},null===c?void 0:function(){return t(c())}]}),[e,n,i,r]);var f=a(t,h[0],h[1]);return l((function(){d.hasValue=!0,d.value=f}),[f]),u(f),f}},688:(t,e,n)=>{t.exports=n(250)},798:(t,e,n)=>{t.exports=n(139)}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}(()=>{var t=n(294),e=n(935);var i;function r(){return r=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r.apply(this,arguments)}const o=function(e){return t.createElement("svg",r({xmlns:"http://www.w3.org/2000/svg",width:10.605,height:15.555},e),i||(i=t.createElement("path",{d:"m2.828 15.555 7.777-7.779L2.828 0 0 2.828l4.949 4.948L0 12.727l2.828 2.828z"})))};var a=n(688),s=n(798);let l=function(t){t()};const c=()=>l,u=t.createContext(null);function h(){return(0,t.useContext)(u)}let d=()=>{throw new Error("uSES not initialized!")};const f=(t,e)=>t===e;function p(e=u){const n=e===u?h:()=>(0,t.useContext)(e);return function(e,i=f){const{store:r,subscription:o,getServerState:a}=n(),s=d(o.addNestedSub,r.getState,a||r.getState,e,i);return(0,t.useDebugValue)(s),s}}const g=p();n(679),n(973);const m={notify(){},get:()=>[]};const b="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?t.useLayoutEffect:t.useEffect;let y=null;function v(e=u){const n=e===u?h:()=>(0,t.useContext)(e);return function(){const{store:t}=n();return t}}const x=v();function w(t=u){const e=t===u?x:v(t);return function(){return e().dispatch}}const _=w();var k,S;k=s.useSyncExternalStoreWithSelector,d=k,(t=>{y=t})(a.useSyncExternalStore),S=e.unstable_batchedUpdates,l=S;var E=_,O=g;const C=function(){function t(){this.apiURL="https://raw.githubusercontent.com/abdelrhman-arnos/analysis-fe-challenge/master/data.json"}return t.prototype.fetchData=function(){return fetch(this.apiURL)},t}();var P,M,L,R,T,N,D,A,I="Show All",j=["#e8707d","#8a5ea9","#3ca6db","#385e77","#24a408"];!function(t){t.JAN="Jan",t.FEB="Feb",t.MAR="Mar",t.APR="Apr",t.MAY="May",t.JUN="Jun",t.JUL="Jul",t.AUG="Aug",t.SEP="Sep",t.OCT="Oct",t.NOV="Nov",t.DEC="Dec"}(P||(P={})),function(t){t.LIGHT="LIGHT",t.DARK="DARK"}(M||(M={})),function(t){t.EN="EN",t.AR="AR"}(L||(L={})),function(t){t.RTL="rtl",t.LTR="ltr"}(R||(R={})),function(t){t.CHANGE_SCHOOL="CHANGE_SCHOOL",t.CHANGE_CAMP="CHANGE_CAMP",t.CHANGE_COUNTRY="CHANGE_COUNTRY"}(T||(T={})),function(t){t.GET_DATA="GET_DATA"}(N||(N={})),function(t){t.HIDE_GRAPH="HIDE_GRAPH",t.SHOW_GRAPH="SHOW_GRAPH"}(D||(D={})),function(t){t.COUNTRY_FILTER="COUNTRY_FILTER",t.CAMP_FILTER="CAMP_FILTER",t.SCHOOL_FILTER="SCHOOL_FILTER"}(A||(A={}));var F=function(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))},z=new C,V=function(e){var n=e.label,i=e.filterName,r=t.useState(!1),a=r[0],s=r[1],l=t.useRef(null),c=O((function(t){return t.data[i]})),u=c.data,h=c.filterValue,d=E(),f=function(t){l.current&&!l.current.contains(t.target)&&s(!1)};t.useEffect((function(){return document.addEventListener("click",f,!0),function(){document.removeEventListener("click",f,!0)}}),[]);var p=t.useCallback((function(t){d(function(t,e){switch(e){case A.CAMP_FILTER:return{type:T.CHANGE_CAMP,payload:t};case A.COUNTRY_FILTER:return{type:T.CHANGE_COUNTRY,payload:t};case A.SCHOOL_FILTER:return{type:T.CHANGE_SCHOOL,payload:t}}}(t,i))}),[d]);return t.createElement("div",null,t.createElement("label",{className:"Db_xpjXvTNH58KkiE3D2"},n),t.createElement("div",{ref:l,className:"CQkVDOshuHR7VpWvmYLq",onClick:function(){return s(!a)}},t.createElement("div",{className:"kTj77LBnKhKrcxMRerij"},t.createElement("span",null,h),t.createElement(o,{className:"PT2L83pK83LMrA1mguJv"})),a&&t.createElement("div",{className:"r9EsmOvEC3el2Yv66nwo"},u.map((function(e,n){return t.createElement("div",{key:n,onClick:function(){return p(e)},className:"zPmHCITouOzZEFOFY1Tv"},e)})))))};function B(t){if(Array.isArray(t))return t}function H(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function W(t,e){if(t){if("string"==typeof t)return H(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?H(t,e):void 0}}function U(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function $(t,e){return B(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,r,o=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);a=!0);}catch(t){s=!0,r=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return o}}(t,e)||W(t,e)||U()}function Y(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function K(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function q(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function G(t,e,n){return e&&q(t.prototype,e),n&&q(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}var Q=/&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230);/g,X={"&amp;":"&","&#38;":"&","&lt;":"<","&#60;":"<","&gt;":">","&#62;":">","&apos;":"'","&#39;":"'","&quot;":'"',"&#34;":'"',"&nbsp;":" ","&#160;":" ","&copy;":"©","&#169;":"©","&reg;":"®","&#174;":"®","&hellip;":"…","&#8230;":"…"},J=function(t){return X[t]};function Z(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function tt(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Z(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Z(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var et,nt={bindI18n:"languageChanged",bindI18nStore:"",transEmptyNodeValue:"",transSupportBasicHtmlNodes:!0,transWrapTextNodes:"",transKeepBasicHtmlNodesFor:["br","strong","i","p"],useSuspense:!0,unescape:function(t){return t.replace(Q,J)}},it=(0,t.createContext)();function rt(){return nt}var ot=function(){function t(){K(this,t),this.usedNamespaces={}}return G(t,[{key:"addUsedNamespaces",value:function(t){var e=this;t.forEach((function(t){e.usedNamespaces[t]||(e.usedNamespaces[t]=!0)}))}},{key:"getUsedNamespaces",value:function(){return Object.keys(this.usedNamespaces)}}]),t}();function at(){return et}var st={type:"3rdParty",init:function(t){!function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};nt=tt(tt({},nt),t)}(t.options.react),function(t){et=t}(t)}};function lt(){if(console&&console.warn){for(var t,e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];"string"==typeof n[0]&&(n[0]="react-i18next:: ".concat(n[0])),(t=console).warn.apply(t,n)}}var ct={};function ut(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];"string"==typeof e[0]&&ct[e[0]]||("string"==typeof e[0]&&(ct[e[0]]=new Date),lt.apply(void 0,e))}function ht(t,e,n){t.loadNamespaces(e,(function(){t.isInitialized?n():t.on("initialized",(function e(){setTimeout((function(){t.off("initialized",e)}),0),n()}))}))}function dt(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=e.languages[0],r=!!e.options&&e.options.fallbackLng,o=e.languages[e.languages.length-1];if("cimode"===i.toLowerCase())return!0;var a=function(t,n){var i=e.services.backendConnector.state["".concat(t,"|").concat(n)];return-1===i||2===i};return!(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&e.services.backendConnector.backend&&e.isLanguageChangingTo&&!a(e.isLanguageChangingTo,t)||!e.hasResourceBundle(i,t)&&e.services.backendConnector.backend&&(!e.options.resources||e.options.partialBundledLanguages)&&(!a(i,t)||r&&!a(o,t)))}function ft(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!e.languages||!e.languages.length)return ut("i18n.languages were undefined or empty",e.languages),!0;var i=void 0!==e.options.ignoreJSONStructure;return i?e.hasLoadedNamespace(t,{precheck:function(e,i){if(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&e.services.backendConnector.backend&&e.isLanguageChangingTo&&!i(e.isLanguageChangingTo,t))return!1}}):dt(t,e,n)}function pt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function gt(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?pt(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):pt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var mt,bt=function(e,n){var i=(0,t.useRef)();return(0,t.useEffect)((function(){i.current=n?i.current:e}),[e,n]),i.current};function yt(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.i18n,r=(0,t.useContext)(it)||{},o=r.i18n,a=r.defaultNS,s=i||o||at();if(s&&!s.reportNamespaces&&(s.reportNamespaces=new ot),!s){ut("You will need to pass in an i18next instance by using initReactI18next");var l=function(t){return Array.isArray(t)?t[t.length-1]:t},c=[l,{},!1];return c.t=l,c.i18n={},c.ready=!1,c}s.options.react&&void 0!==s.options.react.wait&&ut("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");var u=gt(gt(gt({},rt()),s.options.react),n),h=u.useSuspense,d=u.keyPrefix,f=e||a||s.options&&s.options.defaultNS;f="string"==typeof f?[f]:f||["translation"],s.reportNamespaces.addUsedNamespaces&&s.reportNamespaces.addUsedNamespaces(f);var p=(s.isInitialized||s.initializedStoreOnce)&&f.every((function(t){return ft(t,s,u)}));function g(){return s.getFixedT(null,"fallback"===u.nsMode?f:f[0],d)}var m=(0,t.useState)(g),b=$(m,2),y=b[0],v=b[1],x=f.join(),w=bt(x),_=(0,t.useRef)(!0);(0,t.useEffect)((function(){var t=u.bindI18n,e=u.bindI18nStore;function n(){_.current&&v(g)}return _.current=!0,p||h||ht(s,f,(function(){_.current&&v(g)})),p&&w&&w!==x&&_.current&&v(g),t&&s&&s.on(t,n),e&&s&&s.store.on(e,n),function(){_.current=!1,t&&s&&t.split(" ").forEach((function(t){return s.off(t,n)})),e&&s&&e.split(" ").forEach((function(t){return s.store.off(t,n)}))}}),[s,x]);var k=(0,t.useRef)(!0);(0,t.useEffect)((function(){_.current&&!k.current&&v(g),k.current=!1}),[s,d]);var S=[y,s,p];if(S.t=y,S.i18n=s,S.ready=p,p)return S;if(!p&&!h)return S;throw new Promise((function(t){ht(s,f,(function(){t()}))}))}function vt(){return vt=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},vt.apply(this,arguments)}!function(t){t.Pop="POP",t.Push="PUSH",t.Replace="REPLACE"}(mt||(mt={}));var xt="beforeunload";function wt(t){t.preventDefault(),t.returnValue=""}function _t(){var t=[];return{get length(){return t.length},push:function(e){return t.push(e),function(){t=t.filter((function(t){return t!==e}))}},call:function(e){t.forEach((function(t){return t&&t(e)}))}}}function kt(t){var e=t.pathname,n=void 0===e?"/":e,i=t.search,r=void 0===i?"":i,o=t.hash,a=void 0===o?"":o;return r&&"?"!==r&&(n+="?"===r.charAt(0)?r:"?"+r),a&&"#"!==a&&(n+="#"===a.charAt(0)?a:"#"+a),n}function St(t){var e={};if(t){var n=t.indexOf("#");n>=0&&(e.hash=t.substr(n),t=t.substr(0,n));var i=t.indexOf("?");i>=0&&(e.search=t.substr(i),t=t.substr(0,i)),t&&(e.pathname=t)}return e}const Et=(0,t.createContext)(null),Ot=(0,t.createContext)(null),Ct=(0,t.createContext)({outlet:null,matches:[]});function Pt(t,e){if(!t)throw new Error(e)}function Mt(t,e,n){void 0===n&&(n="/");let i=jt(("string"==typeof e?St(e):e).pathname||"/",n);if(null==i)return null;let r=Lt(t);!function(t){t.sort(((t,e)=>t.score!==e.score?e.score-t.score:function(t,e){return t.length===e.length&&t.slice(0,-1).every(((t,n)=>t===e[n]))?t[t.length-1]-e[e.length-1]:0}(t.routesMeta.map((t=>t.childrenIndex)),e.routesMeta.map((t=>t.childrenIndex)))))}(r);let o=null;for(let t=0;null==o&&t<r.length;++t)o=Dt(r[t],i);return o}function Lt(t,e,n,i){return void 0===e&&(e=[]),void 0===n&&(n=[]),void 0===i&&(i=""),t.forEach(((t,r)=>{let o={relativePath:t.path||"",caseSensitive:!0===t.caseSensitive,childrenIndex:r,route:t};o.relativePath.startsWith("/")&&(o.relativePath.startsWith(i)||Pt(!1),o.relativePath=o.relativePath.slice(i.length));let a=Ft([i,o.relativePath]),s=n.concat(o);t.children&&t.children.length>0&&(!0===t.index&&Pt(!1),Lt(t.children,e,s,a)),(null!=t.path||t.index)&&e.push({path:a,score:Nt(a,t.index),routesMeta:s})})),e}const Rt=/^:\w+$/,Tt=t=>"*"===t;function Nt(t,e){let n=t.split("/"),i=n.length;return n.some(Tt)&&(i+=-2),e&&(i+=2),n.filter((t=>!Tt(t))).reduce(((t,e)=>t+(Rt.test(e)?3:""===e?1:10)),i)}function Dt(t,e){let{routesMeta:n}=t,i={},r="/",o=[];for(let t=0;t<n.length;++t){let a=n[t],s=t===n.length-1,l="/"===r?e:e.slice(r.length)||"/",c=At({path:a.relativePath,caseSensitive:a.caseSensitive,end:s},l);if(!c)return null;Object.assign(i,c.params);let u=a.route;o.push({params:i,pathname:Ft([r,c.pathname]),pathnameBase:zt(Ft([r,c.pathnameBase])),route:u}),"/"!==c.pathnameBase&&(r=Ft([r,c.pathnameBase]))}return o}function At(t,e){"string"==typeof t&&(t={path:t,caseSensitive:!1,end:!0});let[n,i]=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!0);let i=[],r="^"+t.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((t,e)=>(i.push(e),"([^\\/]+)")));return t.endsWith("*")?(i.push("*"),r+="*"===t||"/*"===t?"(.*)$":"(?:\\/(.+)|\\/*)$"):r+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(r,e?void 0:"i"),i]}(t.path,t.caseSensitive,t.end),r=e.match(n);if(!r)return null;let o=r[0],a=o.replace(/(.)\/+$/,"$1"),s=r.slice(1);return{params:i.reduce(((t,e,n)=>{if("*"===e){let t=s[n]||"";a=o.slice(0,o.length-t.length).replace(/(.)\/+$/,"$1")}return t[e]=function(t,e){try{return decodeURIComponent(t)}catch(e){return t}}(s[n]||""),t}),{}),pathname:o,pathnameBase:a,pattern:t}}function It(t,e,n){let i,r="string"==typeof t?St(t):t,o=""===t||""===r.pathname?"/":r.pathname;if(null==o)i=n;else{let t=e.length-1;if(o.startsWith("..")){let e=o.split("/");for(;".."===e[0];)e.shift(),t-=1;r.pathname=e.join("/")}i=t>=0?e[t]:"/"}let a=function(t,e){void 0===e&&(e="/");let{pathname:n,search:i="",hash:r=""}="string"==typeof t?St(t):t,o=n?n.startsWith("/")?n:function(t,e){let n=e.replace(/\/+$/,"").split("/");return t.split("/").forEach((t=>{".."===t?n.length>1&&n.pop():"."!==t&&n.push(t)})),n.length>1?n.join("/"):"/"}(n,e):e;return{pathname:o,search:Vt(i),hash:Bt(r)}}(r,i);return o&&"/"!==o&&o.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}function jt(t,e){if("/"===e)return t;if(!t.toLowerCase().startsWith(e.toLowerCase()))return null;let n=t.charAt(e.length);return n&&"/"!==n?null:t.slice(e.length)||"/"}const Ft=t=>t.join("/").replace(/\/\/+/g,"/"),zt=t=>t.replace(/\/+$/,"").replace(/^\/*/,"/"),Vt=t=>t&&"?"!==t?t.startsWith("?")?t:"?"+t:"",Bt=t=>t&&"#"!==t?t.startsWith("#")?t:"#"+t:"";function Ht(){return null!=(0,t.useContext)(Ot)}function Wt(){return Ht()||Pt(!1),(0,t.useContext)(Ot).location}function Ut(){Ht()||Pt(!1);let{basename:e,navigator:n}=(0,t.useContext)(Et),{matches:i}=(0,t.useContext)(Ct),{pathname:r}=Wt(),o=JSON.stringify(i.map((t=>t.pathnameBase))),a=(0,t.useRef)(!1);(0,t.useEffect)((()=>{a.current=!0}));let s=(0,t.useCallback)((function(t,i){if(void 0===i&&(i={}),!a.current)return;if("number"==typeof t)return void n.go(t);let s=It(t,JSON.parse(o),r);"/"!==e&&(s.pathname=Ft([e,s.pathname])),(i.replace?n.replace:n.push)(s,i.state)}),[e,n,o,r]);return s}function $t(e){let{matches:n}=(0,t.useContext)(Ct),{pathname:i}=Wt(),r=JSON.stringify(n.map((t=>t.pathnameBase)));return(0,t.useMemo)((()=>It(e,JSON.parse(r),i)),[e,r,i])}function Yt(t){Pt(!1)}function Kt(e){let{basename:n="/",children:i=null,location:r,navigationType:o=mt.Pop,navigator:a,static:s=!1}=e;Ht()&&Pt(!1);let l=zt(n),c=(0,t.useMemo)((()=>({basename:l,navigator:a,static:s})),[l,a,s]);"string"==typeof r&&(r=St(r));let{pathname:u="/",search:h="",hash:d="",state:f=null,key:p="default"}=r,g=(0,t.useMemo)((()=>{let t=jt(u,l);return null==t?null:{pathname:t,search:h,hash:d,state:f,key:p}}),[l,u,h,d,f,p]);return null==g?null:(0,t.createElement)(Et.Provider,{value:c},(0,t.createElement)(Ot.Provider,{children:i,value:{location:g,navigationType:o}}))}function qt(e){let{children:n,location:i}=e;return function(e,n){Ht()||Pt(!1);let{matches:i}=(0,t.useContext)(Ct),r=i[i.length-1],o=r?r.params:{},a=(r&&r.pathname,r?r.pathnameBase:"/");r&&r.route;let s,l=Wt();if(n){var c;let t="string"==typeof n?St(n):n;"/"===a||(null==(c=t.pathname)?void 0:c.startsWith(a))||Pt(!1),s=t}else s=l;let u=s.pathname||"/",h=Mt(e,{pathname:"/"===a?u:u.slice(a.length)||"/"});return function(e,n){return void 0===n&&(n=[]),null==e?null:e.reduceRight(((i,r,o)=>(0,t.createElement)(Ct.Provider,{children:void 0!==r.route.element?r.route.element:i,value:{outlet:i,matches:n.concat(e.slice(0,o+1))}})),null)}(h&&h.map((t=>Object.assign({},t,{params:Object.assign({},o,t.params),pathname:Ft([a,t.pathname]),pathnameBase:"/"===t.pathnameBase?a:Ft([a,t.pathnameBase])}))),i)}(Gt(n),i)}function Gt(e){let n=[];return t.Children.forEach(e,(e=>{if(!(0,t.isValidElement)(e))return;if(e.type===t.Fragment)return void n.push.apply(n,Gt(e.props.children));e.type!==Yt&&Pt(!1);let i={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(i.children=Gt(e.props.children)),n.push(i)})),n}function Qt(){return Qt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},Qt.apply(this,arguments)}const Xt=["onClick","reloadDocument","replace","state","target","to"],Jt=(0,t.forwardRef)((function(e,n){let{onClick:i,reloadDocument:r,replace:o=!1,state:a,target:s,to:l}=e,c=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(e,Xt),u=function(e){Ht()||Pt(!1);let{basename:n,navigator:i}=(0,t.useContext)(Et),{hash:r,pathname:o,search:a}=$t(e),s=o;if("/"!==n){let t=function(t){return""===t||""===t.pathname?"/":"string"==typeof t?St(t).pathname:t.pathname}(e),i=null!=t&&t.endsWith("/");s="/"===o?n+(i?"/":""):Ft([n,o])}return i.createHref({pathname:s,search:a,hash:r})}(l),h=function(e,n){let{target:i,replace:r,state:o}=void 0===n?{}:n,a=Ut(),s=Wt(),l=$t(e);return(0,t.useCallback)((t=>{if(!(0!==t.button||i&&"_self"!==i||function(t){return!!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)}(t))){t.preventDefault();let n=!!r||kt(s)===kt(l);a(e,{replace:n,state:o})}}),[s,a,l,r,o,i,e])}(l,{replace:o,state:a,target:s});return(0,t.createElement)("a",Qt({},c,{href:u,onClick:function(t){i&&i(t),t.defaultPrevented||r||h(t)},ref:n,target:s}))}));var Zt,te=function(){var e,n,i=yt();return t.createElement("div",{className:"psQAr4JNczJKrjKEN8kV"},t.createElement(Jt,{to:"/"},i.t(Zt||(e=["Analysis Chart"],n=["Analysis Chart"],Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,Zt=e))))};var ee,ne,ie,re,oe=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},ae=function(){var e=yt();return t.createElement("div",null,t.createElement("div",{className:"wKNi80kVeFqm6ecTqBdE"},e.t(ee||(ee=oe(["Number of lessons"],["Number of lessons"])))),t.createElement("div",{className:"yipeBV5CoWnKQKWzJnCm"},t.createElement(V,{label:e.t(ne||(ne=oe(["Select Country"],["Select Country"]))),filterName:A.COUNTRY_FILTER}),t.createElement(V,{label:e.t(ie||(ie=oe(["Select Camp"],["Select Camp"]))),filterName:A.CAMP_FILTER}),t.createElement(V,{label:e.t(re||(re=oe(["Select School"],["Select School"]))),filterName:A.SCHOOL_FILTER})))};function se(){}const le=function(){let t=0;return function(){return t++}}();function ce(t){return null==t}function ue(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function he(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const de=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function fe(t,e){return de(t)?t:e}function pe(t,e){return void 0===t?e:t}const ge=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function me(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)}function be(t,e,n,i){let r,o,a;if(ue(t))if(o=t.length,i)for(r=o-1;r>=0;r--)e.call(n,t[r],r);else for(r=0;r<o;r++)e.call(n,t[r],r);else if(he(t))for(a=Object.keys(t),o=a.length,r=0;r<o;r++)e.call(n,t[a[r]],a[r])}function ye(t,e){let n,i,r,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(r=t[n],o=e[n],r.datasetIndex!==o.datasetIndex||r.index!==o.index)return!1;return!0}function ve(t){if(ue(t))return t.map(ve);if(he(t)){const e=Object.create(null),n=Object.keys(t),i=n.length;let r=0;for(;r<i;++r)e[n[r]]=ve(t[n[r]]);return e}return t}function xe(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function we(t,e,n,i){if(!xe(t))return;const r=e[t],o=n[t];he(r)&&he(o)?_e(r,o,i):e[t]=ve(o)}function _e(t,e,n){const i=ue(e)?e:[e],r=i.length;if(!he(t))return t;const o=(n=n||{}).merger||we;for(let a=0;a<r;++a){if(!he(e=i[a]))continue;const r=Object.keys(e);for(let i=0,a=r.length;i<a;++i)o(r[i],t,e,n)}return t}function ke(t,e){return _e(t,e,{merger:Se})}function Se(t,e,n){if(!xe(t))return;const i=e[t],r=n[t];he(i)&&he(r)?ke(i,r):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=ve(r))}const Ee={"":t=>t,x:t=>t.x,y:t=>t.y};function Oe(t,e){const n=Ee[e]||(Ee[e]=function(t){const e=function(t){const e=t.split("."),n=[];let i="";for(const t of e)i+=t,i.endsWith("\\")?i=i.slice(0,-1)+".":(n.push(i),i="");return n}(t);return t=>{for(const n of e){if(""===n)break;t=t&&t[n]}return t}}(e));return n(t)}function Ce(t){return t.charAt(0).toUpperCase()+t.slice(1)}const Pe=t=>void 0!==t,Me=t=>"function"==typeof t,Le=(t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0},Re=Math.PI,Te=2*Re,Ne=Te+Re,De=Number.POSITIVE_INFINITY,Ae=Re/180,Ie=Re/2,je=Re/4,Fe=2*Re/3,ze=Math.log10,Ve=Math.sign;function Be(t){const e=Math.round(t);t=We(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(ze(t))),i=t/n;return(i<=1?1:i<=2?2:i<=5?5:10)*n}function He(t){return!isNaN(parseFloat(t))&&isFinite(t)}function We(t,e,n){return Math.abs(t-e)<n}function Ue(t,e,n){let i,r,o;for(i=0,r=t.length;i<r;i++)o=t[i][n],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function $e(t){return t*(Re/180)}function Ye(t){return t*(180/Re)}function Ke(t){if(!de(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n}function qe(t,e){const n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i);let o=Math.atan2(i,n);return o<-.5*Re&&(o+=Te),{angle:o,distance:r}}function Ge(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Qe(t,e){return(t-e+Ne)%Te-Re}function Xe(t){return(t%Te+Te)%Te}function Je(t,e,n,i){const r=Xe(t),o=Xe(e),a=Xe(n),s=Xe(o-r),l=Xe(a-r),c=Xe(r-o),u=Xe(r-a);return r===o||r===a||i&&o===a||s>l&&c<u}function Ze(t,e,n){return Math.max(e,Math.min(n,t))}function tn(t,e,n,i=1e-6){return t>=Math.min(e,n)-i&&t<=Math.max(e,n)+i}function en(t,e,n){n=n||(n=>t[n]<e);let i,r=t.length-1,o=0;for(;r-o>1;)i=o+r>>1,n(i)?o=i:r=i;return{lo:o,hi:r}}const nn=(t,e,n,i)=>en(t,n,i?i=>t[i][e]<=n:i=>t[i][e]<n),rn=(t,e,n)=>en(t,n,(i=>t[i][e]>=n)),on=["push","pop","shift","splice","unshift"];function an(t,e){const n=t._chartjs;if(!n)return;const i=n.listeners,r=i.indexOf(e);-1!==r&&i.splice(r,1),i.length>0||(on.forEach((e=>{delete t[e]})),delete t._chartjs)}function sn(t){const e=new Set;let n,i;for(n=0,i=t.length;n<i;++n)e.add(t[n]);return e.size===i?t:Array.from(e)}const ln="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function cn(t,e,n){const i=n||(t=>Array.prototype.slice.call(t));let r=!1,o=[];return function(...n){o=i(n),r||(r=!0,ln.call(window,(()=>{r=!1,t.apply(e,o)})))}}const un=t=>"start"===t?"left":"end"===t?"right":"center",hn=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2;function dn(t,e,n){const i=e.length;let r=0,o=i;if(t._sorted){const{iScale:a,_parsed:s}=t,l=a.axis,{min:c,max:u,minDefined:h,maxDefined:d}=a.getUserBounds();h&&(r=Ze(Math.min(nn(s,a.axis,c).lo,n?i:nn(e,l,a.getPixelForValue(c)).lo),0,i-1)),o=d?Ze(Math.max(nn(s,a.axis,u,!0).hi+1,n?0:nn(e,l,a.getPixelForValue(u),!0).hi+1),r,i)-r:i-r}return{start:r,count:o}}function fn(t){const{xScale:e,yScale:n,_scaleRanges:i}=t,r={xmin:e.min,xmax:e.max,ymin:n.min,ymax:n.max};if(!i)return t._scaleRanges=r,!0;const o=i.xmin!==e.min||i.xmax!==e.max||i.ymin!==n.min||i.ymax!==n.max;return Object.assign(i,r),o}const pn=t=>0===t||1===t,gn=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Te/n),mn=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*Te/n)+1,bn={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Ie),easeOutSine:t=>Math.sin(t*Ie),easeInOutSine:t=>-.5*(Math.cos(Re*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>pn(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>pn(t)?t:gn(t,.075,.3),easeOutElastic:t=>pn(t)?t:mn(t,.075,.3),easeInOutElastic(t){const e=.1125;return pn(t)?t:t<.5?.5*gn(2*t,e,.45):.5+.5*mn(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-bn.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*bn.easeInBounce(2*t):.5*bn.easeOutBounce(2*t-1)+.5};function yn(t){return t+.5|0}const vn=(t,e,n)=>Math.max(Math.min(t,n),e);function xn(t){return vn(yn(2.55*t),0,255)}function wn(t){return vn(yn(255*t),0,255)}function _n(t){return vn(yn(t/2.55)/100,0,1)}function kn(t){return vn(yn(100*t),0,100)}const Sn={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},En=[..."0123456789ABCDEF"],On=t=>En[15&t],Cn=t=>En[(240&t)>>4]+En[15&t],Pn=t=>(240&t)>>4==(15&t);const Mn=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Ln(t,e,n){const i=e*Math.min(n,1-n),r=(e,r=(e+t/30)%12)=>n-i*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function Rn(t,e,n){const i=(i,r=(i+t/60)%6)=>n-n*e*Math.max(Math.min(r,4-r,1),0);return[i(5),i(3),i(1)]}function Tn(t,e,n){const i=Ln(t,1,.5);let r;for(e+n>1&&(r=1/(e+n),e*=r,n*=r),r=0;r<3;r++)i[r]*=1-e-n,i[r]+=e;return i}function Nn(t){const e=t.r/255,n=t.g/255,i=t.b/255,r=Math.max(e,n,i),o=Math.min(e,n,i),a=(r+o)/2;let s,l,c;return r!==o&&(c=r-o,l=a>.5?c/(2-r-o):c/(r+o),s=function(t,e,n,i,r){return t===r?(e-n)/i+(e<n?6:0):e===r?(n-t)/i+2:(t-e)/i+4}(e,n,i,c,r),s=60*s+.5),[0|s,l||0,a]}function Dn(t,e,n,i){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,i)).map(wn)}function An(t,e,n){return Dn(Ln,t,e,n)}function In(t){return(t%360+360)%360}const jn={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Fn={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let zn;const Vn=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,Bn=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,Hn=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Wn(t,e,n){if(t){let i=Nn(t);i[e]=Math.max(0,Math.min(i[e]+i[e]*n,0===e?360:1)),i=An(i),t.r=i[0],t.g=i[1],t.b=i[2]}}function Un(t,e){return t?Object.assign(e||{},t):t}function $n(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=wn(t[3]))):(e=Un(t,{r:0,g:0,b:0,a:1})).a=wn(e.a),e}function Yn(t){return"r"===t.charAt(0)?function(t){const e=Vn.exec(t);let n,i,r,o=255;if(e){if(e[7]!==n){const t=+e[7];o=e[8]?xn(t):vn(255*t,0,255)}return n=+e[1],i=+e[3],r=+e[5],n=255&(e[2]?xn(n):vn(n,0,255)),i=255&(e[4]?xn(i):vn(i,0,255)),r=255&(e[6]?xn(r):vn(r,0,255)),{r:n,g:i,b:r,a:o}}}(t):function(t){const e=Mn.exec(t);let n,i=255;if(!e)return;e[5]!==n&&(i=e[6]?xn(+e[5]):wn(+e[5]));const r=In(+e[2]),o=+e[3]/100,a=+e[4]/100;return n="hwb"===e[1]?function(t,e,n){return Dn(Tn,t,e,n)}(r,o,a):"hsv"===e[1]?function(t,e,n){return Dn(Rn,t,e,n)}(r,o,a):An(r,o,a),{r:n[0],g:n[1],b:n[2],a:i}}(t)}class Kn{constructor(t){if(t instanceof Kn)return t;const e=typeof t;let n;var i,r,o;"object"===e?n=$n(t):"string"===e&&(o=(i=t).length,"#"===i[0]&&(4===o||5===o?r={r:255&17*Sn[i[1]],g:255&17*Sn[i[2]],b:255&17*Sn[i[3]],a:5===o?17*Sn[i[4]]:255}:7!==o&&9!==o||(r={r:Sn[i[1]]<<4|Sn[i[2]],g:Sn[i[3]]<<4|Sn[i[4]],b:Sn[i[5]]<<4|Sn[i[6]],a:9===o?Sn[i[7]]<<4|Sn[i[8]]:255})),n=r||function(t){zn||(zn=function(){const t={},e=Object.keys(Fn),n=Object.keys(jn);let i,r,o,a,s;for(i=0;i<e.length;i++){for(a=s=e[i],r=0;r<n.length;r++)o=n[r],s=s.replace(o,jn[o]);o=parseInt(Fn[a],16),t[s]=[o>>16&255,o>>8&255,255&o]}return t}(),zn.transparent=[0,0,0,0]);const e=zn[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Yn(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=Un(this._rgb);return t&&(t.a=_n(t.a)),t}set rgb(t){this._rgb=$n(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${_n(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>Pn(t.r)&&Pn(t.g)&&Pn(t.b)&&Pn(t.a))(t)?On:Cn,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Nn(t),n=e[0],i=kn(e[1]),r=kn(e[2]);return t.a<255?`hsla(${n}, ${i}%, ${r}%, ${_n(t.a)})`:`hsl(${n}, ${i}%, ${r}%)`}(this._rgb):void 0}mix(t,e){if(t){const n=this.rgb,i=t.rgb;let r;const o=e===r?.5:e,a=2*o-1,s=n.a-i.a,l=((a*s==-1?a:(a+s)/(1+a*s))+1)/2;r=1-l,n.r=255&l*n.r+r*i.r+.5,n.g=255&l*n.g+r*i.g+.5,n.b=255&l*n.b+r*i.b+.5,n.a=o*n.a+(1-o)*i.a,this.rgb=n}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,n){const i=Hn(_n(t.r)),r=Hn(_n(t.g)),o=Hn(_n(t.b));return{r:wn(Bn(i+n*(Hn(_n(e.r))-i))),g:wn(Bn(r+n*(Hn(_n(e.g))-r))),b:wn(Bn(o+n*(Hn(_n(e.b))-o))),a:t.a+n*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new Kn(this.rgb)}alpha(t){return this._rgb.a=wn(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=yn(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Wn(this._rgb,2,t),this}darken(t){return Wn(this._rgb,2,-t),this}saturate(t){return Wn(this._rgb,1,t),this}desaturate(t){return Wn(this._rgb,1,-t),this}rotate(t){return function(t,e){var n=Nn(t);n[0]=In(n[0]+e),n=An(n),t.r=n[0],t.g=n[1],t.b=n[2]}(this._rgb,t),this}}function qn(t){return new Kn(t)}function Gn(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Qn(t){return Gn(t)?t:qn(t)}function Xn(t){return Gn(t)?t:qn(t).saturate(.5).darken(.1).hexString()}const Jn=Object.create(null),Zn=Object.create(null);function ti(t,e){if(!e)return t;const n=e.split(".");for(let e=0,i=n.length;e<i;++e){const i=n[e];t=t[i]||(t[i]=Object.create(null))}return t}function ei(t,e,n){return"string"==typeof e?_e(ti(t,e),n):_e(ti(t,""),e)}var ni=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Xn(e.backgroundColor),this.hoverBorderColor=(t,e)=>Xn(e.borderColor),this.hoverColor=(t,e)=>Xn(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return ei(this,t,e)}get(t){return ti(this,t)}describe(t,e){return ei(Zn,t,e)}override(t,e){return ei(Jn,t,e)}route(t,e,n,i){const r=ti(this,t),o=ti(this,n),a="_"+e;Object.defineProperties(r,{[a]:{value:r[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[i];return he(t)?Object.assign({},e,t):pe(t,e)},set(t){this[a]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function ii(t,e,n,i,r){let o=e[r];return o||(o=e[r]=t.measureText(r).width,n.push(r)),o>i&&(i=o),i}function ri(t,e,n,i){let r=(i=i||{}).data=i.data||{},o=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(r=i.data={},o=i.garbageCollect=[],i.font=e),t.save(),t.font=e;let a=0;const s=n.length;let l,c,u,h,d;for(l=0;l<s;l++)if(h=n[l],null!=h&&!0!==ue(h))a=ii(t,r,o,a,h);else if(ue(h))for(c=0,u=h.length;c<u;c++)d=h[c],null==d||ue(d)||(a=ii(t,r,o,a,d));t.restore();const f=o.length/2;if(f>n.length){for(l=0;l<f;l++)delete r[o[l]];o.splice(0,f)}return a}function oi(t,e,n){const i=t.currentDevicePixelRatio,r=0!==n?Math.max(n/2,.5):0;return Math.round((e-r)*i)/i+r}function ai(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function si(t,e,n,i){li(t,e,n,i,null)}function li(t,e,n,i,r){let o,a,s,l,c,u;const h=e.pointStyle,d=e.rotation,f=e.radius;let p=(d||0)*Ae;if(h&&"object"==typeof h&&(o=h.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(n,i),t.rotate(p),t.drawImage(h,-h.width/2,-h.height/2,h.width,h.height),void t.restore();if(!(isNaN(f)||f<=0)){switch(t.beginPath(),h){default:r?t.ellipse(n,i,r/2,f,0,0,Te):t.arc(n,i,f,0,Te),t.closePath();break;case"triangle":t.moveTo(n+Math.sin(p)*f,i-Math.cos(p)*f),p+=Fe,t.lineTo(n+Math.sin(p)*f,i-Math.cos(p)*f),p+=Fe,t.lineTo(n+Math.sin(p)*f,i-Math.cos(p)*f),t.closePath();break;case"rectRounded":c=.516*f,l=f-c,a=Math.cos(p+je)*l,s=Math.sin(p+je)*l,t.arc(n-a,i-s,c,p-Re,p-Ie),t.arc(n+s,i-a,c,p-Ie,p),t.arc(n+a,i+s,c,p,p+Ie),t.arc(n-s,i+a,c,p+Ie,p+Re),t.closePath();break;case"rect":if(!d){l=Math.SQRT1_2*f,u=r?r/2:l,t.rect(n-u,i-l,2*u,2*l);break}p+=je;case"rectRot":a=Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+s,i-a),t.lineTo(n+a,i+s),t.lineTo(n-s,i+a),t.closePath();break;case"crossRot":p+=je;case"cross":a=Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+a,i+s),t.moveTo(n+s,i-a),t.lineTo(n-s,i+a);break;case"star":a=Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+a,i+s),t.moveTo(n+s,i-a),t.lineTo(n-s,i+a),p+=je,a=Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+a,i+s),t.moveTo(n+s,i-a),t.lineTo(n-s,i+a);break;case"line":a=r?r/2:Math.cos(p)*f,s=Math.sin(p)*f,t.moveTo(n-a,i-s),t.lineTo(n+a,i+s);break;case"dash":t.moveTo(n,i),t.lineTo(n+Math.cos(p)*f,i+Math.sin(p)*f)}t.fill(),e.borderWidth>0&&t.stroke()}}function ci(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function ui(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function hi(t){t.restore()}function di(t,e,n,i,r){if(!e)return t.lineTo(n.x,n.y);if("middle"===r){const i=(e.x+n.x)/2;t.lineTo(i,e.y),t.lineTo(i,n.y)}else"after"===r!=!!i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}function fi(t,e,n,i){if(!e)return t.lineTo(n.x,n.y);t.bezierCurveTo(i?e.cp1x:e.cp2x,i?e.cp1y:e.cp2y,i?n.cp2x:n.cp1x,i?n.cp2y:n.cp1y,n.x,n.y)}function pi(t,e,n,i,r,o={}){const a=ue(e)?e:[e],s=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(t.save(),t.font=r.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),ce(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)c=a[l],s&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),ce(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(c,n,i,o.maxWidth)),t.fillText(c,n,i,o.maxWidth),gi(t,n,i,c,o),i+=r.lineHeight;t.restore()}function gi(t,e,n,i,r){if(r.strikethrough||r.underline){const o=t.measureText(i),a=e-o.actualBoundingBoxLeft,s=e+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,c=n+o.actualBoundingBoxDescent,u=r.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(a,u),t.lineTo(s,u),t.stroke()}}function mi(t,e){const{x:n,y:i,w:r,h:o,radius:a}=e;t.arc(n+a.topLeft,i+a.topLeft,a.topLeft,-Ie,Re,!0),t.lineTo(n,i+o-a.bottomLeft),t.arc(n+a.bottomLeft,i+o-a.bottomLeft,a.bottomLeft,Re,Ie,!0),t.lineTo(n+r-a.bottomRight,i+o),t.arc(n+r-a.bottomRight,i+o-a.bottomRight,a.bottomRight,Ie,0,!0),t.lineTo(n+r,i+a.topRight),t.arc(n+r-a.topRight,i+a.topRight,a.topRight,0,-Ie,!0),t.lineTo(n+a.topLeft,i)}const bi=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),yi=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function vi(t,e){const n=(""+t).match(bi);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}function xi(t,e){const n={},i=he(e),r=i?Object.keys(e):e,o=he(t)?i?n=>pe(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of r)n[t]=+o(t)||0;return n}function wi(t){return xi(t,{top:"y",right:"x",bottom:"y",left:"x"})}function _i(t){return xi(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ki(t){const e=wi(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Si(t,e){t=t||{},e=e||ni.font;let n=pe(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let i=pe(t.style,e.style);i&&!(""+i).match(yi)&&(console.warn('Invalid font style specified: "'+i+'"'),i="");const r={family:pe(t.family,e.family),lineHeight:vi(pe(t.lineHeight,e.lineHeight),n),size:n,style:i,weight:pe(t.weight,e.weight),string:""};return r.string=function(t){return!t||ce(t.size)||ce(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(r),r}function Ei(t,e,n,i){let r,o,a,s=!0;for(r=0,o=t.length;r<o;++r)if(a=t[r],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),s=!1),void 0!==n&&ue(a)&&(a=a[n%a.length],s=!1),void 0!==a))return i&&!s&&(i.cacheable=!1),a}function Oi(t,e){return Object.assign(Object.create(t),e)}function Ci(t,e=[""],n=t,i,r=(()=>t[0])){Pe(i)||(i=Fi("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:n,_fallback:i,_getTarget:r,override:r=>Ci([r,...t],e,n,i)};return new Proxy(o,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,i)=>Ti(n,i,(()=>function(t,e,n,i){let r;for(const o of e)if(r=Fi(Li(o,t),n),Pe(r))return Ri(t,r)?Ii(n,i,t,r):r}(i,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>zi(t).includes(e),ownKeys:t=>zi(t),set(t,e,n){const i=t._storage||(t._storage=r());return t[e]=i[e]=n,delete t._keys,!0}})}function Pi(t,e,n,i){const r={_cacheable:!1,_proxy:t,_context:e,_subProxy:n,_stack:new Set,_descriptors:Mi(t,i),setContext:e=>Pi(t,e,n,i),override:r=>Pi(t.override(r),e,n,i)};return new Proxy(r,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,e,n)=>Ti(t,e,(()=>function(t,e,n){const{_proxy:i,_context:r,_subProxy:o,_descriptors:a}=t;let s=i[e];return Me(s)&&a.isScriptable(e)&&(s=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:a,_stack:s}=n;if(s.has(t))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+t);return s.add(t),e=e(o,a||i),s.delete(t),Ri(t,e)&&(e=Ii(r._scopes,r,t,e)),e}(e,s,t,n)),ue(s)&&s.length&&(s=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:a,_descriptors:s}=n;if(Pe(o.index)&&i(t))e=e[o.index%e.length];else if(he(e[0])){const n=e,i=r._scopes.filter((t=>t!==n));e=[];for(const l of n){const n=Ii(i,r,t,l);e.push(Pi(n,o,a&&a[t],s))}}return e}(e,s,t,a.isIndexable)),Ri(e,s)&&(s=Pi(s,r,o&&o[e],a)),s}(t,e,n))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,i)=>(t[n]=i,delete e[n],!0)})}function Mi(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:i=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:n,indexable:i,isScriptable:Me(n)?n:()=>n,isIndexable:Me(i)?i:()=>i}}const Li=(t,e)=>t?t+Ce(e):e,Ri=(t,e)=>he(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Ti(t,e,n){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const i=n();return t[e]=i,i}function Ni(t,e,n){return Me(t)?t(e,n):t}const Di=(t,e)=>!0===t?e:"string"==typeof t?Oe(e,t):void 0;function Ai(t,e,n,i,r){for(const o of e){const e=Di(n,o);if(e){t.add(e);const o=Ni(e._fallback,n,r);if(Pe(o)&&o!==n&&o!==i)return o}else if(!1===e&&Pe(i)&&n!==i)return null}return!1}function Ii(t,e,n,i){const r=e._rootScopes,o=Ni(e._fallback,n,i),a=[...t,...r],s=new Set;s.add(i);let l=ji(s,a,n,o||n,i);return null!==l&&(!Pe(o)||o===n||(l=ji(s,a,o,l,i),null!==l))&&Ci(Array.from(s),[""],r,o,(()=>function(t,e,n){const i=t._getTarget();e in i||(i[e]={});const r=i[e];return ue(r)&&he(n)?n:r}(e,n,i)))}function ji(t,e,n,i,r){for(;n;)n=Ai(t,e,n,i,r);return n}function Fi(t,e){for(const n of e){if(!n)continue;const e=n[t];if(Pe(e))return e}}function zi(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Vi(t,e,n,i){const{iScale:r}=t,{key:o="r"}=this._parsing,a=new Array(i);let s,l,c,u;for(s=0,l=i;s<l;++s)c=s+n,u=e[c],a[s]={r:r.parse(Oe(u,o),c)};return a}const Bi=Number.EPSILON||1e-14,Hi=(t,e)=>e<t.length&&!t[e].skip&&t[e],Wi=t=>"x"===t?"y":"x";function Ui(t,e,n,i){const r=t.skip?e:t,o=e,a=n.skip?e:n,s=Ge(o,r),l=Ge(a,o);let c=s/(s+l),u=l/(s+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const h=i*c,d=i*u;return{previous:{x:o.x-h*(a.x-r.x),y:o.y-h*(a.y-r.y)},next:{x:o.x+d*(a.x-r.x),y:o.y+d*(a.y-r.y)}}}function $i(t,e,n){return Math.max(Math.min(t,n),e)}function Yi(t,e,n,i,r){let o,a,s,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const n=Wi(e),i=t.length,r=Array(i).fill(0),o=Array(i);let a,s,l,c=Hi(t,0);for(a=0;a<i;++a)if(s=l,l=c,c=Hi(t,a+1),l){if(c){const t=c[e]-l[e];r[a]=0!==t?(c[n]-l[n])/t:0}o[a]=s?c?Ve(r[a-1])!==Ve(r[a])?0:(r[a-1]+r[a])/2:r[a-1]:r[a]}!function(t,e,n){const i=t.length;let r,o,a,s,l,c=Hi(t,0);for(let u=0;u<i-1;++u)l=c,c=Hi(t,u+1),l&&c&&(We(e[u],0,Bi)?n[u]=n[u+1]=0:(r=n[u]/e[u],o=n[u+1]/e[u],s=Math.pow(r,2)+Math.pow(o,2),s<=9||(a=3/Math.sqrt(s),n[u]=r*a*e[u],n[u+1]=o*a*e[u])))}(t,r,o),function(t,e,n="x"){const i=Wi(n),r=t.length;let o,a,s,l=Hi(t,0);for(let c=0;c<r;++c){if(a=s,s=l,l=Hi(t,c+1),!s)continue;const r=s[n],u=s[i];a&&(o=(r-a[n])/3,s[`cp1${n}`]=r-o,s[`cp1${i}`]=u-o*e[c]),l&&(o=(l[n]-r)/3,s[`cp2${n}`]=r+o,s[`cp2${i}`]=u+o*e[c])}}(t,o,e)}(t,r);else{let n=i?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)s=t[o],l=Ui(n,s,t[Math.min(o+1,a-(i?0:1))%a],e.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}e.capBezierPoints&&function(t,e){let n,i,r,o,a,s=ci(t[0],e);for(n=0,i=t.length;n<i;++n)a=o,o=s,s=n<i-1&&ci(t[n+1],e),o&&(r=t[n],a&&(r.cp1x=$i(r.cp1x,e.left,e.right),r.cp1y=$i(r.cp1y,e.top,e.bottom)),s&&(r.cp2x=$i(r.cp2x,e.left,e.right),r.cp2y=$i(r.cp2y,e.top,e.bottom)))}(t,n)}function Ki(){return"undefined"!=typeof window&&"undefined"!=typeof document}function qi(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Gi(t,e,n){let i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}const Qi=t=>window.getComputedStyle(t,null),Xi=["top","right","bottom","left"];function Ji(t,e,n){const i={};n=n?"-"+n:"";for(let r=0;r<4;r++){const o=Xi[r];i[o]=parseFloat(t[e+"-"+o+n])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}function Zi(t,e){if("native"in t)return t;const{canvas:n,currentDevicePixelRatio:i}=e,r=Qi(n),o="border-box"===r.boxSizing,a=Ji(r,"padding"),s=Ji(r,"border","width"),{x:l,y:c,box:u}=function(t,e){const n=t.touches,i=n&&n.length?n[0]:t,{offsetX:r,offsetY:o}=i;let a,s,l=!1;if(((t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot))(r,o,t.target))a=r,s=o;else{const t=e.getBoundingClientRect();a=i.clientX-t.left,s=i.clientY-t.top,l=!0}return{x:a,y:s,box:l}}(t,n),h=a.left+(u&&s.left),d=a.top+(u&&s.top);let{width:f,height:p}=e;return o&&(f-=a.width+s.width,p-=a.height+s.height),{x:Math.round((l-h)/f*n.width/i),y:Math.round((c-d)/p*n.height/i)}}const tr=t=>Math.round(10*t)/10;function er(t,e,n){const i=e||1,r=Math.floor(t.height*i),o=Math.floor(t.width*i);t.height=r/i,t.width=o/i;const a=t.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==i||a.height!==r||a.width!==o)&&(t.currentDevicePixelRatio=i,a.height=r,a.width=o,t.ctx.setTransform(i,0,0,i,0,0),!0)}const nr=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function ir(t,e){const n=function(t,e){return Qi(t).getPropertyValue(e)}(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0}function rr(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:t.y+n*(e.y-t.y)}}function or(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:"middle"===i?n<.5?t.y:e.y:"after"===i?n<1?t.y:e.y:n>0?e.y:t.y}}function ar(t,e,n,i){const r={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=rr(t,r,n),s=rr(r,o,n),l=rr(o,e,n),c=rr(a,s,n),u=rr(s,l,n);return rr(c,u,n)}const sr=new Map;function lr(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let i=sr.get(n);return i||(i=new Intl.NumberFormat(t,e),sr.set(n,i)),i}(e,n).format(t)}function cr(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function ur(t,e){let n,i;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,i=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)}function hr(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function dr(t){return"angle"===t?{between:Je,compare:Qe,normalize:Xe}:{between:tn,compare:(t,e)=>t-e,normalize:t=>t}}function fr({start:t,end:e,count:n,loop:i,style:r}){return{start:t%n,end:e%n,loop:i&&(e-t+1)%n==0,style:r}}function pr(t,e,n){if(!n)return[t];const{property:i,start:r,end:o}=n,a=e.length,{compare:s,between:l,normalize:c}=dr(i),{start:u,end:h,loop:d,style:f}=function(t,e,n){const{property:i,start:r,end:o}=n,{between:a,normalize:s}=dr(i),l=e.length;let c,u,{start:h,end:d,loop:f}=t;if(f){for(h+=l,d+=l,c=0,u=l;c<u&&a(s(e[h%l][i]),r,o);++c)h--,d--;h%=l,d%=l}return d<h&&(d+=l),{start:h,end:d,loop:f,style:t.style}}(t,e,n),p=[];let g,m,b,y=!1,v=null;for(let t=u,n=u;t<=h;++t)m=e[t%a],m.skip||(g=c(m[i]),g!==b&&(y=l(g,r,o),null===v&&(y||l(r,b,g)&&0!==s(r,b))&&(v=0===s(g,r)?t:n),null!==v&&(!y||0===s(o,g)||l(o,b,g))&&(p.push(fr({start:v,end:t,loop:d,count:a,style:f})),v=null),n=t,b=g));return null!==v&&p.push(fr({start:v,end:h,loop:d,count:a,style:f})),p}function gr(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function mr(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var br=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,i){const r=e.listeners[i],o=e.duration;r.forEach((i=>i({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(n-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=ln.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((n,i)=>{if(!n.running||!n.items.length)return;const r=n.items;let o,a=r.length-1,s=!1;for(;a>=0;--a)o=r[a],o._active?(o._total>n.duration&&(n.duration=o._total),o.tick(t),s=!0):(r[a]=r[r.length-1],r.pop());s&&(i.draw(),this._notify(i,n,t,"progress")),r.length||(n.running=!1,this._notify(i,n,t,"complete"),n.initial=!1),e+=r.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let i=n.length-1;for(;i>=0;--i)n[i].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const yr="transparent",vr={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const i=Qn(t||yr),r=i.valid&&Qn(e||yr);return r&&r.valid?r.mix(i,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class xr{constructor(t,e,n,i){const r=e[n];i=Ei([t.to,i,r,t.from]);const o=Ei([t.from,r,i]);this._active=!0,this._fn=t.fn||vr[t.type||typeof o],this._easing=bn[t.easing]||bn.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=o,this._to=i,this._promises=void 0}active(){return this._active}update(t,e,n){if(this._active){this._notify(!1);const i=this._target[this._prop],r=n-this._start,o=this._duration-r;this._start=n,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=Ei([t.to,e,i,t.from]),this._from=Ei([t.from,i,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,n=this._duration,i=this._prop,r=this._from,o=this._loop,a=this._to;let s;if(this._active=r!==a&&(o||e<n),!this._active)return this._target[i]=a,void this._notify(!0);e<0?this._target[i]=r:(s=e/n%2,s=o&&s>1?2-s:s,s=this._easing(Math.min(1,Math.max(0,s))),this._target[i]=this._fn(r,a,s))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}ni.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const wr=Object.keys(ni.animation);ni.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),ni.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),ni.describe("animations",{_fallback:"animation"}),ni.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class _r{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!he(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const i=t[n];if(!he(i))return;const r={};for(const t of wr)r[t]=i[t];(ue(i.properties)&&i.properties||[n]).forEach((t=>{t!==n&&e.has(t)||e.set(t,r)}))}))}_animateOptions(t,e){const n=e.options,i=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!i)return[];const r=this._createAnimations(i,n);return n.$shared&&function(t,e){const n=[],i=Object.keys(e);for(let e=0;e<i.length;e++){const r=t[i[e]];r&&r.active()&&n.push(r.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),r}_createAnimations(t,e){const n=this._properties,i=[],r=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let s;for(s=o.length-1;s>=0;--s){const l=o[s];if("$"===l.charAt(0))continue;if("options"===l){i.push(...this._animateOptions(t,e));continue}const c=e[l];let u=r[l];const h=n.get(l);if(u){if(h&&u.active()){u.update(h,c,a);continue}u.cancel()}h&&h.duration?(r[l]=u=new xr(h,t,l,c),i.push(u)):t[l]=c}return i}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?(br.add(this._chart,n),!0):void 0}}function kr(t,e){const n=t&&t.options||{},i=n.reverse,r=void 0===n.min?e:0,o=void 0===n.max?e:0;return{start:i?o:r,end:i?r:o}}function Sr(t,e){const n=[],i=t._getSortedDatasetMetas(e);let r,o;for(r=0,o=i.length;r<o;++r)n.push(i[r].index);return n}function Er(t,e,n,i={}){const r=t.keys,o="single"===i.mode;let a,s,l,c;if(null!==e){for(a=0,s=r.length;a<s;++a){if(l=+r[a],l===n){if(i.all)continue;break}c=t.values[l],de(c)&&(o||0===e||Ve(e)===Ve(c))&&(e+=c)}return e}}function Or(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function Cr(t,e,n){const i=t[e]||(t[e]={});return i[n]||(i[n]={})}function Pr(t,e,n,i){for(const r of e.getMatchingVisibleMetas(i).reverse()){const e=t[r.index];if(n&&e>0||!n&&e<0)return r.index}return null}function Mr(t,e){const{chart:n,_cachedMeta:i}=t,r=n._stacks||(n._stacks={}),{iScale:o,vScale:a,index:s}=i,l=o.axis,c=a.axis,u=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(o,a,i),h=e.length;let d;for(let t=0;t<h;++t){const n=e[t],{[l]:o,[c]:h}=n;d=(n._stacks||(n._stacks={}))[c]=Cr(r,u,o),d[s]=h,d._top=Pr(d,a,!0,i.type),d._bottom=Pr(d,a,!1,i.type)}}function Lr(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function Rr(t,e){const n=t.controller.index,i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[i]||void 0===e[i][n])return;delete e[i][n]}}}const Tr=t=>"reset"===t||"none"===t,Nr=(t,e)=>e?t:Object.assign({},t);class Dr{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Or(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Rr(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,n=this.getDataset(),i=(t,e,n,i)=>"x"===t?e:"r"===t?i:n,r=e.xAxisID=pe(n.xAxisID,Lr(t,"x")),o=e.yAxisID=pe(n.yAxisID,Lr(t,"y")),a=e.rAxisID=pe(n.rAxisID,Lr(t,"r")),s=e.indexAxis,l=e.iAxisID=i(s,r,o,a),c=e.vAxisID=i(s,o,r,a);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&an(this._data,this),t._stacked&&Rr(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),n=this._data;if(he(e))this._data=function(t){const e=Object.keys(t),n=new Array(e.length);let i,r,o;for(i=0,r=e.length;i<r;++i)o=e[i],n[i]={x:o,y:t[o]};return n}(e);else if(n!==e){if(n){an(n,this);const t=this._cachedMeta;Rr(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(i=e)._chartjs?i._chartjs.listeners.push(this):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),on.forEach((t=>{const e="_onData"+Ce(t),n=i[t];Object.defineProperty(i,t,{configurable:!0,enumerable:!1,value(...t){const r=n.apply(this,t);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[e]&&n[e](...t)})),r}})})))),this._syncList=[],this._data=e}var i}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,n=this.getDataset();let i=!1;this._dataCheck();const r=e._stacked;e._stacked=Or(e.vScale,e),e.stack!==n.stack&&(i=!0,Rr(e),e.stack=n.stack),this._resyncElements(t),(i||r!==e._stacked)&&Mr(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),n=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:n,_data:i}=this,{iScale:r,_stacked:o}=n,a=r.axis;let s,l,c,u=0===t&&e===i.length||n._sorted,h=t>0&&n._parsed[t-1];if(!1===this._parsing)n._parsed=i,n._sorted=!0,c=i;else{c=ue(i[t])?this.parseArrayData(n,i,t,e):he(i[t])?this.parseObjectData(n,i,t,e):this.parsePrimitiveData(n,i,t,e);const r=()=>null===l[a]||h&&l[a]<h[a];for(s=0;s<e;++s)n._parsed[s+t]=l=c[s],u&&(r()&&(u=!1),h=l);n._sorted=u}o&&Mr(this,c)}parsePrimitiveData(t,e,n,i){const{iScale:r,vScale:o}=t,a=r.axis,s=o.axis,l=r.getLabels(),c=r===o,u=new Array(i);let h,d,f;for(h=0,d=i;h<d;++h)f=h+n,u[h]={[a]:c||r.parse(l[f],f),[s]:o.parse(e[f],f)};return u}parseArrayData(t,e,n,i){const{xScale:r,yScale:o}=t,a=new Array(i);let s,l,c,u;for(s=0,l=i;s<l;++s)c=s+n,u=e[c],a[s]={x:r.parse(u[0],c),y:o.parse(u[1],c)};return a}parseObjectData(t,e,n,i){const{xScale:r,yScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=new Array(i);let c,u,h,d;for(c=0,u=i;c<u;++c)h=c+n,d=e[h],l[c]={x:r.parse(Oe(d,a),h),y:o.parse(Oe(d,s),h)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const i=this.chart,r=this._cachedMeta,o=e[t.axis];return Er({keys:Sr(i,!0),values:e._stacks[t.axis]},o,r.index,{mode:n})}updateRangeFromParsed(t,e,n,i){const r=n[e.axis];let o=null===r?NaN:r;const a=i&&n._stacks[e.axis];i&&a&&(i.values=a,o=Er(i,r,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const n=this._cachedMeta,i=n._parsed,r=n._sorted&&t===n.iScale,o=i.length,a=this._getOtherScale(t),s=((t,e,n)=>t&&!e.hidden&&e._stacked&&{keys:Sr(n,!0),values:null})(e,n,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:u}=function(t){const{min:e,max:n,minDefined:i,maxDefined:r}=t.getUserBounds();return{min:i?e:Number.NEGATIVE_INFINITY,max:r?n:Number.POSITIVE_INFINITY}}(a);let h,d;function f(){d=i[h];const e=d[a.axis];return!de(d[t.axis])||c>e||u<e}for(h=0;h<o&&(f()||(this.updateRangeFromParsed(l,t,d,s),!r));++h);if(r)for(h=o-1;h>=0;--h)if(!f()){this.updateRangeFromParsed(l,t,d,s);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let i,r,o;for(i=0,r=e.length;i<r;++i)o=e[i][t.axis],de(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,i=e.vScale,r=this.getParsed(t);return{label:n?""+n.getLabelForValue(r[n.axis]):"",value:i?""+i.getLabelForValue(r[i.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,n,i,r;return he(t)?(e=t.top,n=t.right,i=t.bottom,r=t.left):e=n=i=r=t,{top:e,right:n,bottom:i,left:r,disabled:!1===t}}(pe(this.options.clip,function(t,e,n){if(!1===n)return!1;const i=kr(t,n),r=kr(e,n);return{top:r.end,right:i.end,bottom:r.start,left:i.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,n=this._cachedMeta,i=n.data||[],r=e.chartArea,o=[],a=this._drawStart||0,s=this._drawCount||i.length-a,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(t,r,a,s),c=a;c<a+s;++c){const e=i[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,r))}for(c=0;c<o.length;++c)o[c].draw(t,r)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const i=this.getDataset();let r;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];r=e.$context||(e.$context=function(t,e,n){return Oi(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),r.parsed=this.getParsed(t),r.raw=i.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=function(t,e){return Oi(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=i,r.index=r.datasetIndex=this.index;return r.active=!!e,r.mode=n,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const i="active"===e,r=this._cachedDataOpts,o=t+"-"+e,a=r[o],s=this.enableOptionSharing&&Pe(n);if(a)return Nr(a,s);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),u=i?[`${t}Hover`,"hover",t,""]:[t,""],h=l.getOptionScopes(this.getDataset(),c),d=Object.keys(ni.elements[t]),f=l.resolveNamedOptions(h,d,(()=>this.getContext(n,i)),u);return f.$shared&&(f.$shared=s,r[o]=Object.freeze(Nr(f,s))),f}_resolveAnimations(t,e,n){const i=this.chart,r=this._cachedDataOpts,o=`animation-${e}`,a=r[o];if(a)return a;let s;if(!1!==i.options.animation){const i=this.chart.config,r=i.datasetAnimationScopeKeys(this._type,e),o=i.getOptionScopes(this.getDataset(),r);s=i.createResolver(o,this.getContext(t,n,e))}const l=new _r(i,s&&s.animations);return s&&s._cacheable&&(r[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Tr(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const n=this.resolveDataElementOptions(t,e),i=this._sharedOptions,r=this.getSharedOptions(n),o=this.includeOptions(e,r)||r!==i;return this.updateSharedOptions(r,e,n),{sharedOptions:r,includeOptions:o}}updateElement(t,e,n,i){Tr(i)?Object.assign(t,n):this._resolveAnimations(e,i).update(t,n)}updateSharedOptions(t,e,n){t&&!Tr(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,i){t.active=i;const r=this.getStyle(e,i);this._resolveAnimations(e,n,i).update(t,{options:!i&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,n=this._cachedMeta.data;for(const[t,e,n]of this._syncList)this[t](e,n);this._syncList=[];const i=n.length,r=e.length,o=Math.min(r,i);o&&this.parse(0,o),r>i?this._insertElements(i,r-i,t):r<i&&this._removeElements(r,i-r)}_insertElements(t,e,n=!0){const i=this._cachedMeta,r=i.data,o=t+e;let a;const s=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(s(r),a=t;a<o;++a)r[a]=new this.dataElementType;this._parsing&&s(i._parsed),this.parse(t,e),n&&this.updateElements(r,t,e,"reset")}updateElements(t,e,n,i){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const i=n._parsed.splice(t,e);n._stacked&&Rr(n,i)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,i]=t;this[e](n,i)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const n=arguments.length-2;n&&this._sync(["_insertElements",t,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Ar(t){const e=t.iScale,n=function(t,e){if(!t._cache.$bar){const n=t.getMatchingVisibleMetas(e);let i=[];for(let e=0,r=n.length;e<r;e++)i=i.concat(n[e].controller.getAllParsedValues(t));t._cache.$bar=sn(i.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let i,r,o,a,s=e._length;const l=()=>{32767!==o&&-32768!==o&&(Pe(a)&&(s=Math.min(s,Math.abs(o-a)||s)),a=o)};for(i=0,r=n.length;i<r;++i)o=e.getPixelForValue(n[i]),l();for(a=void 0,i=0,r=e.ticks.length;i<r;++i)o=e.getPixelForTick(i),l();return s}function Ir(t,e,n,i){return ue(t)?function(t,e,n,i){const r=n.parse(t[0],i),o=n.parse(t[1],i),a=Math.min(r,o),s=Math.max(r,o);let l=a,c=s;Math.abs(a)>Math.abs(s)&&(l=s,c=a),e[n.axis]=c,e._custom={barStart:l,barEnd:c,start:r,end:o,min:a,max:s}}(t,e,n,i):e[n.axis]=n.parse(t,i),e}function jr(t,e,n,i){const r=t.iScale,o=t.vScale,a=r.getLabels(),s=r===o,l=[];let c,u,h,d;for(c=n,u=n+i;c<u;++c)d=e[c],h={},h[r.axis]=s||r.parse(a[c],c),l.push(Ir(d,h,o,c));return l}function Fr(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function zr(t,e,n,i){let r=e.borderSkipped;const o={};if(!r)return void(t.borderSkipped=o);if(!0===r)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:s,reverse:l,top:c,bottom:u}=function(t){let e,n,i,r,o;return t.horizontal?(e=t.base>t.x,n="left",i="right"):(e=t.base<t.y,n="bottom",i="top"),e?(r="end",o="start"):(r="start",o="end"),{start:n,end:i,reverse:e,top:r,bottom:o}}(t);"middle"===r&&n&&(t.enableBorderRadius=!0,(n._top||0)===i?r=c:(n._bottom||0)===i?r=u:(o[Vr(u,a,s,l)]=!0,r=c)),o[Vr(r,a,s,l)]=!0,t.borderSkipped=o}function Vr(t,e,n,i){var r,o,a;return i?(a=n,t=Br(t=(r=t)===(o=e)?a:r===a?o:r,n,e)):t=Br(t,e,n),t}function Br(t,e,n){return"start"===t?e:"end"===t?n:t}function Hr(t,{inflateAmount:e},n){t.inflateAmount="auto"===e?1===n?.33:0:e}Dr.defaults={},Dr.prototype.datasetElementType=null,Dr.prototype.dataElementType=null;class Wr extends Dr{parsePrimitiveData(t,e,n,i){return jr(t,e,n,i)}parseArrayData(t,e,n,i){return jr(t,e,n,i)}parseObjectData(t,e,n,i){const{iScale:r,vScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l="x"===r.axis?a:s,c="x"===o.axis?a:s,u=[];let h,d,f,p;for(h=n,d=n+i;h<d;++h)p=e[h],f={},f[r.axis]=r.parse(Oe(p,l),h),u.push(Ir(Oe(p,c),f,o,h));return u}updateRangeFromParsed(t,e,n,i){super.updateRangeFromParsed(t,e,n,i);const r=n._custom;r&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:i}=e,r=this.getParsed(t),o=r._custom,a=Fr(o)?"["+o.start+", "+o.end+"]":""+i.getLabelForValue(r[i.axis]);return{label:""+n.getLabelForValue(r[n.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,i){const r="reset"===i,{index:o,_cachedMeta:{vScale:a}}=this,s=a.getBasePixel(),l=a.isHorizontal(),c=this._getRuler(),{sharedOptions:u,includeOptions:h}=this._getSharedOptions(e,i);for(let d=e;d<e+n;d++){const e=this.getParsed(d),n=r||ce(e[a.axis])?{base:s,head:s}:this._calculateBarValuePixels(d),f=this._calculateBarIndexPixels(d,c),p=(e._stacks||{})[a.axis],g={horizontal:l,base:n.base,enableBorderRadius:!p||Fr(e._custom)||o===p._top||o===p._bottom,x:l?n.head:f.center,y:l?f.center:n.head,height:l?f.size:Math.abs(n.size),width:l?Math.abs(n.size):f.size};h&&(g.options=u||this.resolveDataElementOptions(d,t[d].active?"active":i));const m=g.options||t[d].options;zr(g,m,p,o),Hr(g,m,c.ratio),this.updateElement(t[d],d,g,i)}}_getStacks(t,e){const{iScale:n}=this._cachedMeta,i=n.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),r=n.options.stacked,o=[],a=t=>{const n=t.controller.getParsed(e),i=n&&n[t.vScale.axis];if(ce(i)||isNaN(i))return!0};for(const n of i)if((void 0===e||!a(n))&&((!1===r||-1===o.indexOf(n.stack)||void 0===r&&void 0===n.stack)&&o.push(n.stack),n.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const i=this._getStacks(t,n),r=void 0!==e?i.indexOf(e):-1;return-1===r?i.length-1:r}_getRuler(){const t=this.options,e=this._cachedMeta,n=e.iScale,i=[];let r,o;for(r=0,o=e.data.length;r<o;++r)i.push(n.getPixelForValue(this.getParsed(r)[n.axis],r));const a=t.barThickness;return{min:a||Ar(e),pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:n},options:{base:i,minBarLength:r}}=this,o=i||0,a=this.getParsed(t),s=a._custom,l=Fr(s);let c,u,h=a[e.axis],d=0,f=n?this.applyStack(e,a,n):h;f!==h&&(d=f-h,f=h),l&&(h=s.barStart,f=s.barEnd-s.barStart,0!==h&&Ve(h)!==Ve(s.barEnd)&&(d=0),d+=h);const p=ce(i)||l?d:i;let g=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(d+f):g,u=c-g,Math.abs(u)<r){u=function(t,e,n){return 0!==t?Ve(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(u,e,o)*r,h===o&&(g-=u/2);const t=e.getPixelForDecimal(0),n=e.getPixelForDecimal(1),i=Math.min(t,n),a=Math.max(t,n);g=Math.max(Math.min(g,a),i),c=g+u}if(g===e.getPixelForValue(o)){const t=Ve(u)*e.getLineWidthForValue(o)/2;g+=t,u-=t}return{size:u,base:g,head:c,center:c+u/2}}_calculateBarIndexPixels(t,e){const n=e.scale,i=this.options,r=i.skipNull,o=pe(i.maxBarThickness,1/0);let a,s;if(e.grouped){const n=r?this._getStackCount(t):e.stackCount,l="flex"===i.barThickness?function(t,e,n,i){const r=e.pixels,o=r[t];let a=t>0?r[t-1]:null,s=t<r.length-1?r[t+1]:null;const l=n.categoryPercentage;null===a&&(a=o-(null===s?e.end-e.start:s-o)),null===s&&(s=o+o-a);const c=o-(o-Math.min(a,s))/2*l;return{chunk:Math.abs(s-a)/2*l/i,ratio:n.barPercentage,start:c}}(t,e,i,n):function(t,e,n,i){const r=n.barThickness;let o,a;return ce(r)?(o=e.min*n.categoryPercentage,a=n.barPercentage):(o=r*i,a=1),{chunk:o/i,ratio:a,start:e.pixels[t]-o/2}}(t,e,i,n),c=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);a=l.start+l.chunk*c+l.chunk/2,s=Math.min(o,l.chunk*l.ratio)}else a=n.getPixelForValue(this.getParsed(t)[n.axis],t),s=Math.min(o,e.min*e.ratio);return{base:a-s/2,head:a+s/2,center:a,size:s}}draw(){const t=this._cachedMeta,e=t.vScale,n=t.data,i=n.length;let r=0;for(;r<i;++r)null!==this.getParsed(r)[e.axis]&&n[r].draw(this._ctx)}}Wr.id="bar",Wr.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Wr.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Ur extends Dr{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,n,i){const r=super.parsePrimitiveData(t,e,n,i);for(let t=0;t<r.length;t++)r[t]._custom=this.resolveDataElementOptions(t+n).radius;return r}parseArrayData(t,e,n,i){const r=super.parseArrayData(t,e,n,i);for(let t=0;t<r.length;t++){const i=e[n+t];r[t]._custom=pe(i[2],this.resolveDataElementOptions(t+n).radius)}return r}parseObjectData(t,e,n,i){const r=super.parseObjectData(t,e,n,i);for(let t=0;t<r.length;t++){const i=e[n+t];r[t]._custom=pe(i&&i.r&&+i.r,this.resolveDataElementOptions(t+n).radius)}return r}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:n,yScale:i}=e,r=this.getParsed(t),o=n.getLabelForValue(r.x),a=i.getLabelForValue(r.y),s=r._custom;return{label:e.label,value:"("+o+", "+a+(s?", "+s:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:s,includeOptions:l}=this._getSharedOptions(e,i),c=o.axis,u=a.axis;for(let h=e;h<e+n;h++){const e=t[h],n=!r&&this.getParsed(h),d={},f=d[c]=r?o.getPixelForDecimal(.5):o.getPixelForValue(n[c]),p=d[u]=r?a.getBasePixel():a.getPixelForValue(n[u]);d.skip=isNaN(f)||isNaN(p),l&&(d.options=s||this.resolveDataElementOptions(h,e.active?"active":i),r&&(d.options.radius=0)),this.updateElement(e,h,d,i)}}resolveDataElementOptions(t,e){const n=this.getParsed(t);let i=super.resolveDataElementOptions(t,e);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const r=i.radius;return"active"!==e&&(i.radius=0),i.radius+=pe(n&&n._custom,r),i}}Ur.id="bubble",Ur.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Ur.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class $r extends Dr{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const n=this.getDataset().data,i=this._cachedMeta;if(!1===this._parsing)i._parsed=n;else{let r,o,a=t=>+n[t];if(he(n[t])){const{key:t="value"}=this._parsing;a=e=>+Oe(n[e],t)}for(r=t,o=t+e;r<o;++r)i._parsed[r]=a(r)}}_getRotation(){return $e(this.options.rotation-90)}_getCircumference(){return $e(this.options.circumference)}_getRotationExtents(){let t=Te,e=-Te;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)){const i=this.chart.getDatasetMeta(n).controller,r=i._getRotation(),o=i._getCircumference();t=Math.min(t,r),e=Math.max(e,r+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:n}=e,i=this._cachedMeta,r=i.data,o=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,a=Math.max((Math.min(n.width,n.height)-o)/2,0),s=Math.min((c=a,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:l/c),1);var l,c;const u=this._getRingWeight(this.index),{circumference:h,rotation:d}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:g,offsetY:m}=function(t,e,n){let i=1,r=1,o=0,a=0;if(e<Te){const s=t,l=s+e,c=Math.cos(s),u=Math.sin(s),h=Math.cos(l),d=Math.sin(l),f=(t,e,i)=>Je(t,s,l,!0)?1:Math.max(e,e*n,i,i*n),p=(t,e,i)=>Je(t,s,l,!0)?-1:Math.min(e,e*n,i,i*n),g=f(0,c,h),m=f(Ie,u,d),b=p(Re,c,h),y=p(Re+Ie,u,d);i=(g-b)/2,r=(m-y)/2,o=-(g+b)/2,a=-(m+y)/2}return{ratioX:i,ratioY:r,offsetX:o,offsetY:a}}(d,h,s),b=(n.width-o)/f,y=(n.height-o)/p,v=Math.max(Math.min(b,y)/2,0),x=ge(this.options.radius,v),w=(x-Math.max(x*s,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*x,this.offsetY=m*x,i.total=this.calculateTotal(),this.outerRadius=x-w*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-w*u,0),this.updateElements(r,0,r.length,t)}_circumference(t,e){const n=this.options,i=this._cachedMeta,r=this._getCircumference();return e&&n.animation.animateRotate||!this.chart.getDataVisibility(t)||null===i._parsed[t]||i.data[t].hidden?0:this.calculateCircumference(i._parsed[t]*r/Te)}updateElements(t,e,n,i){const r="reset"===i,o=this.chart,a=o.chartArea,s=o.options.animation,l=(a.left+a.right)/2,c=(a.top+a.bottom)/2,u=r&&s.animateScale,h=u?0:this.innerRadius,d=u?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,i);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,r);for(g=e;g<e+n;++g){const e=this._circumference(g,r),n=t[g],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:d,innerRadius:h};p&&(o.options=f||this.resolveDataElementOptions(g,n.active?"active":i)),m+=e,this.updateElement(n,g,o,i)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let n,i=0;for(n=0;n<e.length;n++){const r=t._parsed[n];null===r||isNaN(r)||!this.chart.getDataVisibility(n)||e[n].hidden||(i+=Math.abs(r))}return i}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?Te*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],r=lr(e._parsed[t],n.options.locale);return{label:i[t]||"",value:r}}getMaxBorderWidth(t){let e=0;const n=this.chart;let i,r,o,a,s;if(!t)for(i=0,r=n.data.datasets.length;i<r;++i)if(n.isDatasetVisible(i)){o=n.getDatasetMeta(i),t=o.data,a=o.controller;break}if(!t)return 0;for(i=0,r=t.length;i<r;++i)s=a.resolveDataElementOptions(i),"inner"!==s.borderAlign&&(e=Math.max(e,s.borderWidth||0,s.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let n=0,i=t.length;n<i;++n){const t=this.resolveDataElementOptions(n);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e}_getRingWeight(t){return Math.max(pe(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}$r.id="doughnut",$r.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},$r.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},$r.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,i)=>{const r=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const n=": "+t.formattedValue;return ue(e)?(e=e.slice(),e[0]+=n):e+=n,e}}}}};class Yr extends Dr{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:n,data:i=[],_dataset:r}=e,o=this.chart._animationsDisabled;let{start:a,count:s}=dn(e,i,o);this._drawStart=a,this._drawCount=s,fn(e)&&(a=0,s=i.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!r._decimated,n.points=i;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(n,void 0,{animated:!o,options:l},t),this.updateElements(i,a,s,t)}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:a,_stacked:s,_dataset:l}=this._cachedMeta,{sharedOptions:c,includeOptions:u}=this._getSharedOptions(e,i),h=o.axis,d=a.axis,{spanGaps:f,segment:p}=this.options,g=He(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||r||"none"===i;let b=e>0&&this.getParsed(e-1);for(let f=e;f<e+n;++f){const e=t[f],n=this.getParsed(f),y=m?e:{},v=ce(n[d]),x=y[h]=o.getPixelForValue(n[h],f),w=y[d]=r||v?a.getBasePixel():a.getPixelForValue(s?this.applyStack(a,n,s):n[d],f);y.skip=isNaN(x)||isNaN(w)||v,y.stop=f>0&&Math.abs(n[h]-b[h])>g,p&&(y.parsed=n,y.raw=l.data[f]),u&&(y.options=c||this.resolveDataElementOptions(f,e.active?"active":i)),m||this.updateElement(e,f,y,i),b=n}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,n=e.options&&e.options.borderWidth||0,i=t.data||[];if(!i.length)return n;const r=i[0].size(this.resolveDataElementOptions(0)),o=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(n,r,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}Yr.id="line",Yr.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Yr.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class Kr extends Dr{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],r=lr(e._parsed[t].r,n.options.locale);return{label:i[t]||"",value:r}}parseObjectData(t,e,n,i){return Vi.bind(this)(t,e,n,i)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,n)=>{const i=this.getParsed(n).r;!isNaN(i)&&this.chart.getDataVisibility(n)&&(i<e.min&&(e.min=i),i>e.max&&(e.max=i))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,n=t.options,i=Math.min(e.right-e.left,e.bottom-e.top),r=Math.max(i/2,0),o=(r-Math.max(n.cutoutPercentage?r/100*n.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=r-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,n,i){const r="reset"===i,o=this.chart,a=o.options.animation,s=this._cachedMeta.rScale,l=s.xCenter,c=s.yCenter,u=s.getIndexAngle(0)-.5*Re;let h,d=u;const f=360/this.countVisibleElements();for(h=0;h<e;++h)d+=this._computeAngle(h,i,f);for(h=e;h<e+n;h++){const e=t[h];let n=d,p=d+this._computeAngle(h,i,f),g=o.getDataVisibility(h)?s.getDistanceFromCenterForValue(this.getParsed(h).r):0;d=p,r&&(a.animateScale&&(g=0),a.animateRotate&&(n=p=u));const m={x:l,y:c,innerRadius:0,outerRadius:g,startAngle:n,endAngle:p,options:this.resolveDataElementOptions(h,e.active?"active":i)};this.updateElement(e,h,m,i)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&e++})),e}_computeAngle(t,e,n){return this.chart.getDataVisibility(t)?$e(this.resolveDataElementOptions(t,e).angle||n):0}}Kr.id="polarArea",Kr.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},Kr.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,i)=>{const r=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class qr extends $r{}qr.id="pie",qr.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Gr extends Dr{getLabelAndValue(t){const e=this._cachedMeta.vScale,n=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(n[e.axis])}}parseObjectData(t,e,n,i){return Vi.bind(this)(t,e,n,i)}update(t){const e=this._cachedMeta,n=e.dataset,i=e.data||[],r=e.iScale.getLabels();if(n.points=i,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:r.length===i.length,options:e};this.updateElement(n,void 0,o,t)}this.updateElements(i,0,i.length,t)}updateElements(t,e,n,i){const r=this._cachedMeta.rScale,o="reset"===i;for(let a=e;a<e+n;a++){const e=t[a],n=this.resolveDataElementOptions(a,e.active?"active":i),s=r.getPointPositionForValue(a,this.getParsed(a).r),l=o?r.xCenter:s.x,c=o?r.yCenter:s.y,u={x:l,y:c,angle:s.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(e,a,u,i)}}}Gr.id="radar",Gr.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Gr.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Qr{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return He(this.x)&&He(this.y)}getProps(t,e){const n=this.$animations;if(!e||!n)return this;const i={};return t.forEach((t=>{i[t]=n[t]&&n[t].active()?n[t]._to:this[t]})),i}}Qr.defaults={},Qr.defaultRoutes=void 0;const Xr={values:t=>ue(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const i=this.chart.options.locale;let r,o=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(r="scientific"),o=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const a=ze(Math.abs(o)),s=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:r,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),lr(t,i,l)},logarithmic(t,e,n){if(0===t)return"0";const i=t/Math.pow(10,Math.floor(ze(t)));return 1===i||2===i||5===i?Xr.numeric.call(this,t,e,n):""}};var Jr={formatters:Xr};function Zr(t,e,n,i,r){const o=pe(i,0),a=Math.min(pe(r,t.length),t.length);let s,l,c,u=0;for(n=Math.ceil(n),r&&(s=r-i,n=s/Math.floor(s/n)),c=o;c<0;)u++,c=Math.round(o+u*n);for(l=Math.max(o,0);l<a;l++)l===c&&(e.push(t[l]),u++,c=Math.round(o+u*n))}ni.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Jr.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),ni.route("scale.ticks","color","","color"),ni.route("scale.grid","color","","borderColor"),ni.route("scale.grid","borderColor","","borderColor"),ni.route("scale.title","color","","color"),ni.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),ni.describe("scales",{_fallback:"scale"}),ni.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const to=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n;function eo(t,e){const n=[],i=t.length/e,r=t.length;let o=0;for(;o<r;o+=i)n.push(t[Math.floor(o)]);return n}function no(t,e,n){const i=t.ticks.length,r=Math.min(e,i-1),o=t._startPixel,a=t._endPixel,s=1e-6;let l,c=t.getPixelForTick(r);if(!(n&&(l=1===i?Math.max(c-o,a-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(r-1))/2,c+=r<e?l:-l,c<o-s||c>a+s)))return c}function io(t){return t.drawTicks?t.tickLength:0}function ro(t,e){if(!t.display)return 0;const n=Si(t.font,e),i=ki(t.padding);return(ue(t.text)?t.text.length:1)*n.lineHeight+i.height}function oo(t,e,n){let i=un(t);return(n&&"right"!==e||!n&&"right"===e)&&(i=(t=>"left"===t?"right":"right"===t?"left":t)(i)),i}class ao extends Qr{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:i}=this;return t=fe(t,Number.POSITIVE_INFINITY),e=fe(e,Number.NEGATIVE_INFINITY),n=fe(n,Number.POSITIVE_INFINITY),i=fe(i,Number.NEGATIVE_INFINITY),{min:fe(t,n),max:fe(e,i),minDefined:de(t),maxDefined:de(e)}}getMinMax(t){let e,{min:n,max:i,minDefined:r,maxDefined:o}=this.getUserBounds();if(r&&o)return{min:n,max:i};const a=this.getMatchingVisibleMetas();for(let s=0,l=a.length;s<l;++s)e=a[s].controller.getMinMax(this,t),r||(n=Math.min(n,e.min)),o||(i=Math.max(i,e.max));return n=o&&n>i?i:n,i=r&&n>i?n:i,{min:fe(n,fe(i,n)),max:fe(i,fe(n,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){me(this.options.beforeUpdate,[this])}update(t,e,n){const{beginAtZero:i,grace:r,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,n){const{min:i,max:r}=t,o=ge(e,(r-i)/2),a=(t,e)=>n&&0===t?0:t+e;return{min:a(i,-Math.abs(o)),max:a(r,o)}}(this,r,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const s=a<this.ticks.length;this._convertTicksToLabels(s?eo(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const n=t.options.ticks,i=n.maxTicksLimit||function(t){const e=t.options.offset,n=t._tickSize(),i=t._length/n+(e?0:1),r=t._maxLength/n;return Math.floor(Math.min(i,r))}(t),r=n.major.enabled?function(t){const e=[];let n,i;for(n=0,i=t.length;n<i;n++)t[n].major&&e.push(n);return e}(e):[],o=r.length,a=r[0],s=r[o-1],l=[];if(o>i)return function(t,e,n,i){let r,o=0,a=n[0];for(i=Math.ceil(i),r=0;r<t.length;r++)r===a&&(e.push(t[r]),o++,a=n[o*i])}(e,l,r,o/i),l;const c=function(t,e,n){const i=function(t){const e=t.length;let n,i;if(e<2)return!1;for(i=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==i)return!1;return i}(t),r=e.length/n;if(!i)return Math.max(r,1);const o=function(t){const e=[],n=Math.sqrt(t);let i;for(i=1;i<n;i++)t%i==0&&(e.push(i),e.push(t/i));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e}(i);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>r)return e}return Math.max(r,1)}(r,e,i);if(o>0){let t,n;const i=o>1?Math.round((s-a)/(o-1)):null;for(Zr(e,l,c,ce(i)?0:a-i,a),t=0,n=o-1;t<n;t++)Zr(e,l,c,r[t],r[t+1]);return Zr(e,l,c,s,ce(i)?e.length:s+i),l}return Zr(e,l,c),l}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),s&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,n=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,n=!n),this._startPixel=t,this._endPixel=e,this._reversePixels=n,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){me(this.options.afterUpdate,[this])}beforeSetDimensions(){me(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){me(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),me(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){me(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let n,i,r;for(n=0,i=t.length;n<i;n++)r=t[n],r.label=me(e.callback,[r.value,n,t],this)}afterTickToLabelConversion(){me(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){me(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,n=this.ticks.length,i=e.minRotation||0,r=e.maxRotation;let o,a,s,l=i;if(!this._isVisible()||!e.display||i>=r||n<=1||!this.isHorizontal())return void(this.labelRotation=i);const c=this._getLabelSizes(),u=c.widest.width,h=c.highest.height,d=Ze(this.chart.width-u,0,this.maxWidth);o=t.offset?this.maxWidth/n:d/(n-1),u+6>o&&(o=d/(n-(t.offset?.5:1)),a=this.maxHeight-io(t.grid)-e.padding-ro(t.title,this.chart.options.font),s=Math.sqrt(u*u+h*h),l=Ye(Math.min(Math.asin(Ze((c.highest.height+6)/o,-1,1)),Math.asin(Ze(a/s,-1,1))-Math.asin(Ze(h/s,-1,1)))),l=Math.max(i,Math.min(r,l))),this.labelRotation=l}afterCalculateLabelRotation(){me(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){me(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:n,title:i,grid:r}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=ro(i,e.options.font);if(a?(t.width=this.maxWidth,t.height=io(r)+o):(t.height=this.maxHeight,t.width=io(r)+o),n.display&&this.ticks.length){const{first:e,last:i,widest:r,highest:o}=this._getLabelSizes(),s=2*n.padding,l=$e(this.labelRotation),c=Math.cos(l),u=Math.sin(l);if(a){const e=n.mirror?0:u*r.width+c*o.height;t.height=Math.min(this.maxHeight,t.height+e+s)}else{const e=n.mirror?0:c*r.width+u*o.height;t.width=Math.min(this.maxWidth,t.width+e+s)}this._calculatePadding(e,i,u,c)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,n,i){const{ticks:{align:r,padding:o},position:a}=this.options,s=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,h=0;s?l?(u=i*t.width,h=n*e.height):(u=n*t.height,h=i*e.width):"start"===r?h=e.width:"end"===r?u=t.width:"inner"!==r&&(u=t.width/2,h=e.width/2),this.paddingLeft=Math.max((u-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((h-c+o)*this.width/(this.width-c),0)}else{let n=e.height/2,i=t.height/2;"start"===r?(n=0,i=t.height):"end"===r&&(n=e.height,i=0),this.paddingTop=n+o,this.paddingBottom=i+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){me(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,n=t.length;e<n;e++)ce(t[e].label)&&(t.splice(e,1),n--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let n=this.ticks;e<n.length&&(n=eo(n,e)),this._labelSizes=t=this._computeLabelSizes(n,n.length)}return t}_computeLabelSizes(t,e){const{ctx:n,_longestTextCache:i}=this,r=[],o=[];let a,s,l,c,u,h,d,f,p,g,m,b=0,y=0;for(a=0;a<e;++a){if(c=t[a].label,u=this._resolveTickFontOptions(a),n.font=h=u.string,d=i[h]=i[h]||{data:{},gc:[]},f=u.lineHeight,p=g=0,ce(c)||ue(c)){if(ue(c))for(s=0,l=c.length;s<l;++s)m=c[s],ce(m)||ue(m)||(p=ii(n,d.data,d.gc,p,m),g+=f)}else p=ii(n,d.data,d.gc,p,c),g=f;r.push(p),o.push(g),b=Math.max(p,b),y=Math.max(g,y)}!function(t,e){be(t,(t=>{const n=t.gc,i=n.length/2;let r;if(i>e){for(r=0;r<i;++r)delete t.data[n[r]];n.splice(0,i)}}))}(i,e);const v=r.indexOf(b),x=o.indexOf(y),w=t=>({width:r[t]||0,height:o[t]||0});return{first:w(0),last:w(e-1),widest:w(v),highest:w(x),widths:r,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Ze(this._alignToPixels?oi(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const n=e[t];return n.$context||(n.$context=function(t,e,n){return Oi(t,{tick:n,index:e,type:"tick"})}(this.getContext(),t,n))}return this.$context||(this.$context=Oi(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=$e(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),r=this._getLabelSizes(),o=t.autoSkipPadding||0,a=r?r.widest.width+o:0,s=r?r.highest.height+o:0;return this.isHorizontal()?s*n>a*i?a/n:s/i:s*i<a*n?s/n:a/i}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,n=this.chart,i=this.options,{grid:r,position:o}=i,a=r.offset,s=this.isHorizontal(),l=this.ticks.length+(a?1:0),c=io(r),u=[],h=r.setContext(this.getContext()),d=h.drawBorder?h.borderWidth:0,f=d/2,p=function(t){return oi(n,t,d)};let g,m,b,y,v,x,w,_,k,S,E,O;if("top"===o)g=p(this.bottom),x=this.bottom-c,_=g-f,S=p(t.top)+f,O=t.bottom;else if("bottom"===o)g=p(this.top),S=t.top,O=p(t.bottom)-f,x=g+f,_=this.top+c;else if("left"===o)g=p(this.right),v=this.right-c,w=g-f,k=p(t.left)+f,E=t.right;else if("right"===o)g=p(this.left),k=t.left,E=p(t.right)-f,v=g+f,w=this.left+c;else if("x"===e){if("center"===o)g=p((t.top+t.bottom)/2+.5);else if(he(o)){const t=Object.keys(o)[0],e=o[t];g=p(this.chart.scales[t].getPixelForValue(e))}S=t.top,O=t.bottom,x=g+f,_=x+c}else if("y"===e){if("center"===o)g=p((t.left+t.right)/2);else if(he(o)){const t=Object.keys(o)[0],e=o[t];g=p(this.chart.scales[t].getPixelForValue(e))}v=g-f,w=v-c,k=t.left,E=t.right}const C=pe(i.ticks.maxTicksLimit,l),P=Math.max(1,Math.ceil(l/C));for(m=0;m<l;m+=P){const t=r.setContext(this.getContext(m)),e=t.lineWidth,i=t.color,o=t.borderDash||[],l=t.borderDashOffset,c=t.tickWidth,h=t.tickColor,d=t.tickBorderDash||[],f=t.tickBorderDashOffset;b=no(this,m,a),void 0!==b&&(y=oi(n,b,e),s?v=w=k=E=y:x=_=S=O=y,u.push({tx1:v,ty1:x,tx2:w,ty2:_,x1:k,y1:S,x2:E,y2:O,width:e,color:i,borderDash:o,borderDashOffset:l,tickWidth:c,tickColor:h,tickBorderDash:d,tickBorderDashOffset:f}))}return this._ticksLength=l,this._borderValue=g,u}_computeLabelItems(t){const e=this.axis,n=this.options,{position:i,ticks:r}=n,o=this.isHorizontal(),a=this.ticks,{align:s,crossAlign:l,padding:c,mirror:u}=r,h=io(n.grid),d=h+c,f=u?-c:d,p=-$e(this.labelRotation),g=[];let m,b,y,v,x,w,_,k,S,E,O,C,P="middle";if("top"===i)w=this.bottom-f,_=this._getXAxisLabelAlignment();else if("bottom"===i)w=this.top+f,_=this._getXAxisLabelAlignment();else if("left"===i){const t=this._getYAxisLabelAlignment(h);_=t.textAlign,x=t.x}else if("right"===i){const t=this._getYAxisLabelAlignment(h);_=t.textAlign,x=t.x}else if("x"===e){if("center"===i)w=(t.top+t.bottom)/2+d;else if(he(i)){const t=Object.keys(i)[0],e=i[t];w=this.chart.scales[t].getPixelForValue(e)+d}_=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===i)x=(t.left+t.right)/2-d;else if(he(i)){const t=Object.keys(i)[0],e=i[t];x=this.chart.scales[t].getPixelForValue(e)}_=this._getYAxisLabelAlignment(h).textAlign}"y"===e&&("start"===s?P="top":"end"===s&&(P="bottom"));const M=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){y=a[m],v=y.label;const t=r.setContext(this.getContext(m));k=this.getPixelForTick(m)+r.labelOffset,S=this._resolveTickFontOptions(m),E=S.lineHeight,O=ue(v)?v.length:1;const e=O/2,n=t.color,s=t.textStrokeColor,c=t.textStrokeWidth;let h,d=_;if(o?(x=k,"inner"===_&&(d=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),C="top"===i?"near"===l||0!==p?-O*E+E/2:"center"===l?-M.highest.height/2-e*E+E:-M.highest.height+E/2:"near"===l||0!==p?E/2:"center"===l?M.highest.height/2-e*E:M.highest.height-O*E,u&&(C*=-1)):(w=k,C=(1-O)*E/2),t.showLabelBackdrop){const e=ki(t.backdropPadding),n=M.heights[m],i=M.widths[m];let r=w+C-e.top,o=x-e.left;switch(P){case"middle":r-=n/2;break;case"bottom":r-=n}switch(_){case"center":o-=i/2;break;case"right":o-=i}h={left:o,top:r,width:i+e.width,height:n+e.height,color:t.backdropColor}}g.push({rotation:p,label:v,font:S,color:n,strokeColor:s,strokeWidth:c,textOffset:C,textAlign:d,textBaseline:P,translation:[x,w],backdrop:h})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-$e(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align?n="right":"inner"===e.align&&(n="inner"),n}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:n,mirror:i,padding:r}}=this.options,o=t+r,a=this._getLabelSizes().widest.width;let s,l;return"left"===e?i?(l=this.right+r,"near"===n?s="left":"center"===n?(s="center",l+=a/2):(s="right",l+=a)):(l=this.right-o,"near"===n?s="right":"center"===n?(s="center",l-=a/2):(s="left",l=this.left)):"right"===e?i?(l=this.left+r,"near"===n?s="right":"center"===n?(s="center",l-=a/2):(s="left",l-=a)):(l=this.left+o,"near"===n?s="left":"center"===n?(s="center",l+=a/2):(s="right",l=this.right)):s="right",{textAlign:s,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:i,width:r,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,i,r,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const n=this.ticks.findIndex((e=>e.value===t));return n>=0?e.setContext(this.getContext(n)).lineWidth:0}drawGrid(t){const e=this.options.grid,n=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,o;const a=(t,e,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(e.display)for(r=0,o=i.length;r<o;++r){const t=i[r];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:n}}=this,i=n.setContext(this.getContext()),r=n.drawBorder?i.borderWidth:0;if(!r)return;const o=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let s,l,c,u;this.isHorizontal()?(s=oi(t,this.left,r)-r/2,l=oi(t,this.right,o)+o/2,c=u=a):(c=oi(t,this.top,r)-r/2,u=oi(t,this.bottom,o)+o/2,s=l=a),e.save(),e.lineWidth=i.borderWidth,e.strokeStyle=i.borderColor,e.beginPath(),e.moveTo(s,c),e.lineTo(l,u),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,n=this._computeLabelArea();n&&ui(e,n);const i=this._labelItems||(this._labelItems=this._computeLabelItems(t));let r,o;for(r=0,o=i.length;r<o;++r){const t=i[r],n=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),pi(e,o,0,t.textOffset,n,t)}n&&hi(e)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:i}}=this;if(!n.display)return;const r=Si(n.font),o=ki(n.padding),a=n.align;let s=r.lineHeight/2;"bottom"===e||"center"===e||he(e)?(s+=o.bottom,ue(n.text)&&(s+=r.lineHeight*(n.text.length-1))):s+=o.top;const{titleX:l,titleY:c,maxWidth:u,rotation:h}=function(t,e,n,i){const{top:r,left:o,bottom:a,right:s,chart:l}=t,{chartArea:c,scales:u}=l;let h,d,f,p=0;const g=a-r,m=s-o;if(t.isHorizontal()){if(d=hn(i,o,s),he(n)){const t=Object.keys(n)[0],i=n[t];f=u[t].getPixelForValue(i)+g-e}else f="center"===n?(c.bottom+c.top)/2+g-e:to(t,n,e);h=s-o}else{if(he(n)){const t=Object.keys(n)[0],i=n[t];d=u[t].getPixelForValue(i)-m+e}else d="center"===n?(c.left+c.right)/2-m+e:to(t,n,e);f=hn(i,a,r),p="left"===n?-Ie:Ie}return{titleX:d,titleY:f,maxWidth:h,rotation:p}}(this,s,e,a);pi(t,n.text,0,0,r,{color:n.color,maxWidth:u,rotation:h,textAlign:oo(a,e,i),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,n=pe(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===ao.prototype.draw?[{z:n,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",i=[];let r,o;for(r=0,o=e.length;r<o;++r){const o=e[r];o[n]!==this.id||t&&o.type!==t||i.push(o)}return i}_resolveTickFontOptions(t){return Si(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class so{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(e)&&(n=this.register(e));const i=this.items,r=t.id,o=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in i||(i[r]=t,function(t,e,n){const i=_e(Object.create(null),[n?ni.get(n):{},ni.get(e),t.defaults]);ni.set(e,i),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const i=n.split("."),r=i.pop(),o=[t].concat(i).join("."),a=e[n].split("."),s=a.pop(),l=a.join(".");ni.route(o,r,l,s)}))}(e,t.defaultRoutes),t.descriptors&&ni.describe(e,t.descriptors)}(t,o,n),this.override&&ni.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,i=this.scope;n in e&&delete e[n],i&&n in ni[i]&&(delete ni[i][n],this.override&&delete Jn[n])}}var lo=new class{constructor(){this.controllers=new so(Dr,"datasets",!0),this.elements=new so(Qr,"elements"),this.plugins=new so(Object,"plugins"),this.scales=new so(ao,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){[...e].forEach((e=>{const i=n||this._getRegistryForType(e);n||i.isForType(e)||i===this.plugins&&e.id?this._exec(t,i,e):be(e,(e=>{const i=n||this._getRegistryForType(e);this._exec(t,i,e)}))}))}_exec(t,e,n){const i=Ce(t);me(n["before"+i],[],n),e[t](n),me(n["after"+i],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const i=e.get(t);if(void 0===i)throw new Error('"'+t+'" is not a registered '+n+".");return i}};class co extends Dr{update(t){const e=this._cachedMeta,{data:n=[]}=e,i=this.chart._animationsDisabled;let{start:r,count:o}=dn(e,n,i);if(this._drawStart=r,this._drawCount=o,fn(e)&&(r=0,o=n.length),this.options.showLine){const{dataset:r,_dataset:o}=e;r._chart=this.chart,r._datasetIndex=this.index,r._decimated=!!o._decimated,r.points=n;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(r,void 0,{animated:!i,options:a},t)}this.updateElements(n,r,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=lo.getElement("line")),super.addElements()}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:a,_stacked:s,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,i),u=this.getSharedOptions(c),h=this.includeOptions(i,u),d=o.axis,f=a.axis,{spanGaps:p,segment:g}=this.options,m=He(p)?p:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||r||"none"===i;let y=e>0&&this.getParsed(e-1);for(let c=e;c<e+n;++c){const e=t[c],n=this.getParsed(c),p=b?e:{},v=ce(n[f]),x=p[d]=o.getPixelForValue(n[d],c),w=p[f]=r||v?a.getBasePixel():a.getPixelForValue(s?this.applyStack(a,n,s):n[f],c);p.skip=isNaN(x)||isNaN(w)||v,p.stop=c>0&&Math.abs(n[d]-y[d])>m,g&&(p.parsed=n,p.raw=l.data[c]),h&&(p.options=u||this.resolveDataElementOptions(c,e.active?"active":i)),b||this.updateElement(e,c,p,i),y=n}this.updateSharedOptions(u,i,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}const n=t.dataset,i=n.options&&n.options.borderWidth||0;if(!e.length)return i;const r=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(i,r,o)/2}}function uo(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}co.id="scatter",co.defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1},co.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};class ho{constructor(t){this.options=t||{}}init(t){}formats(){return uo()}parse(t,e){return uo()}format(t,e){return uo()}add(t,e,n){return uo()}diff(t,e,n){return uo()}startOf(t,e,n){return uo()}endOf(t,e){return uo()}}ho.override=function(t){Object.assign(ho.prototype,t)};var fo={_date:ho};function po(t,e,n,i){const{controller:r,data:o,_sorted:a}=t,s=r._cachedMeta.iScale;if(s&&e===s.axis&&"r"!==e&&a&&o.length){const t=s._reversePixels?rn:nn;if(!i)return t(o,e,n);if(r._sharedOptions){const i=o[0],r="function"==typeof i.getRange&&i.getRange(e);if(r){const i=t(o,e,n-r),a=t(o,e,n+r);return{lo:i.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function go(t,e,n,i,r){const o=t.getSortedVisibleDatasetMetas(),a=n[e];for(let t=0,n=o.length;t<n;++t){const{index:n,data:s}=o[t],{lo:l,hi:c}=po(o[t],e,a,r);for(let t=l;t<=c;++t){const e=s[t];e.skip||i(e,n,t)}}}function mo(t,e,n,i,r){const o=[];return r||t.isPointInArea(e)?(go(t,n,e,(function(n,a,s){(r||ci(n,t.chartArea,0))&&n.inRange(e.x,e.y,i)&&o.push({element:n,datasetIndex:a,index:s})}),!0),o):o}function bo(t,e,n,i,r,o){return o||t.isPointInArea(e)?"r"!==n||i?function(t,e,n,i,r,o){let a=[];const s=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,i){const r=e?Math.abs(t.x-i.x):0,o=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(o,2))}}(n);let l=Number.POSITIVE_INFINITY;return go(t,n,e,(function(n,c,u){const h=n.inRange(e.x,e.y,r);if(i&&!h)return;const d=n.getCenterPoint(r);if(!o&&!t.isPointInArea(d)&&!h)return;const f=s(e,d);f<l?(a=[{element:n,datasetIndex:c,index:u}],l=f):f===l&&a.push({element:n,datasetIndex:c,index:u})})),a}(t,e,n,i,r,o):function(t,e,n,i){let r=[];return go(t,n,e,(function(t,n,o){const{startAngle:a,endAngle:s}=t.getProps(["startAngle","endAngle"],i),{angle:l}=qe(t,{x:e.x,y:e.y});Je(l,a,s)&&r.push({element:t,datasetIndex:n,index:o})})),r}(t,e,n,r):[]}function yo(t,e,n,i,r){const o=[],a="x"===n?"inXRange":"inYRange";let s=!1;return go(t,n,e,((t,i,l)=>{t[a](e[n],r)&&(o.push({element:t,datasetIndex:i,index:l}),s=s||t.inRange(e.x,e.y,r))})),i&&!s?[]:o}var vo={evaluateInteractionItems:go,modes:{index(t,e,n,i){const r=Zi(e,t),o=n.axis||"x",a=n.includeInvisible||!1,s=n.intersect?mo(t,r,o,i,a):bo(t,r,o,!1,i,a),l=[];return s.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=s[0].index,n=t.data[e];n&&!n.skip&&l.push({element:n,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,n,i){const r=Zi(e,t),o=n.axis||"xy",a=n.includeInvisible||!1;let s=n.intersect?mo(t,r,o,i,a):bo(t,r,o,!1,i,a);if(s.length>0){const e=s[0].datasetIndex,n=t.getDatasetMeta(e).data;s=[];for(let t=0;t<n.length;++t)s.push({element:n[t],datasetIndex:e,index:t})}return s},point:(t,e,n,i)=>mo(t,Zi(e,t),n.axis||"xy",i,n.includeInvisible||!1),nearest(t,e,n,i){const r=Zi(e,t),o=n.axis||"xy",a=n.includeInvisible||!1;return bo(t,r,o,n.intersect,i,a)},x:(t,e,n,i)=>yo(t,Zi(e,t),"x",n.intersect,i),y:(t,e,n,i)=>yo(t,Zi(e,t),"y",n.intersect,i)}};const xo=["left","top","right","bottom"];function wo(t,e){return t.filter((t=>t.pos===e))}function _o(t,e){return t.filter((t=>-1===xo.indexOf(t.pos)&&t.box.axis===e))}function ko(t,e){return t.sort(((t,n)=>{const i=e?n:t,r=e?t:n;return i.weight===r.weight?i.index-r.index:i.weight-r.weight}))}function So(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function Eo(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Oo(t,e,n,i){const{pos:r,box:o}=n,a=t.maxPadding;if(!he(r)){n.size&&(t[r]-=n.size);const e=i[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?o.height:o.width),n.size=e.size/e.count,t[r]+=n.size}o.getPadding&&Eo(a,o.getPadding());const s=Math.max(0,e.outerWidth-So(a,t,"left","right")),l=Math.max(0,e.outerHeight-So(a,t,"top","bottom")),c=s!==t.w,u=l!==t.h;return t.w=s,t.h=l,n.horizontal?{same:c,other:u}:{same:u,other:c}}function Co(t,e){const n=e.maxPadding;return function(t){const i={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{i[t]=Math.max(e[t],n[t])})),i}(t?["left","right"]:["top","bottom"])}function Po(t,e,n,i){const r=[];let o,a,s,l,c,u;for(o=0,a=t.length,c=0;o<a;++o){s=t[o],l=s.box,l.update(s.width||e.w,s.height||e.h,Co(s.horizontal,e));const{same:a,other:h}=Oo(e,n,s,i);c|=a&&r.length,u=u||h,l.fullSize||r.push(s)}return c&&Po(r,e,n,i)||u}function Mo(t,e,n,i,r){t.top=n,t.left=e,t.right=e+i,t.bottom=n+r,t.width=i,t.height=r}function Lo(t,e,n,i){const r=n.padding;let{x:o,y:a}=e;for(const s of t){const t=s.box,l=i[s.stack]||{count:1,placed:0,weight:1},c=s.stackWeight/l.weight||1;if(s.horizontal){const i=e.w*c,o=l.size||t.height;Pe(l.start)&&(a=l.start),t.fullSize?Mo(t,r.left,a,n.outerWidth-r.right-r.left,o):Mo(t,e.left+l.placed,a,i,o),l.start=a,l.placed+=i,a=t.bottom}else{const i=e.h*c,a=l.size||t.width;Pe(l.start)&&(o=l.start),t.fullSize?Mo(t,o,r.top,a,n.outerHeight-r.bottom-r.top):Mo(t,o,e.top+l.placed,a,i),l.start=o,l.placed+=i,o=t.right}}e.x=o,e.y=a}ni.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var Ro={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,i){if(!t)return;const r=ki(t.options.layout.padding),o=Math.max(e-r.width,0),a=Math.max(n-r.height,0),s=function(t){const e=function(t){const e=[];let n,i,r,o,a,s;for(n=0,i=(t||[]).length;n<i;++n)r=t[n],({position:o,options:{stack:a,stackWeight:s=1}}=r),e.push({index:n,box:r,pos:o,horizontal:r.isHorizontal(),weight:r.weight,stack:a&&o+a,stackWeight:s});return e}(t),n=ko(e.filter((t=>t.box.fullSize)),!0),i=ko(wo(e,"left"),!0),r=ko(wo(e,"right")),o=ko(wo(e,"top"),!0),a=ko(wo(e,"bottom")),s=_o(e,"x"),l=_o(e,"y");return{fullSize:n,leftAndTop:i.concat(o),rightAndBottom:r.concat(l).concat(a).concat(s),chartArea:wo(e,"chartArea"),vertical:i.concat(r).concat(l),horizontal:o.concat(a).concat(s)}}(t.boxes),l=s.vertical,c=s.horizontal;be(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const u=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,h=Object.freeze({outerWidth:e,outerHeight:n,padding:r,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/u,hBoxMaxHeight:a/2}),d=Object.assign({},r);Eo(d,ki(i));const f=Object.assign({maxPadding:d,w:o,h:a,x:r.left,y:r.top},r),p=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:i,stackWeight:r}=n;if(!t||!xo.includes(i))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=r}return e}(t),{vBoxMaxWidth:i,hBoxMaxHeight:r}=e;let o,a,s;for(o=0,a=t.length;o<a;++o){s=t[o];const{fullSize:a}=s.box,l=n[s.stack],c=l&&s.stackWeight/l.weight;s.horizontal?(s.width=c?c*i:a&&e.availableWidth,s.height=r):(s.width=i,s.height=c?c*r:a&&e.availableHeight)}return n}(l.concat(c),h);Po(s.fullSize,f,h,p),Po(l,f,h,p),Po(c,f,h,p)&&Po(l,f,h,p),function(t){const e=t.maxPadding;function n(n){const i=Math.max(e[n]-t[n],0);return t[n]+=i,i}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(f),Lo(s.leftAndTop,f,h,p),f.x+=f.w,f.y+=f.h,Lo(s.rightAndBottom,f,h,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},be(s.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class To{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,i){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,i?Math.floor(e/i):n)}}isAttached(t){return!0}updateConfig(t){}}class No extends To{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Do={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Ao=t=>null===t||""===t,Io=!!nr&&{passive:!0};function jo(t,e,n){t.canvas.removeEventListener(e,n,Io)}function Fo(t,e){for(const n of t)if(n===e||n.contains(e))return!0}function zo(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Fo(n.addedNodes,i),e=e&&!Fo(n.removedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}function Vo(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Fo(n.removedNodes,i),e=e&&!Fo(n.addedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}const Bo=new Map;let Ho=0;function Wo(){const t=window.devicePixelRatio;t!==Ho&&(Ho=t,Bo.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function Uo(t,e,n){const i=t.canvas,r=i&&qi(i);if(!r)return;const o=cn(((t,e)=>{const i=r.clientWidth;n(t,e),i<r.clientWidth&&n()}),window),a=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,i=e.contentRect.height;0===n&&0===i||o(n,i)}));return a.observe(r),function(t,e){Bo.size||window.addEventListener("resize",Wo),Bo.set(t,e)}(t,o),a}function $o(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){Bo.delete(t),Bo.size||window.removeEventListener("resize",Wo)}(t)}function Yo(t,e,n){const i=t.canvas,r=cn((e=>{null!==t.ctx&&n(function(t,e){const n=Do[t.type]||t.type,{x:i,y:r}=Zi(t,e);return{type:n,chart:e,native:t,x:void 0!==i?i:null,y:void 0!==r?r:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,n){t.addEventListener(e,n,Io)}(i,e,r),r}class Ko extends To{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,i=t.getAttribute("height"),r=t.getAttribute("width");if(t.$chartjs={initial:{height:i,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",Ao(r)){const e=ir(t,"width");void 0!==e&&(t.width=e)}if(Ao(i))if(""===t.style.height)t.height=t.width/(e||2);else{const e=ir(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const n=e.$chartjs.initial;["height","width"].forEach((t=>{const i=n[t];ce(i)?e.removeAttribute(t):e.setAttribute(t,i)}));const i=n.style||{};return Object.keys(i).forEach((t=>{e.style[t]=i[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,n){this.removeEventListener(t,e);const i=t.$proxies||(t.$proxies={}),r={attach:zo,detach:Vo,resize:Uo}[e]||Yo;i[e]=r(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),i=n[e];i&&(({attach:$o,detach:$o,resize:$o}[e]||jo)(t,e,i),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,i){return function(t,e,n,i){const r=Qi(t),o=Ji(r,"margin"),a=Gi(r.maxWidth,t,"clientWidth")||De,s=Gi(r.maxHeight,t,"clientHeight")||De,l=function(t,e,n){let i,r;if(void 0===e||void 0===n){const o=qi(t);if(o){const t=o.getBoundingClientRect(),a=Qi(o),s=Ji(a,"border","width"),l=Ji(a,"padding");e=t.width-l.width-s.width,n=t.height-l.height-s.height,i=Gi(a.maxWidth,o,"clientWidth"),r=Gi(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:i||De,maxHeight:r||De}}(t,e,n);let{width:c,height:u}=l;if("content-box"===r.boxSizing){const t=Ji(r,"border","width"),e=Ji(r,"padding");c-=e.width+t.width,u-=e.height+t.height}return c=Math.max(0,c-o.width),u=Math.max(0,i?Math.floor(c/i):u-o.height),c=tr(Math.min(c,a,l.maxWidth)),u=tr(Math.min(u,s,l.maxHeight)),c&&!u&&(u=tr(c/2)),{width:c,height:u}}(t,e,n,i)}isAttached(t){const e=qi(t);return!(!e||!e.isConnected)}}class qo{constructor(){this._init=[]}notify(t,e,n,i){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const r=i?this._descriptors(t).filter(i):this._descriptors(t),o=this._notify(r,t,e,n);return"afterDestroy"===e&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,n,i){i=i||{};for(const r of t){const t=r.plugin;if(!1===me(t[n],[e,i,r.options],t)&&i.cancelable)return!1}return!0}invalidate(){ce(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,i=pe(n.options&&n.options.plugins,{}),r=function(t){const e={},n=[],i=Object.keys(lo.plugins.items);for(let t=0;t<i.length;t++)n.push(lo.getPlugin(i[t]));const r=t.plugins||[];for(let t=0;t<r.length;t++){const i=r[t];-1===n.indexOf(i)&&(n.push(i),e[i.id]=!0)}return{plugins:n,localIds:e}}(n);return!1!==i||e?function(t,{plugins:e,localIds:n},i,r){const o=[],a=t.getContext();for(const s of e){const e=s.id,l=Go(i[e],r);null!==l&&o.push({plugin:s,options:Qo(t.config,{plugin:s,local:n[e]},l,a)})}return o}(t,r,i,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,i=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(i(e,n),t,"stop"),this._notify(i(n,e),t,"start")}}function Go(t,e){return e||!1!==t?!0===t?{}:t:null}function Qo(t,{plugin:e,local:n},i,r){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(i,o);return n&&e.defaults&&a.push(e.defaults),t.createResolver(a,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Xo(t,e){const n=ni.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function Jo(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(n=e.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.charAt(0).toLowerCase();var n}function Zo(t){const e=t.options||(t.options={});e.plugins=pe(e.plugins,{}),e.scales=function(t,e){const n=Jn[t.type]||{scales:{}},i=e.scales||{},r=Xo(t.type,e),o=Object.create(null),a=Object.create(null);return Object.keys(i).forEach((t=>{const e=i[t];if(!he(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const s=Jo(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(s,r),c=n.scales||{};o[s]=o[s]||t,a[t]=ke(Object.create(null),[{axis:s},e,c[s],c[l]])})),t.data.datasets.forEach((n=>{const r=n.type||t.type,s=n.indexAxis||Xo(r,e),l=(Jn[r]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,s),r=n[e+"AxisID"]||o[e]||e;a[r]=a[r]||Object.create(null),ke(a[r],[{axis:e},i[r],l[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];ke(e,[ni.scales[e.type],ni.scale])})),a}(t,e)}function ta(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const ea=new Map,na=new Set;function ia(t,e){let n=ea.get(t);return n||(n=e(),ea.set(t,n),na.add(n)),n}const ra=(t,e,n)=>{const i=Oe(e,n);void 0!==i&&t.add(i)};class oa{constructor(t){this._config=function(t){return(t=t||{}).data=ta(t.data),Zo(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=ta(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Zo(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return ia(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return ia(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return ia(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return ia(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let i=n.get(t);return i&&!e||(i=new Map,n.set(t,i)),i}getOptionScopes(t,e,n){const{options:i,type:r}=this,o=this._cachedScopes(t,n),a=o.get(e);if(a)return a;const s=new Set;e.forEach((e=>{t&&(s.add(t),e.forEach((e=>ra(s,t,e)))),e.forEach((t=>ra(s,i,t))),e.forEach((t=>ra(s,Jn[r]||{},t))),e.forEach((t=>ra(s,ni,t))),e.forEach((t=>ra(s,Zn,t)))}));const l=Array.from(s);return 0===l.length&&l.push(Object.create(null)),na.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Jn[e]||{},ni.datasets[e]||{},{type:e},ni,Zn]}resolveNamedOptions(t,e,n,i=[""]){const r={$shared:!0},{resolver:o,subPrefixes:a}=aa(this._resolverCache,t,i);let s=o;(function(t,e){const{isScriptable:n,isIndexable:i}=Mi(t);for(const r of e){const e=n(r),o=i(r),a=(o||e)&&t[r];if(e&&(Me(a)||sa(a))||o&&ue(a))return!0}return!1})(o,e)&&(r.$shared=!1,s=Pi(o,n=Me(n)?n():n,this.createResolver(t,n,a)));for(const t of e)r[t]=s[t];return r}createResolver(t,e,n=[""],i){const{resolver:r}=aa(this._resolverCache,t,n);return he(e)?Pi(r,e,void 0,i):r}}function aa(t,e,n){let i=t.get(e);i||(i=new Map,t.set(e,i));const r=n.join();let o=i.get(r);return o||(o={resolver:Ci(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},i.set(r,o)),o}const sa=t=>he(t)&&Object.getOwnPropertyNames(t).reduce(((e,n)=>e||Me(t[n])),!1),la=["top","bottom","left","right","chartArea"];function ca(t,e){return"top"===t||"bottom"===t||-1===la.indexOf(t)&&"x"===e}function ua(t,e){return function(n,i){return n[t]===i[t]?n[e]-i[e]:n[t]-i[t]}}function ha(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),me(n&&n.onComplete,[t],e)}function da(t){const e=t.chart,n=e.options.animation;me(n&&n.onProgress,[t],e)}function fa(t){return Ki()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const pa={},ga=t=>{const e=fa(t);return Object.values(pa).filter((t=>t.canvas===e)).pop()};function ma(t,e,n){const i=Object.keys(t);for(const r of i){const i=+r;if(i>=e){const o=t[r];delete t[r],(n>0||i>e)&&(t[i+n]=o)}}}class ba{constructor(t,e){const n=this.config=new oa(e),i=fa(t),r=ga(i);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas with ID '"+r.canvas.id+"' can be reused.");const o=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||function(t){return!Ki()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?No:Ko}(i)),this.platform.updateConfig(n);const a=this.platform.acquireContext(i,o.aspectRatio),s=a&&a.canvas,l=s&&s.height,c=s&&s.width;this.id=le(),this.ctx=a,this.canvas=s,this.width=c,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new qo,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let n;return function(...i){return e?(clearTimeout(n),n=setTimeout(t,e,i)):t.apply(this,i),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],pa[this.id]=this,a&&s?(br.listen(this,"complete",ha),br.listen(this,"progress",da),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:i,_aspectRatio:r}=this;return ce(t)?e&&r?r:i?n/i:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():er(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return ai(this.canvas,this.ctx),this}stop(){return br.stop(this),this}resize(t,e){br.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this.options,i=this.canvas,r=n.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(i,t,e,r),a=n.devicePixelRatio||this.platform.getDevicePixelRatio(),s=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,er(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),me(n.onResize,[this,o],this),this.attached&&this._doResize(s)&&this.render())}ensureScalesHaveIDs(){be(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,n=this.scales,i=Object.keys(n).reduce(((t,e)=>(t[e]=!1,t)),{});let r=[];e&&(r=r.concat(Object.keys(e).map((t=>{const n=e[t],i=Jo(t,n),r="r"===i,o="x"===i;return{options:n,dposition:r?"chartArea":o?"bottom":"left",dtype:r?"radialLinear":o?"category":"linear"}})))),be(r,(e=>{const r=e.options,o=r.id,a=Jo(o,r),s=pe(r.type,e.dtype);void 0!==r.position&&ca(r.position,a)===ca(e.dposition)||(r.position=e.dposition),i[o]=!0;let l=null;o in n&&n[o].type===s?l=n[o]:(l=new(lo.getScale(s))({id:o,type:s,ctx:this.ctx,chart:this}),n[l.id]=l),l.init(r,t)})),be(i,((t,e)=>{t||delete n[e]})),be(n,(t=>{Ro.configure(this,t,t.options),Ro.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,n=t.length;if(t.sort(((t,e)=>t.index-e.index)),n>e){for(let t=e;t<n;++t)this._destroyDatasetMeta(t);t.splice(e,n-e)}this._sortedMetasets=t.slice(0).sort(ua("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,n)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let n,i;for(this._removeUnreferencedMetasets(),n=0,i=e.length;n<i;n++){const i=e[n];let r=this.getDatasetMeta(n);const o=i.type||this.config.type;if(r.type&&r.type!==o&&(this._destroyDatasetMeta(n),r=this.getDatasetMeta(n)),r.type=o,r.indexAxis=i.indexAxis||Xo(o,this.options),r.order=i.order||0,r.index=n,r.label=""+i.label,r.visible=this.isDatasetVisible(n),r.controller)r.controller.updateIndex(n),r.controller.linkScales();else{const e=lo.getController(o),{datasetElementType:i,dataElementType:a}=ni.datasets[o];Object.assign(e.prototype,{dataElementType:lo.getElement(a),datasetElementType:i&&lo.getElement(i)}),r.controller=new e(this,n),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){be(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const n=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),i=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),n=!i&&-1===r.indexOf(e);e.buildOrUpdateElements(n),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=n.layout.autoPadding?o:0,this._updateLayout(o),i||be(r,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(ua("z","_idx"));const{_active:a,_lastEvent:s}=this;s?this._eventHandler(s,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){be(this.scales,(t=>{Ro.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),n=new Set(t.events);Le(e,n)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:n,start:i,count:r}of e)ma(t,i,"_removeElements"===n?-r:r)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,n=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),i=n(0);for(let t=1;t<e;t++)if(!Le(i,n(t)))return;return Array.from(i).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Ro.update(this,this.width,this.height,t);const e=this.chartArea,n=e.width<=0||e.height<=0;this._layers=[],be(this.boxes,(t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,n=this.data.datasets.length;e<n;++e)this._updateDataset(e,Me(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this.getDatasetMeta(t),i={meta:n,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",i)&&(n.controller._update(e),i.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",i))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(br.has(this)?this.attached&&!br.running(this)&&br.start(this):(this.draw(),ha({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let i,r;for(i=0,r=e.length;i<r;++i){const r=e[i];t&&!r.visible||n.push(r)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,n=t._clip,i=!n.disabled,r=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(i&&ui(e,{left:!1===n.left?0:r.left-n.left,right:!1===n.right?this.width:r.right+n.right,top:!1===n.top?0:r.top-n.top,bottom:!1===n.bottom?this.height:r.bottom+n.bottom}),t.controller.draw(),i&&hi(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return ci(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,n,i){const r=vo.modes[e];return"function"==typeof r?r(this,t,n,i):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let i=n.filter((t=>t&&t._dataset===e)).pop();return i||(i={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(i)),i}getContext(){return this.$context||(this.$context=Oi(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const i=n?"show":"hide",r=this.getDatasetMeta(t),o=r.controller._resolveAnimations(void 0,i);Pe(e)?(r.data[e].hidden=!n,this.update()):(this.setDatasetVisibility(t,n),o.update(r,{visible:n}),this.update((e=>e.datasetIndex===t?i:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),br.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),ai(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete pa[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(t,e,n)=>{t.offsetX=e,t.offsetY=n,this._eventHandler(t)};be(this.options.events,(t=>n(t,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(n,i)=>{t[n]&&(e.removeEventListener(this,n,i),delete t[n])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{i("attach",a),this.attached=!0,this.resize(),n("resize",r),n("detach",o)};o=()=>{this.attached=!1,i("resize",r),this._stop(),this._resize(0,0),n("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){be(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},be(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,n){const i=n?"set":"remove";let r,o,a,s;for("dataset"===e&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+i+"DatasetHoverStyle"]()),a=0,s=t.length;a<s;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[i+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],n=t.map((({datasetIndex:t,index:e})=>{const n=this.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[e],index:e}}));!ye(n,e)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,e))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}_updateHoverStyles(t,e,n){const i=this.options.hover,r=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=r(e,t),a=n?t:r(t,e);o.length&&this.updateHoverStyle(o,i.mode,!1),a.length&&i.mode&&this.updateHoverStyle(a,i.mode,!0)}_eventHandler(t,e){const n={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},i=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",n,i))return;const r=this._handleEvent(t,e,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,i),(r||n.changed)&&this.render(),this}_handleEvent(t,e,n){const{_active:i=[],options:r}=this,o=e,a=this._getActiveElements(t,i,n,o),s=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,n,i){return n&&"mouseout"!==t.type?i?e:t:null}(t,this._lastEvent,n,s);n&&(this._lastEvent=null,me(r.onHover,[t,a,this],this),s&&me(r.onClick,[t,a,this],this));const c=!ye(a,i);return(c||e)&&(this._active=a,this._updateHoverStyles(a,i,e)),this._lastEvent=l,c}_getActiveElements(t,e,n,i){if("mouseout"===t.type)return[];if(!n)return e;const r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,i)}}const ya=()=>be(ba.instances,(t=>t._plugins.invalidate())),va=!0;function xa(t,e,n){const{startAngle:i,pixelMargin:r,x:o,y:a,outerRadius:s,innerRadius:l}=e;let c=r/s;t.beginPath(),t.arc(o,a,s,i-c,n+c),l>r?(c=r/l,t.arc(o,a,l,n+c,i-c,!0)):t.arc(o,a,r,n+Ie,i-Ie),t.closePath(),t.clip()}function wa(t,e,n,i){return{x:n+t*Math.cos(e),y:i+t*Math.sin(e)}}function _a(t,e,n,i,r,o){const{x:a,y:s,startAngle:l,pixelMargin:c,innerRadius:u}=e,h=Math.max(e.outerRadius+i+n-c,0),d=u>0?u+i+n+c:0;let f=0;const p=r-l;if(i){const t=((u>0?u-i:0)+(h>0?h-i:0))/2;f=(p-(0!==t?p*t/(t+i):p))/2}const g=(p-Math.max(.001,p*h-n/Re)/h)/2,m=l+g+f,b=r-g-f,{outerStart:y,outerEnd:v,innerStart:x,innerEnd:w}=function(t,e,n,i){const r=xi(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(n-e)/2,a=Math.min(o,i*e/2),s=t=>{const e=(n-Math.min(o,t))*i/2;return Ze(t,0,Math.min(o,e))};return{outerStart:s(r.outerStart),outerEnd:s(r.outerEnd),innerStart:Ze(r.innerStart,0,a),innerEnd:Ze(r.innerEnd,0,a)}}(e,d,h,b-m),_=h-y,k=h-v,S=m+y/_,E=b-v/k,O=d+x,C=d+w,P=m+x/O,M=b-w/C;if(t.beginPath(),o){if(t.arc(a,s,h,S,E),v>0){const e=wa(k,E,a,s);t.arc(e.x,e.y,v,E,b+Ie)}const e=wa(C,b,a,s);if(t.lineTo(e.x,e.y),w>0){const e=wa(C,M,a,s);t.arc(e.x,e.y,w,b+Ie,M+Math.PI)}if(t.arc(a,s,d,b-w/d,m+x/d,!0),x>0){const e=wa(O,P,a,s);t.arc(e.x,e.y,x,P+Math.PI,m-Ie)}const n=wa(_,m,a,s);if(t.lineTo(n.x,n.y),y>0){const e=wa(_,S,a,s);t.arc(e.x,e.y,y,m-Ie,S)}}else{t.moveTo(a,s);const e=Math.cos(S)*h+a,n=Math.sin(S)*h+s;t.lineTo(e,n);const i=Math.cos(E)*h+a,r=Math.sin(E)*h+s;t.lineTo(i,r)}t.closePath()}Object.defineProperties(ba,{defaults:{enumerable:va,value:ni},instances:{enumerable:va,value:pa},overrides:{enumerable:va,value:Jn},registry:{enumerable:va,value:lo},version:{enumerable:va,value:"3.9.1"},getChart:{enumerable:va,value:ga},register:{enumerable:va,value:(...t)=>{lo.add(...t),ya()}},unregister:{enumerable:va,value:(...t)=>{lo.remove(...t),ya()}}});class ka extends Qr{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.getProps(["x","y"],n),{angle:r,distance:o}=qe(i,{x:t,y:e}),{startAngle:a,endAngle:s,innerRadius:l,outerRadius:c,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),h=this.options.spacing/2,d=pe(u,s-a)>=Te||Je(r,a,s),f=tn(o,l+h,c+h);return d&&f}getCenterPoint(t){const{x:e,y:n,startAngle:i,endAngle:r,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:s,spacing:l}=this.options,c=(i+r)/2,u=(o+a+l+s)/2;return{x:e+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:n}=this,i=(e.offset||0)/2,r=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=n>Te?Math.floor(n/Te):0,0===n||this.innerRadius<0||this.outerRadius<0)return;t.save();let a=0;if(i){a=i/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*a,Math.sin(e)*a),this.circumference>=Re&&(a=i)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const s=function(t,e,n,i,r){const{fullCircles:o,startAngle:a,circumference:s}=e;let l=e.endAngle;if(o){_a(t,e,n,i,a+Te,r);for(let e=0;e<o;++e)t.fill();isNaN(s)||(l=a+s%Te,s%Te==0&&(l+=Te))}return _a(t,e,n,i,l,r),t.fill(),l}(t,this,a,r,o);(function(t,e,n,i,r,o){const{options:a}=e,{borderWidth:s,borderJoinStyle:l}=a,c="inner"===a.borderAlign;s&&(c?(t.lineWidth=2*s,t.lineJoin=l||"round"):(t.lineWidth=s,t.lineJoin=l||"bevel"),e.fullCircles&&function(t,e,n){const{x:i,y:r,startAngle:o,pixelMargin:a,fullCircles:s}=e,l=Math.max(e.outerRadius-a,0),c=e.innerRadius+a;let u;for(n&&xa(t,e,o+Te),t.beginPath(),t.arc(i,r,c,o+Te,o,!0),u=0;u<s;++u)t.stroke();for(t.beginPath(),t.arc(i,r,l,o,o+Te),u=0;u<s;++u)t.stroke()}(t,e,c),c&&xa(t,e,r),_a(t,e,n,i,r,o),t.stroke())})(t,this,a,r,s,o),t.restore()}}function Sa(t,e,n=e){t.lineCap=pe(n.borderCapStyle,e.borderCapStyle),t.setLineDash(pe(n.borderDash,e.borderDash)),t.lineDashOffset=pe(n.borderDashOffset,e.borderDashOffset),t.lineJoin=pe(n.borderJoinStyle,e.borderJoinStyle),t.lineWidth=pe(n.borderWidth,e.borderWidth),t.strokeStyle=pe(n.borderColor,e.borderColor)}function Ea(t,e,n){t.lineTo(n.x,n.y)}function Oa(t,e,n={}){const i=t.length,{start:r=0,end:o=i-1}=n,{start:a,end:s}=e,l=Math.max(r,a),c=Math.min(o,s),u=r<a&&o<a||r>s&&o>s;return{count:i,start:l,loop:e.loop,ilen:c<l&&!u?i+c-l:c-l}}function Ca(t,e,n,i){const{points:r,options:o}=e,{count:a,start:s,loop:l,ilen:c}=Oa(r,n,i),u=function(t){return t.stepped?di:t.tension||"monotone"===t.cubicInterpolationMode?fi:Ea}(o);let h,d,f,{move:p=!0,reverse:g}=i||{};for(h=0;h<=c;++h)d=r[(s+(g?c-h:h))%a],d.skip||(p?(t.moveTo(d.x,d.y),p=!1):u(t,f,d,g,o.stepped),f=d);return l&&(d=r[(s+(g?c:0))%a],u(t,f,d,g,o.stepped)),!!l}function Pa(t,e,n,i){const r=e.points,{count:o,start:a,ilen:s}=Oa(r,n,i),{move:l=!0,reverse:c}=i||{};let u,h,d,f,p,g,m=0,b=0;const y=t=>(a+(c?s-t:t))%o,v=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(h=r[y(0)],t.moveTo(h.x,h.y)),u=0;u<=s;++u){if(h=r[y(u)],h.skip)continue;const e=h.x,n=h.y,i=0|e;i===d?(n<f?f=n:n>p&&(p=n),m=(b*m+e)/++b):(v(),t.lineTo(e,n),d=i,b=0,f=p=n),g=n}v()}function Ma(t){const e=t.options,n=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||n?Ca:Pa}ka.id="arc",ka.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0},ka.defaultRoutes={backgroundColor:"backgroundColor"};const La="function"==typeof Path2D;class Ra extends Qr{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const i=n.spanGaps?this._loop:this._fullLoop;Yi(this._points,n,t,i,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const n=t.points,i=t.options.spanGaps,r=n.length;if(!r)return[];const o=!!t._loop,{start:a,end:s}=function(t,e,n,i){let r=0,o=e-1;if(n&&!i)for(;r<e&&!t[r].skip;)r++;for(;r<e&&t[r].skip;)r++;for(r%=e,n&&(o+=r);o>r&&t[o%e].skip;)o--;return o%=e,{start:r,end:o}}(n,r,o,i);return function(t,e,n,i){return i&&i.setContext&&n?function(t,e,n,i){const r=t._chart.getContext(),o=gr(t.options),{_datasetIndex:a,options:{spanGaps:s}}=t,l=n.length,c=[];let u=o,h=e[0].start,d=h;function f(t,e,i,r){const o=s?-1:1;if(t!==e){for(t+=l;n[t%l].skip;)t-=o;for(;n[e%l].skip;)e+=o;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:i,style:r}),u=r,h=e%l)}}for(const t of e){h=s?h:t.start;let e,o=n[h%l];for(d=h+1;d<=t.end;d++){const s=n[d%l];e=gr(i.setContext(Oi(r,{type:"segment",p0:o,p1:s,p0DataIndex:(d-1)%l,p1DataIndex:d%l,datasetIndex:a}))),mr(e,u)&&f(h,d-1,t.loop,u),o=s,u=e}h<d-1&&f(h,d-1,t.loop,u)}return c}(t,e,n,i):e}(t,!0===i?[{start:a,end:s,loop:o}]:function(t,e,n,i){const r=t.length,o=[];let a,s=e,l=t[e];for(a=e+1;a<=n;++a){const n=t[a%r];n.skip||n.stop?l.skip||(i=!1,o.push({start:e%r,end:(a-1)%r,loop:i}),e=s=n.stop?a:null):(s=a,l.skip&&(e=a)),l=n}return null!==s&&o.push({start:e%r,end:s%r,loop:i}),o}(n,a,s<a?s+r:s,!!t._fullLoop&&0===a&&s===r-1),n,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,n=t.length;return n&&e[t[n-1].end]}interpolate(t,e){const n=this.options,i=t[e],r=this.points,o=function(t,e){const n=[],i=t.segments;for(let r=0;r<i.length;r++){const o=pr(i[r],t.points,e);o.length&&n.push(...o)}return n}(this,{property:e,start:i,end:i});if(!o.length)return;const a=[],s=function(t){return t.stepped?or:t.tension||"monotone"===t.cubicInterpolationMode?ar:rr}(n);let l,c;for(l=0,c=o.length;l<c;++l){const{start:c,end:u}=o[l],h=r[c],d=r[u];if(h===d){a.push(h);continue}const f=s(h,d,Math.abs((i-h[e])/(d[e]-h[e])),n.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,n){return Ma(this)(t,this,e,n)}path(t,e,n){const i=this.segments,r=Ma(this);let o=this._loop;e=e||0,n=n||this.points.length-e;for(const a of i)o&=r(t,this,a,{start:e,end:e+n-1});return!!o}draw(t,e,n,i){const r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),function(t,e,n,i){La&&!e.options.segment?function(t,e,n,i){let r=e._path;r||(r=e._path=new Path2D,e.path(r,n,i)&&r.closePath()),Sa(t,e.options),t.stroke(r)}(t,e,n,i):function(t,e,n,i){const{segments:r,options:o}=e,a=Ma(e);for(const s of r)Sa(t,o,s.style),t.beginPath(),a(t,e,s,{start:n,end:n+i-1})&&t.closePath(),t.stroke()}(t,e,n,i)}(t,this,n,i),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Ta(t,e,n,i){const r=t.options,{[n]:o}=t.getProps([n],i);return Math.abs(e-o)<r.radius+r.hitRadius}Ra.id="line",Ra.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Ra.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Ra.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class Na extends Qr{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.options,{x:r,y:o}=this.getProps(["x","y"],n);return Math.pow(t-r,2)+Math.pow(e-o,2)<Math.pow(i.hitRadius+i.radius,2)}inXRange(t,e){return Ta(this,t,"x",e)}inYRange(t,e){return Ta(this,t,"y",e)}getCenterPoint(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const n=this.options;this.skip||n.radius<.1||!ci(this,e,this.size(n)/2)||(t.strokeStyle=n.borderColor,t.lineWidth=n.borderWidth,t.fillStyle=n.backgroundColor,si(t,n,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Da(t,e){const{x:n,y:i,base:r,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let s,l,c,u,h;return t.horizontal?(h=a/2,s=Math.min(n,r),l=Math.max(n,r),c=i-h,u=i+h):(h=o/2,s=n-h,l=n+h,c=Math.min(i,r),u=Math.max(i,r)),{left:s,top:c,right:l,bottom:u}}function Aa(t,e,n,i){return t?0:Ze(e,n,i)}function Ia(t,e,n,i){const r=null===e,o=null===n,a=t&&!(r&&o)&&Da(t,i);return a&&(r||tn(e,a.left,a.right))&&(o||tn(n,a.top,a.bottom))}function ja(t,e){t.rect(e.x,e.y,e.w,e.h)}function Fa(t,e,n={}){const i=t.x!==n.x?-e:0,r=t.y!==n.y?-e:0,o=(t.x+t.w!==n.x+n.w?e:0)-i,a=(t.y+t.h!==n.y+n.h?e:0)-r;return{x:t.x+i,y:t.y+r,w:t.w+o,h:t.h+a,radius:t.radius}}Na.id="point",Na.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Na.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class za extends Qr{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:n,backgroundColor:i}}=this,{inner:r,outer:o}=function(t){const e=Da(t),n=e.right-e.left,i=e.bottom-e.top,r=function(t,e,n){const i=t.options.borderWidth,r=t.borderSkipped,o=wi(i);return{t:Aa(r.top,o.top,0,n),r:Aa(r.right,o.right,0,e),b:Aa(r.bottom,o.bottom,0,n),l:Aa(r.left,o.left,0,e)}}(t,n/2,i/2),o=function(t,e,n){const{enableBorderRadius:i}=t.getProps(["enableBorderRadius"]),r=t.options.borderRadius,o=_i(r),a=Math.min(e,n),s=t.borderSkipped,l=i||he(r);return{topLeft:Aa(!l||s.top||s.left,o.topLeft,0,a),topRight:Aa(!l||s.top||s.right,o.topRight,0,a),bottomLeft:Aa(!l||s.bottom||s.left,o.bottomLeft,0,a),bottomRight:Aa(!l||s.bottom||s.right,o.bottomRight,0,a)}}(t,n/2,i/2);return{outer:{x:e.left,y:e.top,w:n,h:i,radius:o},inner:{x:e.left+r.l,y:e.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,o.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(r.b,r.r))}}}}(this),a=(s=o.radius).topLeft||s.topRight||s.bottomLeft||s.bottomRight?mi:ja;var s;t.save(),o.w===r.w&&o.h===r.h||(t.beginPath(),a(t,Fa(o,e,r)),t.clip(),a(t,Fa(r,-e,o)),t.fillStyle=n,t.fill("evenodd")),t.beginPath(),a(t,Fa(r,e)),t.fillStyle=i,t.fill(),t.restore()}inRange(t,e,n){return Ia(this,t,e,n)}inXRange(t,e){return Ia(this,t,null,e)}inYRange(t,e){return Ia(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:i,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(e+i)/2:e,y:r?n:(n+i)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}za.id="bar",za.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},za.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};const Va=(t,e)=>{let{boxHeight:n=e,boxWidth:i=e}=t;return t.usePointStyle&&(n=Math.min(n,e),i=t.pointStyleWidth||Math.min(i,e)),{boxWidth:i,boxHeight:n,itemHeight:Math.max(e,n)}};class Ba extends Qr{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){this.maxWidth=t,this.maxHeight=e,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=me(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,n)=>t.sort(e,n,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const n=t.labels,i=Si(n.font),r=i.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:s}=Va(n,r);let l,c;e.font=i.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(o,r,a,s)+10):(c=this.maxHeight,l=this._fitCols(o,r,a,s)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,n,i){const{ctx:r,maxWidth:o,options:{labels:{padding:a}}}=this,s=this.legendHitBoxes=[],l=this.lineWidths=[0],c=i+a;let u=t;r.textAlign="left",r.textBaseline="middle";let h=-1,d=-c;return this.legendItems.forEach(((t,f)=>{const p=n+e/2+r.measureText(t.text).width;(0===f||l[l.length-1]+p+2*a>o)&&(u+=c,l[l.length-(f>0?0:1)]=0,d+=c,h++),s[f]={left:0,top:d,row:h,width:p,height:i},l[l.length-1]+=p+a})),u}_fitCols(t,e,n,i){const{ctx:r,maxHeight:o,options:{labels:{padding:a}}}=this,s=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let u=a,h=0,d=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const g=n+e/2+r.measureText(t.text).width;o>0&&d+i+2*a>c&&(u+=h+a,l.push({width:h,height:d}),f+=h+a,p++,h=d=0),s[o]={left:f,top:d,col:p,width:g,height:i},h=Math.max(h,g),d+=i+a})),u+=h,l.push({width:h,height:d}),u}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:n,labels:{padding:i},rtl:r}}=this,o=cr(r,this.left,this.width);if(this.isHorizontal()){let r=0,a=hn(n,this.left+i,this.right-this.lineWidths[r]);for(const s of e)r!==s.row&&(r=s.row,a=hn(n,this.left+i,this.right-this.lineWidths[r])),s.top+=this.top+t+i,s.left=o.leftForLtr(o.x(a),s.width),a+=s.width+i}else{let r=0,a=hn(n,this.top+t+i,this.bottom-this.columnSizes[r].height);for(const s of e)s.col!==r&&(r=s.col,a=hn(n,this.top+t+i,this.bottom-this.columnSizes[r].height)),s.top=a,s.left+=this.left+i,s.left=o.leftForLtr(o.x(s.left),s.width),a+=s.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;ui(t,this),this._draw(),hi(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:n,ctx:i}=this,{align:r,labels:o}=t,a=ni.color,s=cr(t.rtl,this.left,this.width),l=Si(o.font),{color:c,padding:u}=o,h=l.size,d=h/2;let f;this.drawTitle(),i.textAlign=s.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=l.string;const{boxWidth:p,boxHeight:g,itemHeight:m}=Va(o,h),b=this.isHorizontal(),y=this._computeTitleHeight();f=b?{x:hn(r,this.left+u,this.right-n[0]),y:this.top+u+y,line:0}:{x:this.left+u,y:hn(r,this.top+y+u,this.bottom-e[0].height),line:0},ur(this.ctx,t.textDirection);const v=m+u;this.legendItems.forEach(((x,w)=>{i.strokeStyle=x.fontColor||c,i.fillStyle=x.fontColor||c;const _=i.measureText(x.text).width,k=s.textAlign(x.textAlign||(x.textAlign=o.textAlign)),S=p+d+_;let E=f.x,O=f.y;s.setWidth(this.width),b?w>0&&E+S+u>this.right&&(O=f.y+=v,f.line++,E=f.x=hn(r,this.left+u,this.right-n[f.line])):w>0&&O+v>this.bottom&&(E=f.x=E+e[f.line].width+u,f.line++,O=f.y=hn(r,this.top+y+u,this.bottom-e[f.line].height)),function(t,e,n){if(isNaN(p)||p<=0||isNaN(g)||g<0)return;i.save();const r=pe(n.lineWidth,1);if(i.fillStyle=pe(n.fillStyle,a),i.lineCap=pe(n.lineCap,"butt"),i.lineDashOffset=pe(n.lineDashOffset,0),i.lineJoin=pe(n.lineJoin,"miter"),i.lineWidth=r,i.strokeStyle=pe(n.strokeStyle,a),i.setLineDash(pe(n.lineDash,[])),o.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},l=s.xPlus(t,p/2);li(i,a,l,e+d,o.pointStyleWidth&&p)}else{const o=e+Math.max((h-g)/2,0),a=s.leftForLtr(t,p),l=_i(n.borderRadius);i.beginPath(),Object.values(l).some((t=>0!==t))?mi(i,{x:a,y:o,w:p,h:g,radius:l}):i.rect(a,o,p,g),i.fill(),0!==r&&i.stroke()}i.restore()}(s.x(E),O,x),E=((t,e,n,i)=>t===(i?"left":"right")?n:"center"===t?(e+n)/2:e)(k,E+p+d,b?E+S:this.right,t.rtl),function(t,e,n){pi(i,n.text,t,e+m/2,l,{strikethrough:n.hidden,textAlign:s.textAlign(n.textAlign)})}(s.x(E),O,x),b?f.x+=S+u:f.y+=v})),hr(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,n=Si(e.font),i=ki(e.padding);if(!e.display)return;const r=cr(t.rtl,this.left,this.width),o=this.ctx,a=e.position,s=n.size/2,l=i.top+s;let c,u=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),c=this.top+l,u=hn(t.align,u,this.right-h);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+hn(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const d=hn(a,u,u+h);o.textAlign=r.textAlign(un(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=n.string,pi(o,e.text,d,c,n)}_computeTitleHeight(){const t=this.options.title,e=Si(t.font),n=ki(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){let n,i,r;if(tn(t,this.left,this.right)&&tn(e,this.top,this.bottom))for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(i=r[n],tn(t,i.left,i.left+i.width)&&tn(e,i.top,i.top+i.height))return this.legendItems[n];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const n=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(r=n,null!==(i=o)&&null!==r&&i.datasetIndex===r.datasetIndex&&i.index===r.index);o&&!a&&me(e.onLeave,[t,o,this],this),this._hoveredItem=n,n&&!a&&me(e.onHover,[t,n,this],this)}else n&&me(e.onClick,[t,n,this],this);var i,r}}var Ha={id:"legend",_element:Ba,start(t,e,n){const i=t.legend=new Ba({ctx:t.ctx,options:n,chart:t});Ro.configure(t,i,n),Ro.addBox(t,i)},stop(t){Ro.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const i=t.legend;Ro.configure(t,i,n),i.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const i=e.datasetIndex,r=n.chart;r.isDatasetVisible(i)?(r.hide(i),e.hidden=!0):(r.show(i),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:r,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const a=t.controller.getStyle(n?0:void 0),s=ki(a.borderWidth);return{text:e[t.index].label,fillStyle:a.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(s.width+s.height)/4,strokeStyle:a.borderColor,pointStyle:i||a.pointStyle,rotation:a.rotation,textAlign:r||a.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Wa extends Qr{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const i=ue(n.text)?n.text.length:1;this._padding=ki(n.padding);const r=i*Si(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:i,right:r,options:o}=this,a=o.align;let s,l,c,u=0;return this.isHorizontal()?(l=hn(a,n,r),c=e+t,s=r-n):("left"===o.position?(l=n+t,c=hn(a,i,e),u=-.5*Re):(l=r-t,c=hn(a,e,i),u=.5*Re),s=i-e),{titleX:l,titleY:c,maxWidth:s,rotation:u}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const n=Si(e.font),i=n.lineHeight/2+this._padding.top,{titleX:r,titleY:o,maxWidth:a,rotation:s}=this._drawArgs(i);pi(t,e.text,0,0,n,{color:e.color,maxWidth:a,rotation:s,textAlign:un(e.align),textBaseline:"middle",translation:[r,o]})}}var Ua={id:"title",_element:Wa,start(t,e,n){!function(t,e){const n=new Wa({ctx:t.ctx,options:e,chart:t});Ro.configure(t,n,e),Ro.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;Ro.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const i=t.titleBlock;Ro.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};new WeakMap;const $a={average(t){if(!t.length)return!1;let e,n,i=0,r=0,o=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();i+=t.x,r+=t.y,++o}}return{x:i/o,y:r/o}},nearest(t,e){if(!t.length)return!1;let n,i,r,o=e.x,a=e.y,s=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){const i=t[n].element;if(i&&i.hasValue()){const t=Ge(e,i.getCenterPoint());t<s&&(s=t,r=i)}}if(r){const t=r.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function Ya(t,e){return e&&(ue(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Ka(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function qa(t,e){const{element:n,datasetIndex:i,index:r}=e,o=t.getDatasetMeta(i).controller,{label:a,value:s}=o.getLabelAndValue(r);return{chart:t,label:a,parsed:o.getParsed(r),raw:t.data.datasets[i].data[r],formattedValue:s,dataset:o.getDataset(),dataIndex:r,datasetIndex:i,element:n}}function Ga(t,e){const n=t.chart.ctx,{body:i,footer:r,title:o}=t,{boxWidth:a,boxHeight:s}=e,l=Si(e.bodyFont),c=Si(e.titleFont),u=Si(e.footerFont),h=o.length,d=r.length,f=i.length,p=ki(e.padding);let g=p.height,m=0,b=i.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,h&&(g+=h*c.lineHeight+(h-1)*e.titleSpacing+e.titleMarginBottom),b&&(g+=f*(e.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(b-f)*l.lineHeight+(b-1)*e.bodySpacing),d&&(g+=e.footerMarginTop+d*u.lineHeight+(d-1)*e.footerSpacing);let y=0;const v=function(t){m=Math.max(m,n.measureText(t).width+y)};return n.save(),n.font=c.string,be(t.title,v),n.font=l.string,be(t.beforeBody.concat(t.afterBody),v),y=e.displayColors?a+2+e.boxPadding:0,be(i,(t=>{be(t.before,v),be(t.lines,v),be(t.after,v)})),y=0,n.font=u.string,be(t.footer,v),n.restore(),m+=p.width,{width:m,height:g}}function Qa(t,e,n,i){const{x:r,width:o}=n,{width:a,chartArea:{left:s,right:l}}=t;let c="center";return"center"===i?c=r<=(s+l)/2?"left":"right":r<=o/2?c="left":r>=a-o/2&&(c="right"),function(t,e,n,i){const{x:r,width:o}=i,a=n.caretSize+n.caretPadding;return"left"===t&&r+o+a>e.width||"right"===t&&r-o-a<0||void 0}(c,t,e,n)&&(c="center"),c}function Xa(t,e,n){const i=n.yAlign||e.yAlign||function(t,e){const{y:n,height:i}=e;return n<i/2?"top":n>t.height-i/2?"bottom":"center"}(t,n);return{xAlign:n.xAlign||e.xAlign||Qa(t,e,n,i),yAlign:i}}function Ja(t,e,n,i){const{caretSize:r,caretPadding:o,cornerRadius:a}=t,{xAlign:s,yAlign:l}=n,c=r+o,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=_i(a);let p=function(t,e){let{x:n,width:i}=t;return"right"===e?n-=i:"center"===e&&(n-=i/2),n}(e,s);const g=function(t,e,n){let{y:i,height:r}=t;return"top"===e?i+=n:i-="bottom"===e?r+n:r/2,i}(e,l,c);return"center"===l?"left"===s?p+=c:"right"===s&&(p-=c):"left"===s?p-=Math.max(u,d)+r:"right"===s&&(p+=Math.max(h,f)+r),{x:Ze(p,0,i.width-e.width),y:Ze(g,0,i.height-e.height)}}function Za(t,e,n){const i=ki(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-i.right:t.x+i.left}function ts(t){return Ya([],Ka(t))}function es(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}class ns extends Qr{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,n=this.options.setContext(this.getContext()),i=n.enabled&&e.options.animation&&n.animations,r=new _r(this.chart,i);return i._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=(this,Oi(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:n}=e,i=n.beforeTitle.apply(this,[t]),r=n.title.apply(this,[t]),o=n.afterTitle.apply(this,[t]);let a=[];return a=Ya(a,Ka(i)),a=Ya(a,Ka(r)),a=Ya(a,Ka(o)),a}getBeforeBody(t,e){return ts(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:n}=e,i=[];return be(t,(t=>{const e={before:[],lines:[],after:[]},r=es(n,t);Ya(e.before,Ka(r.beforeLabel.call(this,t))),Ya(e.lines,r.label.call(this,t)),Ya(e.after,Ka(r.afterLabel.call(this,t))),i.push(e)})),i}getAfterBody(t,e){return ts(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:n}=e,i=n.beforeFooter.apply(this,[t]),r=n.footer.apply(this,[t]),o=n.afterFooter.apply(this,[t]);let a=[];return a=Ya(a,Ka(i)),a=Ya(a,Ka(r)),a=Ya(a,Ka(o)),a}_createItems(t){const e=this._active,n=this.chart.data,i=[],r=[],o=[];let a,s,l=[];for(a=0,s=e.length;a<s;++a)l.push(qa(this.chart,e[a]));return t.filter&&(l=l.filter(((e,i,r)=>t.filter(e,i,r,n)))),t.itemSort&&(l=l.sort(((e,i)=>t.itemSort(e,i,n)))),be(l,(e=>{const n=es(t.callbacks,e);i.push(n.labelColor.call(this,e)),r.push(n.labelPointStyle.call(this,e)),o.push(n.labelTextColor.call(this,e))})),this.labelColors=i,this.labelPointStyles=r,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const n=this.options.setContext(this.getContext()),i=this._active;let r,o=[];if(i.length){const t=$a[n.position].call(this,i,this._eventPosition);o=this._createItems(n),this.title=this.getTitle(o,n),this.beforeBody=this.getBeforeBody(o,n),this.body=this.getBody(o,n),this.afterBody=this.getAfterBody(o,n),this.footer=this.getFooter(o,n);const e=this._size=Ga(this,n),a=Object.assign({},t,e),s=Xa(this.chart,n,a),l=Ja(n,a,s,this.chart);this.xAlign=s.xAlign,this.yAlign=s.yAlign,r={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(r={opacity:0});this._tooltipItems=o,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,n,i){const r=this.getCaretPosition(t,n,i);e.lineTo(r.x1,r.y1),e.lineTo(r.x2,r.y2),e.lineTo(r.x3,r.y3)}getCaretPosition(t,e,n){const{xAlign:i,yAlign:r}=this,{caretSize:o,cornerRadius:a}=n,{topLeft:s,topRight:l,bottomLeft:c,bottomRight:u}=_i(a),{x:h,y:d}=t,{width:f,height:p}=e;let g,m,b,y,v,x;return"center"===r?(v=d+p/2,"left"===i?(g=h,m=g-o,y=v+o,x=v-o):(g=h+f,m=g+o,y=v-o,x=v+o),b=g):(m="left"===i?h+Math.max(s,c)+o:"right"===i?h+f-Math.max(l,u)-o:this.caretX,"top"===r?(y=d,v=y-o,g=m-o,b=m+o):(y=d+p,v=y+o,g=m+o,b=m-o),x=y),{x1:g,x2:m,x3:b,y1:y,y2:v,y3:x}}drawTitle(t,e,n){const i=this.title,r=i.length;let o,a,s;if(r){const l=cr(n.rtl,this.x,this.width);for(t.x=Za(this,n.titleAlign,n),e.textAlign=l.textAlign(n.titleAlign),e.textBaseline="middle",o=Si(n.titleFont),a=n.titleSpacing,e.fillStyle=n.titleColor,e.font=o.string,s=0;s<r;++s)e.fillText(i[s],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,s+1===r&&(t.y+=n.titleMarginBottom-a)}}_drawColorBox(t,e,n,i,r){const o=this.labelColors[n],a=this.labelPointStyles[n],{boxHeight:s,boxWidth:l,boxPadding:c}=r,u=Si(r.bodyFont),h=Za(this,"left",r),d=i.x(h),f=s<u.lineHeight?(u.lineHeight-s)/2:0,p=e.y+f;if(r.usePointStyle){const e={radius:Math.min(l,s)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},n=i.leftForLtr(d,l)+l/2,c=p+s/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,si(t,e,n,c),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,si(t,e,n,c)}else{t.lineWidth=he(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=i.leftForLtr(d,l-c),n=i.leftForLtr(i.xPlus(d,1),l-c-2),a=_i(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=r.multiKeyBackground,mi(t,{x:e,y:p,w:l,h:s,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),mi(t,{x:n,y:p+1,w:l-2,h:s-2,radius:a}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(e,p,l,s),t.strokeRect(e,p,l,s),t.fillStyle=o.backgroundColor,t.fillRect(n,p+1,l-2,s-2))}t.fillStyle=this.labelTextColors[n]}drawBody(t,e,n){const{body:i}=this,{bodySpacing:r,bodyAlign:o,displayColors:a,boxHeight:s,boxWidth:l,boxPadding:c}=n,u=Si(n.bodyFont);let h=u.lineHeight,d=0;const f=cr(n.rtl,this.x,this.width),p=function(n){e.fillText(n,f.x(t.x+d),t.y+h/2),t.y+=h+r},g=f.textAlign(o);let m,b,y,v,x,w,_;for(e.textAlign=o,e.textBaseline="middle",e.font=u.string,t.x=Za(this,g,n),e.fillStyle=n.bodyColor,be(this.beforeBody,p),d=a&&"right"!==g?"center"===o?l/2+c:l+2+c:0,v=0,w=i.length;v<w;++v){for(m=i[v],b=this.labelTextColors[v],e.fillStyle=b,be(m.before,p),y=m.lines,a&&y.length&&(this._drawColorBox(e,t,v,f,n),h=Math.max(u.lineHeight,s)),x=0,_=y.length;x<_;++x)p(y[x]),h=u.lineHeight;be(m.after,p)}d=0,h=u.lineHeight,be(this.afterBody,p),t.y-=r}drawFooter(t,e,n){const i=this.footer,r=i.length;let o,a;if(r){const s=cr(n.rtl,this.x,this.width);for(t.x=Za(this,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=s.textAlign(n.footerAlign),e.textBaseline="middle",o=Si(n.footerFont),e.fillStyle=n.footerColor,e.font=o.string,a=0;a<r;++a)e.fillText(i[a],s.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+n.footerSpacing}}drawBackground(t,e,n,i){const{xAlign:r,yAlign:o}=this,{x:a,y:s}=t,{width:l,height:c}=n,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=_i(i.cornerRadius);e.fillStyle=i.backgroundColor,e.strokeStyle=i.borderColor,e.lineWidth=i.borderWidth,e.beginPath(),e.moveTo(a+u,s),"top"===o&&this.drawCaret(t,e,n,i),e.lineTo(a+l-h,s),e.quadraticCurveTo(a+l,s,a+l,s+h),"center"===o&&"right"===r&&this.drawCaret(t,e,n,i),e.lineTo(a+l,s+c-f),e.quadraticCurveTo(a+l,s+c,a+l-f,s+c),"bottom"===o&&this.drawCaret(t,e,n,i),e.lineTo(a+d,s+c),e.quadraticCurveTo(a,s+c,a,s+c-d),"center"===o&&"left"===r&&this.drawCaret(t,e,n,i),e.lineTo(a,s+u),e.quadraticCurveTo(a,s,a+u,s),e.closePath(),e.fill(),i.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,n=this.$animations,i=n&&n.x,r=n&&n.y;if(i||r){const n=$a[t.position].call(this,this._active,this._eventPosition);if(!n)return;const o=this._size=Ga(this,t),a=Object.assign({},n,this._size),s=Xa(e,t,a),l=Ja(t,a,s,e);i._to===l.x&&r._to===l.y||(this.xAlign=s.xAlign,this.yAlign=s.yAlign,this.width=o.width,this.height=o.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(e);const i={width:this.width,height:this.height},r={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const o=ki(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=n,this.drawBackground(r,t,i,e),ur(t,e.textDirection),r.y+=o.top,this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),hr(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this._active,i=t.map((({datasetIndex:t,index:e})=>{const n=this.chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}})),r=!ye(n,i),o=this._positionChanged(i,e);(r||o)&&(this._active=i,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,n=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const i=this.options,r=this._active||[],o=this._getActiveElements(t,r,e,n),a=this._positionChanged(o,t),s=e||!ye(o,r)||a;return s&&(this._active=o,(i.enabled||i.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),s}_getActiveElements(t,e,n,i){const r=this.options;if("mouseout"===t.type)return[];if(!i)return e;const o=this.chart.getElementsAtEventForMode(t,r.mode,r,n);return r.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:n,caretY:i,options:r}=this,o=$a[r.position].call(this,t,e);return!1!==o&&(n!==o.x||i!==o.y)}}ns.positioners=$a;var is={id:"tooltip",_element:ns,positioners:$a,afterInit(t,e,n){n&&(t.tooltip=new ns({chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const n={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",n))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n)}},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:se,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,i=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(i>0&&e.dataIndex<i)return n[e.dataIndex]}return""},afterTitle:se,beforeBody:se,beforeLabel:se,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return ce(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:se,afterBody:se,beforeFooter:se,footer:se,afterFooter:se}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]};class rs extends ao{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:n,label:i}of e)t[n]===i&&t.splice(n,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(ce(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:Ze(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n,i){const r=t.indexOf(e);return-1===r?((t,e,n,i)=>("string"==typeof e?(n=t.push(e)-1,i.unshift({index:n,label:e})):isNaN(e)&&(n=null),n))(t,e,n,i):r!==t.lastIndexOf(e)?n:r}(n,t,pe(e,t),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:n,max:i}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(n=0),e||(i=this.getLabels().length-1)),this.min=n,this.max=i}buildTicks(){const t=this.min,e=this.max,n=this.options.offset,i=[];let r=this.getLabels();r=0===t&&e===r.length-1?r:r.slice(t,e+1),this._valueRange=Math.max(r.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=t;n<=e;n++)i.push({value:n});return i}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function os(t,e,{horizontal:n,minRotation:i}){const r=$e(i),o=(n?Math.sin(r):Math.cos(r))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}rs.id="category",rs.defaults={ticks:{callback:rs.prototype.getLabelForValue}};class as extends ao{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return ce(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:n}=this.getUserBounds();let{min:i,max:r}=this;const o=t=>i=e?i:t,a=t=>r=n?r:t;if(t){const t=Ve(i),e=Ve(r);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(i===r){let e=1;(r>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*r)),a(r+e),t||o(i-e)}this.min=i,this.max=r}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:n,stepSize:i}=t;return i?(e=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let n=this.getTickLimit();n=Math.max(2,n);const i=function(t,e){const n=[],{bounds:i,step:r,min:o,max:a,precision:s,count:l,maxTicks:c,maxDigits:u,includeBounds:h}=t,d=r||1,f=c-1,{min:p,max:g}=e,m=!ce(o),b=!ce(a),y=!ce(l),v=(g-p)/(u+1);let x,w,_,k,S=Be((g-p)/f/d)*d;if(S<1e-14&&!m&&!b)return[{value:p},{value:g}];k=Math.ceil(g/S)-Math.floor(p/S),k>f&&(S=Be(k*S/f/d)*d),ce(s)||(x=Math.pow(10,s),S=Math.ceil(S*x)/x),"ticks"===i?(w=Math.floor(p/S)*S,_=Math.ceil(g/S)*S):(w=p,_=g),m&&b&&r&&function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t}((a-o)/r,S/1e3)?(k=Math.round(Math.min((a-o)/S,c)),S=(a-o)/k,w=o,_=a):y?(w=m?o:w,_=b?a:_,k=l-1,S=(_-w)/k):(k=(_-w)/S,k=We(k,Math.round(k),S/1e3)?Math.round(k):Math.ceil(k));const E=Math.max(Ke(S),Ke(w));x=Math.pow(10,ce(s)?E:s),w=Math.round(w*x)/x,_=Math.round(_*x)/x;let O=0;for(m&&(h&&w!==o?(n.push({value:o}),w<o&&O++,We(Math.round((w+O*S)*x)/x,o,os(o,v,t))&&O++):w<o&&O++);O<k;++O)n.push({value:Math.round((w+O*S)*x)/x});return b&&h&&_!==a?n.length&&We(n[n.length-1].value,a,os(a,v,t))?n[n.length-1].value=a:n.push({value:a}):b&&_!==a||n.push({value:_}),n}({maxTicks:n,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&Ue(i,this,"value"),t.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const t=this.ticks;let e=this.min,n=this.max;if(super.configure(),this.options.offset&&t.length){const i=(n-e)/Math.max(t.length-1,1)/2;e-=i,n+=i}this._startValue=e,this._endValue=n,this._valueRange=n-e}getLabelForValue(t){return lr(t,this.chart.options.locale,this.options.ticks.format)}}class ss extends as{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=de(t)?t:0,this.max=de(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,n=$e(this.options.ticks.minRotation),i=(t?Math.sin(n):Math.cos(n))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,r.lineHeight/i))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function ls(t){return 1==t/Math.pow(10,Math.floor(ze(t)))}ss.id="linear",ss.defaults={ticks:{callback:Jr.formatters.numeric}};class cs extends ao{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const n=as.prototype.parse.apply(this,[t,e]);if(0!==n)return de(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=de(t)?Math.max(0,t):null,this.max=de(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let n=this.min,i=this.max;const r=e=>n=t?n:e,o=t=>i=e?i:t,a=(t,e)=>Math.pow(10,Math.floor(ze(t))+e);n===i&&(n<=0?(r(1),o(10)):(r(a(n,-1)),o(a(i,1)))),n<=0&&r(a(i,-1)),i<=0&&o(a(n,1)),this._zero&&this.min!==this._suggestedMin&&n===a(this.min,0)&&r(a(n,-1)),this.min=n,this.max=i}buildTicks(){const t=this.options,e=function(t,e){const n=Math.floor(ze(e.max)),i=Math.ceil(e.max/Math.pow(10,n)),r=[];let o=fe(t.min,Math.pow(10,Math.floor(ze(e.min)))),a=Math.floor(ze(o)),s=Math.floor(o/Math.pow(10,a)),l=a<0?Math.pow(10,Math.abs(a)):1;do{r.push({value:o,major:ls(o)}),++s,10===s&&(s=1,++a,l=a>=0?1:l),o=Math.round(s*Math.pow(10,a)*l)/l}while(a<n||a===n&&s<i);const c=fe(t.max,o);return r.push({value:c,major:ls(o)}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&Ue(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":lr(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=ze(t),this._valueRange=ze(this.max)-ze(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(ze(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function us(t){const e=t.ticks;if(e.display&&t.display){const t=ki(e.backdropPadding);return pe(e.font&&e.font.size,ni.font.size)+t.height}return 0}function hs(t,e,n,i,r){return t===i||t===r?{start:e-n/2,end:e+n/2}:t<i||t>r?{start:e-n,end:e}:{start:e,end:e+n}}function ds(t,e,n,i,r){const o=Math.abs(Math.sin(n)),a=Math.abs(Math.cos(n));let s=0,l=0;i.start<e.l?(s=(e.l-i.start)/o,t.l=Math.min(t.l,e.l-s)):i.end>e.r&&(s=(i.end-e.r)/o,t.r=Math.max(t.r,e.r+s)),r.start<e.t?(l=(e.t-r.start)/a,t.t=Math.min(t.t,e.t-l)):r.end>e.b&&(l=(r.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function fs(t){return 0===t||180===t?"center":t<180?"left":"right"}function ps(t,e,n){return 90===n||270===n?t-=e/2:(n>270||n<90)&&(t-=e),t}function gs(t,e,n,i){const{ctx:r}=t;if(n)r.arc(t.xCenter,t.yCenter,e,0,Te);else{let n=t.getPointPosition(0,e);r.moveTo(n.x,n.y);for(let o=1;o<i;o++)n=t.getPointPosition(o,e),r.lineTo(n.x,n.y)}}cs.id="logarithmic",cs.defaults={ticks:{callback:Jr.formatters.logarithmic,major:{enabled:!0}}};class ms extends as{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ki(us(this.options)/2),e=this.width=this.maxWidth-t.width,n=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+n/2+t.top),this.drawingArea=Math.floor(Math.min(e,n)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=de(t)&&!isNaN(t)?t:0,this.max=de(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/us(this.options))}generateTickLabels(t){as.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const n=me(this.options.pointLabels.callback,[t,e],this);return n||0===n?n:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},n=Object.assign({},e),i=[],r=[],o=t._pointLabels.length,a=t.options.pointLabels,s=a.centerPointLabels?Re/o:0;for(let h=0;h<o;h++){const o=a.setContext(t.getPointLabelContext(h));r[h]=o.padding;const d=t.getPointPosition(h,t.drawingArea+r[h],s),f=Si(o.font),p=(l=t.ctx,c=f,u=ue(u=t._pointLabels[h])?u:[u],{w:ri(l,c.string,u),h:u.length*c.lineHeight});i[h]=p;const g=Xe(t.getIndexAngle(h)+s),m=Math.round(Ye(g));ds(n,e,g,hs(m,d.x,p.w,0,180),hs(m,d.y,p.h,90,270))}var l,c,u;t.setCenterPoint(e.l-n.l,n.r-e.r,e.t-n.t,n.b-e.b),t._pointLabelItems=function(t,e,n){const i=[],r=t._pointLabels.length,o=t.options,a=us(o)/2,s=t.drawingArea,l=o.pointLabels.centerPointLabels?Re/r:0;for(let o=0;o<r;o++){const r=t.getPointPosition(o,s+a+n[o],l),d=Math.round(Ye(Xe(r.angle+Ie))),f=e[o],p=ps(r.y,f.h,d),g=fs(d),m=(c=r.x,u=f.w,"right"===(h=g)?c-=u:"center"===h&&(c-=u/2),c);i.push({x:r.x,y:p,textAlign:g,left:m,top:p,right:m+f.w,bottom:p+f.h})}var c,u,h;return i}(t,i,r)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,n,i){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((n-i)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,n,i))}getIndexAngle(t){return Xe(t*(Te/(this._pointLabels.length||1))+$e(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(ce(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(ce(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const n=e[t];return function(t,e,n){return Oi(t,{label:n,index:e,type:"pointLabel"})}(this.getContext(),t,n)}}getPointPosition(t,e,n=0){const i=this.getIndexAngle(t)-Ie+n;return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter,angle:i}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:n,right:i,bottom:r}=this._pointLabelItems[t];return{left:e,top:n,right:i,bottom:r}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const n=this.ctx;n.save(),n.beginPath(),gs(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),n.closePath(),n.fillStyle=t,n.fill(),n.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:n,grid:i}=e,r=this._pointLabels.length;let o,a,s;if(e.pointLabels.display&&function(t,e){const{ctx:n,options:{pointLabels:i}}=t;for(let r=e-1;r>=0;r--){const e=i.setContext(t.getPointLabelContext(r)),o=Si(e.font),{x:a,y:s,textAlign:l,left:c,top:u,right:h,bottom:d}=t._pointLabelItems[r],{backdropColor:f}=e;if(!ce(f)){const t=_i(e.borderRadius),i=ki(e.backdropPadding);n.fillStyle=f;const r=c-i.left,o=u-i.top,a=h-c+i.width,s=d-u+i.height;Object.values(t).some((t=>0!==t))?(n.beginPath(),mi(n,{x:r,y:o,w:a,h:s,radius:t}),n.fill()):n.fillRect(r,o,a,s)}pi(n,t._pointLabels[r],a,s+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(this,r),i.display&&this.ticks.forEach(((t,e)=>{0!==e&&(a=this.getDistanceFromCenterForValue(t.value),function(t,e,n,i){const r=t.ctx,o=e.circular,{color:a,lineWidth:s}=e;!o&&!i||!a||!s||n<0||(r.save(),r.strokeStyle=a,r.lineWidth=s,r.setLineDash(e.borderDash),r.lineDashOffset=e.borderDashOffset,r.beginPath(),gs(t,n,o,i),r.closePath(),r.stroke(),r.restore())}(this,i.setContext(this.getContext(e-1)),a,r))})),n.display){for(t.save(),o=r-1;o>=0;o--){const i=n.setContext(this.getPointLabelContext(o)),{color:r,lineWidth:l}=i;l&&r&&(t.lineWidth=l,t.strokeStyle=r,t.setLineDash(i.borderDash),t.lineDashOffset=i.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),s=this.getPointPosition(o,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(s.x,s.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,n=e.ticks;if(!n.display)return;const i=this.getIndexAngle(0);let r,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(i),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((i,a)=>{if(0===a&&!e.reverse)return;const s=n.setContext(this.getContext(a)),l=Si(s.font);if(r=this.getDistanceFromCenterForValue(this.ticks[a].value),s.showLabelBackdrop){t.font=l.string,o=t.measureText(i.label).width,t.fillStyle=s.backdropColor;const e=ki(s.backdropPadding);t.fillRect(-o/2-e.left,-r-l.size/2-e.top,o+e.width,l.size+e.height)}pi(t,i.label,0,-r,l,{color:s.color})})),t.restore()}drawTitle(){}}ms.id="radialLinear",ms.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Jr.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},ms.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},ms.descriptors={angleLines:{_fallback:"grid"}};const bs={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},ys=Object.keys(bs);function vs(t,e){return t-e}function xs(t,e){if(ce(e))return null;const n=t._adapter,{parser:i,round:r,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof i&&(a=i(a)),de(a)||(a="string"==typeof i?n.parse(a,i):n.parse(a)),null===a?null:(r&&(a="week"!==r||!He(o)&&!0!==o?n.startOf(a,r):n.startOf(a,"isoWeek",o)),+a)}function ws(t,e,n,i){const r=ys.length;for(let o=ys.indexOf(t);o<r-1;++o){const t=bs[ys[o]],r=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((n-e)/(r*t.size))<=i)return ys[o]}return ys[r-1]}function _s(t,e,n){if(n){if(n.length){const{lo:i,hi:r}=en(n,e);t[n[i]>=e?n[i]:n[r]]=!0}}else t[e]=!0}function ks(t,e,n){const i=[],r={},o=e.length;let a,s;for(a=0;a<o;++a)s=e[a],r[s]=a,i.push({value:s,major:!1});return 0!==o&&n?function(t,e,n,i){const r=t._adapter,o=+r.startOf(e[0].value,i),a=e[e.length-1].value;let s,l;for(s=o;s<=a;s=+r.add(s,1,i))l=n[s],l>=0&&(e[l].major=!0);return e}(t,i,r,n):i}class Ss extends ao{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const n=t.time||(t.time={}),i=this._adapter=new fo._date(t.adapters.date);i.init(e),ke(n.displayFormats,i.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:xs(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,n=t.time.unit||"day";let{min:i,max:r,minDefined:o,maxDefined:a}=this.getUserBounds();function s(t){o||isNaN(t.min)||(i=Math.min(i,t.min)),a||isNaN(t.max)||(r=Math.max(r,t.max))}o&&a||(s(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||s(this.getMinMax(!1))),i=de(i)&&!isNaN(i)?i:+e.startOf(Date.now(),n),r=de(r)&&!isNaN(r)?r:+e.endOf(Date.now(),n)+1,this.min=Math.min(i,r-1),this.max=Math.max(i+1,r)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],n=t[t.length-1]),{min:e,max:n}}buildTicks(){const t=this.options,e=t.time,n=t.ticks,i="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&i.length&&(this.min=this._userMin||i[0],this.max=this._userMax||i[i.length-1]);const r=this.min,o=function(t,e,n){let i=0,r=t.length;for(;i<r&&t[i]<e;)i++;for(;r>i&&t[r-1]>n;)r--;return i>0||r<t.length?t.slice(i,r):t}(i,r,this.max);return this._unit=e.unit||(n.autoSkip?ws(e.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(t,e,n,i,r){for(let o=ys.length-1;o>=ys.indexOf(n);o--){const n=ys[o];if(bs[n].common&&t._adapter.diff(r,i,n)>=e-1)return n}return ys[n?ys.indexOf(n):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(t){for(let e=ys.indexOf(t)+1,n=ys.length;e<n;++e)if(bs[ys[e]].common)return ys[e]}(this._unit):void 0,this.initOffsets(i),t.reverse&&o.reverse(),ks(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t){let e,n,i=0,r=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),i=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,n=this.getDecimalForValue(t[t.length-1]),r=1===t.length?n:(n-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;i=Ze(i,0,o),r=Ze(r,0,o),this._offsets={start:i,end:r,factor:1/(i+1+r)}}_generate(){const t=this._adapter,e=this.min,n=this.max,i=this.options,r=i.time,o=r.unit||ws(r.minUnit,e,n,this._getLabelCapacity(e)),a=pe(r.stepSize,1),s="week"===o&&r.isoWeekday,l=He(s)||!0===s,c={};let u,h,d=e;if(l&&(d=+t.startOf(d,"isoWeek",s)),d=+t.startOf(d,l?"day":o),t.diff(n,e,o)>1e5*a)throw new Error(e+" and "+n+" are too far apart with stepSize of "+a+" "+o);const f="data"===i.ticks.source&&this.getDataTimestamps();for(u=d,h=0;u<n;u=+t.add(u,a,o),h++)_s(c,u,f);return u!==n&&"ticks"!==i.bounds&&1!==h||_s(c,u,f),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,n=this.options.time;return n.tooltipFormat?e.format(t,n.tooltipFormat):e.format(t,n.displayFormats.datetime)}_tickFormatFunction(t,e,n,i){const r=this.options,o=r.time.displayFormats,a=this._unit,s=this._majorUnit,l=a&&o[a],c=s&&o[s],u=n[e],h=s&&c&&u&&u.major,d=this._adapter.format(t,i||(h?c:l)),f=r.ticks.callback;return f?me(f,[d,e,n],this):d}generateTickLabels(t){let e,n,i;for(e=0,n=t.length;e<n;++e)i=t[e],i.label=this._tickFormatFunction(i.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,n=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+n)*e.factor)}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+n*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,n=this.ctx.measureText(t).width,i=$e(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(i),o=Math.sin(i),a=this._resolveTickFontOptions(0).size;return{w:n*r+a*o,h:n*o+a*r}}_getLabelCapacity(t){const e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,r=this._tickFormatFunction(t,0,ks(this,[t],this._majorUnit),i),o=this._getLabelSize(r),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,n=this._cache.data||[];if(n.length)return n;const i=this.getMatchingVisibleMetas();if(this._normalized&&i.length)return this._cache.data=i[0].controller.getAllParsedValues(this);for(t=0,e=i.length;t<e;++t)n=n.concat(i[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const t=this._cache.labels||[];let e,n;if(t.length)return t;const i=this.getLabels();for(e=0,n=i.length;e<n;++e)t.push(xs(this,i[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return sn(t.sort(vs))}}function Es(t,e,n){let i,r,o,a,s=0,l=t.length-1;n?(e>=t[s].pos&&e<=t[l].pos&&({lo:s,hi:l}=nn(t,"pos",e)),({pos:i,time:o}=t[s]),({pos:r,time:a}=t[l])):(e>=t[s].time&&e<=t[l].time&&({lo:s,hi:l}=nn(t,"time",e)),({time:i,pos:o}=t[s]),({time:r,pos:a}=t[l]));const c=r-i;return c?o+(a-o)*(e-i)/c:o}Ss.id="time",Ss.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Os extends Ss{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Es(e,this.min),this._tableRange=Es(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:n}=this,i=[],r=[];let o,a,s,l,c;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=n&&i.push(l);if(i.length<2)return[{time:e,pos:0},{time:n,pos:1}];for(o=0,a=i.length;o<a;++o)c=i[o+1],s=i[o-1],l=i[o],Math.round((c+s)/2)!==l&&r.push({time:l,pos:o/(a-1)});return r}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),n=this.getLabelTimestamps();return t=e.length&&n.length?this.normalize(e.concat(n)):e.length?e:n,t=this._cache.all=t,t}getDecimalForValue(t){return(Es(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return Es(this._table,n*this._tableRange+this._minPos,!0)}}Os.id="timeseries",Os.defaults=Ss.defaults;const Cs="label";function Ps(t,e){"function"==typeof t?t(e):t&&(t.current=e)}function Ms(t,e){t.labels=e}function Ls(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Cs;const i=[];t.datasets=e.map((e=>{const r=t.datasets.find((t=>t[n]===e[n]));return r&&e.data&&!i.includes(r)?(i.push(r),Object.assign(r,e),r):{...e}}))}function Rs(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Cs;const n={labels:[],datasets:[]};return Ms(n,t.labels),Ls(n,t.datasets,e),n}function Ts(e,n){let{height:i=150,width:r=300,redraw:o=!1,datasetIdKey:a,type:s,data:l,options:c,plugins:u=[],fallbackContent:h,updateMode:d,...f}=e;const p=(0,t.useRef)(null),g=(0,t.useRef)(),m=()=>{p.current&&(g.current=new ba(p.current,{type:s,data:Rs(l,a),options:c&&{...c},plugins:u}),Ps(n,g.current))},b=()=>{Ps(n,null),g.current&&(g.current.destroy(),g.current=null)};return(0,t.useEffect)((()=>{var t,e;!o&&g.current&&c&&(t=g.current,e=c,Object.assign(t.options,e))}),[o,c]),(0,t.useEffect)((()=>{!o&&g.current&&Ms(g.current.config.data,l.labels)}),[o,l.labels]),(0,t.useEffect)((()=>{!o&&g.current&&l.datasets&&Ls(g.current.config.data,l.datasets,a)}),[o,l.datasets]),(0,t.useEffect)((()=>{g.current&&(o?(b(),setTimeout(m)):g.current.update(d))}),[o,c,l.labels,l.datasets,d]),(0,t.useEffect)((()=>{g.current&&(b(),setTimeout(m))}),[s]),(0,t.useEffect)((()=>(m(),()=>b())),[]),t.createElement("canvas",Object.assign({ref:p,role:"img",height:i,width:r},f),h)}const Ns=(0,t.forwardRef)(Ts);function Ds(e,n){return ba.register(n),(0,t.forwardRef)(((n,i)=>t.createElement(Ns,Object.assign({},n,{ref:i,type:e}))))}const As=Ds("line",Yr);ba.register(rs,ss,Na,Ra,Ua,is,Ha);var Is,js=function(e){var n,i,r=e.schoolGraph,o=e.chartColors,a=t.useRef(null),s=Ut(),l=O((function(t){return t.data.hiddenGraphs})),c=O((function(t){return t.data[A.COUNTRY_FILTER].filterValue})),u=O((function(t){return t.data[A.CAMP_FILTER].filterValue})),h=function(t,e,n){var i=[],r=Object.values(P),o=function(t,e){return r.indexOf(t.x)-r.indexOf(e.x)};return t.forEach((function(t,r){i.push({pointStyle:"circle",pointRadius:7,pointHoverRadius:15,hidden:n.indexOf(r)>-1,label:r,borderColor:e[i.length],data:Array.from(t,(function(t){return{x:t[0],y:t[1]}})).sort(o)})})),{labels:Object.values(P),datasets:i}}(r,o,l),d={maintainAspectRatio:!1,responsive:!0,plugins:{legend:{display:!1},title:{display:!0,text:yt().t(Is||(n=["NO of lessons"],i=["NO of lessons"],Object.defineProperty?Object.defineProperty(n,"raw",{value:i}):n.raw=i,Is=n))}},animation:{duration:0}};return t.createElement("div",{style:{width:"100%",height:"39rem"}},t.createElement(As,{ref:a,onClick:function(t){var e=a.current;e&&function(t){if(t.length){var e=t[0],n=e.datasetIndex,i=e.index;s("/point/".concat(c,"/").concat(u,"/").concat(h.datasets[n].label,"/").concat(h.datasets[n].data[i].x))}}(function(t,e){return t.getElementsAtEventForMode(e.nativeEvent,"nearest",{intersect:!0},!1)}(e,t))},options:d,data:h}))};var Fs=function(e){var n=e.filteredOutput,i=e.chartColors;return t.createElement("aside",{className:"Xc9weATIBQzAilZMU7uA"},t.createElement(Hs,{placeName:n.campName,number:n.totalLessons}),t.createElement("div",{className:"KJuIlB4Mr_PfCsXCkueB"},t.createElement(Us,{chartColors:i,schoolsMap:n.schoolLessons})))};var zs,Vs,Bs=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},Hs=function(e){var n=e.number,i=e.placeName,r=e.color,o=yt();return t.createElement("div",null,t.createElement("div",{style:{color:r},className:"OkPZ4UzC7oLPJoBIP9At"},t.createElement("span",{className:"P56RDvsg6RSK6dSDH3qa"},n),t.createElement("span",null,o.t(zs||(zs=Bs(["Lessons"],["Lessons"]))))),t.createElement("div",{style:{color:r},className:"WoA1mOd5f3SjfcMKA0hg"},o.t(Vs||(Vs=Bs(["in"],["in"])))," ",i))};var Ws=function(e){var n=e.schoolName,i=e.lessonsCount,r=e.color,o=E(),a=!O((function(t){return t.data.hiddenGraphs})).includes(n),s=a?D.HIDE_GRAPH:D.SHOW_GRAPH;return t.createElement("div",{onClick:function(){o(function(t,e){switch(e){case D.SHOW_GRAPH:return{type:D.SHOW_GRAPH,payload:t};case D.HIDE_GRAPH:return{type:D.HIDE_GRAPH,payload:t}}}(n,s))},style:a?{color:r}:void 0,className:"V_3rbrTcX_unlN86VAnj"},t.createElement("div",{style:a?{borderColor:r}:void 0,className:"_HGsARrDwnuSbSsXjW1r"},t.createElement("div",{style:a?{background:r}:void 0,className:"Heq43RmwAkjUFoQ6FOmq"})),t.createElement(Hs,{color:a?r:void 0,placeName:n,number:i}))},Us=function(e){var n=e.schoolsMap,i=e.chartColors,r=function(t){var e=[];return t.forEach((function(t,n){e.push({schoolName:n,lessons:t})})),e}(n);return t.createElement("div",null,r.map((function(e,n){return t.createElement(Ws,{key:n,schoolName:e.schoolName,lessonsCount:e.lessons,color:i[n]})})))};var $s=function(){return t.createElement("div",{className:"oTk7W0cN__XgEZqKJrSr"},t.createElement("div",null),t.createElement("div",null),t.createElement("div",null),t.createElement("div",null))};var Ys=function(){return t.createElement("div",{className:"s15UhtVWxDELC9oPfy_q"},t.createElement($s,null))},Ks=function(t,e,n){var i=e.country,r=e.camp;void 0===n&&(n="");var o=Array.from(new Set(t.filter((function(t){return t.country===i&&t.camp===r})).map((function(t){return t.school}))));return o.push(I),{data:o,filterValue:o.includes(n)?n:o[0]}},qs=function(t,e,n){var i=e.country;void 0===n&&(n="");var r=Array.from(new Set(t.filter((function(t){return t.country===i})).map((function(t){return t.camp}))));return{data:r,filterValue:r.includes(n)?n:r[0]}};var Gs=function(){var e=O((function(t){return t.data})).data,n=O((function(t){return t.data[A.CAMP_FILTER].filterValue})),i=O((function(t){return t.data[A.SCHOOL_FILTER].filterValue})),r=O((function(t){return t.data[A.COUNTRY_FILTER].filterValue})),o=t.useMemo((function(){return function(t,e){var n=e.countryFilter,i=e.campFilter,r=e.schoolFilter,o=new Map,a=t.filter((function(t){return t.camp===i&&t.country===n&&(t.school===r||r===I)}));a.forEach((function(t){var e,n=null!==(e=o.get(t.school))&&void 0!==e?e:0;o.set(t.school,n+t.lessons)}));var s=t.reduce((function(t,e){return e.camp===i&&e.country===n?t+e.lessons:t}),0),l=new Map;return a.forEach((function(t){var e,n=l.get(t.school);if(n){var i=null!==(e=n.get(t.month))&&void 0!==e?e:0;n.set(t.month,i+t.lessons),l.set(t.school,n)}else l.set(t.school,(new Map).set(t.month,t.lessons))})),{schoolLessons:o,totalLessons:s,campName:i,schoolGraph:l}}(e,{campFilter:n,schoolFilter:i,countryFilter:r})}),[e,n,i,r]);return t.createElement("div",{className:"wMp935v4yNo_KbcXy3Ln"},t.createElement("div",{className:"r1xlwRu8JgqpwKXmdHbS"},t.createElement("div",{className:"iv1jwckexGDZ8gcaYFLM"},t.createElement(js,{schoolGraph:o.schoolGraph,chartColors:j})),t.createElement("div",{className:"ii_0WFvtb8zzLXw0fuXd"},t.createElement(Fs,{filteredOutput:o,chartColors:j}))))},Qs=function(t,e){t===L.AR?(document.body.dir=R.RTL,localStorage.setItem("lang",L.AR),e.changeLanguage("ar"),Xs("add")):(document.body.dir=R.LTR,localStorage.setItem("lang",L.EN),e.changeLanguage("en"),Xs("remove"))},Xs=function(t){void 0===t&&(t="add");var e=document.querySelectorAll('link[rel="stylesheet"]');"add"==t?e.forEach((function(t){if(t.href.endsWith(".chunk.css")){var e=document.createElement("link");e.href=t.href.replace(/\.css$/,".rtl.css"),e.rel="stylesheet",document.body.appendChild(e)}})):e.forEach((function(t){t.href.endsWith(".chunk.rtl.css")&&document.body.removeChild(t)}))};var Js=function(){var e=function(){var e=yt().i18n,n=localStorage.getItem("lang")||L.EN;return t.useEffect((function(){n===L.AR&&Qs(L.AR,e)}),[]),{currentLang:n,changeLanguage:function(){n===L.EN?Qs(L.AR,e):Qs(L.EN,e)}}}(),n=e.currentLang,i=e.changeLanguage;return t.createElement("div",{className:"C8qCmf7kizYe3Awtm8gT",onClick:function(){i()}},n===L.AR?L.EN:L.AR)};var Zs,tl,el;function nl(){return nl=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},nl.apply(this,arguments)}const il=function(e){return t.createElement("svg",nl({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512",style:{enableBackground:"new 0 0 512 512"},xmlSpace:"preserve"},e),t.createElement("circle",{style:{fill:"#4a7dba"},cx:256,cy:256,r:244.87}),t.createElement("path",{style:{fill:"#e5e5e5"},d:"M256 256c0-90.635 49.245-169.762 122.435-212.103C342.417 23.061 300.603 11.13 256 11.13 120.762 11.13 11.13 120.762 11.13 256c0 135.237 109.631 244.87 244.87 244.87 44.603 0 86.417-11.931 122.435-32.767C305.245 425.762 256 346.635 256 256z"}),t.createElement("circle",{style:{fill:"#afafaf"},cx:77.913,cy:278.261,r:22.261}),t.createElement("circle",{style:{fill:"#afafaf"},cx:155.826,cy:378.435,r:33.391}),Zs||(Zs=t.createElement("path",{d:"M111.102 128.767c2.934 0 5.864-1.153 8.051-3.443C155.212 87.573 203.812 66.783 256 66.783c6.146 0 11.13-4.983 11.13-11.13s-4.984-11.13-11.13-11.13c-58.328 0-112.644 23.236-152.946 65.427-4.245 4.445-4.084 11.491.361 15.737a11.1 11.1 0 0 0 7.687 3.08zM83.181 153.914a11.064 11.064 0 0 0 6.2 1.896c3.583 0 7.102-1.725 9.254-4.916l.104-.155c3.378-5.112 1.966-11.959-3.131-15.359-5.096-3.4-12.006-2.01-15.431 3.07l-.021.031c-3.429 5.098-2.072 12 3.025 15.433z"})),tl||(tl=t.createElement("path",{d:"M267.411 511.74c1.256-.055 2.509-.124 3.761-.197.702-.041 1.405-.081 2.107-.128 61.875-4.097 119.484-30.139 163.74-74.395C485.372 388.667 512 324.38 512 256s-26.628-132.667-74.98-181.019C392.764 30.726 335.155 4.684 273.28.587c-.702-.047-1.405-.087-2.107-.128a292.082 292.082 0 0 0-3.761-.197 256.853 256.853 0 0 0-5.862-.193C259.7.028 257.851 0 256 0c-25.642 0-50.709 3.744-74.576 10.976a252.167 252.167 0 0 0-17.666 6.073c-32.906 12.69-63.091 32.246-88.777 57.933C26.628 123.333 0 187.619 0 256c0 68.38 26.628 132.667 74.981 181.019C123.333 485.372 187.62 512 256 512c1.851 0 3.7-.028 5.549-.068a251.56 251.56 0 0 0 5.862-.192zM489.739 256c0 84.058-44.61 157.885-111.39 199.078C309.582 412.649 267.13 336.981 267.13 256S309.582 99.351 378.349 56.922c66.78 41.193 111.39 115.02 111.39 199.078zm-467.478 0C22.261 127.116 127.116 22.261 256 22.261c2.11 0 4.217.031 6.323.088.492.013.981.04 1.473.056 1.636.055 3.271.116 4.904.205.486.027.969.063 1.455.092 1.655.1 3.308.209 4.959.345.421.035.839.076 1.26.112 1.727.151 3.452.315 5.173.504.346.038.691.08 1.037.119a237.78 237.78 0 0 1 6.227.793 240.037 240.037 0 0 1 6.24.966c1.936.327 3.866.678 5.791 1.054.15.029.301.057.451.087 1.998.394 3.99.813 5.976 1.258.085.02.17.037.255.056a233.779 233.779 0 0 1 18.058 4.842c1.538.481 3.068.983 4.592 1.494.275.092.551.179.826.273a232.16 232.16 0 0 1 25.133 10.223c-30.858 21.196-56.887 49.021-75.952 81.36-23.099 39.188-35.31 84.077-35.31 129.813s12.211 90.625 35.314 129.814c19.065 32.341 45.094 60.164 75.952 81.36a232.244 232.244 0 0 1-25.133 10.223c-.275.092-.551.18-.826.273a238.802 238.802 0 0 1-4.592 1.494 234.354 234.354 0 0 1-18.058 4.842l-.255.056c-1.986.445-3.978.865-5.976 1.258-.15.029-.301.057-.451.087-1.926.375-3.856.727-5.791 1.054-.21.036-.422.07-.632.105-1.865.309-3.734.597-5.608.861l-.825.116c-1.798.247-3.598.471-5.402.677-.346.039-.69.081-1.037.119a241.98 241.98 0 0 1-5.173.504c-.421.037-.839.078-1.26.112a228.04 228.04 0 0 1-4.959.345c-.485.029-.968.067-1.455.092-1.633.089-3.268.15-4.904.205-.492.017-.981.043-1.473.056a238.24 238.24 0 0 1-6.327.087C127.116 489.739 22.261 384.884 22.261 256z"})),el||(el=t.createElement("path",{d:"M77.913 244.87c-18.412 0-33.391 14.979-33.391 33.391s14.979 33.391 33.391 33.391 33.391-14.979 33.391-33.391-14.979-33.391-33.391-33.391zm0 44.521c-6.137 0-11.13-4.993-11.13-11.13s4.993-11.13 11.13-11.13 11.13 4.993 11.13 11.13-4.993 11.13-11.13 11.13zM155.826 333.913c-24.549 0-44.522 19.972-44.522 44.522s19.972 44.522 44.522 44.522 44.522-19.972 44.522-44.522-19.973-44.522-44.522-44.522zm0 66.783c-12.275 0-22.261-9.986-22.261-22.261s9.986-22.261 22.261-22.261 22.261 9.986 22.261 22.261-9.986 22.261-22.261 22.261z"})))};function rl(){return rl=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},rl.apply(this,arguments)}const ol=function(e){return t.createElement("svg",rl({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 473.931 473.931",style:{enableBackground:"new 0 0 473.931 473.931"},xmlSpace:"preserve"},e),t.createElement("circle",{style:{fill:"#f2be3e"},cx:236.966,cy:236.966,r:236.966}),t.createElement("circle",{style:{fill:"#f1eb75"},cx:236.966,cy:236.966,r:117.154}))},al="MjctGqWVxNuJeE0o2oFP",sl="YxBrn3Pz2521ag9D9F88";var ll=function(){return ll=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},ll.apply(this,arguments)},cl=function(){var e,n,i,r=t.useState((e=window.matchMedia("(prefers-color-scheme: dark)").matches,n=localStorage.getItem("theme"),{preferredTheme:i=e?M.DARK:M.LIGHT,currentTheme:null!=n?n:i})),o=r[0],a=r[1],s=o.currentTheme!==M.DARK?t.createElement(il,null):t.createElement(ol,null);return t.useEffect((function(){o.preferredTheme===M.DARK&&o.currentTheme===M.LIGHT&&document.body.classList.add(sl),o.preferredTheme===M.LIGHT&&o.currentTheme===M.DARK&&document.body.classList.add(al)}),[]),t.createElement("button",{onClick:function(){var t;t=o.currentTheme===M.DARK?M.LIGHT:M.DARK,localStorage.setItem("theme",t),o.preferredTheme===M.DARK?document.body.classList.toggle(sl):document.body.classList.toggle(al),a(ll(ll({},o),{currentTheme:t}))},className:"HKlJw8TpWz4m5XQCx0RJ"},s)},ul=function(){return t.createElement("header",{className:"qitlpogRu2jO8ytW0Kab"},t.createElement(te,null),t.createElement("div",{className:"sIrOyLme7VDfwaCIaokO"},t.createElement(cl,null),t.createElement(Js,null)))},hl=function(){var t=E(),e=O((function(t){return t.data.loaded})),n=O((function(t){return t.data.data}));return e||t((function(t){return z.fetchData().then((function(t){return t.json()})).then((function(e){t(function(t){return{type:N.GET_DATA,payload:F([],t,!0)}}(e))}))})),{loaded:e,data:n}},dl=function(){var e=hl().loaded;return t.createElement("div",null,!e&&t.createElement(Ys,null),t.createElement("main",{className:"vxa5_ohmobkzcIZeFLsx"},t.createElement(ul,null),t.createElement(ae,null),t.createElement(Gs,null)))};var fl,pl,gl,ml,bl,yl=function(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t},vl=function(){var e=hl().loaded,n=function(){let{matches:e}=(0,t.useContext)(Ct),n=e[e.length-1];return n?n.params:{}}(),i=n.country,r=n.camp,o=n.school,a=n.month,s=function(t,e,n,i){var r=O((function(t){return t.data.data})).reduce((function(r,o){return o.school===n&&o.camp===e&&o.country===t&&o.month==i?r+o.lessons:r}),0);return{country:t,camp:e,school:n,month:i,totalLessons:r}}(null!=i?i:"",null!=r?r:"",null!=o?o:"",null!=a?a:""),l=yt(),c=t.createElement("table",{className:"N7g7ntz5ewpIbn76r7NN"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null," ",l.t(fl||(fl=yl(["Country Name"],["Country Name"])))," "),t.createElement("th",null," ",l.t(pl||(pl=yl(["Camp Name"],["Camp Name"])))," "),t.createElement("th",null," ",l.t(gl||(gl=yl(["School Name"],["School Name"])))),t.createElement("th",null," ",l.t(ml||(ml=yl(["Month"],["Month"])))),t.createElement("th",null," ",l.t(bl||(bl=yl(["Total Lessons"],["Total Lessons"])))))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null," ",s.country," "),t.createElement("td",null," ",s.camp," "),t.createElement("td",null," ",s.school," "),t.createElement("td",null," ",s.month," "),t.createElement("td",null," ",s.totalLessons," ")))),u=t.createElement("div",null,"Not Found"),h=s?c:u;return e?t.createElement(t.Fragment,null,t.createElement("div",{className:"UccAauDxEFUvdE2pFGck"},t.createElement(ul,null),t.createElement("div",{className:"IjepusnKWagrnR4DlUV2"},h))):t.createElement(Ys,null)};function xl(t){return xl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},xl(t)}function wl(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _l(t,e){return _l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_l(t,e)}function kl(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_l(t,e)}function Sl(t,e){if(e&&("object"===xl(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return wl(t)}function El(t){return El=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},El(t)}function Ol(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Cl(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Ol(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ol(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var Pl={type:"logger",log:function(t){this.output("log",t)},warn:function(t){this.output("warn",t)},error:function(t){this.output("error",t)},output:function(t,e){console&&console[t]&&console[t].apply(console,e)}},Ml=new(function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};K(this,t),this.init(e,n)}return G(t,[{key:"init",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=e.prefix||"i18next:",this.logger=t||Pl,this.options=e,this.debug=e.debug}},{key:"setDebug",value:function(t){this.debug=t}},{key:"log",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"log","",!0)}},{key:"warn",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"warn","",!0)}},{key:"error",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"error","")}},{key:"deprecate",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(t,e,n,i){return i&&!this.debug?null:("string"==typeof t[0]&&(t[0]="".concat(n).concat(this.prefix," ").concat(t[0])),this.logger[e](t))}},{key:"create",value:function(e){return new t(this.logger,Cl(Cl({},{prefix:"".concat(this.prefix,":").concat(e,":")}),this.options))}}]),t}()),Ll=function(){function t(){K(this,t),this.observers={}}return G(t,[{key:"on",value:function(t,e){var n=this;return t.split(" ").forEach((function(t){n.observers[t]=n.observers[t]||[],n.observers[t].push(e)})),this}},{key:"off",value:function(t,e){this.observers[t]&&(e?this.observers[t]=this.observers[t].filter((function(t){return t!==e})):delete this.observers[t])}},{key:"emit",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];if(this.observers[t]){var r=[].concat(this.observers[t]);r.forEach((function(t){t.apply(void 0,n)}))}if(this.observers["*"]){var o=[].concat(this.observers["*"]);o.forEach((function(e){e.apply(e,[t].concat(n))}))}}}]),t}();function Rl(){var t,e,n=new Promise((function(n,i){t=n,e=i}));return n.resolve=t,n.reject=e,n}function Tl(t){return null==t?"":""+t}function Nl(t,e,n){t.forEach((function(t){e[t]&&(n[t]=e[t])}))}function Dl(t,e,n){function i(t){return t&&t.indexOf("###")>-1?t.replace(/###/g,"."):t}function r(){return!t||"string"==typeof t}for(var o="string"!=typeof e?[].concat(e):e.split(".");o.length>1;){if(r())return{};var a=i(o.shift());!t[a]&&n&&(t[a]=new n),t=Object.prototype.hasOwnProperty.call(t,a)?t[a]:{}}return r()?{}:{obj:t,k:i(o.shift())}}function Al(t,e,n){var i=Dl(t,e,Object);i.obj[i.k]=n}function Il(t,e){var n=Dl(t,e),i=n.obj,r=n.k;if(i)return i[r]}function jl(t,e,n){var i=Il(t,n);return void 0!==i?i:Il(e,n)}function Fl(t,e,n){for(var i in e)"__proto__"!==i&&"constructor"!==i&&(i in t?"string"==typeof t[i]||t[i]instanceof String||"string"==typeof e[i]||e[i]instanceof String?n&&(t[i]=e[i]):Fl(t[i],e[i],n):t[i]=e[i]);return t}function zl(t){return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var Vl={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function Bl(t){return"string"==typeof t?t.replace(/[&<>"'\/]/g,(function(t){return Vl[t]})):t}var Hl="undefined"!=typeof window&&window.navigator&&void 0===window.navigator.userAgentData&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1,Wl=[" ",",","?","!",";"];function Ul(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function $l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Ul(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ul(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Yl(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(t){if(t[e])return t[e];for(var i=e.split(n),r=t,o=0;o<i.length;++o){if(!r)return;if("string"==typeof r[i[o]]&&o+1<i.length)return;if(void 0===r[i[o]]){for(var a=2,s=i.slice(o,o+a).join(n),l=r[s];void 0===l&&i.length>o+a;)a++,l=r[s=i.slice(o,o+a).join(n)];if(void 0===l)return;if(null===l)return null;if(e.endsWith(s)){if("string"==typeof l)return l;if(s&&"string"==typeof l[s])return l[s]}var c=i.slice(o+a).join(n);return c?Yl(l,c,n):void 0}r=r[i[o]]}return r}}var Kl=function(t){kl(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=El(e);if(n){var r=El(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return Sl(this,t)});function r(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return K(this,r),e=i.call(this),Hl&&Ll.call(wl(e)),e.data=t||{},e.options=n,void 0===e.options.keySeparator&&(e.options.keySeparator="."),void 0===e.options.ignoreJSONStructure&&(e.options.ignoreJSONStructure=!0),e}return G(r,[{key:"addNamespaces",value:function(t){this.options.ns.indexOf(t)<0&&this.options.ns.push(t)}},{key:"removeNamespaces",value:function(t){var e=this.options.ns.indexOf(t);e>-1&&this.options.ns.splice(e,1)}},{key:"getResource",value:function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},r=void 0!==i.keySeparator?i.keySeparator:this.options.keySeparator,o=void 0!==i.ignoreJSONStructure?i.ignoreJSONStructure:this.options.ignoreJSONStructure,a=[t,e];n&&"string"!=typeof n&&(a=a.concat(n)),n&&"string"==typeof n&&(a=a.concat(r?n.split(r):n)),t.indexOf(".")>-1&&(a=t.split("."));var s=Il(this.data,a);return s||!o||"string"!=typeof n?s:Yl(this.data&&this.data[t]&&this.data[t][e],n,r)}},{key:"addResource",value:function(t,e,n,i){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},o=this.options.keySeparator;void 0===o&&(o=".");var a=[t,e];n&&(a=a.concat(o?n.split(o):n)),t.indexOf(".")>-1&&(i=e,e=(a=t.split("."))[1]),this.addNamespaces(e),Al(this.data,a,i),r.silent||this.emit("added",t,e,n,i)}},{key:"addResources",value:function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var r in n)"string"!=typeof n[r]&&"[object Array]"!==Object.prototype.toString.apply(n[r])||this.addResource(t,e,r,n[r],{silent:!0});i.silent||this.emit("added",t,e,n)}},{key:"addResourceBundle",value:function(t,e,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[t,e];t.indexOf(".")>-1&&(i=n,n=e,e=(a=t.split("."))[1]),this.addNamespaces(e);var s=Il(this.data,a)||{};i?Fl(s,n,r):s=$l($l({},s),n),Al(this.data,a,s),o.silent||this.emit("added",t,e,n)}},{key:"removeResourceBundle",value:function(t,e){this.hasResourceBundle(t,e)&&delete this.data[t][e],this.removeNamespaces(e),this.emit("removed",t,e)}},{key:"hasResourceBundle",value:function(t,e){return void 0!==this.getResource(t,e)}},{key:"getResourceBundle",value:function(t,e){return e||(e=this.options.defaultNS),"v1"===this.options.compatibilityAPI?$l($l({},{}),this.getResource(t,e)):this.getResource(t,e)}},{key:"getDataByLanguage",value:function(t){return this.data[t]}},{key:"hasLanguageSomeTranslations",value:function(t){var e=this.getDataByLanguage(t);return!!(e&&Object.keys(e)||[]).find((function(t){return e[t]&&Object.keys(e[t]).length>0}))}},{key:"toJSON",value:function(){return this.data}}]),r}(Ll),ql={processors:{},addPostProcessor:function(t){this.processors[t.name]=t},handle:function(t,e,n,i,r){var o=this;return t.forEach((function(t){o.processors[t]&&(e=o.processors[t].process(e,n,i,r))})),e}};function Gl(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Ql(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Gl(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Gl(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var Xl={},Jl=function(t){kl(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=El(e);if(n){var r=El(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return Sl(this,t)});function r(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return K(this,r),e=i.call(this),Hl&&Ll.call(wl(e)),Nl(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],t,wl(e)),e.options=n,void 0===e.options.keySeparator&&(e.options.keySeparator="."),e.logger=Ml.create("translator"),e}return G(r,[{key:"changeLanguage",value:function(t){t&&(this.language=t)}},{key:"exists",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==t)return!1;var n=this.resolve(t,e);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(t,e){var n=void 0!==e.nsSeparator?e.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");var i=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,r=e.ns||this.options.defaultNS||[],o=n&&t.indexOf(n)>-1,a=!(this.options.userDefinedKeySeparator||e.keySeparator||this.options.userDefinedNsSeparator||e.nsSeparator||function(t,e,n){e=e||"",n=n||"";var i=Wl.filter((function(t){return e.indexOf(t)<0&&n.indexOf(t)<0}));if(0===i.length)return!0;var r=new RegExp("(".concat(i.map((function(t){return"?"===t?"\\?":t})).join("|"),")")),o=!r.test(t);if(!o){var a=t.indexOf(n);a>0&&!r.test(t.substring(0,a))&&(o=!0)}return o}(t,n,i));if(o&&!a){var s=t.match(this.interpolator.nestingRegexp);if(s&&s.length>0)return{key:t,namespaces:r};var l=t.split(n);(n!==i||n===i&&this.options.ns.indexOf(l[0])>-1)&&(r=l.shift()),t=l.join(i)}return"string"==typeof r&&(r=[r]),{key:t,namespaces:r}}},{key:"translate",value:function(t,e,n){var i=this;if("object"!==xl(e)&&this.options.overloadTranslationOptionHandler&&(e=this.options.overloadTranslationOptionHandler(arguments)),e||(e={}),null==t)return"";Array.isArray(t)||(t=[String(t)]);var o=void 0!==e.returnDetails?e.returnDetails:this.options.returnDetails,a=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,s=this.extractFromKey(t[t.length-1],e),l=s.key,c=s.namespaces,u=c[c.length-1],h=e.lng||this.language,d=e.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(h&&"cimode"===h.toLowerCase()){if(d){var f=e.nsSeparator||this.options.nsSeparator;return o?(p.res="".concat(u).concat(f).concat(l),p):"".concat(u).concat(f).concat(l)}return o?(p.res=l,p):l}var p=this.resolve(t,e),g=p&&p.res,m=p&&p.usedKey||l,b=p&&p.exactUsedKey||l,y=Object.prototype.toString.apply(g),v=["[object Number]","[object Function]","[object RegExp]"],x=void 0!==e.joinArrays?e.joinArrays:this.options.joinArrays,w=!this.i18nFormat||this.i18nFormat.handleAsObject,_="string"!=typeof g&&"boolean"!=typeof g&&"number"!=typeof g;if(w&&g&&_&&v.indexOf(y)<0&&("string"!=typeof x||"[object Array]"!==y)){if(!e.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");var k=this.options.returnedObjectHandler?this.options.returnedObjectHandler(m,g,Ql(Ql({},e),{},{ns:c})):"key '".concat(l," (").concat(this.language,")' returned an object instead of string.");return o?(p.res=k,p):k}if(a){var S="[object Array]"===y,E=S?[]:{},O=S?b:m;for(var C in g)if(Object.prototype.hasOwnProperty.call(g,C)){var P="".concat(O).concat(a).concat(C);E[C]=this.translate(P,Ql(Ql({},e),{joinArrays:!1,ns:c})),E[C]===P&&(E[C]=g[C])}g=E}}else if(w&&"string"==typeof x&&"[object Array]"===y)(g=g.join(x))&&(g=this.extendTranslation(g,t,e,n));else{var M=!1,L=!1,R=void 0!==e.count&&"string"!=typeof e.count,T=r.hasDefaultValue(e),N=R?this.pluralResolver.getSuffix(h,e.count,e):"",D=e["defaultValue".concat(N)]||e.defaultValue;!this.isValidLookup(g)&&T&&(M=!0,g=D),this.isValidLookup(g)||(L=!0,g=l);var A=e.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey,I=A&&L?void 0:g,j=T&&D!==g&&this.options.updateMissing;if(L||M||j){if(this.logger.log(j?"updateKey":"missingKey",h,u,l,j?D:g),a){var F=this.resolve(l,Ql(Ql({},e),{},{keySeparator:!1}));F&&F.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var z=[],V=this.languageUtils.getFallbackCodes(this.options.fallbackLng,e.lng||this.language);if("fallback"===this.options.saveMissingTo&&V&&V[0])for(var B=0;B<V.length;B++)z.push(V[B]);else"all"===this.options.saveMissingTo?z=this.languageUtils.toResolveHierarchy(e.lng||this.language):z.push(e.lng||this.language);var H=function(t,n,r){var o=T&&r!==g?r:I;i.options.missingKeyHandler?i.options.missingKeyHandler(t,u,n,o,j,e):i.backendConnector&&i.backendConnector.saveMissing&&i.backendConnector.saveMissing(t,u,n,o,j,e),i.emit("missingKey",t,u,n,g)};this.options.saveMissing&&(this.options.saveMissingPlurals&&R?z.forEach((function(t){i.pluralResolver.getSuffixes(t,e).forEach((function(n){H([t],l+n,e["defaultValue".concat(n)]||D)}))})):H(z,l,D))}g=this.extendTranslation(g,t,e,p,n),L&&g===l&&this.options.appendNamespaceToMissingKey&&(g="".concat(u,":").concat(l)),(L||M)&&this.options.parseMissingKeyHandler&&(g="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?"".concat(u,":").concat(l):l,M?g:void 0):this.options.parseMissingKeyHandler(g))}return o?(p.res=g,p):g}},{key:"extendTranslation",value:function(t,e,n,i,r){var o=this;if(this.i18nFormat&&this.i18nFormat.parse)t=this.i18nFormat.parse(t,Ql(Ql({},this.options.interpolation.defaultVariables),n),i.usedLng,i.usedNS,i.usedKey,{resolved:i});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(Ql(Ql({},n),{interpolation:Ql(Ql({},this.options.interpolation),n.interpolation)}));var a,s="string"==typeof t&&(n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);if(s){var l=t.match(this.interpolator.nestingRegexp);a=l&&l.length}var c=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(c=Ql(Ql({},this.options.interpolation.defaultVariables),c)),t=this.interpolator.interpolate(t,c,n.lng||this.language,n),s){var u=t.match(this.interpolator.nestingRegexp);a<(u&&u.length)&&(n.nest=!1)}!1!==n.nest&&(t=this.interpolator.nest(t,(function(){for(var t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];return r&&r[0]===i[0]&&!n.context?(o.logger.warn("It seems you are nesting recursively key: ".concat(i[0]," in key: ").concat(e[0])),null):o.translate.apply(o,i.concat([e]))}),n)),n.interpolation&&this.interpolator.reset()}var h=n.postProcess||this.options.postProcess,d="string"==typeof h?[h]:h;return null!=t&&d&&d.length&&!1!==n.applyPostProcessor&&(t=ql.handle(d,t,e,this.options&&this.options.postProcessPassResolved?Ql({i18nResolved:i},n):n,this)),t}},{key:"resolve",value:function(t){var e,n,i,r,o,a=this,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof t&&(t=[t]),t.forEach((function(t){if(!a.isValidLookup(e)){var l=a.extractFromKey(t,s),c=l.key;n=c;var u=l.namespaces;a.options.fallbackNS&&(u=u.concat(a.options.fallbackNS));var h=void 0!==s.count&&"string"!=typeof s.count,d=h&&!s.ordinal&&0===s.count&&a.pluralResolver.shouldUseIntlApi(),f=void 0!==s.context&&("string"==typeof s.context||"number"==typeof s.context)&&""!==s.context,p=s.lngs?s.lngs:a.languageUtils.toResolveHierarchy(s.lng||a.language,s.fallbackLng);u.forEach((function(t){a.isValidLookup(e)||(o=t,!Xl["".concat(p[0],"-").concat(t)]&&a.utils&&a.utils.hasLoadedNamespace&&!a.utils.hasLoadedNamespace(o)&&(Xl["".concat(p[0],"-").concat(t)]=!0,a.logger.warn('key "'.concat(n,'" for languages "').concat(p.join(", "),'" won\'t get resolved as namespace "').concat(o,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((function(n){if(!a.isValidLookup(e)){r=n;var o,l=[c];if(a.i18nFormat&&a.i18nFormat.addLookupKeys)a.i18nFormat.addLookupKeys(l,c,n,t,s);else{var u;h&&(u=a.pluralResolver.getSuffix(n,s.count,s));var p="".concat(a.options.pluralSeparator,"zero");if(h&&(l.push(c+u),d&&l.push(c+p)),f){var g="".concat(c).concat(a.options.contextSeparator).concat(s.context);l.push(g),h&&(l.push(g+u),d&&l.push(g+p))}}for(;o=l.pop();)a.isValidLookup(e)||(i=o,e=a.getResource(n,t,o,s))}})))}))}})),{res:e,usedKey:n,exactUsedKey:i,usedLng:r,usedNS:o}}},{key:"isValidLookup",value:function(t){return!(void 0===t||!this.options.returnNull&&null===t||!this.options.returnEmptyString&&""===t)}},{key:"getResource",value:function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(t,e,n,i):this.resourceStore.getResource(t,e,n,i)}}],[{key:"hasDefaultValue",value:function(t){var e="defaultValue";for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e===n.substring(0,e.length)&&void 0!==t[n])return!0;return!1}}]),r}(Ll);function Zl(t){return t.charAt(0).toUpperCase()+t.slice(1)}var tc=function(){function t(e){K(this,t),this.options=e,this.supportedLngs=this.options.supportedLngs||!1,this.logger=Ml.create("languageUtils")}return G(t,[{key:"getScriptPartFromCode",value:function(t){if(!t||t.indexOf("-")<0)return null;var e=t.split("-");return 2===e.length?null:(e.pop(),"x"===e[e.length-1].toLowerCase()?null:this.formatLanguageCode(e.join("-")))}},{key:"getLanguagePartFromCode",value:function(t){if(!t||t.indexOf("-")<0)return t;var e=t.split("-");return this.formatLanguageCode(e[0])}},{key:"formatLanguageCode",value:function(t){if("string"==typeof t&&t.indexOf("-")>-1){var e=["hans","hant","latn","cyrl","cans","mong","arab"],n=t.split("-");return this.options.lowerCaseLng?n=n.map((function(t){return t.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),e.indexOf(n[1].toLowerCase())>-1&&(n[1]=Zl(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),e.indexOf(n[1].toLowerCase())>-1&&(n[1]=Zl(n[1].toLowerCase())),e.indexOf(n[2].toLowerCase())>-1&&(n[2]=Zl(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?t.toLowerCase():t}},{key:"isSupportedCode",value:function(t){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(t=this.getLanguagePartFromCode(t)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(t)>-1}},{key:"getBestMatchFromCodes",value:function(t){var e,n=this;return t?(t.forEach((function(t){if(!e){var i=n.formatLanguageCode(t);n.options.supportedLngs&&!n.isSupportedCode(i)||(e=i)}})),!e&&this.options.supportedLngs&&t.forEach((function(t){if(!e){var i=n.getLanguagePartFromCode(t);if(n.isSupportedCode(i))return e=i;e=n.options.supportedLngs.find((function(t){if(0===t.indexOf(i))return t}))}})),e||(e=this.getFallbackCodes(this.options.fallbackLng)[0]),e):null}},{key:"getFallbackCodes",value:function(t,e){if(!t)return[];if("function"==typeof t&&(t=t(e)),"string"==typeof t&&(t=[t]),"[object Array]"===Object.prototype.toString.apply(t))return t;if(!e)return t.default||[];var n=t[e];return n||(n=t[this.getScriptPartFromCode(e)]),n||(n=t[this.formatLanguageCode(e)]),n||(n=t[this.getLanguagePartFromCode(e)]),n||(n=t.default),n||[]}},{key:"toResolveHierarchy",value:function(t,e){var n=this,i=this.getFallbackCodes(e||this.options.fallbackLng||[],t),r=[],o=function(t){t&&(n.isSupportedCode(t)?r.push(t):n.logger.warn("rejecting language code not found in supportedLngs: ".concat(t)))};return"string"==typeof t&&t.indexOf("-")>-1?("languageOnly"!==this.options.load&&o(this.formatLanguageCode(t)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&o(this.getScriptPartFromCode(t)),"currentOnly"!==this.options.load&&o(this.getLanguagePartFromCode(t))):"string"==typeof t&&o(this.formatLanguageCode(t)),i.forEach((function(t){r.indexOf(t)<0&&o(n.formatLanguageCode(t))})),r}}]),t}(),ec=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],nc={1:function(t){return Number(t>1)},2:function(t){return Number(1!=t)},3:function(t){return 0},4:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},5:function(t){return Number(0==t?0:1==t?1:2==t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5)},6:function(t){return Number(1==t?0:t>=2&&t<=4?1:2)},7:function(t){return Number(1==t?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},8:function(t){return Number(1==t?0:2==t?1:8!=t&&11!=t?2:3)},9:function(t){return Number(t>=2)},10:function(t){return Number(1==t?0:2==t?1:t<7?2:t<11?3:4)},11:function(t){return Number(1==t||11==t?0:2==t||12==t?1:t>2&&t<20?2:3)},12:function(t){return Number(t%10!=1||t%100==11)},13:function(t){return Number(0!==t)},14:function(t){return Number(1==t?0:2==t?1:3==t?2:3)},15:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&(t%100<10||t%100>=20)?1:2)},16:function(t){return Number(t%10==1&&t%100!=11?0:0!==t?1:2)},17:function(t){return Number(1==t||t%10==1&&t%100!=11?0:1)},18:function(t){return Number(0==t?0:1==t?1:2)},19:function(t){return Number(1==t?0:0==t||t%100>1&&t%100<11?1:t%100>10&&t%100<20?2:3)},20:function(t){return Number(1==t?0:0==t||t%100>0&&t%100<20?1:2)},21:function(t){return Number(t%100==1?1:t%100==2?2:t%100==3||t%100==4?3:0)},22:function(t){return Number(1==t?0:2==t?1:(t<0||t>10)&&t%10==0?2:3)}},ic=["v1","v2","v3"],rc={zero:0,one:1,two:2,few:3,many:4,other:5};function oc(){var t={};return ec.forEach((function(e){e.lngs.forEach((function(n){t[n]={numbers:e.nr,plurals:nc[e.fc]}}))})),t}var ac=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};K(this,t),this.languageUtils=e,this.options=n,this.logger=Ml.create("pluralResolver"),this.options.compatibilityJSON&&"v4"!==this.options.compatibilityJSON||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=oc()}return G(t,[{key:"addRule",value:function(t,e){this.rules[t]=e}},{key:"getRule",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(t,{type:e.ordinal?"ordinal":"cardinal"})}catch(t){return}return this.rules[t]||this.rules[this.languageUtils.getLanguagePartFromCode(t)]}},{key:"needsPlural",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.getRule(t,e);return this.shouldUseIntlApi()?n&&n.resolvedOptions().pluralCategories.length>1:n&&n.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(t,n).map((function(t){return"".concat(e).concat(t)}))}},{key:"getSuffixes",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=this.getRule(t,n);return i?this.shouldUseIntlApi()?i.resolvedOptions().pluralCategories.sort((function(t,e){return rc[t]-rc[e]})).map((function(t){return"".concat(e.options.prepend).concat(t)})):i.numbers.map((function(i){return e.getSuffix(t,i,n)})):[]}},{key:"getSuffix",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=this.getRule(t,n);return i?this.shouldUseIntlApi()?"".concat(this.options.prepend).concat(i.select(e)):this.getSuffixRetroCompatible(i,e):(this.logger.warn("no plural rule found for: ".concat(t)),"")}},{key:"getSuffixRetroCompatible",value:function(t,e){var n=this,i=t.noAbs?t.plurals(e):t.plurals(Math.abs(e)),r=t.numbers[i];this.options.simplifyPluralSuffix&&2===t.numbers.length&&1===t.numbers[0]&&(2===r?r="plural":1===r&&(r=""));var o=function(){return n.options.prepend&&r.toString()?n.options.prepend+r.toString():r.toString()};return"v1"===this.options.compatibilityJSON?1===r?"":"number"==typeof r?"_plural_".concat(r.toString()):o():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===t.numbers.length&&1===t.numbers[0]?o():this.options.prepend&&i.toString()?this.options.prepend+i.toString():i.toString()}},{key:"shouldUseIntlApi",value:function(){return!ic.includes(this.options.compatibilityJSON)}}]),t}();function sc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function lc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?sc(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):sc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var cc=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};K(this,t),this.logger=Ml.create("interpolator"),this.options=e,this.format=e.interpolation&&e.interpolation.format||function(t){return t},this.init(e)}return G(t,[{key:"init",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t.interpolation||(t.interpolation={escapeValue:!0});var e=t.interpolation;this.escape=void 0!==e.escape?e.escape:Bl,this.escapeValue=void 0===e.escapeValue||e.escapeValue,this.useRawValueToEscape=void 0!==e.useRawValueToEscape&&e.useRawValueToEscape,this.prefix=e.prefix?zl(e.prefix):e.prefixEscaped||"{{",this.suffix=e.suffix?zl(e.suffix):e.suffixEscaped||"}}",this.formatSeparator=e.formatSeparator?e.formatSeparator:e.formatSeparator||",",this.unescapePrefix=e.unescapeSuffix?"":e.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":e.unescapeSuffix||"",this.nestingPrefix=e.nestingPrefix?zl(e.nestingPrefix):e.nestingPrefixEscaped||zl("$t("),this.nestingSuffix=e.nestingSuffix?zl(e.nestingSuffix):e.nestingSuffixEscaped||zl(")"),this.nestingOptionsSeparator=e.nestingOptionsSeparator?e.nestingOptionsSeparator:e.nestingOptionsSeparator||",",this.maxReplaces=e.maxReplaces?e.maxReplaces:1e3,this.alwaysFormat=void 0!==e.alwaysFormat&&e.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var t="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(t,"g");var e="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(e,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(t,e,n,i){var r,o,a,s=this,l=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function c(t){return t.replace(/\$/g,"$$$$")}var u=function(t){if(t.indexOf(s.formatSeparator)<0){var r=jl(e,l,t);return s.alwaysFormat?s.format(r,void 0,n,lc(lc(lc({},i),e),{},{interpolationkey:t})):r}var o=t.split(s.formatSeparator),a=o.shift().trim(),c=o.join(s.formatSeparator).trim();return s.format(jl(e,l,a),c,n,lc(lc(lc({},i),e),{},{interpolationkey:a}))};this.resetRegExp();var h=i&&i.missingInterpolationHandler||this.options.missingInterpolationHandler,d=i&&i.interpolation&&void 0!==i.interpolation.skipOnVariables?i.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(t){return c(t)}},{regex:this.regexp,safeValue:function(t){return s.escapeValue?c(s.escape(t)):c(t)}}].forEach((function(e){for(a=0;r=e.regex.exec(t);){var n=r[1].trim();if(void 0===(o=u(n)))if("function"==typeof h){var l=h(t,r,i);o="string"==typeof l?l:""}else if(i&&i.hasOwnProperty(n))o="";else{if(d){o=r[0];continue}s.logger.warn("missed to pass in variable ".concat(n," for interpolating ").concat(t)),o=""}else"string"==typeof o||s.useRawValueToEscape||(o=Tl(o));var c=e.safeValue(o);if(t=t.replace(r[0],c),d?(e.regex.lastIndex+=o.length,e.regex.lastIndex-=r[0].length):e.regex.lastIndex=0,++a>=s.maxReplaces)break}})),t}},{key:"nest",value:function(t,e){var n,i,r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=lc({},o);function s(t,e){var n=this.nestingOptionsSeparator;if(t.indexOf(n)<0)return t;var i=t.split(new RegExp("".concat(n,"[ ]*{"))),r="{".concat(i[1]);t=i[0],r=(r=this.interpolate(r,a)).replace(/'/g,'"');try{a=JSON.parse(r),e&&(a=lc(lc({},e),a))}catch(e){return this.logger.warn("failed parsing options string in nesting for key ".concat(t),e),"".concat(t).concat(n).concat(r)}return delete a.defaultValue,t}for(a.applyPostProcessor=!1,delete a.defaultValue;n=this.nestingRegexp.exec(t);){var l=[],c=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){var u=n[1].split(this.formatSeparator).map((function(t){return t.trim()}));n[1]=u.shift(),l=u,c=!0}if((i=e(s.call(this,n[1].trim(),a),a))&&n[0]===t&&"string"!=typeof i)return i;"string"!=typeof i&&(i=Tl(i)),i||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(t)),i=""),c&&(i=l.reduce((function(t,e){return r.format(t,e,o.lng,lc(lc({},o),{},{interpolationkey:n[1].trim()}))}),i.trim())),t=t.replace(n[0],i),this.regexp.lastIndex=0}return t}}]),t}();function uc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function hc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?uc(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):uc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var dc=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};K(this,t),this.logger=Ml.create("formatter"),this.options=e,this.formats={number:function(t,e,n){return new Intl.NumberFormat(e,n).format(t)},currency:function(t,e,n){return new Intl.NumberFormat(e,hc(hc({},n),{},{style:"currency"})).format(t)},datetime:function(t,e,n){return new Intl.DateTimeFormat(e,hc({},n)).format(t)},relativetime:function(t,e,n){return new Intl.RelativeTimeFormat(e,hc({},n)).format(t,n.range||"day")},list:function(t,e,n){return new Intl.ListFormat(e,hc({},n)).format(t)}},this.init(e)}return G(t,[{key:"init",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}},n=e.interpolation;this.formatSeparator=n.formatSeparator?n.formatSeparator:n.formatSeparator||","}},{key:"add",value:function(t,e){this.formats[t.toLowerCase().trim()]=e}},{key:"format",value:function(t,e,n,i){var r=this;return e.split(this.formatSeparator).reduce((function(t,e){var o=function(t){var e=t.toLowerCase().trim(),n={};if(t.indexOf("(")>-1){var i=t.split("(");e=i[0].toLowerCase().trim();var r=i[1].substring(0,i[1].length-1);"currency"===e&&r.indexOf(":")<0?n.currency||(n.currency=r.trim()):"relativetime"===e&&r.indexOf(":")<0?n.range||(n.range=r.trim()):r.split(";").forEach((function(t){if(t){var e=B(o=t.split(":"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(o)||W(o)||U(),i=e[0],r=e.slice(1).join(":").trim().replace(/^'+|'+$/g,"");n[i.trim()]||(n[i.trim()]=r),"false"===r&&(n[i.trim()]=!1),"true"===r&&(n[i.trim()]=!0),isNaN(r)||(n[i.trim()]=parseInt(r,10))}var o}))}return{formatName:e,formatOptions:n}}(e),a=o.formatName,s=o.formatOptions;if(r.formats[a]){var l=t;try{var c=i&&i.formatParams&&i.formatParams[i.interpolationkey]||{},u=c.locale||c.lng||i.locale||i.lng||n;l=r.formats[a](t,u,hc(hc(hc({},s),i),c))}catch(t){r.logger.warn(t)}return l}return r.logger.warn("there was no format function for ".concat(a)),t}),t)}}]),t}();function fc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function pc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?fc(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):fc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var gc=function(t){kl(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=El(e);if(n){var r=El(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return Sl(this,t)});function r(t,e,n){var o,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return K(this,r),o=i.call(this),Hl&&Ll.call(wl(o)),o.backend=t,o.store=e,o.services=n,o.languageUtils=n.languageUtils,o.options=a,o.logger=Ml.create("backendConnector"),o.waitingReads=[],o.maxParallelReads=a.maxParallelReads||10,o.readingCalls=0,o.maxRetries=a.maxRetries>=0?a.maxRetries:5,o.retryTimeout=a.retryTimeout>=1?a.retryTimeout:350,o.state={},o.queue=[],o.backend&&o.backend.init&&o.backend.init(n,a.backend,a),o}return G(r,[{key:"queueLoad",value:function(t,e,n,i){var r=this,o={},a={},s={},l={};return t.forEach((function(t){var i=!0;e.forEach((function(e){var s="".concat(t,"|").concat(e);!n.reload&&r.store.hasResourceBundle(t,e)?r.state[s]=2:r.state[s]<0||(1===r.state[s]?void 0===a[s]&&(a[s]=!0):(r.state[s]=1,i=!1,void 0===a[s]&&(a[s]=!0),void 0===o[s]&&(o[s]=!0),void 0===l[e]&&(l[e]=!0)))})),i||(s[t]=!0)})),(Object.keys(o).length||Object.keys(a).length)&&this.queue.push({pending:a,pendingCount:Object.keys(a).length,loaded:{},errors:[],callback:i}),{toLoad:Object.keys(o),pending:Object.keys(a),toLoadLanguages:Object.keys(s),toLoadNamespaces:Object.keys(l)}}},{key:"loaded",value:function(t,e,n){var i=t.split("|"),r=i[0],o=i[1];e&&this.emit("failedLoading",r,o,e),n&&this.store.addResourceBundle(r,o,n),this.state[t]=e?-1:2;var a={};this.queue.forEach((function(n){var i,s,l,c,u;i=n.loaded,s=o,(c=(l=Dl(i,[r],Object)).obj)[u=l.k]=c[u]||[],c[u].push(s),function(t,e){void 0!==t.pending[e]&&(delete t.pending[e],t.pendingCount--)}(n,t),e&&n.errors.push(e),0!==n.pendingCount||n.done||(Object.keys(n.loaded).forEach((function(t){a[t]||(a[t]={});var e=n.loaded[t];e.length&&e.forEach((function(e){void 0===a[t][e]&&(a[t][e]=!0)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",a),this.queue=this.queue.filter((function(t){return!t.done}))}},{key:"read",value:function(t,e,n){var i=this,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,a=arguments.length>5?arguments[5]:void 0;return t.length?this.readingCalls>=this.maxParallelReads?void this.waitingReads.push({lng:t,ns:e,fcName:n,tried:r,wait:o,callback:a}):(this.readingCalls++,this.backend[n](t,e,(function(s,l){if(i.readingCalls--,i.waitingReads.length>0){var c=i.waitingReads.shift();i.read(c.lng,c.ns,c.fcName,c.tried,c.wait,c.callback)}s&&l&&r<i.maxRetries?setTimeout((function(){i.read.call(i,t,e,n,r+1,2*o,a)}),o):a(s,l)}))):a(null,{})}},{key:"prepareLoading",value:function(t,e){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),r&&r();"string"==typeof t&&(t=this.languageUtils.toResolveHierarchy(t)),"string"==typeof e&&(e=[e]);var o=this.queueLoad(t,e,i,r);if(!o.toLoad.length)return o.pending.length||r(),null;o.toLoad.forEach((function(t){n.loadOne(t)}))}},{key:"load",value:function(t,e,n){this.prepareLoading(t,e,{},n)}},{key:"reload",value:function(t,e,n){this.prepareLoading(t,e,{reload:!0},n)}},{key:"loadOne",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=t.split("|"),r=i[0],o=i[1];this.read(r,o,"read",void 0,void 0,(function(i,a){i&&e.logger.warn("".concat(n,"loading namespace ").concat(o," for language ").concat(r," failed"),i),!i&&a&&e.logger.log("".concat(n,"loaded namespace ").concat(o," for language ").concat(r),a),e.loaded(t,i,a)}))}},{key:"saveMissing",value:function(t,e,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(e)?this.logger.warn('did not save key "'.concat(n,'" as the namespace "').concat(e,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"):null!=n&&""!==n&&(this.backend&&this.backend.create&&this.backend.create(t,e,n,i,null,pc(pc({},o),{},{isUpdate:r})),t&&t[0]&&this.store.addResource(t[0],e,n,i))}}]),r}(Ll);function mc(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(t){var e={};if("object"===xl(t[1])&&(e=t[1]),"string"==typeof t[1]&&(e.defaultValue=t[1]),"string"==typeof t[2]&&(e.tDescription=t[2]),"object"===xl(t[2])||"object"===xl(t[3])){var n=t[3]||t[2];Object.keys(n).forEach((function(t){e[t]=n[t]}))}return e},interpolation:{escapeValue:!0,format:function(t,e,n,i){return t},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function bc(t){return"string"==typeof t.ns&&(t.ns=[t.ns]),"string"==typeof t.fallbackLng&&(t.fallbackLng=[t.fallbackLng]),"string"==typeof t.fallbackNS&&(t.fallbackNS=[t.fallbackNS]),t.supportedLngs&&t.supportedLngs.indexOf("cimode")<0&&(t.supportedLngs=t.supportedLngs.concat(["cimode"])),t}function yc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function vc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?yc(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):yc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function xc(){}function wc(t){Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach((function(e){"function"==typeof t[e]&&(t[e]=t[e].bind(t))}))}var _c=function(t){kl(r,t);var e,n,i=(e=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,i=El(e);if(n){var r=El(this).constructor;t=Reflect.construct(i,arguments,r)}else t=i.apply(this,arguments);return Sl(this,t)});function r(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;if(K(this,r),t=i.call(this),Hl&&Ll.call(wl(t)),t.options=bc(e),t.services={},t.logger=Ml,t.modules={external:[]},wc(wl(t)),n&&!t.isInitialized&&!e.isClone){if(!t.options.initImmediate)return t.init(e,n),Sl(t,wl(t));setTimeout((function(){t.init(e,n)}),0)}return t}return G(r,[{key:"init",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;"function"==typeof e&&(n=e,e={}),!e.defaultNS&&!1!==e.defaultNS&&e.ns&&("string"==typeof e.ns?e.defaultNS=e.ns:e.ns.indexOf("translation")<0&&(e.defaultNS=e.ns[0]));var i=mc();function r(t){return t?"function"==typeof t?new t:t:null}if(this.options=vc(vc(vc({},i),this.options),bc(e)),"v1"!==this.options.compatibilityAPI&&(this.options.interpolation=vc(vc({},i.interpolation),this.options.interpolation)),void 0!==e.keySeparator&&(this.options.userDefinedKeySeparator=e.keySeparator),void 0!==e.nsSeparator&&(this.options.userDefinedNsSeparator=e.nsSeparator),!this.options.isClone){var o;this.modules.logger?Ml.init(r(this.modules.logger),this.options):Ml.init(null,this.options),this.modules.formatter?o=this.modules.formatter:"undefined"!=typeof Intl&&(o=dc);var a=new tc(this.options);this.store=new Kl(this.options.resources,this.options);var s=this.services;s.logger=Ml,s.resourceStore=this.store,s.languageUtils=a,s.pluralResolver=new ac(a,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!o||this.options.interpolation.format&&this.options.interpolation.format!==i.interpolation.format||(s.formatter=r(o),s.formatter.init(s,this.options),this.options.interpolation.format=s.formatter.format.bind(s.formatter)),s.interpolator=new cc(this.options),s.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},s.backendConnector=new gc(r(this.modules.backend),s.resourceStore,s,this.options),s.backendConnector.on("*",(function(e){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];t.emit.apply(t,[e].concat(i))})),this.modules.languageDetector&&(s.languageDetector=r(this.modules.languageDetector),s.languageDetector.init(s,this.options.detection,this.options)),this.modules.i18nFormat&&(s.i18nFormat=r(this.modules.i18nFormat),s.i18nFormat.init&&s.i18nFormat.init(this)),this.translator=new Jl(this.services,this.options),this.translator.on("*",(function(e){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];t.emit.apply(t,[e].concat(i))})),this.modules.external.forEach((function(e){e.init&&e.init(t)}))}if(this.format=this.options.interpolation.format,n||(n=xc),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var l=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);l.length>0&&"dev"!==l[0]&&(this.options.lng=l[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");var c=["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"];c.forEach((function(e){t[e]=function(){var n;return(n=t.store)[e].apply(n,arguments)}}));var u=["addResource","addResources","addResourceBundle","removeResourceBundle"];u.forEach((function(e){t[e]=function(){var n;return(n=t.store)[e].apply(n,arguments),t}}));var h=Rl(),d=function(){var e=function(e,i){t.isInitialized&&!t.initializedStoreOnce&&t.logger.warn("init: i18next is already initialized. You should call init just once!"),t.isInitialized=!0,t.options.isClone||t.logger.log("initialized",t.options),t.emit("initialized",t.options),h.resolve(i),n(e,i)};if(t.languages&&"v1"!==t.options.compatibilityAPI&&!t.isInitialized)return e(null,t.t.bind(t));t.changeLanguage(t.options.lng,e)};return this.options.resources||!this.options.initImmediate?d():setTimeout(d,0),h}},{key:"loadResources",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:xc,i=n,r="string"==typeof t?t:this.language;if("function"==typeof t&&(i=t),!this.options.resources||this.options.partialBundledLanguages){if(r&&"cimode"===r.toLowerCase())return i();var o=[],a=function(t){t&&e.services.languageUtils.toResolveHierarchy(t).forEach((function(t){o.indexOf(t)<0&&o.push(t)}))};if(r)a(r);else{var s=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);s.forEach((function(t){return a(t)}))}this.options.preload&&this.options.preload.forEach((function(t){return a(t)})),this.services.backendConnector.load(o,this.options.ns,(function(t){t||e.resolvedLanguage||!e.language||e.setResolvedLanguage(e.language),i(t)}))}else i(null)}},{key:"reloadResources",value:function(t,e,n){var i=Rl();return t||(t=this.languages),e||(e=this.options.ns),n||(n=xc),this.services.backendConnector.reload(t,e,(function(t){i.resolve(),n(t)})),i}},{key:"use",value:function(t){if(!t)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!t.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===t.type&&(this.modules.backend=t),("logger"===t.type||t.log&&t.warn&&t.error)&&(this.modules.logger=t),"languageDetector"===t.type&&(this.modules.languageDetector=t),"i18nFormat"===t.type&&(this.modules.i18nFormat=t),"postProcessor"===t.type&&ql.addPostProcessor(t),"formatter"===t.type&&(this.modules.formatter=t),"3rdParty"===t.type&&this.modules.external.push(t),this}},{key:"setResolvedLanguage",value:function(t){if(t&&this.languages&&!(["cimode","dev"].indexOf(t)>-1))for(var e=0;e<this.languages.length;e++){var n=this.languages[e];if(!(["cimode","dev"].indexOf(n)>-1)&&this.store.hasLanguageSomeTranslations(n)){this.resolvedLanguage=n;break}}}},{key:"changeLanguage",value:function(t,e){var n=this;this.isLanguageChangingTo=t;var i=Rl();this.emit("languageChanging",t);var r=function(t){n.language=t,n.languages=n.services.languageUtils.toResolveHierarchy(t),n.resolvedLanguage=void 0,n.setResolvedLanguage(t)},o=function(o){t||o||!n.services.languageDetector||(o=[]);var a="string"==typeof o?o:n.services.languageUtils.getBestMatchFromCodes(o);a&&(n.language||r(a),n.translator.language||n.translator.changeLanguage(a),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(a)),n.loadResources(a,(function(t){!function(t,o){o?(r(o),n.translator.changeLanguage(o),n.isLanguageChangingTo=void 0,n.emit("languageChanged",o),n.logger.log("languageChanged",o)):n.isLanguageChangingTo=void 0,i.resolve((function(){return n.t.apply(n,arguments)})),e&&e(t,(function(){return n.t.apply(n,arguments)}))}(t,a)}))};return t||!this.services.languageDetector||this.services.languageDetector.async?!t&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(o):o(t):o(this.services.languageDetector.detect()),i}},{key:"getFixedT",value:function(t,e,n){var i=this,r=function t(e,r){var o;if("object"!==xl(r)){for(var a=arguments.length,s=new Array(a>2?a-2:0),l=2;l<a;l++)s[l-2]=arguments[l];o=i.options.overloadTranslationOptionHandler([e,r].concat(s))}else o=vc({},r);o.lng=o.lng||t.lng,o.lngs=o.lngs||t.lngs,o.ns=o.ns||t.ns,o.keyPrefix=o.keyPrefix||n||t.keyPrefix;var c=i.options.keySeparator||".",u=o.keyPrefix?"".concat(o.keyPrefix).concat(c).concat(e):e;return i.t(u,o)};return"string"==typeof t?r.lng=t:r.lngs=t,r.ns=e,r.keyPrefix=n,r}},{key:"t",value:function(){var t;return this.translator&&(t=this.translator).translate.apply(t,arguments)}},{key:"exists",value:function(){var t;return this.translator&&(t=this.translator).exists.apply(t,arguments)}},{key:"setDefaultNamespace",value:function(t){this.options.defaultNS=t}},{key:"hasLoadedNamespace",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var i=this.resolvedLanguage||this.languages[0],r=!!this.options&&this.options.fallbackLng,o=this.languages[this.languages.length-1];if("cimode"===i.toLowerCase())return!0;var a=function(t,n){var i=e.services.backendConnector.state["".concat(t,"|").concat(n)];return-1===i||2===i};if(n.precheck){var s=n.precheck(this,a);if(void 0!==s)return s}return!(!this.hasResourceBundle(i,t)&&this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages)&&(!a(i,t)||r&&!a(o,t)))}},{key:"loadNamespaces",value:function(t,e){var n=this,i=Rl();return this.options.ns?("string"==typeof t&&(t=[t]),t.forEach((function(t){n.options.ns.indexOf(t)<0&&n.options.ns.push(t)})),this.loadResources((function(t){i.resolve(),e&&e(t)})),i):(e&&e(),Promise.resolve())}},{key:"loadLanguages",value:function(t,e){var n=Rl();"string"==typeof t&&(t=[t]);var i=this.options.preload||[],r=t.filter((function(t){return i.indexOf(t)<0}));return r.length?(this.options.preload=i.concat(r),this.loadResources((function(t){n.resolve(),e&&e(t)})),n):(e&&e(),Promise.resolve())}},{key:"dir",value:function(t){return t||(t=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),t?["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(this.services.languageUtils.getLanguagePartFromCode(t))>-1||t.toLowerCase().indexOf("-arab")>1?"rtl":"ltr":"rtl"}},{key:"cloneInstance",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:xc,i=vc(vc(vc({},this.options),e),{isClone:!0}),o=new r(i),a=["store","services","language"];return a.forEach((function(e){o[e]=t[e]})),o.services=vc({},this.services),o.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},o.translator=new Jl(o.services,o.options),o.translator.on("*",(function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];o.emit.apply(o,[t].concat(n))})),o.init(i,n),o.translator.options=o.options,o.translator.backendConnector.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},o}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}]),r}(Ll);Y(_c,"createInstance",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1?arguments[1]:void 0;return new _c(t,e)}));var kc=_c.createInstance();kc.createInstance=_c.createInstance,kc.createInstance,kc.init,kc.loadResources,kc.reloadResources,kc.use,kc.changeLanguage,kc.getFixedT,kc.t,kc.exists,kc.setDefaultNamespace,kc.hasLoadedNamespace,kc.loadNamespaces,kc.loadLanguages;const Sc=kc,Ec=JSON.parse('{"Analysis Chart":"مخطط التحليل","Number of lessons":"عدد الدروس","Select Country":"حدد الدولة","Select Camp":"حدد معسكر","Select School":"حدد المدرسة","NO of lessons":"عدد الدروس","Lessons":"دروس","in":"في","Country Name":"اسم البلد","Camp Name":"اسم المعسكر","Month":"الشهر","School Name":"اسم المدرسة","Total Lessons":"عدد الدروس"}');function Oc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Cc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Oc(Object(n),!0).forEach((function(e){Y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Oc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Pc(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}Sc.use(st).init({lng:"en",fallbackLng:"en",resources:{en:{translation:{}},ar:{translation:Ec}},interpolation:{escapeValue:!1}});var Mc="function"==typeof Symbol&&Symbol.observable||"@@observable",Lc=function(){return Math.random().toString(36).substring(7).split("").join(".")},Rc={INIT:"@@redux/INIT"+Lc(),REPLACE:"@@redux/REPLACE"+Lc(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Lc()}};function Tc(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function Nc(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function Dc(t){return function(e){var n=e.dispatch,i=e.getState;return function(e){return function(r){return"function"==typeof r?r(n,i,t):e(r)}}}}var Ac=Dc();Ac.withExtraArgument=Dc;const Ic=Ac;var jc,Fc=function(){return Fc=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},Fc.apply(this,arguments)},zc=function(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))},Vc={data:[],filterValue:""},Bc=((jc={data:[]})[A.COUNTRY_FILTER]=Vc,jc[A.CAMP_FILTER]=Vc,jc[A.SCHOOL_FILTER]=Vc,jc.loaded=!1,jc.hiddenGraphs=[],jc),Hc=function(t){for(var e=Object.keys(t),n={},i=0;i<e.length;i++){var r=e[i];"function"==typeof t[r]&&(n[r]=t[r])}var o,a=Object.keys(n);try{!function(t){Object.keys(t).forEach((function(e){var n=t[e];if(void 0===n(void 0,{type:Rc.INIT}))throw new Error(Pc(12));if(void 0===n(void 0,{type:Rc.PROBE_UNKNOWN_ACTION()}))throw new Error(Pc(13))}))}(n)}catch(t){o=t}return function(t,e){if(void 0===t&&(t={}),o)throw o;for(var i=!1,r={},s=0;s<a.length;s++){var l=a[s],c=n[l],u=t[l],h=c(u,e);if(void 0===h)throw e&&e.type,new Error(Pc(14));r[l]=h,i=i||h!==u}return(i=i||a.length!==Object.keys(t).length)?r:t}}({data:function(t,e){var n,i,r,o;switch(void 0===t&&(t=Bc),e.type){case N.GET_DATA:var a=e.payload,s={data:Array.from(new Set(a.map((function(t){return t.country})))),filterValue:a[0].country},l=qs(a,{country:s.filterValue}),c=Ks(a,{country:s.filterValue,camp:l.filterValue});return(n={data:a,loaded:!0})[A.COUNTRY_FILTER]=s,n[A.CAMP_FILTER]=l,n[A.SCHOOL_FILTER]=c,n.hiddenGraphs=[],n;case T.CHANGE_COUNTRY:var u=t[A.CAMP_FILTER].filterValue,h=t[A.SCHOOL_FILTER].filterValue,d=Fc(Fc({},t.COUNTRY_FILTER),{filterValue:e.payload}),f=qs(t.data,{country:d.filterValue},u),p=Ks(t.data,{country:d.filterValue,camp:f.filterValue},h);return Fc(Fc({},t),((i={})[A.COUNTRY_FILTER]=d,i[A.CAMP_FILTER]=f,i[A.SCHOOL_FILTER]=p,i.hiddenGraphs=[],i));case T.CHANGE_CAMP:var g=t[A.SCHOOL_FILTER].filterValue;return f=Fc(Fc({},t[A.CAMP_FILTER]),{filterValue:e.payload}),p=Ks(t.data,{country:t[A.COUNTRY_FILTER].filterValue,camp:f.filterValue},g),Fc(Fc({},t),((r={})[A.CAMP_FILTER]=f,r[A.SCHOOL_FILTER]=p,r.hiddenGraphs=[],r));case T.CHANGE_SCHOOL:return Fc(Fc({},t),((o={})[A.SCHOOL_FILTER]=Fc(Fc({},t[A.SCHOOL_FILTER]),{filterValue:e.payload}),o.hiddenGraphs=[],o));case D.SHOW_GRAPH:var m=t.hiddenGraphs.filter((function(t){return t!=e.payload}));return Fc(Fc({},t),{hiddenGraphs:m});case D.HIDE_GRAPH:return m=zc(zc([],t.hiddenGraphs,!0),[e.payload],!1),Fc(Fc({},t),{hiddenGraphs:m});default:return Bc}}}),Wc=function t(e,n,i){var r;if("function"==typeof n&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw new Error(Pc(0));if("function"==typeof n&&void 0===i&&(i=n,n=void 0),void 0!==i){if("function"!=typeof i)throw new Error(Pc(1));return i(t)(e,n)}if("function"!=typeof e)throw new Error(Pc(2));var o=e,a=n,s=[],l=s,c=!1;function u(){l===s&&(l=s.slice())}function h(){if(c)throw new Error(Pc(3));return a}function d(t){if("function"!=typeof t)throw new Error(Pc(4));if(c)throw new Error(Pc(5));var e=!0;return u(),l.push(t),function(){if(e){if(c)throw new Error(Pc(6));e=!1,u();var n=l.indexOf(t);l.splice(n,1),s=null}}}function f(t){if(!Tc(t))throw new Error(Pc(7));if(void 0===t.type)throw new Error(Pc(8));if(c)throw new Error(Pc(9));try{c=!0,a=o(a,t)}finally{c=!1}for(var e=s=l,n=0;n<e.length;n++)(0,e[n])();return t}function p(t){if("function"!=typeof t)throw new Error(Pc(10));o=t,f({type:Rc.REPLACE})}function g(){var t,e=d;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new Error(Pc(11));function n(){t.next&&t.next(h())}return n(),{unsubscribe:e(n)}}})[Mc]=function(){return this},t}return f({type:Rc.INIT}),(r={dispatch:f,subscribe:d,getState:h,replaceReducer:p})[Mc]=g,r}(Hc,function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),i=function(){throw new Error(Pc(15))},r={getState:n.getState,dispatch:function(){return i.apply(void 0,arguments)}},o=e.map((function(t){return t(r)}));return i=Nc.apply(void 0,o)(n.dispatch),Cc(Cc({},n),{},{dispatch:i})}}}(Ic));e.render(t.createElement((function({store:e,context:n,children:i,serverState:r}){const o=(0,t.useMemo)((()=>{const t=function(t,e){let n,i=m;function r(){a.onStateChange&&a.onStateChange()}function o(){n||(n=e?e.addNestedSub(r):t.subscribe(r),i=function(){const t=c();let e=null,n=null;return{clear(){e=null,n=null},notify(){t((()=>{let t=e;for(;t;)t.callback(),t=t.next}))},get(){let t=[],n=e;for(;n;)t.push(n),n=n.next;return t},subscribe(t){let i=!0,r=n={callback:t,next:null,prev:n};return r.prev?r.prev.next=r:e=r,function(){i&&null!==e&&(i=!1,r.next?r.next.prev=r.prev:n=r.prev,r.prev?r.prev.next=r.next:e=r.next)}}}}())}const a={addNestedSub:function(t){return o(),i.subscribe(t)},notifyNestedSubs:function(){i.notify()},handleChangeWrapper:r,isSubscribed:function(){return Boolean(n)},trySubscribe:o,tryUnsubscribe:function(){n&&(n(),n=void 0,i.clear(),i=m)},getListeners:()=>i};return a}(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0}}),[e,r]),a=(0,t.useMemo)((()=>e.getState()),[e]);b((()=>{const{subscription:t}=o;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),a!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[o,a]);const s=n||u;return t.createElement(s.Provider,{value:o},i)}),{store:Wc},t.createElement((function(e){let{basename:n,children:i,window:r}=e,o=(0,t.useRef)();null==o.current&&(o.current=function(t){void 0===t&&(t={});var e=t.window,n=void 0===e?document.defaultView:e,i=n.history;function r(){var t=St(n.location.hash.substr(1)),e=t.pathname,r=void 0===e?"/":e,o=t.search,a=void 0===o?"":o,s=t.hash,l=void 0===s?"":s,c=i.state||{};return[c.idx,{pathname:r,search:a,hash:l,state:c.usr||null,key:c.key||"default"}]}var o=null;function a(){if(o)d.call(o),o=null;else{var t=mt.Pop,e=r(),n=e[0],i=e[1];if(d.length){if(null!=n){var a=c-n;a&&(o={action:t,location:i,retry:function(){y(-1*a)}},y(a))}}else b(t)}}n.addEventListener("popstate",a),n.addEventListener("hashchange",(function(){kt(r()[1])!==kt(u)&&a()}));var s=mt.Pop,l=r(),c=l[0],u=l[1],h=_t(),d=_t();function f(t){return function(){var t=document.querySelector("base"),e="";if(t&&t.getAttribute("href")){var i=n.location.href,r=i.indexOf("#");e=-1===r?i:i.slice(0,r)}return e}()+"#"+("string"==typeof t?t:kt(t))}function p(t,e){return void 0===e&&(e=null),vt({pathname:u.pathname,hash:"",search:""},"string"==typeof t?St(t):t,{state:e,key:Math.random().toString(36).substr(2,8)})}function g(t,e){return[{usr:t.state,key:t.key,idx:e},f(t)]}function m(t,e,n){return!d.length||(d.call({action:t,location:e,retry:n}),!1)}function b(t){s=t;var e=r();c=e[0],u=e[1],h.call({action:s,location:u})}function y(t){i.go(t)}null==c&&(c=0,i.replaceState(vt({},i.state,{idx:c}),""));var v={get action(){return s},get location(){return u},createHref:f,push:function t(e,r){var o=mt.Push,a=p(e,r);if(m(o,a,(function(){t(e,r)}))){var s=g(a,c+1),l=s[0],u=s[1];try{i.pushState(l,"",u)}catch(t){n.location.assign(u)}b(o)}},replace:function t(e,n){var r=mt.Replace,o=p(e,n);if(m(r,o,(function(){t(e,n)}))){var a=g(o,c),s=a[0],l=a[1];i.replaceState(s,"",l),b(r)}},go:y,back:function(){y(-1)},forward:function(){y(1)},listen:function(t){return h.push(t)},block:function(t){var e=d.push(t);return 1===d.length&&n.addEventListener(xt,wt),function(){e(),d.length||n.removeEventListener(xt,wt)}}};return v}({window:r}));let a=o.current,[s,l]=(0,t.useState)({action:a.action,location:a.location});return(0,t.useLayoutEffect)((()=>a.listen(l)),[a]),(0,t.createElement)(Kt,{basename:n,children:i,location:s.location,navigationType:s.action,navigator:a})}),null,t.createElement((function(){return t.createElement(t.Fragment,null,t.createElement(qt,null,t.createElement(Yt,{path:"/",element:t.createElement(dl,null)}),t.createElement(Yt,{path:"point/:country/:camp/:school/:month",element:t.createElement(vl,null)})))}),null))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,